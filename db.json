{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/default_avatar.png","path":"images/default_avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"0d62b7ac29a5a9e4731c4b9770af3931bc3e0398","modified":1539930429000},{"_id":"source/CNAME","hash":"d5db30a440f7be5b02943b8446348d076fd74cbd","modified":1539914221000},{"_id":"source/_config.yml","hash":"bd9626218ef0908b4432961b5950df017321f773","modified":1539914221000},{"_id":"source/favicon.ico","hash":"0bb2ef009b0f3e7097bb97d5beeae55e0aadaa17","modified":1539914221000},{"_id":"source/robots.txt","hash":"af3c3396483c081f5db2bcbe5cda5a11abb328a9","modified":1539914221000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1539918234000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1539918234000},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1539918234000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1539918234000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1539918234000},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1539918234000},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1539918234000},{"_id":"themes/next/README.md","hash":"460ef40953c2eccea4f87bc67043aac2eb87b1a9","modified":1539918234000},{"_id":"themes/next/_config.yml","hash":"da76eff80a422344dae3f3fd135ce4995b50cdb0","modified":1554180034630},{"_id":"themes/next/bower.json","hash":"e053c6e073227b953d37480eb3f9ab77292c5460","modified":1539918234000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1539918234000},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1539918234000},{"_id":"themes/next/package.json","hash":"e2bb1bb999c2b1c5b807c40f04682051ba3960b2","modified":1539918234000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1554178821330},{"_id":"source/about/index.md","hash":"cd1fc642a68c42227d74d5d1a35b3f550a04f9e1","modified":1539933974000},{"_id":"source/categories/index.md","hash":"04a08ab7dd07770f833650c137b0e6b93fcacf29","modified":1539914221000},{"_id":"source/tags/index.md","hash":"729bde2b280cfe0507a2f3d37675a3cf1d6ca789","modified":1539914221000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1539918234000},{"_id":"themes/next/.git/config","hash":"4b1b3fb55dadfc431d0ee2473bb8f2ea6f7f56ed","modified":1539918234000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1539918227000},{"_id":"themes/next/.git/index","hash":"9ce741d0369a537bb74a39a75f148a98aa67d8dc","modified":1553831893993},{"_id":"themes/next/.git/packed-refs","hash":"77659971ba079b5708a11649cc0fc041be706653","modified":1539918234000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1539918234000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1539918234000},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1539918234000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1539918234000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1539918234000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1539918234000},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1539918234000},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1539918234000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1539918234000},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1539918234000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1539918234000},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1539918234000},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1539918234000},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1539918234000},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1539918234000},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1539918234000},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1539918234000},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1539918234000},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1539918234000},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1539918234000},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1539918234000},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1539918234000},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1539918234000},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1539918234000},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1539918234000},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1539918234000},{"_id":"themes/next/layout/_layout.swig","hash":"196795e705ec6cc745326224dfd3727cffd329c2","modified":1541145941000},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1539918234000},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1539918234000},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1539918234000},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1539918234000},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1539918234000},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1539918234000},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1539918234000},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1539918234000},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1539918234000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1539918234000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1539918235000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1539918235000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1539918235000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"source/_posts/2018/.DS_Store","hash":"34e8c89afe0e687ab72919519523e06e160d388b","modified":1554180988796},{"_id":"source/_posts/Library/php-note.md","hash":"60e7024cceb2aeecc4a3b2411cfab0eeaabee7b7","modified":1539914221000},{"_id":"source/_posts/Library/php-skill.md","hash":"33369c07ef8c7d3065eb20aa59fa9698884ac895","modified":1539914221000},{"_id":"source/_posts/Library/php_str_fun.md","hash":"fba4727d09cac4663be1887f2822569962e905ab","modified":1539914221000},{"_id":"source/_posts/Library/sql_library.md","hash":"f7a4af335e372589251a00d24cc3bd5606ae68e3","modified":1539914221000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1539918227000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1539918227000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1539918227000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1539918227000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1539918227000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1539918227000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1539918227000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1539918227000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1539918227000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1539918227000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1539918227000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1539918227000},{"_id":"themes/next/.git/logs/HEAD","hash":"8209f6b4df57740ddcee3487d63334576b2f4758","modified":1539918234000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1539918234000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1539918234000},{"_id":"themes/next/docs/ru/README.md","hash":"caaad965f9d54f82382c934f44a507d37a863fa3","modified":1539918234000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0e6652be1b6bca87479f2601ff89105def200b4c","modified":1539918234000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1539918234000},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1539918234000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1539918234000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1539918234000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1539918234000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1539918234000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1539918234000},{"_id":"themes/next/layout/_macro/post.swig","hash":"00cd242c032341ab0fb5d7f66d4a9aa652eab183","modified":1539918234000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1539918234000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1539918234000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1539918234000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1539918234000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1539918234000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f68f7d1ebe94c21a6a929d0777e45bf9b3809476","modified":1541205789473},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1539918234000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1539918234000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1539918234000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1539918234000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1539918234000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1539918234000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1539918234000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1539918234000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1539918234000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1539918234000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1539918234000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1539918234000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1539918234000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1539918234000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1539918234000},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1539918234000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1539918234000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1539918234000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539918234000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1539918234000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1539918234000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1539918234000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1539918234000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1539918234000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1539918234000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1539918234000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1539918234000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1539918234000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539918234000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1539918234000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539918234000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1539918234000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1539918234000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539918234000},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1539918234000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1539918234000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1539918234000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1539918234000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1539918234000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1539918234000},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1539918234000},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1539918234000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1539918234000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539918234000},{"_id":"themes/next/source/images/default_avatar.png","hash":"4c93b552950adf36df9949e0a784742b159efce0","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150710-1.md","hash":"0ed16d0013b2425d9b1cba6974a8bc350b75d31e","modified":1539934237000},{"_id":"source/_posts/2015/201507/20150710-3.md","hash":"db34c425708700e327085ed51d061d7c667fc09f","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150720-2.md","hash":"171bfbff2cdd7e7c492c9cf9a31e07086cdcffdb","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150723-1.md","hash":"b464304f1434c2e67856a330bfce261420446cf7","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150724-1.md","hash":"a2788cce7531c3880e305dde387774680736c173","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150724-2.md","hash":"369a59f92aa30d36cc3b01d5b6bb3279f3760089","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150724-3.md","hash":"65ee9c8d5977b36810abe8941f296cab8ce6d451","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150725-1.md","hash":"cf35c940dafa0a148e7f85014818d3bba2b947df","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150730-1.md","hash":"13a9fb05f25a49f507e7bc521ee3f037c194fc0c","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150731-1.md","hash":"f2fbe1f33e6d809b2e9da99b702a9c9a3bba27c8","modified":1539914221000},{"_id":"source/_posts/2015/201507/20150731-2.md","hash":"8861c746920946e27fba928896264882de8523aa","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150801-1.md","hash":"85a172ae90f6430e4e7b20892fc51cdc65c15047","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150805-1.md","hash":"f08f39c1156c627d7a0db79b3143936caaaaad0c","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150807-1.md","hash":"ea703e408dfa466df4b7cbddcc97464a2ba532d7","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150812-1.md","hash":"c6586784eccae33921e4eec723f074d17fa1f940","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150815-1.md","hash":"bdf88e1c9714cee1c97aa6635c843b21364721cf","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150817-1.md","hash":"4f2f2c0b8e943450f002e1a6111a4a324988dad6","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150817-2.md","hash":"09c9762eb3051bd23456a3225d49196d43568f1c","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150818-1.md","hash":"c2a94e47295fcbda930923363c0932e845c3ac5a","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150820-1.md","hash":"6e6f489dd0a3c114b9979ad37925321f86d67e02","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150821-1.md","hash":"a2dc26754dbc595c63790e99bff175a36c318904","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150822-1.md","hash":"f37e9d5d5d11aacb62a312f7d66450c64c988460","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150822-2.md","hash":"da00ac2f7cefffd103162088d7b8c03120da276f","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150823-1.md","hash":"3bb2df02416972f4b73171563578fdcd3e080436","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150824-1.md","hash":"cf474b87d45c3e49c86d5b076065647af27fb3d9","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150826-1.md","hash":"66bd73ab0150f7da8fa76698ef1e92ef87fa4efe","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150827-1.md","hash":"181c7c626039634d46cc5f873761abd21aaf533e","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150828-1.md","hash":"1f4c298878c43875c479f927b09a1dfdcc779924","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150829-1.md","hash":"6b0786f979fdcdd0c128a4f467648441e0647eb4","modified":1539914221000},{"_id":"source/_posts/2015/201508/20150830-1.md","hash":"60b901ca9b5f59e31d8eb7af44fb7ee4cda40eb4","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150901-1.md","hash":"865e4432ff14d46502d16c1cb69ebb0b43928d48","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150902-1.md","hash":"d7f24d6c734f94c0aba0375539a891adffa1c091","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150902-2.md","hash":"2311379a59d5c96844007c2b5a4690c58ca14d19","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150903-2.md","hash":"c1c536450fb1b882db8a7bbc6fde97952f472383","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150904-1.md","hash":"822e840ab32a4317c023db6740d719cb7e1e9252","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150905-1.md","hash":"ffd2e0c33a98f401a512628349ab88e58608b36b","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150905-2.md","hash":"1c5c626975cc1e59593fc008a818269e907e9085","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150907-1.md","hash":"6e460e073c4a70303a5759124dbe9490001d3cfd","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150909-1.md","hash":"e7298caed3f4e6df42e1d94f63021b388db5987e","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150911-1.md","hash":"f87b714ee8a935648ba937f89ed0b1a906b25306","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150914-1.md","hash":"5d80f81f43e687788c4a8e566a20aaf8ea5028f8","modified":1554823945307},{"_id":"source/_posts/2015/201509/20150916-1.md","hash":"75bcd3c38bbca014d64212c1c1fcf8c66969e58e","modified":1554823940394},{"_id":"source/_posts/2015/201509/20150917-1.md","hash":"cffe39dcd3fa8f02361465e3821b9f966ad7bc93","modified":1554823934452},{"_id":"source/_posts/2015/201509/20150924-1.md","hash":"82abc7323219b4c66b3e7c002e57dbb126c9f139","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150924-2.md","hash":"ef953b6bddd858f8594072a511e6ab9f0cd0a13c","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150926-1.md","hash":"39a82e7b56cbc6b1a6690d2aba41b0a776822ec7","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150927-1.md","hash":"a9a60f36751a1115ca506d7ac5c587fa3241f5ba","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150930-1.md","hash":"711c2867c0201545efffd416abe4c0a79784842b","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150930-2.md","hash":"50e2fe3b32c38716807ace7e597b3bfad0c781a2","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150930-3.md","hash":"6b77b87afd072e5cbea9b2ed76e9a0624df3c113","modified":1539914221000},{"_id":"source/_posts/2015/201509/20150930-4.md","hash":"fbfc59efe90e6784f9eee9790a9e114ae728c47d","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151001-1.md","hash":"291b61aba2101b06a4c1e80f5e8cf6a3760240d1","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151005-1.md","hash":"53fd41529fa4ae0b6e0d38f88e7e279da79badf9","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151007-1.md","hash":"83e714f9e3aed768a650567877668903c6a92b3b","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151008-1.md","hash":"e96739ef2e85106c77669200d06e7c46cf55a472","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151008-2.md","hash":"1e1c04f8163e15c4f943b5a4c452808046a9399a","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151009-1.md","hash":"8dbc4563c645aa755c78a28fda4436f7fce7b63b","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151011-1.md","hash":"d87bf1c4aa0b11eda5bc94c1a95112fd857a0d70","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151017-1.md","hash":"6366a8bf01ace26eae810e0ca66258013a0d9a81","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151017-2.md","hash":"764575a01ac4bfb407875b44e9bd803727f83205","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151017-3.md","hash":"4236e61cc06d3804fb7ecff02eb9ad4fb7c5cf77","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151018-1.md","hash":"acfd6f05c4f1b427935096ae9c9efb54fc76eedd","modified":1539914221000},{"_id":"source/_posts/2015/201510/20151018-2.md","hash":"3d6bc95f6ee562a14dbde2f33e10ab890af56b30","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151101-1.md","hash":"f63968d4bcfa3ac462649c507abed0aca67db150","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151106-1.md","hash":"9555779da673614c7f7d5f7d7cfaa4aa5d570e34","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151110-1.md","hash":"f31220062567a6edfd6e5b0e76b37b3ba19e508f","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-1.md","hash":"94e2a81e3a86a8520f09c5d1f292d099c028245f","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-2.md","hash":"bbd6daa8cd33905fb2fe281d91b7b7f92018e0ca","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-3.md","hash":"8149babba690ecdf7a9fb7f395defcc459d2f9b8","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-4.md","hash":"6c66113c2d3897a318920012ebc6b102dbacba72","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-5.md","hash":"d5a82f9804ce63aa320ce1d1dd0b24eccb7d5bed","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-6.md","hash":"d57ed1df6043d59a2677132f7eded37fffac6c11","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-7.md","hash":"00852d1c637e472a4b6c1f2a86de61fbff76e2b8","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151111-8.md","hash":"5f78b50f840cb635cc8340ee98291cf1fe135af9","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151112-1.md","hash":"396b6e39bcebd18b602b70b377f7aca8ab088abd","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151112-2.md","hash":"2cf57a7432137ef899599867313a8e548cc39f76","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151112-3.md","hash":"a7166687c35a2bf0e0abe55b16d7c0f777a6906a","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151115-1.md","hash":"e6086589b10b993f9679c7d26e6a2438802b4217","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151116-1.md","hash":"a6448d4c27db430e07cff81f2ad5efc8a9631ef7","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151116-2.md","hash":"853e7983c0aa6aa3fb48e9ce2c2437826df8a82c","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151116-3.md","hash":"aeff34c622c89cc27ee61d27af436c4739b23189","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151116-4.md","hash":"37b9675df6101404fc2df770788916869cca5ee1","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151116-5.md","hash":"89f9376f01c5055b60ec35630910a875815c22a2","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151117-1.md","hash":"23f626f3f551544ef07509760232787cdd1fa061","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151118-1.md","hash":"294717f4ac952420859ae78028fa1d82164037c5","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151119-1.md","hash":"8a87001a0bae2f9ba28d267484854cc0476fc4b4","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151119-2.md","hash":"7b414e47c26405610eb2d5cdea0a1e9d2503d922","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151119-3.md","hash":"e23e907d0ad8ab8e234cdf25f29a167b5ac3a72e","modified":1539914221000},{"_id":"source/_posts/2015/201511/20151120-1.md","hash":"763c3e2f359bc4338995a5e0adb8c26441650b30","modified":1539914221000},{"_id":"source/_posts/2015/201512/20151201-1.md","hash":"b32237b08abd07c7516e5df3682267f7d796ca20","modified":1539914221000},{"_id":"source/_posts/2016/201601/20160119-1.md","hash":"62caa62444a31703c4ef2fc8ea191790765a8d22","modified":1539914221000},{"_id":"source/_posts/2016/201601/20160123-1.md","hash":"ae1d4f9dd012b3d855ff3f3cb44c73dc570e901d","modified":1539914221000},{"_id":"source/_posts/2016/201605/20160521-1.md","hash":"7abccb6dfb7b1562e0743e3233631b5bdbae8777","modified":1554180938242},{"_id":"source/_posts/2016/201605/20160522-1.md","hash":"6735aaf778e8118c733a5716aef473760f0bda70","modified":1539914221000},{"_id":"source/_posts/2016/201605/20160523-1.md","hash":"83df2815b58e4c88d439ca2f27ac6297d6d47856","modified":1539914221000},{"_id":"source/_posts/2016/201605/20160523-2.md","hash":"ec85654127e894aedcb16db6b1a5fb30b0699d7a","modified":1539914221000},{"_id":"source/_posts/2016/201610/20161010-1.md","hash":"bdc9a3770f80c55aa257bb8d2a43fee44cdecedf","modified":1539914221000},{"_id":"source/_posts/2016/201610/20161015-1.md","hash":"13e6142f3f75d5945e2eae140af21c7b7f9eaebb","modified":1539914221000},{"_id":"source/_posts/2016/201611/20161113-1.md","hash":"d32bc19b8bb3be444d648b2b9ce23d761a8760e4","modified":1553831649074},{"_id":"source/_posts/2017/201702/20170225-1.md","hash":"18e44cc253725f27df3dd099378b700d53a8b2f1","modified":1539914221000},{"_id":"source/_posts/2017/201702/20170226-1.md","hash":"25f5f6ddd0d97aa7727c0c5fa28749f90537c4b4","modified":1539914221000},{"_id":"source/_posts/2017/201703/20170319-1.md","hash":"bdb135a20daf171cba324ed862ec1599f8382e09","modified":1539914221000},{"_id":"source/_posts/2017/201703/20170319-2.md","hash":"43afe8bd28e1033379f98d76c2d0bb7e04b27d7c","modified":1539914221000},{"_id":"source/_posts/2017/201704/20170404-1.md","hash":"66e135c36ab83ba64c32c5776290d0cabdb8d592","modified":1539914221000},{"_id":"source/_posts/2017/201704/20170405-1.md","hash":"819da402db7e775217deca9e665e62f96d1f3950","modified":1539914221000},{"_id":"source/_posts/2017/201704/20170410-1.md","hash":"777b65e5f86629ca908660c74d764be61599c057","modified":1539914221000},{"_id":"source/_posts/2017/201707/20170719-1.md","hash":"0c2d3e56509540d36bdfde467d17677ecaa9401b","modified":1539914221000},{"_id":"source/_posts/2017/201707/20170721-1.md","hash":"27dfcf80fa867350c4799c7e60513f0979603497","modified":1539914221000},{"_id":"source/_posts/2017/201707/20170722-1.md","hash":"8993de2c2a64b7ab7630057cbde17884870c8cd0","modified":1539914221000},{"_id":"source/_posts/2017/201712/20171223-1.md","hash":"2a106cb5198e291e5aef385c0d861bf59d10f0b7","modified":1539914221000},{"_id":"source/_posts/2018/201802/20180219-1.md","hash":"690b23afc400a3afb88b32f59d1d76e97c4c6c9d","modified":1554178889730},{"_id":"source/_posts/2018/201802/20180219-2.md","hash":"404d02bd3ce02f48f2f368acc1ea047582821ecf","modified":1554178888885},{"_id":"source/_posts/2018/201802/20180221-1.md","hash":"ceb1fec174a95632a5eb92b146e5bc3a433730a1","modified":1554178929457},{"_id":"source/_posts/2018/201802/20180222-1.md","hash":"f2f37a130993960e5c9004adaca239093e80efc4","modified":1554178943254},{"_id":"source/_posts/2018/201802/20180223-1.md","hash":"4d0cefc0852767ded23bf37cf6476c9e0ec281ce","modified":1554178955350},{"_id":"source/_posts/2018/201803/20180325-1.md","hash":"c21e301688e5bbda9aca3f841a8ebd3f52dbfe8a","modified":1554178573255},{"_id":"source/_posts/2018/201803/20180325-2.md","hash":"c699d75efd1152f3e565290e06c95c92a05f5f12","modified":1554178767093},{"_id":"source/_posts/2018/201803/20180325-3.md","hash":"05fe3d6cb3c3b3eec173d95d5adad0caff97bfb7","modified":1554178765947},{"_id":"source/_posts/2018/201803/20180328-1.md","hash":"d7c2dba738082ccc393dd4e5484554c11a4126a9","modified":1554178765053},{"_id":"source/_posts/2018/201803/20180329-1.md","hash":"1a61f5a18c7beb30887a191e8f3422704ddfd6c6","modified":1554178763881},{"_id":"source/_posts/2018/201803/20180329-2.md","hash":"80a602448db64872112390c38a596dcf53c30670","modified":1554178762884},{"_id":"source/_posts/2018/201803/20180329-3.md","hash":"d6bcc9e2317ddcedb309c340af1e445ccbd265b6","modified":1554178761587},{"_id":"source/_posts/2018/201803/20180329-4.md","hash":"199395b9def46a858a917893e4ce3e60317aee63","modified":1554623523015},{"_id":"source/_posts/2018/201803/20180329-5.md","hash":"3fdfc50ac8d4c0009c9c17b6fad32a73bcf801fd","modified":1554178909412},{"_id":"source/_posts/2018/201803/20180331-1.md","hash":"b76a31600dfff32e74c135c26fbb53f4e5457f01","modified":1554178756829},{"_id":"source/_posts/2018/201803/20180331-2.md","hash":"07a7f928e72559c6b812165ec9b6ae9e8462f915","modified":1554178755094},{"_id":"source/_posts/2018/201804/20180401-1.md","hash":"75156396f9739ff2aa51dbe7a4b3c9db075bfcb2","modified":1554196375703},{"_id":"source/_posts/2018/201804/20180401-2.md","hash":"f6c8f4d885f66fbbcbb1608c23ede0cf4de0bc50","modified":1554178750562},{"_id":"source/_posts/2018/201804/20180402-1.md","hash":"6c99fd29c644c9c7c6bd29216be02a61a62689e5","modified":1554178746641},{"_id":"source/_posts/2018/201804/20180402-2.md","hash":"18d56a2e8647863b626b0ad025d72a26831e0693","modified":1554180612367},{"_id":"source/_posts/2018/201804/20180402-3.md","hash":"8085ce075b7dc39c92d7c4be78b20a1e4d44c21b","modified":1554197730579},{"_id":"source/_posts/2018/201804/20180403-1.md","hash":"887daa575373eb5ba2ebf6958334e724e20522ec","modified":1554199865881},{"_id":"source/_posts/2018/201804/20180404-1.md","hash":"c287677fce7b6f494328ba3465b8e9e706998a88","modified":1555132081302},{"_id":"source/_posts/2018/201804/20180405-1.md","hash":"fd1d43b65a70792450ff7291123f918f68129850","modified":1555132102401},{"_id":"source/_posts/2018/201805/20180511-1.md","hash":"12936f722826f683cbab1ba1eb003641c0331eab","modified":1554179344291},{"_id":"source/_posts/2018/201805/20180511-2.md","hash":"953e8ba632dfa5044959908414c3868d4b08b3ae","modified":1554179754821},{"_id":"source/_posts/2018/201805/20180511-3.md","hash":"e572e885d2df66f7edf6241141bdd45931386279","modified":1554179761709},{"_id":"source/_posts/2018/201805/20180511-4.md","hash":"5aa1cde80a13231a2b6a018c9d1f8b10acafbe77","modified":1554179812374},{"_id":"source/_posts/2018/201805/20180511-5.md","hash":"17e3276eadb9a88329248303b44d2c9868cf019f","modified":1554179805010},{"_id":"source/_posts/2018/201811/20181102-1.md","hash":"10c1179d5c7ca43159f1c40141bc837dcae4271a","modified":1541145486000},{"_id":"source/_posts/2018/201811/20181102-2.md","hash":"940d06e93d01109245810fef3306285b0a02a9f2","modified":1541203983743},{"_id":"source/_posts/2018/201811/20181102-3.md","hash":"96247b336051134cb7cfdf687c2f1a384115653b","modified":1541145486000},{"_id":"source/_posts/2019/201906/20190630-1.md","hash":"1615a3163122249cf472f6fbcb098407985909ab","modified":1564025317500},{"_id":"source/_posts/2019/201908/20190801-1.md","hash":"4cb32dbd2c4adc19b0c52034081eaa2516c3fc0b","modified":1565065536228},{"_id":"source/_posts/2019/201908/20190806-1.md","hash":"659967938c93cd21d51c0c8f81503690c3418a84","modified":1565763010539},{"_id":"source/_posts/2019/201908/20190830-1.md","hash":"a36023278d43602d31e8333147b797255afda9bf","modified":1567155727040},{"_id":"source/_posts/2019/201911/20191122-1.md","hash":"10d4ab8395956a44790f0b751f417c9842d5b0af","modified":1574408732958},{"_id":"themes/next/.git/refs/heads/master","hash":"c2f3a9849a5ad71b785665beb36649cb97bde2c1","modified":1539918234000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1539918234000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1539918234000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1539918234000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1539918234000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1539918234000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1539918234000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1539918234000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1539918234000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1539918234000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1539918234000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1539918234000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1539918234000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1539918234000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1539918234000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1539918234000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1539918234000},{"_id":"themes/next/layout/_partials/suprise/donate.swig","hash":"5002ce5cde25b8a19afb9fd310eeb401e6b40025","modified":1539914221000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1539918234000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1539918234000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1539918234000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2440f1e66cb8e39cc2bacfd783fb6fe904a628e9","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c49a3b10b2f2f64a7ac41fa3d436fd2c8d31cca8","modified":1539918234000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1539918234000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1539918234000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1539918234000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1539918234000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1539918234000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1539918234000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1539918234000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1539918234000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1539918234000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d19b630fa97d0b813d56c692a3575a7dddfaa259","modified":1539918234000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1539918234000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1539918234000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1539918234000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1539918234000},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1539918234000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1539918234000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1539918234000},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1539918234000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1539918234000},{"_id":"themes/next/source/js/src/motion.js","hash":"4c7f94e499743f4cc958f6cd1260a93d765d3051","modified":1539918234000},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1539918234000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1539918234000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1539918234000},{"_id":"themes/next/source/js/src/utils.js","hash":"52e1b1884bb87d29433608fc80467f785f61933a","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1539918234000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1539918235000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1539918235000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1539918235000},{"_id":"themes/next/.git/objects/pack/pack-309590525463f01225d07409039f0121a5567753.idx","hash":"e89f42ec01441f1765d6a0447c559c360213ee75","modified":1539918233000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1539918234000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8209f6b4df57740ddcee3487d63334576b2f4758","modified":1539918234000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1539918234000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1539918234000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1539918234000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"e81b78ecbbf4b709583f393e2b0e8a4f74bacc28","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1539918234000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"8e67eea73e9346f51ef26ecb35f67a1f5f672dcd","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1539918234000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a6821fddf4199f6f39fd37028f5677583d46c34b","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1539918234000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1539918235000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1539918235000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539918234000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8209f6b4df57740ddcee3487d63334576b2f4758","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"5a3b94bf978a9259d0a3a66bdfa8d7aa336a7934","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ff50a32ae6fea5fcdf2939dc9b01e1eb76cc73f0","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5e6318eea2dfe7d804af9a0b74a0f882a2dac5e0","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"81b8d74f417feda024bcdd8020a5623af6dc075a","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1539918234000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1539918234000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1539918234000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539918234000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1539918235000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539918234000},{"_id":"themes/next/.git/objects/pack/pack-309590525463f01225d07409039f0121a5567753.pack","hash":"b14b82f8d602008dc7266f09f2db0a47721357db","modified":1539918233000}],"Category":[{"name":"hexo","_id":"ck39ugjia000kpgwi8vvnx0mq"},{"name":"随笔","_id":"ck39ugjid000ppgwi6t5sdkmm"},{"name":"代码","_id":"ck39ugjii000wpgwikyckyfob"},{"name":"PHP","_id":"ck39ugjil0012pgwiom9c0jb8"},{"name":"CSS","_id":"ck39ugjiq001dpgwidcd64umm"},{"name":"前端","_id":"ck39ugjit001mpgwi0ogqhemm"},{"name":"tool","_id":"ck39ugjix001upgwiuf6bubob"},{"name":"JavaScript","_id":"ck39ugjiz0021pgwi114vqqj2"},{"name":"javascript","_id":"ck39ugjj20028pgwibyq896sp"},{"name":"jQuery","parent":"ck39ugjit001mpgwi0ogqhemm","_id":"ck39ugjj7002hpgwiwf4ltu44"},{"name":"工具","_id":"ck39ugjjf002upgwieq2e8qeb"},{"name":"Linux","_id":"ck39ugjjk0037pgwidrytht40"},{"name":"MySQL","_id":"ck39ugjp6009hpgwiw1x7ue4l"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-11-02T08:43:25.812Z","updated":"2018-10-19T06:27:09.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck39ugj4u0000pgwipldw0zc7","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于博主","date":"2016-07-10T13:55:28.000Z","tags":["uiste"],"_content":"\n# About Me\n+ 昵称：强哥\n+ 性别：男\n+ 生年：1991\n+ Github：uiste\n+ QQ：798407452\n+ Email：hi@uiste.com\n+ 现居：上海市","source":"about/index.md","raw":"---\ntitle: 关于博主\ndate: 2016-07-10 21:55:28\n#categories:   # 文章分类目录，参数可省略\n#    - 随笔\n#    - 瞬间\ntags:   # 文章标签，参数可省略\n    - uiste # 个数不限，单个可直接跟在tags后面\n---\n\n# About Me\n+ 昵称：强哥\n+ 性别：男\n+ 生年：1991\n+ Github：uiste\n+ QQ：798407452\n+ Email：hi@uiste.com\n+ 现居：上海市","updated":"2018-10-19T07:26:14.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck39ugj7i0001pgwis0b26ecb","content":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>昵称：强哥</li>\n<li>性别：男</li>\n<li>生年：1991</li>\n<li>Github：uiste</li>\n<li>QQ：798407452</li>\n<li>Email：<a href=\"mailto:hi@uiste.com\" target=\"_blank\" rel=\"noopener\">hi@uiste.com</a></li>\n<li>现居：上海市</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h1><ul>\n<li>昵称：强哥</li>\n<li>性别：男</li>\n<li>生年：1991</li>\n<li>Github：uiste</li>\n<li>QQ：798407452</li>\n<li>Email：<a href=\"mailto:hi@uiste.com\" target=\"_blank\" rel=\"noopener\">hi@uiste.com</a></li>\n<li>现居：上海市</li>\n</ul>\n"},{"title":"categories","date":"2016-07-24T13:35:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-24 21:35:20\ntype: \"categories\"\n---\n","updated":"2018-10-19T01:57:01.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck39ugj7j0002pgwinu11ieys","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-07-24T13:36:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-24 21:36:35\ntype: \"tags\"\n---\n","updated":"2018-10-19T01:57:01.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck39ugj7l0003pgwipnyef12h","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"library","title":"PHP - 速度提升小技巧","date":"2015-10-11T14:06:53.000Z","_content":"# MySQL数据库\n## 建表\n由于session没有长久保存的必要，所以建议sess表使用memory引擎，此引擎执行效率高。\n\n## 数据insert\n## 数据delete\n## 数据update\n## 数据select\n\n# PHP\n## *C-S-R-F* 保护\n*C-S-R-F* (跨网站请求伪造) 攻击，跨网站请求伪造是一种恶意的攻击，借以代表经过身份验证的用户执行未经授权的命令。\n\nLaravel解决方案：\n>Laravel 会自动在每一位用户的 session 中放置随机的 token ，这个 token 将被用来确保经过验证的用户是实际发出请求至应用程序的用户\n\n插入 *C-S-R-F* Token 到表单\n```<input type=\"hidden\" name=\"_token\" value=\"<?php echo csrf_token(); ?>\">```\n\n当然也可以在Blade模板引擎使用：\n```<input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">```\n## Composer安装laravel框架\n### 方法一 \n通过 composer Create-Project命令安装Laravel\n`composer create-project laravel/laravel --prefer-dist[别名]`\n### 方法二\nlaravel安装器\n```\ncomposer global require \"laravel/installer\"\nlaravel new blog\n```\n\n检查安装状态\n```\nuiste:test uiste$ laravel\nLaravel Installer version 1.3.3\n```\n\n下载laravel\n```\nuiste:test uiste$ laravel new blog\nCrafting application...\n```","source":"_posts/Library/php-skill.md","raw":"layout: library\ntitle: PHP - 速度提升小技巧\ndate: 2015-10-11 22:06:53\ntags:\n- PHP小技巧\n- PHP加载速度\n---\n# MySQL数据库\n## 建表\n由于session没有长久保存的必要，所以建议sess表使用memory引擎，此引擎执行效率高。\n\n## 数据insert\n## 数据delete\n## 数据update\n## 数据select\n\n# PHP\n## *C-S-R-F* 保护\n*C-S-R-F* (跨网站请求伪造) 攻击，跨网站请求伪造是一种恶意的攻击，借以代表经过身份验证的用户执行未经授权的命令。\n\nLaravel解决方案：\n>Laravel 会自动在每一位用户的 session 中放置随机的 token ，这个 token 将被用来确保经过验证的用户是实际发出请求至应用程序的用户\n\n插入 *C-S-R-F* Token 到表单\n```<input type=\"hidden\" name=\"_token\" value=\"<?php echo csrf_token(); ?>\">```\n\n当然也可以在Blade模板引擎使用：\n```<input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">```\n## Composer安装laravel框架\n### 方法一 \n通过 composer Create-Project命令安装Laravel\n`composer create-project laravel/laravel --prefer-dist[别名]`\n### 方法二\nlaravel安装器\n```\ncomposer global require \"laravel/installer\"\nlaravel new blog\n```\n\n检查安装状态\n```\nuiste:test uiste$ laravel\nLaravel Installer version 1.3.3\n```\n\n下载laravel\n```\nuiste:test uiste$ laravel new blog\nCrafting application...\n```","slug":"Library-php-skill","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjft0004pgwibf4p8mip","content":"<h1 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h1><h2 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h2><p>由于session没有长久保存的必要，所以建议sess表使用memory引擎，此引擎执行效率高。</p>\n<h2 id=\"数据insert\"><a href=\"#数据insert\" class=\"headerlink\" title=\"数据insert\"></a>数据insert</h2><h2 id=\"数据delete\"><a href=\"#数据delete\" class=\"headerlink\" title=\"数据delete\"></a>数据delete</h2><h2 id=\"数据update\"><a href=\"#数据update\" class=\"headerlink\" title=\"数据update\"></a>数据update</h2><h2 id=\"数据select\"><a href=\"#数据select\" class=\"headerlink\" title=\"数据select\"></a>数据select</h2><h1 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h1><h2 id=\"C-S-R-F-保护\"><a href=\"#C-S-R-F-保护\" class=\"headerlink\" title=\"C-S-R-F 保护\"></a><em>C-S-R-F</em> 保护</h2><p><em>C-S-R-F</em> (跨网站请求伪造) 攻击，跨网站请求伪造是一种恶意的攻击，借以代表经过身份验证的用户执行未经授权的命令。</p>\n<p>Laravel解决方案：</p>\n<blockquote>\n<p>Laravel 会自动在每一位用户的 session 中放置随机的 token ，这个 token 将被用来确保经过验证的用户是实际发出请求至应用程序的用户</p>\n</blockquote>\n<p>插入 <em>C-S-R-F</em> Token 到表单<br><figure class=\"highlight plain\"><figcaption><span>type</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当然也可以在Blade模板引擎使用：</span><br><span class=\"line\">```&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Composer安装laravel框架\"><a href=\"#Composer安装laravel框架\" class=\"headerlink\" title=\"Composer安装laravel框架\"></a>Composer安装laravel框架</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>通过 composer Create-Project命令安装Laravel<br><code>composer create-project laravel/laravel --prefer-dist[别名]</code></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>laravel安装器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer global require &quot;laravel/installer&quot;</span><br><span class=\"line\">laravel new blog</span><br></pre></td></tr></table></figure></p>\n<p>检查安装状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uiste:test uiste$ laravel</span><br><span class=\"line\">Laravel Installer version 1.3.3</span><br></pre></td></tr></table></figure></p>\n<p>下载laravel<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uiste:test uiste$ laravel new blog</span><br><span class=\"line\">Crafting application...</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h1><h2 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h2><p>由于session没有长久保存的必要，所以建议sess表使用memory引擎，此引擎执行效率高。</p>\n<h2 id=\"数据insert\"><a href=\"#数据insert\" class=\"headerlink\" title=\"数据insert\"></a>数据insert</h2><h2 id=\"数据delete\"><a href=\"#数据delete\" class=\"headerlink\" title=\"数据delete\"></a>数据delete</h2><h2 id=\"数据update\"><a href=\"#数据update\" class=\"headerlink\" title=\"数据update\"></a>数据update</h2><h2 id=\"数据select\"><a href=\"#数据select\" class=\"headerlink\" title=\"数据select\"></a>数据select</h2><h1 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h1><h2 id=\"C-S-R-F-保护\"><a href=\"#C-S-R-F-保护\" class=\"headerlink\" title=\"C-S-R-F 保护\"></a><em>C-S-R-F</em> 保护</h2><p><em>C-S-R-F</em> (跨网站请求伪造) 攻击，跨网站请求伪造是一种恶意的攻击，借以代表经过身份验证的用户执行未经授权的命令。</p>\n<p>Laravel解决方案：</p>\n<blockquote>\n<p>Laravel 会自动在每一位用户的 session 中放置随机的 token ，这个 token 将被用来确保经过验证的用户是实际发出请求至应用程序的用户</p>\n</blockquote>\n<p>插入 <em>C-S-R-F</em> Token 到表单<br><figure class=\"highlight plain\"><figcaption><span>type</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当然也可以在Blade模板引擎使用：</span><br><span class=\"line\">```&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Composer安装laravel框架\"><a href=\"#Composer安装laravel框架\" class=\"headerlink\" title=\"Composer安装laravel框架\"></a>Composer安装laravel框架</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>通过 composer Create-Project命令安装Laravel<br><code>composer create-project laravel/laravel --prefer-dist[别名]</code></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>laravel安装器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer global require &quot;laravel/installer&quot;</span><br><span class=\"line\">laravel new blog</span><br></pre></td></tr></table></figure></p>\n<p>检查安装状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uiste:test uiste$ laravel</span><br><span class=\"line\">Laravel Installer version 1.3.3</span><br></pre></td></tr></table></figure></p>\n<p>下载laravel<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uiste:test uiste$ laravel new blog</span><br><span class=\"line\">Crafting application...</span><br></pre></td></tr></table></figure></p>\n"},{"layout":"library","title":"PHP - MySQL SQL注入","date":"2015-09-10T01:26:25.000Z","_content":"# SQL 注入\n用户名注入：\n`select * from admin where name='' or 1=1 or '' and pwd = '';`\n`select * from admin where name='' or 1=1 # '' and pwd = '';`\n`select * from admin where name='' or 1=1 -- '' and pwd = '';`\n\n>' or 1=1 or ''\n' or 1=1 # '' \n' or 1=1 -- ''\n\n密码注入：\n`select * from admin where name='' and pwd = '' OR ''='';`\n>' OR ''='\n\n解决方法一：\n`mysql_real_escape_string()` 函数转义 SQL 语句中使用的字符串中的特殊字符。\n下列字符受影响：\n`\\x00`\n`\\n`\n`\\r`\n`\\`\n`'`\n`\"`\n`\\x1a`\n如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。\n语法\n`mysql_real_escape_string(string,connection)`\n| 参数 | 描述 |\n| --- | --- |\n| string<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span> | 必需。规定要转义的字符串。 |\n| connection | 可选。规定 MySQL 连接。如果未规定，则使用上一个连接。 |\n\n解决方法二：`string mysql_escape_string ( string $unescaped_string )`\n> `mysql_escape_string()` 并不转义 `%` 和 `_`。 本函数和 `mysql_real_escape_string()` 完全一样，除了 `mysql_real_escape_string()` 接受的是一个连接句柄并根据当前字符集转移字符串之外。`mysql_escape_string()` 并不接受连接参数，也不管当前字符集设定。\n\n解决方法三：\n`string addslashes ( string $str )`\n返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）。\n\n解决方法四：\n面向对象风格\n`string mysqli::escape_string ( string $escapestr )`\n`string mysqli::real_escape_string ( string $escapestr )`\n\n过程化风格\n`string mysqli_real_escape_string ( mysqli $link , string $escapestr )`","source":"_posts/Library/php-note.md","raw":"layout: library\ntitle: PHP - MySQL SQL注入\ndate: 2015-09-10 09:26:25\ntags:\n- SQL注入\n---\n# SQL 注入\n用户名注入：\n`select * from admin where name='' or 1=1 or '' and pwd = '';`\n`select * from admin where name='' or 1=1 # '' and pwd = '';`\n`select * from admin where name='' or 1=1 -- '' and pwd = '';`\n\n>' or 1=1 or ''\n' or 1=1 # '' \n' or 1=1 -- ''\n\n密码注入：\n`select * from admin where name='' and pwd = '' OR ''='';`\n>' OR ''='\n\n解决方法一：\n`mysql_real_escape_string()` 函数转义 SQL 语句中使用的字符串中的特殊字符。\n下列字符受影响：\n`\\x00`\n`\\n`\n`\\r`\n`\\`\n`'`\n`\"`\n`\\x1a`\n如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。\n语法\n`mysql_real_escape_string(string,connection)`\n| 参数 | 描述 |\n| --- | --- |\n| string<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span> | 必需。规定要转义的字符串。 |\n| connection | 可选。规定 MySQL 连接。如果未规定，则使用上一个连接。 |\n\n解决方法二：`string mysql_escape_string ( string $unescaped_string )`\n> `mysql_escape_string()` 并不转义 `%` 和 `_`。 本函数和 `mysql_real_escape_string()` 完全一样，除了 `mysql_real_escape_string()` 接受的是一个连接句柄并根据当前字符集转移字符串之外。`mysql_escape_string()` 并不接受连接参数，也不管当前字符集设定。\n\n解决方法三：\n`string addslashes ( string $str )`\n返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）。\n\n解决方法四：\n面向对象风格\n`string mysqli::escape_string ( string $escapestr )`\n`string mysqli::real_escape_string ( string $escapestr )`\n\n过程化风格\n`string mysqli_real_escape_string ( mysqli $link , string $escapestr )`","slug":"Library-php-note","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjfx0005pgwin0ctl4bm","content":"<h1 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h1><p>用户名注入：<br><code>select * from admin where name=&#39;&#39; or 1=1 or &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 # &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 -- &#39;&#39; and pwd = &#39;&#39;;</code></p>\n<blockquote>\n<p>‘ or 1=1 or ‘’<br>‘ or 1=1 # ‘’<br>‘ or 1=1 – ‘’</p>\n</blockquote>\n<p>密码注入：<br><code>select * from admin where name=&#39;&#39; and pwd = &#39;&#39; OR &#39;&#39;=&#39;&#39;;</code></p>\n<blockquote>\n<p>‘ OR ‘’=’</p>\n</blockquote>\n<p>解决方法一：<br><code>mysql_real_escape_string()</code> 函数转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：<br><code>\\x00</code><br><code>\\n</code><br><code>\\r</code><br><code>\\</code><br><code>&#39;</code><br><code>&quot;</code><br><code>\\x1a</code><br>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。<br>语法<br><code>mysql_real_escape_string(string,connection)</code><br>| 参数 | 描述 |<br>| — | — |<br>| string<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span> | 必需。规定要转义的字符串。 |<br>| connection | 可选。规定 MySQL 连接。如果未规定，则使用上一个连接。 |</p>\n<p>解决方法二：<code>string mysql_escape_string ( string $unescaped_string )</code></p>\n<blockquote>\n<p><code>mysql_escape_string()</code> 并不转义 <code>%</code> 和 <code>_</code>。 本函数和 <code>mysql_real_escape_string()</code> 完全一样，除了 <code>mysql_real_escape_string()</code> 接受的是一个连接句柄并根据当前字符集转移字符串之外。<code>mysql_escape_string()</code> 并不接受连接参数，也不管当前字符集设定。</p>\n</blockquote>\n<p>解决方法三：<br><code>string addslashes ( string $str )</code><br>返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（’）、双引号（”）、反斜线（\\）与 NUL（NULL 字符）。</p>\n<p>解决方法四：<br>面向对象风格<br><code>string mysqli::escape_string ( string $escapestr )</code><br><code>string mysqli::real_escape_string ( string $escapestr )</code></p>\n<p>过程化风格<br><code>string mysqli_real_escape_string ( mysqli $link , string $escapestr )</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h1><p>用户名注入：<br><code>select * from admin where name=&#39;&#39; or 1=1 or &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 # &#39;&#39; and pwd = &#39;&#39;;</code><br><code>select * from admin where name=&#39;&#39; or 1=1 -- &#39;&#39; and pwd = &#39;&#39;;</code></p>\n<blockquote>\n<p>‘ or 1=1 or ‘’<br>‘ or 1=1 # ‘’<br>‘ or 1=1 – ‘’</p>\n</blockquote>\n<p>密码注入：<br><code>select * from admin where name=&#39;&#39; and pwd = &#39;&#39; OR &#39;&#39;=&#39;&#39;;</code></p>\n<blockquote>\n<p>‘ OR ‘’=’</p>\n</blockquote>\n<p>解决方法一：<br><code>mysql_real_escape_string()</code> 函数转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：<br><code>\\x00</code><br><code>\\n</code><br><code>\\r</code><br><code>\\</code><br><code>&#39;</code><br><code>&quot;</code><br><code>\\x1a</code><br>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。<br>语法<br><code>mysql_real_escape_string(string,connection)</code><br>| 参数 | 描述 |<br>| — | — |<br>| string<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span> | 必需。规定要转义的字符串。 |<br>| connection | 可选。规定 MySQL 连接。如果未规定，则使用上一个连接。 |</p>\n<p>解决方法二：<code>string mysql_escape_string ( string $unescaped_string )</code></p>\n<blockquote>\n<p><code>mysql_escape_string()</code> 并不转义 <code>%</code> 和 <code>_</code>。 本函数和 <code>mysql_real_escape_string()</code> 完全一样，除了 <code>mysql_real_escape_string()</code> 接受的是一个连接句柄并根据当前字符集转移字符串之外。<code>mysql_escape_string()</code> 并不接受连接参数，也不管当前字符集设定。</p>\n</blockquote>\n<p>解决方法三：<br><code>string addslashes ( string $str )</code><br>返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（’）、双引号（”）、反斜线（\\）与 NUL（NULL 字符）。</p>\n<p>解决方法四：<br>面向对象风格<br><code>string mysqli::escape_string ( string $escapestr )</code><br><code>string mysqli::real_escape_string ( string $escapestr )</code></p>\n<p>过程化风格<br><code>string mysqli_real_escape_string ( mysqli $link , string $escapestr )</code></p>\n"},{"layout":"library","title":"PHP字符串函数大汇总","date":"2015-10-12T15:06:53.000Z","_content":"1. 查找字符位置函数\n\nstrpos($str,search,[int]):   查找search在$str中的第一次位置从int开始\n\nstripos($str,search,[int]):  函数返回字符串在另一个字符串中第一次出现的位置\n\nstrrpos($str,search,[int]):  查找search在$str中的最后一次出现的位置从int\n\n2. 提取子字符函数（双字节）\n\nsubmit($str,int start[,int length]):  从$str中strat位置开始提取[length长度的字符串]。\n\nstrstr($str1,$str2):   从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。\n\nstristr()    功能同strstr，只是不区分大小写。\n\nstrrchr()    从最后一次搜索到的字符处返回；用处：取路径中文件名\n\n3. 替换字符串的PHP字符串函数\n\nstr_replace(search,replace,$str):    从$str中查找search用replace来替换\n\nstr_irreplace(search,replace,$str):\n\nstrtr($str,search,replace):   这个函数中replace不能为”\";\n\nsubstr_replace($Str,$rep,$start[,length])  $str原始字符串,$rep替换后的新字符串,$start起始位置,$length替换的长度，该项可选\n\n4. 字符长度\n\nint strlen($str)\n\n5. 比较字符函数\n\nint strcmp($str1,$str2):     $str1>=<$str2分别为正1,0,-1（字符串比较）\n\nstrcasecmp()         同上（不分大小写）\n\nstrnatcmp(“4″,”14″)     按自然排序比较字符串\n\nstrnatcasecmp()       同上，（区分大小写）\n\n6. 分割成数组的PHP字符串函数\n\nstr_split($str,len):      把$str按len长度进行分割返回数组\n\nsplit(search,$str[,int]):     把$str按search字符进行分割返回数组int是分割几次，后面的将不分割\n\nexpload(search,$str[,int])\n\n7. 去除空格\n\nltrim、rtrim、trim\n\n8. HTML代码有关函数\n\nnl2br()：     使n转换为\n。\nstrip_tags($str[,''])：    去除HTML和PHP标记.在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留\n\n如：echo strip_tags($text, ”);\n\nhtmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式\n\n9. 字符大小写转换的PHP字符串函数\n\nstrtolower($str):    字符串转换为小写\n\nstrtoupper($str):     字符串转换为大写\n\nucfirst($str):    将函数的第一个字符转换为大写\n\nucwords($str):    将每个单词的首字母转换为大写\n\n附：\n\nPHP字符串函数库，收集了51个PHP处理字符串的函数。包括计算字符串长度、分割字符串、查找字符串等等各个方面。\n\nAddSlashes:                 字符串加入斜线。\nbin2hex:                    二进位转成十六进位。\nChop:                       去除连续空白。\nChr:                        返回序数值的字符。\nchunk_split:                将字符串分成小段。\nconvert_cyr_string:         转换成其它字符串。\ncrypt:                      将字符串用 DES 编码加密。\necho:                       输出字符串。\nexplode:                    切开字符串。\nflush:                      清出输出缓冲区。\nget_meta_tags:              抽出文件所有 meta 标记的资料。\nhtmlspecialchars:           将特殊字符转成 HTML 格式。\nhtmlentities:               将所有的字符都转成 HTML 字符串。\nimplode:                    将数组变成字符串。\njoin:                       将数组变成字符串。\nltrim:                      去除连续空白。\nmd5:                        计算字符串的 MD5 哈稀。\nnl2br:                      将换行字符转成。\nOrd:                        返回字符的序数值。\nparse_str:                  解析 query 字符串成变量。\nprint:                      输出字符串。\nprintf:                     输出格式化字符串。\nquoted_printable_decode     将 qp 编码字符串转成 8 位字符串。\nQuoteMeta:                  加入引用符号。\nrawurldecode:               从 URL 专用格式字符串还原成普通字符串。\nrawurlencode:               将字符串编码成 URL 专用格式。\nsetlocale:                  配置地域化信息。\nsimilar_text:               计算字符串相似度。\nsoundex:                    计算字符串的读音值\nsprintf:                    将字符串格式化。\nstrchr:                     寻找第一个出现的字符。\nstrcmp:                     字符串比较。\nstrcspn:                    不同字符串的长度。\nstrip_tags:                 去掉 HTML 及 PHP 的标记。\nStripSlashes:               去掉反斜线字符。\nstrlen:                     取得字符串长度。\nstrrpos:                    寻找字符串中某字符最后出现处。\nstrpos:                     寻找字符串中某字符最先出现处。\nstrrchr:                    取得某字符最后出现处起的字符串。\nstrrev:                     颠倒字符串。\nstrspn:                     找出某字符串落在另一字符串遮罩的数目。\nstrstr:                     返回字符串中某字符串开始处至结束的字符串。\nstrtok:                     切开字符串。\nstrtolower:                 字符串全转为小写。\nstrtoupper:                 字符串全转为大写。\nstr_replace:                字符串取代。\nstrtr:                      转换某些字符。\nsubstr:                     取部份字符串。\ntrim:                       截去字符串首尾的空格。\nucfirst:                    将字符串第一个字符改大写。\nucwords:                    将字符串每个字第一个字母改大写。","source":"_posts/Library/php_str_fun.md","raw":"layout: library\ntitle: PHP字符串函数大汇总\ndate: 2015-10-12 23:06:53\ntags:\n- PHP函数\n---\n1. 查找字符位置函数\n\nstrpos($str,search,[int]):   查找search在$str中的第一次位置从int开始\n\nstripos($str,search,[int]):  函数返回字符串在另一个字符串中第一次出现的位置\n\nstrrpos($str,search,[int]):  查找search在$str中的最后一次出现的位置从int\n\n2. 提取子字符函数（双字节）\n\nsubmit($str,int start[,int length]):  从$str中strat位置开始提取[length长度的字符串]。\n\nstrstr($str1,$str2):   从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。\n\nstristr()    功能同strstr，只是不区分大小写。\n\nstrrchr()    从最后一次搜索到的字符处返回；用处：取路径中文件名\n\n3. 替换字符串的PHP字符串函数\n\nstr_replace(search,replace,$str):    从$str中查找search用replace来替换\n\nstr_irreplace(search,replace,$str):\n\nstrtr($str,search,replace):   这个函数中replace不能为”\";\n\nsubstr_replace($Str,$rep,$start[,length])  $str原始字符串,$rep替换后的新字符串,$start起始位置,$length替换的长度，该项可选\n\n4. 字符长度\n\nint strlen($str)\n\n5. 比较字符函数\n\nint strcmp($str1,$str2):     $str1>=<$str2分别为正1,0,-1（字符串比较）\n\nstrcasecmp()         同上（不分大小写）\n\nstrnatcmp(“4″,”14″)     按自然排序比较字符串\n\nstrnatcasecmp()       同上，（区分大小写）\n\n6. 分割成数组的PHP字符串函数\n\nstr_split($str,len):      把$str按len长度进行分割返回数组\n\nsplit(search,$str[,int]):     把$str按search字符进行分割返回数组int是分割几次，后面的将不分割\n\nexpload(search,$str[,int])\n\n7. 去除空格\n\nltrim、rtrim、trim\n\n8. HTML代码有关函数\n\nnl2br()：     使n转换为\n。\nstrip_tags($str[,''])：    去除HTML和PHP标记.在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留\n\n如：echo strip_tags($text, ”);\n\nhtmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式\n\n9. 字符大小写转换的PHP字符串函数\n\nstrtolower($str):    字符串转换为小写\n\nstrtoupper($str):     字符串转换为大写\n\nucfirst($str):    将函数的第一个字符转换为大写\n\nucwords($str):    将每个单词的首字母转换为大写\n\n附：\n\nPHP字符串函数库，收集了51个PHP处理字符串的函数。包括计算字符串长度、分割字符串、查找字符串等等各个方面。\n\nAddSlashes:                 字符串加入斜线。\nbin2hex:                    二进位转成十六进位。\nChop:                       去除连续空白。\nChr:                        返回序数值的字符。\nchunk_split:                将字符串分成小段。\nconvert_cyr_string:         转换成其它字符串。\ncrypt:                      将字符串用 DES 编码加密。\necho:                       输出字符串。\nexplode:                    切开字符串。\nflush:                      清出输出缓冲区。\nget_meta_tags:              抽出文件所有 meta 标记的资料。\nhtmlspecialchars:           将特殊字符转成 HTML 格式。\nhtmlentities:               将所有的字符都转成 HTML 字符串。\nimplode:                    将数组变成字符串。\njoin:                       将数组变成字符串。\nltrim:                      去除连续空白。\nmd5:                        计算字符串的 MD5 哈稀。\nnl2br:                      将换行字符转成。\nOrd:                        返回字符的序数值。\nparse_str:                  解析 query 字符串成变量。\nprint:                      输出字符串。\nprintf:                     输出格式化字符串。\nquoted_printable_decode     将 qp 编码字符串转成 8 位字符串。\nQuoteMeta:                  加入引用符号。\nrawurldecode:               从 URL 专用格式字符串还原成普通字符串。\nrawurlencode:               将字符串编码成 URL 专用格式。\nsetlocale:                  配置地域化信息。\nsimilar_text:               计算字符串相似度。\nsoundex:                    计算字符串的读音值\nsprintf:                    将字符串格式化。\nstrchr:                     寻找第一个出现的字符。\nstrcmp:                     字符串比较。\nstrcspn:                    不同字符串的长度。\nstrip_tags:                 去掉 HTML 及 PHP 的标记。\nStripSlashes:               去掉反斜线字符。\nstrlen:                     取得字符串长度。\nstrrpos:                    寻找字符串中某字符最后出现处。\nstrpos:                     寻找字符串中某字符最先出现处。\nstrrchr:                    取得某字符最后出现处起的字符串。\nstrrev:                     颠倒字符串。\nstrspn:                     找出某字符串落在另一字符串遮罩的数目。\nstrstr:                     返回字符串中某字符串开始处至结束的字符串。\nstrtok:                     切开字符串。\nstrtolower:                 字符串全转为小写。\nstrtoupper:                 字符串全转为大写。\nstr_replace:                字符串取代。\nstrtr:                      转换某些字符。\nsubstr:                     取部份字符串。\ntrim:                       截去字符串首尾的空格。\nucfirst:                    将字符串第一个字符改大写。\nucwords:                    将字符串每个字第一个字母改大写。","slug":"Library-php-str-fun","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjg10007pgwijyh1hh0e","content":"<ol>\n<li>查找字符位置函数</li>\n</ol>\n<p>strpos($str,search,[int]):   查找search在$str中的第一次位置从int开始</p>\n<p>stripos($str,search,[int]):  函数返回字符串在另一个字符串中第一次出现的位置</p>\n<p>strrpos($str,search,[int]):  查找search在$str中的最后一次出现的位置从int</p>\n<ol start=\"2\">\n<li>提取子字符函数（双字节）</li>\n</ol>\n<p>submit($str,int start[,int length]):  从$str中strat位置开始提取[length长度的字符串]。</p>\n<p>strstr($str1,$str2):   从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。</p>\n<p>stristr()    功能同strstr，只是不区分大小写。</p>\n<p>strrchr()    从最后一次搜索到的字符处返回；用处：取路径中文件名</p>\n<ol start=\"3\">\n<li>替换字符串的PHP字符串函数</li>\n</ol>\n<p>str_replace(search,replace,$str):    从$str中查找search用replace来替换</p>\n<p>str_irreplace(search,replace,$str):</p>\n<p>strtr($str,search,replace):   这个函数中replace不能为””;</p>\n<p>substr_replace($Str,$rep,$start[,length])  $str原始字符串,$rep替换后的新字符串,$start起始位置,$length替换的长度，该项可选</p>\n<ol start=\"4\">\n<li>字符长度</li>\n</ol>\n<p>int strlen($str)</p>\n<ol start=\"5\">\n<li>比较字符函数</li>\n</ol>\n<p>int strcmp($str1,$str2):     $str1&gt;=&lt;$str2分别为正1,0,-1（字符串比较）</p>\n<p>strcasecmp()         同上（不分大小写）</p>\n<p>strnatcmp(“4″,”14″)     按自然排序比较字符串</p>\n<p>strnatcasecmp()       同上，（区分大小写）</p>\n<ol start=\"6\">\n<li>分割成数组的PHP字符串函数</li>\n</ol>\n<p>str_split($str,len):      把$str按len长度进行分割返回数组</p>\n<p>split(search,$str[,int]):     把$str按search字符进行分割返回数组int是分割几次，后面的将不分割</p>\n<p>expload(search,$str[,int])</p>\n<ol start=\"7\">\n<li>去除空格</li>\n</ol>\n<p>ltrim、rtrim、trim</p>\n<ol start=\"8\">\n<li>HTML代码有关函数</li>\n</ol>\n<p>nl2br()：     使n转换为<br>。<br>strip_tags($str[,’’])：    去除HTML和PHP标记.在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留</p>\n<p>如：echo strip_tags($text, ”);</p>\n<p>htmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式</p>\n<ol start=\"9\">\n<li>字符大小写转换的PHP字符串函数</li>\n</ol>\n<p>strtolower($str):    字符串转换为小写</p>\n<p>strtoupper($str):     字符串转换为大写</p>\n<p>ucfirst($str):    将函数的第一个字符转换为大写</p>\n<p>ucwords($str):    将每个单词的首字母转换为大写</p>\n<p>附：</p>\n<p>PHP字符串函数库，收集了51个PHP处理字符串的函数。包括计算字符串长度、分割字符串、查找字符串等等各个方面。</p>\n<p>AddSlashes:                 字符串加入斜线。<br>bin2hex:                    二进位转成十六进位。<br>Chop:                       去除连续空白。<br>Chr:                        返回序数值的字符。<br>chunk_split:                将字符串分成小段。<br>convert_cyr_string:         转换成其它字符串。<br>crypt:                      将字符串用 DES 编码加密。<br>echo:                       输出字符串。<br>explode:                    切开字符串。<br>flush:                      清出输出缓冲区。<br>get_meta_tags:              抽出文件所有 meta 标记的资料。<br>htmlspecialchars:           将特殊字符转成 HTML 格式。<br>htmlentities:               将所有的字符都转成 HTML 字符串。<br>implode:                    将数组变成字符串。<br>join:                       将数组变成字符串。<br>ltrim:                      去除连续空白。<br>md5:                        计算字符串的 MD5 哈稀。<br>nl2br:                      将换行字符转成。<br>Ord:                        返回字符的序数值。<br>parse_str:                  解析 query 字符串成变量。<br>print:                      输出字符串。<br>printf:                     输出格式化字符串。<br>quoted_printable_decode     将 qp 编码字符串转成 8 位字符串。<br>QuoteMeta:                  加入引用符号。<br>rawurldecode:               从 URL 专用格式字符串还原成普通字符串。<br>rawurlencode:               将字符串编码成 URL 专用格式。<br>setlocale:                  配置地域化信息。<br>similar_text:               计算字符串相似度。<br>soundex:                    计算字符串的读音值<br>sprintf:                    将字符串格式化。<br>strchr:                     寻找第一个出现的字符。<br>strcmp:                     字符串比较。<br>strcspn:                    不同字符串的长度。<br>strip_tags:                 去掉 HTML 及 PHP 的标记。<br>StripSlashes:               去掉反斜线字符。<br>strlen:                     取得字符串长度。<br>strrpos:                    寻找字符串中某字符最后出现处。<br>strpos:                     寻找字符串中某字符最先出现处。<br>strrchr:                    取得某字符最后出现处起的字符串。<br>strrev:                     颠倒字符串。<br>strspn:                     找出某字符串落在另一字符串遮罩的数目。<br>strstr:                     返回字符串中某字符串开始处至结束的字符串。<br>strtok:                     切开字符串。<br>strtolower:                 字符串全转为小写。<br>strtoupper:                 字符串全转为大写。<br>str_replace:                字符串取代。<br>strtr:                      转换某些字符。<br>substr:                     取部份字符串。<br>trim:                       截去字符串首尾的空格。<br>ucfirst:                    将字符串第一个字符改大写。<br>ucwords:                    将字符串每个字第一个字母改大写。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>查找字符位置函数</li>\n</ol>\n<p>strpos($str,search,[int]):   查找search在$str中的第一次位置从int开始</p>\n<p>stripos($str,search,[int]):  函数返回字符串在另一个字符串中第一次出现的位置</p>\n<p>strrpos($str,search,[int]):  查找search在$str中的最后一次出现的位置从int</p>\n<ol start=\"2\">\n<li>提取子字符函数（双字节）</li>\n</ol>\n<p>submit($str,int start[,int length]):  从$str中strat位置开始提取[length长度的字符串]。</p>\n<p>strstr($str1,$str2):   从$str1(第一个的位置)搜索$str2并从它开始截取到结束字符串;若没有则返回FALSE。</p>\n<p>stristr()    功能同strstr，只是不区分大小写。</p>\n<p>strrchr()    从最后一次搜索到的字符处返回；用处：取路径中文件名</p>\n<ol start=\"3\">\n<li>替换字符串的PHP字符串函数</li>\n</ol>\n<p>str_replace(search,replace,$str):    从$str中查找search用replace来替换</p>\n<p>str_irreplace(search,replace,$str):</p>\n<p>strtr($str,search,replace):   这个函数中replace不能为””;</p>\n<p>substr_replace($Str,$rep,$start[,length])  $str原始字符串,$rep替换后的新字符串,$start起始位置,$length替换的长度，该项可选</p>\n<ol start=\"4\">\n<li>字符长度</li>\n</ol>\n<p>int strlen($str)</p>\n<ol start=\"5\">\n<li>比较字符函数</li>\n</ol>\n<p>int strcmp($str1,$str2):     $str1&gt;=&lt;$str2分别为正1,0,-1（字符串比较）</p>\n<p>strcasecmp()         同上（不分大小写）</p>\n<p>strnatcmp(“4″,”14″)     按自然排序比较字符串</p>\n<p>strnatcasecmp()       同上，（区分大小写）</p>\n<ol start=\"6\">\n<li>分割成数组的PHP字符串函数</li>\n</ol>\n<p>str_split($str,len):      把$str按len长度进行分割返回数组</p>\n<p>split(search,$str[,int]):     把$str按search字符进行分割返回数组int是分割几次，后面的将不分割</p>\n<p>expload(search,$str[,int])</p>\n<ol start=\"7\">\n<li>去除空格</li>\n</ol>\n<p>ltrim、rtrim、trim</p>\n<ol start=\"8\">\n<li>HTML代码有关函数</li>\n</ol>\n<p>nl2br()：     使n转换为<br>。<br>strip_tags($str[,’’])：    去除HTML和PHP标记.在$str中所有HTML和PHP代码将被去除，可选参数为html和PHP代码作用是将保留</p>\n<p>如：echo strip_tags($text, ”);</p>\n<p>htmlspecialchars($str[,参数]):页面正常输出HTML代码参数是转换方式</p>\n<ol start=\"9\">\n<li>字符大小写转换的PHP字符串函数</li>\n</ol>\n<p>strtolower($str):    字符串转换为小写</p>\n<p>strtoupper($str):     字符串转换为大写</p>\n<p>ucfirst($str):    将函数的第一个字符转换为大写</p>\n<p>ucwords($str):    将每个单词的首字母转换为大写</p>\n<p>附：</p>\n<p>PHP字符串函数库，收集了51个PHP处理字符串的函数。包括计算字符串长度、分割字符串、查找字符串等等各个方面。</p>\n<p>AddSlashes:                 字符串加入斜线。<br>bin2hex:                    二进位转成十六进位。<br>Chop:                       去除连续空白。<br>Chr:                        返回序数值的字符。<br>chunk_split:                将字符串分成小段。<br>convert_cyr_string:         转换成其它字符串。<br>crypt:                      将字符串用 DES 编码加密。<br>echo:                       输出字符串。<br>explode:                    切开字符串。<br>flush:                      清出输出缓冲区。<br>get_meta_tags:              抽出文件所有 meta 标记的资料。<br>htmlspecialchars:           将特殊字符转成 HTML 格式。<br>htmlentities:               将所有的字符都转成 HTML 字符串。<br>implode:                    将数组变成字符串。<br>join:                       将数组变成字符串。<br>ltrim:                      去除连续空白。<br>md5:                        计算字符串的 MD5 哈稀。<br>nl2br:                      将换行字符转成。<br>Ord:                        返回字符的序数值。<br>parse_str:                  解析 query 字符串成变量。<br>print:                      输出字符串。<br>printf:                     输出格式化字符串。<br>quoted_printable_decode     将 qp 编码字符串转成 8 位字符串。<br>QuoteMeta:                  加入引用符号。<br>rawurldecode:               从 URL 专用格式字符串还原成普通字符串。<br>rawurlencode:               将字符串编码成 URL 专用格式。<br>setlocale:                  配置地域化信息。<br>similar_text:               计算字符串相似度。<br>soundex:                    计算字符串的读音值<br>sprintf:                    将字符串格式化。<br>strchr:                     寻找第一个出现的字符。<br>strcmp:                     字符串比较。<br>strcspn:                    不同字符串的长度。<br>strip_tags:                 去掉 HTML 及 PHP 的标记。<br>StripSlashes:               去掉反斜线字符。<br>strlen:                     取得字符串长度。<br>strrpos:                    寻找字符串中某字符最后出现处。<br>strpos:                     寻找字符串中某字符最先出现处。<br>strrchr:                    取得某字符最后出现处起的字符串。<br>strrev:                     颠倒字符串。<br>strspn:                     找出某字符串落在另一字符串遮罩的数目。<br>strstr:                     返回字符串中某字符串开始处至结束的字符串。<br>strtok:                     切开字符串。<br>strtolower:                 字符串全转为小写。<br>strtoupper:                 字符串全转为大写。<br>str_replace:                字符串取代。<br>strtr:                      转换某些字符。<br>substr:                     取部份字符串。<br>trim:                       截去字符串首尾的空格。<br>ucfirst:                    将字符串第一个字符改大写。<br>ucwords:                    将字符串每个字第一个字母改大写。</p>\n"},{"layout":"post","title":"MySQL 经典SQL语句","date":"2015-12-09T17:49:13.000Z","_content":"## 随机推荐SQL\n原生：`mysql> select goods_id,goods_name from sh_goods order by rand() limit 5;`\n\nThinkPHP：`$this->field('goods_id,goods_name,goods_thumb,goods_price')->where($where)->order('rand()')->limit($limit)->select();`\n\n## 字段拼接\n`select group_concat(concat(b.attr_name,':',a.goods_attr_values) separator '<br/>' ) as ga from sh_goods_atr a left join sh_attribute b on a.attr_id = b.attr_id where a.id in (36,41);`\n\n## 集合优化\n方法一：通过模糊查询\n``select * from goods where `goods_status` like '%hot%';``\n\n模糊查询，以%百分号开头的查询无法使用索引，只能是全表扫描。效率低下\n\n方法二：使用find_in_set(值，集合)\n``select * from goods where find_in_set('best',`goods_status`);``\n\n优化了方法一，效率提高了。但find_in_set()函数本身是个全表扫描的函数\n\n方法三：使用位运算符\n查找best：\n``select * from goods where goods_status & 1;``\n查找既有best又有hot同时存在：\n``select * from goods where goods_status & 1 and goods_status & 4``","source":"_posts/Library/sql_library.md","raw":"layout: post\ntitle: MySQL 经典SQL语句\ndate: 2015-12-10 01:49:13\ntags:\n- MySQL\n---\n## 随机推荐SQL\n原生：`mysql> select goods_id,goods_name from sh_goods order by rand() limit 5;`\n\nThinkPHP：`$this->field('goods_id,goods_name,goods_thumb,goods_price')->where($where)->order('rand()')->limit($limit)->select();`\n\n## 字段拼接\n`select group_concat(concat(b.attr_name,':',a.goods_attr_values) separator '<br/>' ) as ga from sh_goods_atr a left join sh_attribute b on a.attr_id = b.attr_id where a.id in (36,41);`\n\n## 集合优化\n方法一：通过模糊查询\n``select * from goods where `goods_status` like '%hot%';``\n\n模糊查询，以%百分号开头的查询无法使用索引，只能是全表扫描。效率低下\n\n方法二：使用find_in_set(值，集合)\n``select * from goods where find_in_set('best',`goods_status`);``\n\n优化了方法一，效率提高了。但find_in_set()函数本身是个全表扫描的函数\n\n方法三：使用位运算符\n查找best：\n``select * from goods where goods_status & 1;``\n查找既有best又有hot同时存在：\n``select * from goods where goods_status & 1 and goods_status & 4``","slug":"Library-sql-library","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjg20008pgwi5v8fof70","content":"<h2 id=\"随机推荐SQL\"><a href=\"#随机推荐SQL\" class=\"headerlink\" title=\"随机推荐SQL\"></a>随机推荐SQL</h2><p>原生：<code>mysql&gt; select goods_id,goods_name from sh_goods order by rand() limit 5;</code></p>\n<p>ThinkPHP：<code>$this-&gt;field(&#39;goods_id,goods_name,goods_thumb,goods_price&#39;)-&gt;where($where)-&gt;order(&#39;rand()&#39;)-&gt;limit($limit)-&gt;select();</code></p>\n<h2 id=\"字段拼接\"><a href=\"#字段拼接\" class=\"headerlink\" title=\"字段拼接\"></a>字段拼接</h2><p><code>select group_concat(concat(b.attr_name,&#39;:&#39;,a.goods_attr_values) separator &#39;&lt;br/&gt;&#39; ) as ga from sh_goods_atr a left join sh_attribute b on a.attr_id = b.attr_id where a.id in (36,41);</code></p>\n<h2 id=\"集合优化\"><a href=\"#集合优化\" class=\"headerlink\" title=\"集合优化\"></a>集合优化</h2><p>方法一：通过模糊查询<br><code>select * from goods where `goods_status` like &#39;%hot%&#39;;</code></p>\n<p>模糊查询，以%百分号开头的查询无法使用索引，只能是全表扫描。效率低下</p>\n<p>方法二：使用find_in_set(值，集合)<br><code>select * from goods where find_in_set(&#39;best&#39;,`goods_status`);</code></p>\n<p>优化了方法一，效率提高了。但find_in_set()函数本身是个全表扫描的函数</p>\n<p>方法三：使用位运算符<br>查找best：<br><code>select * from goods where goods_status &amp; 1;</code><br>查找既有best又有hot同时存在：<br><code>select * from goods where goods_status &amp; 1 and goods_status &amp; 4</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"随机推荐SQL\"><a href=\"#随机推荐SQL\" class=\"headerlink\" title=\"随机推荐SQL\"></a>随机推荐SQL</h2><p>原生：<code>mysql&gt; select goods_id,goods_name from sh_goods order by rand() limit 5;</code></p>\n<p>ThinkPHP：<code>$this-&gt;field(&#39;goods_id,goods_name,goods_thumb,goods_price&#39;)-&gt;where($where)-&gt;order(&#39;rand()&#39;)-&gt;limit($limit)-&gt;select();</code></p>\n<h2 id=\"字段拼接\"><a href=\"#字段拼接\" class=\"headerlink\" title=\"字段拼接\"></a>字段拼接</h2><p><code>select group_concat(concat(b.attr_name,&#39;:&#39;,a.goods_attr_values) separator &#39;&lt;br/&gt;&#39; ) as ga from sh_goods_atr a left join sh_attribute b on a.attr_id = b.attr_id where a.id in (36,41);</code></p>\n<h2 id=\"集合优化\"><a href=\"#集合优化\" class=\"headerlink\" title=\"集合优化\"></a>集合优化</h2><p>方法一：通过模糊查询<br><code>select * from goods where `goods_status` like &#39;%hot%&#39;;</code></p>\n<p>模糊查询，以%百分号开头的查询无法使用索引，只能是全表扫描。效率低下</p>\n<p>方法二：使用find_in_set(值，集合)<br><code>select * from goods where find_in_set(&#39;best&#39;,`goods_status`);</code></p>\n<p>优化了方法一，效率提高了。但find_in_set()函数本身是个全表扫描的函数</p>\n<p>方法三：使用位运算符<br>查找best：<br><code>select * from goods where goods_status &amp; 1;</code><br>查找既有best又有hot同时存在：<br><code>select * from goods where goods_status &amp; 1 and goods_status &amp; 4</code></p>\n"},{"layout":"post","title":"Hello World","date":"2015-07-10T15:40:01.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo new post <title>\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Set the Directory\n``` bash\ntags:\n- 标签\ncategories:\n- 分类\n```\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n$ hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n$ hexo d\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n### Clean the cache\n```\n$ hexo clean\n```\n\n### hexo pro\n```\n$ hexo g -d\n```\n","source":"_posts/2015/201507/20150710-1.md","raw":"layout: post\ntitle: Hello World\ndate: 2015-07-10 23:40:01\ntag:\n- hexo\ncategories:\n- hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo new post <title>\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Set the Directory\n``` bash\ntags:\n- 标签\ncategories:\n- 分类\n```\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n$ hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n$ hexo d\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n### Clean the cache\n```\n$ hexo clean\n```\n\n### hexo pro\n```\n$ hexo g -d\n```\n","slug":"1","published":1,"updated":"2018-10-19T07:30:37.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugji8000ipgwippf7k4zh"},{"layout":"post","title":"Cmd Markdown 简明语法手册","date":"2015-07-10T15:55:13.000Z","_content":"\n\n[『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』](https://www.zybuluo.com/mdeditor \"作业部落旗下 Cmd 在线 Markdown 编辑阅读器\")\n\n# Cmd Markdown 简明语法手册\n\n标签： Cmd-Markdown\n\n---\n\n### 1. 斜体和粗体\n\n使用 * 和 ** 表示斜体和粗体。\n\n示例：\n\n这是 *斜体*，这是 **粗体**。\n\n### 2. 分级标题\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n\n示例：\n\n<!-- more -->\n\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n\n### 3. 外链接\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n\n示例：\n\n这是去往 [本人博客](http://ghosertblog.github.com) 的链接。\n\n### 4. 无序列表\n\n使用 *，+，- 表示无序列表。\n\n示例：\n\n- 无序列表项 一\n- 无序列表项 二\n- 无序列表项 三\n\n### 5. 有序列表\n\n使用数字和点表示有序列表。\n\n示例：\n\n1. 有序列表项 一\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 6. 文字引用\n\n使用 > 表示文字引用。\n\n示例：\n\n> 野火烧不尽，春风吹又生。\n\n### 7. 行内代码块\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n### 8.  代码块\n\n使用 四个缩进空格 表示代码块。\n\n示例：\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n\n### 9.  插入图像\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n示例：\n\n![我的头像](https://www.zybuluo.com/static/img/my_head.jpg)\n\n# Cmd Markdown 高阶语法手册\n\n### 1. 内容目录\n\n在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n\n[TOC]\n\n### 2. 标签分类\n\n在编辑区任意行的列首位置输入以下代码给文稿标签：\n\n标签： 数学 英语 Markdown\n\n或者\n\nTags： 数学 英语 Markdown\n\n### 3. 删除线\n\n使用 ~~ 表示删除线。\n\n~~这是一段错误的文本。~~\n\n### 4. 注脚\n\n使用 [^keyword] 表示注脚。\n\n这是一个注脚[^footnote]的样例。\n\n这是第二个注脚[^footnote2]的样例。\n\n### 5. LaTeX 公式\n\n$ 表示行内公式： \n\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n$$ 表示整行公式：\n\n$$\\sum_{i=1}^n a_i=0$$\n\n$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$\n\n$$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$\n\n访问 [MathJax](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n\n### 6. 加强的代码块\n\n支持四十一种编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n### 7. 流程图\n\n#### 示例\n\n```flow\nst=>start: Start:>https://www.zybuluo.com\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n```\n\n#### 更多语法参考：[流程图语法参考](http://adrai.github.io/flowchart.js/)\n\n### 8. 序列图\n\n#### 示例 1\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n#### 示例 2\n\n```seq\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```\n\n#### 更多语法参考：[序列图语法参考](http://bramp.github.io/js-sequence-diagrams/)\n\n### 9. 表格支持\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 10. 定义型列表\n\n名词 1\n:   定义 1（左侧有一个可见的冒号和四个不可见的空格）\n\n代码块 2\n:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）\n\n        代码块（左侧有八个不可见的空格）\n\n### 11. Html 标签\n\n本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：\n\n    <table>\n        <tr>\n            <th rowspan=\"2\">值班人员</th>\n            <th>星期一</th>\n            <th>星期二</th>\n            <th>星期三</th>\n        </tr>\n        <tr>\n            <td>李强</td>\n            <td>张明</td>\n            <td>王平</td>\n        </tr>\n    </table>\n\n\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n### 12. 内嵌图标\n\n本站的图标系统对外开放，在文档中输入\n\n    <i class=\"icon-weibo\"></i>\n\n即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i>\n\n替换 上述 `i 标签` 内的 `icon-weibo` 以显示不同的图标，例如：\n\n    <i class=\"icon-renren\"></i>\n\n即显示人人的图标： <i class=\"icon-renren icon-2x\"></i>\n\n更多的图标和玩法可以参看 [font-awesome](http://fortawesome.github.io/Font-Awesome/3.2.1/icons/) 官方网站。\n\n### 13. 待办事宜 Todo 列表\n\n使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：\n\n    - [ ] **Cmd Markdown 开发**\n        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n        - [ ] 支持以 PDF 格式导出文稿\n        - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n        - [x] 改进 LaTex 功能\n            - [x] 修复 LaTex 公式渲染问题\n            - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n    - [ ] **七月旅行准备**\n        - [ ] 准备邮轮上需要携带的物品\n        - [ ] 浏览日本免税店的物品\n        - [x] 购买蓝宝石公主号七月一日的船票\n        \n对应显示如下待办事宜 Todo 列表：\n        \n- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n        \n        \n[^footnote]: 这是一个 *注脚* 的 **文本**。\n\n[^footnote2]: 这是另一个 *注脚* 的 **文本**。\n\n\n","source":"_posts/2015/201507/20150710-3.md","raw":"layout: post\ntitle: Cmd Markdown 简明语法手册\ndate: 2015-07-10 23:55:13\ncategories:   # 文章分类目录，参数可省略\n- 随笔\ntags:   # 文章标签，参数可省略\n- hexo\n- Markdown\n---\n\n\n[『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』](https://www.zybuluo.com/mdeditor \"作业部落旗下 Cmd 在线 Markdown 编辑阅读器\")\n\n# Cmd Markdown 简明语法手册\n\n标签： Cmd-Markdown\n\n---\n\n### 1. 斜体和粗体\n\n使用 * 和 ** 表示斜体和粗体。\n\n示例：\n\n这是 *斜体*，这是 **粗体**。\n\n### 2. 分级标题\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n\n示例：\n\n<!-- more -->\n\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n\n### 3. 外链接\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n\n示例：\n\n这是去往 [本人博客](http://ghosertblog.github.com) 的链接。\n\n### 4. 无序列表\n\n使用 *，+，- 表示无序列表。\n\n示例：\n\n- 无序列表项 一\n- 无序列表项 二\n- 无序列表项 三\n\n### 5. 有序列表\n\n使用数字和点表示有序列表。\n\n示例：\n\n1. 有序列表项 一\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 6. 文字引用\n\n使用 > 表示文字引用。\n\n示例：\n\n> 野火烧不尽，春风吹又生。\n\n### 7. 行内代码块\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n### 8.  代码块\n\n使用 四个缩进空格 表示代码块。\n\n示例：\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n\n### 9.  插入图像\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n示例：\n\n![我的头像](https://www.zybuluo.com/static/img/my_head.jpg)\n\n# Cmd Markdown 高阶语法手册\n\n### 1. 内容目录\n\n在段落中填写 `[TOC]` 以显示全文内容的目录结构。\n\n[TOC]\n\n### 2. 标签分类\n\n在编辑区任意行的列首位置输入以下代码给文稿标签：\n\n标签： 数学 英语 Markdown\n\n或者\n\nTags： 数学 英语 Markdown\n\n### 3. 删除线\n\n使用 ~~ 表示删除线。\n\n~~这是一段错误的文本。~~\n\n### 4. 注脚\n\n使用 [^keyword] 表示注脚。\n\n这是一个注脚[^footnote]的样例。\n\n这是第二个注脚[^footnote2]的样例。\n\n### 5. LaTeX 公式\n\n$ 表示行内公式： \n\n质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n\n$$ 表示整行公式：\n\n$$\\sum_{i=1}^n a_i=0$$\n\n$$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$\n\n$$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$\n\n访问 [MathJax](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference) 参考更多使用方法。\n\n### 6. 加强的代码块\n\n支持四十一种编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n### 7. 流程图\n\n#### 示例\n\n```flow\nst=>start: Start:>https://www.zybuluo.com\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n```\n\n#### 更多语法参考：[流程图语法参考](http://adrai.github.io/flowchart.js/)\n\n### 8. 序列图\n\n#### 示例 1\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n#### 示例 2\n\n```seq\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```\n\n#### 更多语法参考：[序列图语法参考](http://bramp.github.io/js-sequence-diagrams/)\n\n### 9. 表格支持\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n\n### 10. 定义型列表\n\n名词 1\n:   定义 1（左侧有一个可见的冒号和四个不可见的空格）\n\n代码块 2\n:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）\n\n        代码块（左侧有八个不可见的空格）\n\n### 11. Html 标签\n\n本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：\n\n    <table>\n        <tr>\n            <th rowspan=\"2\">值班人员</th>\n            <th>星期一</th>\n            <th>星期二</th>\n            <th>星期三</th>\n        </tr>\n        <tr>\n            <td>李强</td>\n            <td>张明</td>\n            <td>王平</td>\n        </tr>\n    </table>\n\n\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n### 12. 内嵌图标\n\n本站的图标系统对外开放，在文档中输入\n\n    <i class=\"icon-weibo\"></i>\n\n即显示微博的图标： <i class=\"icon-weibo icon-2x\"></i>\n\n替换 上述 `i 标签` 内的 `icon-weibo` 以显示不同的图标，例如：\n\n    <i class=\"icon-renren\"></i>\n\n即显示人人的图标： <i class=\"icon-renren icon-2x\"></i>\n\n更多的图标和玩法可以参看 [font-awesome](http://fortawesome.github.io/Font-Awesome/3.2.1/icons/) 官方网站。\n\n### 13. 待办事宜 Todo 列表\n\n使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：\n\n    - [ ] **Cmd Markdown 开发**\n        - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n        - [ ] 支持以 PDF 格式导出文稿\n        - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n        - [x] 改进 LaTex 功能\n            - [x] 修复 LaTex 公式渲染问题\n            - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n    - [ ] **七月旅行准备**\n        - [ ] 准备邮轮上需要携带的物品\n        - [ ] 浏览日本免税店的物品\n        - [x] 购买蓝宝石公主号七月一日的船票\n        \n对应显示如下待办事宜 Todo 列表：\n        \n- [ ] **Cmd Markdown 开发**\n    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n    - [ ] 支持以 PDF 格式导出文稿\n    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)\n    - [x] 改进 LaTex 功能\n        - [x] 修复 LaTex 公式渲染问题\n        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)\n- [ ] **七月旅行准备**\n    - [ ] 准备邮轮上需要携带的物品\n    - [ ] 浏览日本免税店的物品\n    - [x] 购买蓝宝石公主号七月一日的船票\n        \n        \n[^footnote]: 这是一个 *注脚* 的 **文本**。\n\n[^footnote2]: 这是另一个 *注脚* 的 **文本**。\n\n\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugji9000jpgwifbm0fb78"},{"layout":"post","title":"消消乐小游戏","date":"2015-07-20T15:40:01.000Z","_content":"# 消消乐小游戏\n\n------\n\n使用HTML+CSS+JavaScript编写的简易消消乐小游戏！随着时间的推移会越来越快的出现随机位置随机大小的小星星，点击小小星星就会消失。\n游戏功能如下：\n\n> * 开始游戏\n> * 暂停游戏\n> * 结束游戏\n> * 游戏时常记录\n> * 游戏分数统计，记录消掉星星的个数\n> * 游戏血条显示，设定结束关卡为10个星星\n\n\n<!-- more -->\n\n\n![cmd-markdown-logo](http://7xwlfk.com1.z0.glb.clouddn.com/game.png)\n------\n\n## 技术点备注\n\n> 消除星星时通过obj.onclick=remove;\n再通过remove()函数：this.parentNode.removeChild(this);进行消除\n\n------\n\n## 代码如下\n\n\n```JavaScript\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<style type=\"text/css\">\n\t\t*{\n\t\t\tmargin: 0px;\n\t\t\tpadding: 0px;\n\t\t}\n\t\t#blood{\n\t\t\tmargin-top:5px;\n\t\t\twidth: 300px;\n\t\t\theight: 30px;\n\t\t\tborder: 1px solid red;\n\t\t\tdisplay:block;\n\t\t}\n\t\t#blood2{\n\t\t\tdisplay: inline-block;\n\t\t\twidth:300px;\n\t\t\theight: 30px;\n\t\t\tbackground: red;\n\t\t}\n\t</style>\n\t<script type=\"text/javascript\">\n\tvar time,time2,time3;\n\tvar count=0;\n\tvar score = 0;\n\tvar i=1000;\n\tvar n=0;\n\t\t//启动定时器\n\t\tfunction start(){\n\t\t\twindow.clearInterval(time);\n\t\t\tif(i>100){i-=100;}\n\t\t\t//设定当页面出现的星星超过10个就结束游戏\n\t\t\ttime = window.setInterval('show()',i);\n\t\t}\n\t\t\t//加快速度\n\t\t\tfunction speed(){\n\t\t\twindow.clearInterval(time2);\n\t\t\twindow.clearInterval(time3);\n\t\t\t//显示游戏进行的时间\n\t\t\ttime3 = window.setInterval(\"timeOver()\",1000);\n\t\t\t//点击开始默认先加载一次\n\t\t\twindow.setTimeout(\"start()\",0);\n\t\t\ttime2 = window.setInterval(\"start()\",5000);\n\t\t}\n\t\t//开始显示星星\n\t\tfunction show(){\n\t\t\t//创建对象\n\t\t\tvar obj = document.createElement('img');\n\t\t\t//设置对象属性\n\t\t\t//生成随机大小的星星\n\t\t\tvar size = Math.floor(Math.random()*30+30);\n\t\t\t//生成随机的位置坐标,首先获取屏幕尺寸的大小\n\t\t\tvar h = parseInt(screen.availHeight);\n\t\t\tvar w = parseInt(screen.availWidth);\n\t\t\tvar x = Math.floor(Math.random()*(w-w*0.2)+w*0.1);\n\t\t\tvar y = Math.floor(Math.random()*(h-h*0.4)+h*0.1);\n\t\t\t//通过src设置图片路径\n\t\t\tobj.src=\"images/xingxing.png\";\n\t\t\tobj.width = size;\n\t\t\t//必须通过定位才能使用top和left功能\n\t\t\tobj.style.position = \"absolute\";\n\t\t\tobj.style.top = y + \"px\";\n\t\t\tobj.style.left = x+ \"px\";\n\t\t\t//写入内容到页面中\n\t\t\tdocument.body.appendChild(obj);\n\t\t\t//记录写入到页面的次数\n\t\t\tcount++;\n\t\t\t//设置血条的长度\n\t\t\tvar obj4 = document.getElementById(\"blood2\");\n\t\t\tobj4.style.width = 300-(count * 30) +\"px\";\n\t\t\t//设定超过次数就结束游戏\n\t\t\tif (count>=10){\n\t\t\t\talert(\"游戏结束，得分\"+score+\"分\");\n\t\t\t\twindow.clearInterval(time);\n\t\t\t\twindow.clearInterval(time2);\n\t\t\t\twindow.clearInterval(time3);\n\t\t\t\t//游戏结束，清楚所有星星通过重新加载页面\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t\t//添加点击事件用来消除星星\n\t\t\tobj.onclick=remove;\n\t\t}\n\t\t//消除星星\n\t\tfunction remove(){\n\t\t\tthis.parentNode.removeChild(this);\n\t\t\t//记录消除的次数\n\t\t\tcount--;\n\t\t\t//计算总分数\n\t\t\tscore++;\n\t\t\tvar obj5=document.getElementById(\"score\");\n\t\t\tobj5.innerHTML=\"得分:\"+score+\"分\";\n\t\t}\n\t\t//显示游戏进行的时间\n\t\tfunction timeOver(){\n\t\t\tn++;\n\t\t\tvar obj3 = document.getElementById(\"overTime\");\n\t\t\tobj3.innerHTML=\"游戏进行了\"+n+\"秒\";\n\t\t}\n\t\t//暂停游戏\n\t\tfunction pause(){\n\t\t\talert(\"暂停游戏\");\n\t\t}\n\t</script>\n\t<title>星星小游戏</title>\n</head>\n<body>\n<input type=\"button\" value=\"开始游戏\" onclick=\"speed()\"></input>\n<input type=\"button\" value=\"暂停游戏\" onclick=\"pause()\"></input>\n<span id=\"overTime\">游戏进行了0秒</span>｜\n<span id=\"score\">得分:0分</span>\n<span id=\"blood\"><span id=\"blood2\"></span></span>\n</body>\n</html>\n```\n\n","source":"_posts/2015/201507/20150720-2.md","raw":"layout: post\ntitle: 消消乐小游戏\ndate: 2015-07-20 23:40:01\ncategories:   # 文章分类目录，参数可省略\n- 代码\ntags: \n- 游戏\n- JavaScript\n---\n# 消消乐小游戏\n\n------\n\n使用HTML+CSS+JavaScript编写的简易消消乐小游戏！随着时间的推移会越来越快的出现随机位置随机大小的小星星，点击小小星星就会消失。\n游戏功能如下：\n\n> * 开始游戏\n> * 暂停游戏\n> * 结束游戏\n> * 游戏时常记录\n> * 游戏分数统计，记录消掉星星的个数\n> * 游戏血条显示，设定结束关卡为10个星星\n\n\n<!-- more -->\n\n\n![cmd-markdown-logo](http://7xwlfk.com1.z0.glb.clouddn.com/game.png)\n------\n\n## 技术点备注\n\n> 消除星星时通过obj.onclick=remove;\n再通过remove()函数：this.parentNode.removeChild(this);进行消除\n\n------\n\n## 代码如下\n\n\n```JavaScript\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<style type=\"text/css\">\n\t\t*{\n\t\t\tmargin: 0px;\n\t\t\tpadding: 0px;\n\t\t}\n\t\t#blood{\n\t\t\tmargin-top:5px;\n\t\t\twidth: 300px;\n\t\t\theight: 30px;\n\t\t\tborder: 1px solid red;\n\t\t\tdisplay:block;\n\t\t}\n\t\t#blood2{\n\t\t\tdisplay: inline-block;\n\t\t\twidth:300px;\n\t\t\theight: 30px;\n\t\t\tbackground: red;\n\t\t}\n\t</style>\n\t<script type=\"text/javascript\">\n\tvar time,time2,time3;\n\tvar count=0;\n\tvar score = 0;\n\tvar i=1000;\n\tvar n=0;\n\t\t//启动定时器\n\t\tfunction start(){\n\t\t\twindow.clearInterval(time);\n\t\t\tif(i>100){i-=100;}\n\t\t\t//设定当页面出现的星星超过10个就结束游戏\n\t\t\ttime = window.setInterval('show()',i);\n\t\t}\n\t\t\t//加快速度\n\t\t\tfunction speed(){\n\t\t\twindow.clearInterval(time2);\n\t\t\twindow.clearInterval(time3);\n\t\t\t//显示游戏进行的时间\n\t\t\ttime3 = window.setInterval(\"timeOver()\",1000);\n\t\t\t//点击开始默认先加载一次\n\t\t\twindow.setTimeout(\"start()\",0);\n\t\t\ttime2 = window.setInterval(\"start()\",5000);\n\t\t}\n\t\t//开始显示星星\n\t\tfunction show(){\n\t\t\t//创建对象\n\t\t\tvar obj = document.createElement('img');\n\t\t\t//设置对象属性\n\t\t\t//生成随机大小的星星\n\t\t\tvar size = Math.floor(Math.random()*30+30);\n\t\t\t//生成随机的位置坐标,首先获取屏幕尺寸的大小\n\t\t\tvar h = parseInt(screen.availHeight);\n\t\t\tvar w = parseInt(screen.availWidth);\n\t\t\tvar x = Math.floor(Math.random()*(w-w*0.2)+w*0.1);\n\t\t\tvar y = Math.floor(Math.random()*(h-h*0.4)+h*0.1);\n\t\t\t//通过src设置图片路径\n\t\t\tobj.src=\"images/xingxing.png\";\n\t\t\tobj.width = size;\n\t\t\t//必须通过定位才能使用top和left功能\n\t\t\tobj.style.position = \"absolute\";\n\t\t\tobj.style.top = y + \"px\";\n\t\t\tobj.style.left = x+ \"px\";\n\t\t\t//写入内容到页面中\n\t\t\tdocument.body.appendChild(obj);\n\t\t\t//记录写入到页面的次数\n\t\t\tcount++;\n\t\t\t//设置血条的长度\n\t\t\tvar obj4 = document.getElementById(\"blood2\");\n\t\t\tobj4.style.width = 300-(count * 30) +\"px\";\n\t\t\t//设定超过次数就结束游戏\n\t\t\tif (count>=10){\n\t\t\t\talert(\"游戏结束，得分\"+score+\"分\");\n\t\t\t\twindow.clearInterval(time);\n\t\t\t\twindow.clearInterval(time2);\n\t\t\t\twindow.clearInterval(time3);\n\t\t\t\t//游戏结束，清楚所有星星通过重新加载页面\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t\t//添加点击事件用来消除星星\n\t\t\tobj.onclick=remove;\n\t\t}\n\t\t//消除星星\n\t\tfunction remove(){\n\t\t\tthis.parentNode.removeChild(this);\n\t\t\t//记录消除的次数\n\t\t\tcount--;\n\t\t\t//计算总分数\n\t\t\tscore++;\n\t\t\tvar obj5=document.getElementById(\"score\");\n\t\t\tobj5.innerHTML=\"得分:\"+score+\"分\";\n\t\t}\n\t\t//显示游戏进行的时间\n\t\tfunction timeOver(){\n\t\t\tn++;\n\t\t\tvar obj3 = document.getElementById(\"overTime\");\n\t\t\tobj3.innerHTML=\"游戏进行了\"+n+\"秒\";\n\t\t}\n\t\t//暂停游戏\n\t\tfunction pause(){\n\t\t\talert(\"暂停游戏\");\n\t\t}\n\t</script>\n\t<title>星星小游戏</title>\n</head>\n<body>\n<input type=\"button\" value=\"开始游戏\" onclick=\"speed()\"></input>\n<input type=\"button\" value=\"暂停游戏\" onclick=\"pause()\"></input>\n<span id=\"overTime\">游戏进行了0秒</span>｜\n<span id=\"score\">得分:0分</span>\n<span id=\"blood\"><span id=\"blood2\"></span></span>\n</body>\n</html>\n```\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjib000mpgwi41923c3r"},{"layout":"post","title":"Mac下使用Brew搭建PHP(LNMP/LAMP)开发环境","date":"2015-07-23T03:22:12.000Z","_content":"Mac下搭建lamp开发环境很容易，有xampp和mamp现成的集成环境。但是集成环境对于经常需要自定义一些配置的开发者来说会非常麻烦，而且Mac本身自带apache和php，在brew的帮助下非常容易手动搭建，可控性很高。\n\n## Brew\n\nbrew对于mac，就像apt-get对于ubuntu，安装软件的好帮手，不能方便更多…\n\nbrew的安装方式如下：\n\n`ruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)\"`\nbrew常用选项\n```\nbrew install xxx\nbrew uninstall xxx\nbrew list \nbrew update xxx\n```\n\n## Apache || Nginx\n\n### Apache\n\nApache的话使用mac自带的基本就够了，我的系统是10.9，可以使用以下命令控制Apache\n```\nsudo apachectl start\nsudo apachectl restart\nsudo apachectl stop\n```\n\n唯一要改的是主目录，mac默认在home下有个sites（站点）目录，访问路径是\n\n`http://localhost/~user_name`\n这样很不适合做开发用，修改/etc/apache2/httpd.conf内容\n```\nDocumentRoot \"/Users/username/Sites\"\n<Directory />\n    Options Indexes MultiViews\n    AllowOverride All\n    Order allow,deny\n    Allow from all\n</Directory>\n```\n\n这样sites目录就是网站根目录了，代码都往这个下头丢\n\n### Nginx\n\n要使用Nginx也比较方便，首先安装\n\n`brew install nginx`\n启动关闭Nginx的命令如下（如果想要监听80端口，必须以管理员身份运行）\n\n#打开 nginx\n`sudo nginx`\n#重新加载配置|重启|停止|退出 nginx\n`nginx -s reload|reopen|stop|quit`\n#测试配置是否有语法错误\n`nginx -t`\n配置Nginx\n\n`cd /usr/local/etc/nginx/`\n`mkdir conf.d`\n修改Nginx配置文件\n\n`vim nginx.conf`\n主要修改位置是最后的include\n```\nworker_processes  1;  \n\nerror_log       /usr/local/var/log/nginx/error.log warn;\n\npid        /usr/local/var/run/nginx.pid;\n\nevents {\n    worker_connections  256;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log      /usr/local/var/log/nginx/access.log main;\n    port_in_redirect off;\n    sendfile        on; \n    keepalive_timeout  65; \n\n    include /usr/local/etc/nginx/conf.d/*.conf;\n}\n```\n\n修改自定义文件\n\n`vim ./conf.d/default.conf`\n增加一个监听端口\n```\nserver {\n    listen       80;\n    server_name  localhost;\n\n    root /Users/username/Sites/; # 该项要修改为你准备存放相关网页的路径\n\n    location / { \n        index index.php;\n        autoindex on; \n    }   \n\n    #proxy the php scripts to php-fpm  \n    location ~ \\.php$ {\n        include /usr/local/etc/nginx/fastcgi.conf;\n        fastcgi_intercept_errors on; \n        fastcgi_pass   127.0.0.1:9000; \n    }   \n\n}\n```\n这个时候还不能访问php站点，因为还没有开启php-fpm。\n\n虽然mac 10.9自带了php-fpm，但是由于我们使用了最新的PHP，PHP中自带php-fpm，所以使用PHP中的php-fpm可以保证版本的一致。\n\n这里的命令在安装完下一步的php后再执行\n```\nsudo nginx\nsudo php-fpm -D\n```\n\n## PHP\n\nPHP在mac下默认安装了，但是不好控制版本，利用brew可以再mac下安装最新版本，甚至是多个版本，我装了php5.5\n```\nbrew update\nbrew tap homebrew/dupes\nbrew tap josegonzalez/homebrew-php\n# brew install php55 --with-fpm #Nginx\nbrew install php55 #Apache\n```\n\n然后修改php的cli路径和apache使用的php模块。在.bashrc或.zshrc里头加以下内容\n\n`#export PATH=\"$(brew --prefix josegonzalez/php/php55)/bin:$PATH\" `\n`export PATH=\"/usr/local/bin:/usr/local/sbin:$PATH\"`\n就用刚刚安装的php代替了系统默认cli的php版本。然后在/etc/apache2/httpd.conf下增加\n\n`LoadModule php5_module /usr/local/Cellar/php55/5.5.8/libexec/apache2/libphp5.so`\n这样就对apache使用的php版本也进行了修改。\n\n后面会用到mongo和mysql，所以可以直接利用下面命令安装php模块，其他模块也类似\n```\nbrew install php55-mysql\nbrew install php55-mongo\n```\n\n## MySQL\n\nmac不自带mysql，这里需要重新安装，方法依然很简单\n```\nbrew install mysql\nunset TMPDIR\nmysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\nsudo chown -R your_user /usr/local/var/mysql/\n```\n\n第一句是安装，后面的是确保正常使用。然后是启动命令\n\n`mysql.server start`\n最好给mysql设个密码，方法如下\n\n`mysqladmin -u root password 'xxx'`\n如果想修改mysql的配置，在`/usr/local/etc`下建立一个`my.cnf`，例如增加log\n\n[mysqld]\n`general-log`\n`general_log_file = /usr/local/var/log/mysqld.log`\n## MongoDB\n\nMongoDB可以说是最简单的一个，直接执行\n\n`brew install mongodb`\n启动方法\n\n`mongod --fork`\n## PHPMyAdmin\n\n`phpmyadmin`几乎是管理`mysql`最容易的web应用了吧，每次我都顺道装上。\n\n1.去官网下载最新的版本\n2.解压到`~/Sites/phpmyadmin`下\n3.在`phpmyadmin`目录下创建一个可写的`config`目录\n4.打开`http://localhost/phpmyadmin/setup`，安装一个服务，最后保存（这里只需要输入帐号密码就够了）\n5.将`config`下生成的`config.inc.php`移到`phpmyadmin`根目录下\n6.删除`config`\n\n这样就装好了，虽然可能有点小复杂，但是来一次就习惯了。\n\n这里很可能会遇到2002错误，就是找不到mysql.sock的问题，用下面方法解决\n\n`sudo mkdir /var/mysql`\n`sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock`\n## RockMongo\n\nRockMongo是MongoDB很好用的一个web应用，安装也很容易\n\n1.去官网下载最新版本\n2.解压到`~/Sites/rockmongo`下\n3.运行`http://localhost/rockmongo`即可\n\n完成\n\n这样就在mac下配置好一个php开发环境了，enjoy it!\n","source":"_posts/2015/201507/20150723-1.md","raw":"layout: post\ntitle: Mac下使用Brew搭建PHP(LNMP/LAMP)开发环境\ndate: 2015-07-23 11:22:12\ntags:\n---\nMac下搭建lamp开发环境很容易，有xampp和mamp现成的集成环境。但是集成环境对于经常需要自定义一些配置的开发者来说会非常麻烦，而且Mac本身自带apache和php，在brew的帮助下非常容易手动搭建，可控性很高。\n\n## Brew\n\nbrew对于mac，就像apt-get对于ubuntu，安装软件的好帮手，不能方便更多…\n\nbrew的安装方式如下：\n\n`ruby -e \"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)\"`\nbrew常用选项\n```\nbrew install xxx\nbrew uninstall xxx\nbrew list \nbrew update xxx\n```\n\n## Apache || Nginx\n\n### Apache\n\nApache的话使用mac自带的基本就够了，我的系统是10.9，可以使用以下命令控制Apache\n```\nsudo apachectl start\nsudo apachectl restart\nsudo apachectl stop\n```\n\n唯一要改的是主目录，mac默认在home下有个sites（站点）目录，访问路径是\n\n`http://localhost/~user_name`\n这样很不适合做开发用，修改/etc/apache2/httpd.conf内容\n```\nDocumentRoot \"/Users/username/Sites\"\n<Directory />\n    Options Indexes MultiViews\n    AllowOverride All\n    Order allow,deny\n    Allow from all\n</Directory>\n```\n\n这样sites目录就是网站根目录了，代码都往这个下头丢\n\n### Nginx\n\n要使用Nginx也比较方便，首先安装\n\n`brew install nginx`\n启动关闭Nginx的命令如下（如果想要监听80端口，必须以管理员身份运行）\n\n#打开 nginx\n`sudo nginx`\n#重新加载配置|重启|停止|退出 nginx\n`nginx -s reload|reopen|stop|quit`\n#测试配置是否有语法错误\n`nginx -t`\n配置Nginx\n\n`cd /usr/local/etc/nginx/`\n`mkdir conf.d`\n修改Nginx配置文件\n\n`vim nginx.conf`\n主要修改位置是最后的include\n```\nworker_processes  1;  \n\nerror_log       /usr/local/var/log/nginx/error.log warn;\n\npid        /usr/local/var/run/nginx.pid;\n\nevents {\n    worker_connections  256;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log      /usr/local/var/log/nginx/access.log main;\n    port_in_redirect off;\n    sendfile        on; \n    keepalive_timeout  65; \n\n    include /usr/local/etc/nginx/conf.d/*.conf;\n}\n```\n\n修改自定义文件\n\n`vim ./conf.d/default.conf`\n增加一个监听端口\n```\nserver {\n    listen       80;\n    server_name  localhost;\n\n    root /Users/username/Sites/; # 该项要修改为你准备存放相关网页的路径\n\n    location / { \n        index index.php;\n        autoindex on; \n    }   \n\n    #proxy the php scripts to php-fpm  \n    location ~ \\.php$ {\n        include /usr/local/etc/nginx/fastcgi.conf;\n        fastcgi_intercept_errors on; \n        fastcgi_pass   127.0.0.1:9000; \n    }   \n\n}\n```\n这个时候还不能访问php站点，因为还没有开启php-fpm。\n\n虽然mac 10.9自带了php-fpm，但是由于我们使用了最新的PHP，PHP中自带php-fpm，所以使用PHP中的php-fpm可以保证版本的一致。\n\n这里的命令在安装完下一步的php后再执行\n```\nsudo nginx\nsudo php-fpm -D\n```\n\n## PHP\n\nPHP在mac下默认安装了，但是不好控制版本，利用brew可以再mac下安装最新版本，甚至是多个版本，我装了php5.5\n```\nbrew update\nbrew tap homebrew/dupes\nbrew tap josegonzalez/homebrew-php\n# brew install php55 --with-fpm #Nginx\nbrew install php55 #Apache\n```\n\n然后修改php的cli路径和apache使用的php模块。在.bashrc或.zshrc里头加以下内容\n\n`#export PATH=\"$(brew --prefix josegonzalez/php/php55)/bin:$PATH\" `\n`export PATH=\"/usr/local/bin:/usr/local/sbin:$PATH\"`\n就用刚刚安装的php代替了系统默认cli的php版本。然后在/etc/apache2/httpd.conf下增加\n\n`LoadModule php5_module /usr/local/Cellar/php55/5.5.8/libexec/apache2/libphp5.so`\n这样就对apache使用的php版本也进行了修改。\n\n后面会用到mongo和mysql，所以可以直接利用下面命令安装php模块，其他模块也类似\n```\nbrew install php55-mysql\nbrew install php55-mongo\n```\n\n## MySQL\n\nmac不自带mysql，这里需要重新安装，方法依然很简单\n```\nbrew install mysql\nunset TMPDIR\nmysql_install_db --verbose --user=`whoami` --basedir=\"$(brew --prefix mysql)\" --datadir=/usr/local/var/mysql --tmpdir=/tmp\nsudo chown -R your_user /usr/local/var/mysql/\n```\n\n第一句是安装，后面的是确保正常使用。然后是启动命令\n\n`mysql.server start`\n最好给mysql设个密码，方法如下\n\n`mysqladmin -u root password 'xxx'`\n如果想修改mysql的配置，在`/usr/local/etc`下建立一个`my.cnf`，例如增加log\n\n[mysqld]\n`general-log`\n`general_log_file = /usr/local/var/log/mysqld.log`\n## MongoDB\n\nMongoDB可以说是最简单的一个，直接执行\n\n`brew install mongodb`\n启动方法\n\n`mongod --fork`\n## PHPMyAdmin\n\n`phpmyadmin`几乎是管理`mysql`最容易的web应用了吧，每次我都顺道装上。\n\n1.去官网下载最新的版本\n2.解压到`~/Sites/phpmyadmin`下\n3.在`phpmyadmin`目录下创建一个可写的`config`目录\n4.打开`http://localhost/phpmyadmin/setup`，安装一个服务，最后保存（这里只需要输入帐号密码就够了）\n5.将`config`下生成的`config.inc.php`移到`phpmyadmin`根目录下\n6.删除`config`\n\n这样就装好了，虽然可能有点小复杂，但是来一次就习惯了。\n\n这里很可能会遇到2002错误，就是找不到mysql.sock的问题，用下面方法解决\n\n`sudo mkdir /var/mysql`\n`sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock`\n## RockMongo\n\nRockMongo是MongoDB很好用的一个web应用，安装也很容易\n\n1.去官网下载最新版本\n2.解压到`~/Sites/rockmongo`下\n3.运行`http://localhost/rockmongo`即可\n\n完成\n\n这样就在mac下配置好一个php开发环境了，enjoy it!\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjic000npgwiwemq2ydq"},{"layout":"post","title":"MySQL ERROR 1044 (42000)","date":"2015-07-24T07:59:09.000Z","_content":"\n### 问题描述：\n> 在MySQL控制台下创建数据库出现以下信息：\n> mysql> CREATE DATABASE uiste; \n> ERROR 1044 (42000): Access denied for user ''@'localhost' to database 'uiste'\n\n###  解决方法：\n执行以下命令进入控制台：\n\n<!-- more -->\n\n```\nmysql --user=root -p\n输入root用户的密码即可进入mysql控制台：\n创建数据库：\ncreate database uiste;\n显示所有数据库：\nshow databases;\n```\n","source":"_posts/2015/201507/20150724-1.md","raw":"layout: post\ntitle: MySQL ERROR 1044 (42000)\ndate: 2015-07-24 15:59:09\ntags:\n- MySQL\n- PHP\ncategories:\n- PHP\n---\n\n### 问题描述：\n> 在MySQL控制台下创建数据库出现以下信息：\n> mysql> CREATE DATABASE uiste; \n> ERROR 1044 (42000): Access denied for user ''@'localhost' to database 'uiste'\n\n###  解决方法：\n执行以下命令进入控制台：\n\n<!-- more -->\n\n```\nmysql --user=root -p\n输入root用户的密码即可进入mysql控制台：\n创建数据库：\ncreate database uiste;\n显示所有数据库：\nshow databases;\n```\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjic000opgwifmu82ihe"},{"layout":"post","title":"MySQL数据库基本操作","date":"2015-07-24T13:01:20.000Z","_content":"### 数据库操作\n#### 连接数据库：\n```\n/Applications/XAMPP/xamppfiles/bin/mysql -uroot -p123456\n```\n#### 创建数据库\n```\nmysql> create database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n```\n#### 选择数据库\n\n<!-- more -->\n\n```\nmysql> use uiste;\nDatabase changed\n```\n#### 创建数据表\n```\nmysql> create table uiste_stu(\n    ->      id int not null auto_increment primary key,\n    ->      name char(10) not null,\n    ->      sex char(1) not null default '男',\n    ->      age tinyint not null,\n    ->      score decimal(3,1)\n    ->      );\nQuery OK, 0 rows affected (0.02 sec)\n```\n#### 查看所有表：\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| uiste_stu       |\n+-----------------+\n1 row in set (0.00 sec)\n```\n#### 显示创建表的SQL语句\n语法：show create table 表名 [\\G];\n```\nmysql> show create table uiste_stu \\G;\n*************************** 1. row ***************************\n       Table: uiste_stu\nCreate Table: CREATE TABLE `uiste_stu` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` char(10) NOT NULL,\n  `sex` char(1) NOT NULL DEFAULT '男',\n  `age` tinyint(4) NOT NULL,\n  `score` decimal(3,1) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR: \nNo query specified\n```\n#### 删除表\n语法：drop table 表1,表2,表3;\n```\nmysql> drop tabel stu;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\nEmpty set (0.00 sec) \n```\n### 数据表操作\n#### 显示数据表结构\n```\nmysql> describe uiste_stu;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | char(10)     | NO   |     | NULL    |                |\n| sex   | char(1)      | NO   |     | 男      |                |\n| age   | tinyint(4)   | NO   |     | NULL    |                |\n| score | decimal(3,1) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n```\n#### 插入数据\n语法：insert into 表名  (字段1,字段2) values (值1,值2);\n```\nmysql> insert into uiste_stu (id,name,sex,age,score) values(2,'杜敏',' 女',22,59.9);\nQuery OK, 1 row affected (0.01 sec)\n```\n*插入字段可以和数据库中的字符顺序不一致，但是值需要和字段的顺序一致；\n```\ninsert into uiste_stu (name,id,sex,age,score) values('钟程程',3,'女',23,79.9);\n```\n*插入字段是可以省略的，插入的值和数据表中的字段顺序和个数是一致的；\n```\ninsert into uiste_stu values(4,'赵哥','男',45,19.9);\n```\n*自动增长的插入\n```\ninsert into uiste_stu values(null,'圆哥','女',18,89.9);\n```\n*默认值的插入（default不带分号）\n```\ninsert into uiste_stu values(6,'张宝',default,28,9.9);\n```\n#### 修改数据\n语法：update  表名 set 字段1=值1,字段2=值2  where  条件;\n*将赵哥的性别改为女;\n```\nmysql> update uiste_stu set sex='女' where name='赵哥';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```\n*若不加限定条件，将表中所有字段进行更改；\n\n#### 删除数据\n语法：delete from 表名 [where 条件];\n*删除id为6的信息\n```\nmysql> delete from uiste_stu where id=6;\n```\n#### 查询数据\n语法：select 列名 from 表名 [where 条件] [order by 字段 asc|desc] [limit  起始位置,获取条数];\n默认升序：asc     降序：desc    \nlimit 限制：限制取几条数据\n*查询所有学生的姓名和性别\n```\nmysql> select name,sex from uiste_stu;\n```\n*查询所有学生的所有字段\n```\nmysql> select id,name,sex,age,score from uiste_stu;\nmysql> select * from uiste_stu;\n```\n*查询所有男生的信息\n```\nmysql> select * from uiste_stu where sex='男';\n```\n*查询所有分数大于60分的女生\n```\nmysql> select * from uiste_stu where sex='女' and score>=60;\n```\n*查询将所有分数大于60分的学生的信息，按分数从高到低排序\n```\nmysql> select * from uiste_stu where score>=60 order by score desc;\n```\n*查询数据表中的前三条数据\n```\nmysql> select * from uiste_stu limit 3;\n```\n*查询第二条开始往后的三条数据(第一条是0)\n```\nmysql> select * from uiste_stu limit 1,3;\n```\n*查询分数前三名的学生信息\n```\nmysql> select * from uiste_stu order by score desc limit 3;\n```\n*最后查询所有的数据\n```\nmysql> select * from uiste_stu;\n+----+-----------+-----+-----+-------+\n| id | name      | sex | age | score |\n+----+-----------+-----+-----+-------+\n|  1 | 小兰      | 男  |  25 |  98.7 |\n|  2 | 杜敏      | 女  |  22 |  59.9 |\n|  3 | 钟程程    | 女  |  23 |  79.9 |\n|  4 | 赵哥      | 女  |  45 |  19.9 |\n|  5 | 圆哥      | 女  |  18 |  89.9 |\n|  6 | 张宝      | 男  |  28 |   9.9 |\n+----+-----------+-----+-----+-------+\n6 rows in set (0.00 sec)\n```\n### 聚合函数\n· sum():求和\n```\nmysql> select sum(score) from uiste_stu;\n```\n· avg():求平均值\n```\nmysql> select avg(score) from uiste_stu;\n```\n· max():求最大值\n```\nmysql> select max(score) from uiste_stu;\n```\n· min():求最小值(不算null)\n```\nmysql> select min(score) from uiste_stu;\n```\n· count():求记录数\n```\nmysql> select count(*) from uiste_stu;\n```\n### 比较运算符\n=   等于和赋值\n<>  不等于\n· 逻辑运算符\nand  与\nor     或\nnot   非\n### 数据库常见问题\n创建的数据库已存在\n```\nERROR 1007 (HY000): Can't create database 'uiste'; database exists\n```\n创建的数据库是一个关键字，解决在名字上加上反引号``\n```\ncreate database `create`;     反引号可以创建更为复杂的字符和汉字\n```\ndelete 和 drop 删除表名的区别\ndelete删除表的内容，表的结构还保留，drop 删除整个表\n创建数据库或者数据表必要时进行的判断\n```\ncreate database if not exists uiste\n```\n**一张表只能有一个主键，但是主键可以由多个字段组成，如：**\n```\nCREATE TABLE `products_description` (\n  `products_id` int(11) NOT NULL,\n  `language_id` int(11) NOT NULL default '1',\n  `products_name` varchar(64) NOT NULL default '',\n  PRIMARY KEY  (`products_id`,`language_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```","source":"_posts/2015/201507/20150724-2.md","raw":"layout: post\ntitle: MySQL数据库基本操作\ndate: 2015-07-24 21:01:20\ntags:\n- MySQL\n- PHP\ncategories:\n- PHP\n---\n### 数据库操作\n#### 连接数据库：\n```\n/Applications/XAMPP/xamppfiles/bin/mysql -uroot -p123456\n```\n#### 创建数据库\n```\nmysql> create database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n```\n#### 选择数据库\n\n<!-- more -->\n\n```\nmysql> use uiste;\nDatabase changed\n```\n#### 创建数据表\n```\nmysql> create table uiste_stu(\n    ->      id int not null auto_increment primary key,\n    ->      name char(10) not null,\n    ->      sex char(1) not null default '男',\n    ->      age tinyint not null,\n    ->      score decimal(3,1)\n    ->      );\nQuery OK, 0 rows affected (0.02 sec)\n```\n#### 查看所有表：\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| uiste_stu       |\n+-----------------+\n1 row in set (0.00 sec)\n```\n#### 显示创建表的SQL语句\n语法：show create table 表名 [\\G];\n```\nmysql> show create table uiste_stu \\G;\n*************************** 1. row ***************************\n       Table: uiste_stu\nCreate Table: CREATE TABLE `uiste_stu` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` char(10) NOT NULL,\n  `sex` char(1) NOT NULL DEFAULT '男',\n  `age` tinyint(4) NOT NULL,\n  `score` decimal(3,1) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR: \nNo query specified\n```\n#### 删除表\n语法：drop table 表1,表2,表3;\n```\nmysql> drop tabel stu;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show tables;\nEmpty set (0.00 sec) \n```\n### 数据表操作\n#### 显示数据表结构\n```\nmysql> describe uiste_stu;\n+-------+--------------+------+-----+---------+----------------+\n| Field | Type         | Null | Key | Default | Extra          |\n+-------+--------------+------+-----+---------+----------------+\n| id    | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name  | char(10)     | NO   |     | NULL    |                |\n| sex   | char(1)      | NO   |     | 男      |                |\n| age   | tinyint(4)   | NO   |     | NULL    |                |\n| score | decimal(3,1) | YES  |     | NULL    |                |\n+-------+--------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n```\n#### 插入数据\n语法：insert into 表名  (字段1,字段2) values (值1,值2);\n```\nmysql> insert into uiste_stu (id,name,sex,age,score) values(2,'杜敏',' 女',22,59.9);\nQuery OK, 1 row affected (0.01 sec)\n```\n*插入字段可以和数据库中的字符顺序不一致，但是值需要和字段的顺序一致；\n```\ninsert into uiste_stu (name,id,sex,age,score) values('钟程程',3,'女',23,79.9);\n```\n*插入字段是可以省略的，插入的值和数据表中的字段顺序和个数是一致的；\n```\ninsert into uiste_stu values(4,'赵哥','男',45,19.9);\n```\n*自动增长的插入\n```\ninsert into uiste_stu values(null,'圆哥','女',18,89.9);\n```\n*默认值的插入（default不带分号）\n```\ninsert into uiste_stu values(6,'张宝',default,28,9.9);\n```\n#### 修改数据\n语法：update  表名 set 字段1=值1,字段2=值2  where  条件;\n*将赵哥的性别改为女;\n```\nmysql> update uiste_stu set sex='女' where name='赵哥';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```\n*若不加限定条件，将表中所有字段进行更改；\n\n#### 删除数据\n语法：delete from 表名 [where 条件];\n*删除id为6的信息\n```\nmysql> delete from uiste_stu where id=6;\n```\n#### 查询数据\n语法：select 列名 from 表名 [where 条件] [order by 字段 asc|desc] [limit  起始位置,获取条数];\n默认升序：asc     降序：desc    \nlimit 限制：限制取几条数据\n*查询所有学生的姓名和性别\n```\nmysql> select name,sex from uiste_stu;\n```\n*查询所有学生的所有字段\n```\nmysql> select id,name,sex,age,score from uiste_stu;\nmysql> select * from uiste_stu;\n```\n*查询所有男生的信息\n```\nmysql> select * from uiste_stu where sex='男';\n```\n*查询所有分数大于60分的女生\n```\nmysql> select * from uiste_stu where sex='女' and score>=60;\n```\n*查询将所有分数大于60分的学生的信息，按分数从高到低排序\n```\nmysql> select * from uiste_stu where score>=60 order by score desc;\n```\n*查询数据表中的前三条数据\n```\nmysql> select * from uiste_stu limit 3;\n```\n*查询第二条开始往后的三条数据(第一条是0)\n```\nmysql> select * from uiste_stu limit 1,3;\n```\n*查询分数前三名的学生信息\n```\nmysql> select * from uiste_stu order by score desc limit 3;\n```\n*最后查询所有的数据\n```\nmysql> select * from uiste_stu;\n+----+-----------+-----+-----+-------+\n| id | name      | sex | age | score |\n+----+-----------+-----+-----+-------+\n|  1 | 小兰      | 男  |  25 |  98.7 |\n|  2 | 杜敏      | 女  |  22 |  59.9 |\n|  3 | 钟程程    | 女  |  23 |  79.9 |\n|  4 | 赵哥      | 女  |  45 |  19.9 |\n|  5 | 圆哥      | 女  |  18 |  89.9 |\n|  6 | 张宝      | 男  |  28 |   9.9 |\n+----+-----------+-----+-----+-------+\n6 rows in set (0.00 sec)\n```\n### 聚合函数\n· sum():求和\n```\nmysql> select sum(score) from uiste_stu;\n```\n· avg():求平均值\n```\nmysql> select avg(score) from uiste_stu;\n```\n· max():求最大值\n```\nmysql> select max(score) from uiste_stu;\n```\n· min():求最小值(不算null)\n```\nmysql> select min(score) from uiste_stu;\n```\n· count():求记录数\n```\nmysql> select count(*) from uiste_stu;\n```\n### 比较运算符\n=   等于和赋值\n<>  不等于\n· 逻辑运算符\nand  与\nor     或\nnot   非\n### 数据库常见问题\n创建的数据库已存在\n```\nERROR 1007 (HY000): Can't create database 'uiste'; database exists\n```\n创建的数据库是一个关键字，解决在名字上加上反引号``\n```\ncreate database `create`;     反引号可以创建更为复杂的字符和汉字\n```\ndelete 和 drop 删除表名的区别\ndelete删除表的内容，表的结构还保留，drop 删除整个表\n创建数据库或者数据表必要时进行的判断\n```\ncreate database if not exists uiste\n```\n**一张表只能有一个主键，但是主键可以由多个字段组成，如：**\n```\nCREATE TABLE `products_description` (\n  `products_id` int(11) NOT NULL,\n  `language_id` int(11) NOT NULL default '1',\n  `products_name` varchar(64) NOT NULL default '',\n  PRIMARY KEY  (`products_id`,`language_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjif000spgwixwbwpxy2"},{"layout":"post","title":"hexo分类和标签无法显示","date":"2015-07-24T14:13:33.000Z","_content":"hexo 下的分类和标签无法显示，解决方法\n## 步骤一\n新建一个页面，命名为 tags 。命令如下：\n```\n$ hexo new page \"tags\"\n```\n## 步骤二\n编辑刚刚新建的页面，将页面的类型设置为tags，主题将自动为这个页面显示标签云。页面内容如下：\n```\ntitle: Tagcloud\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---\n```\n\n<!-- more -->\n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：\n```\ntitle: Tagcloud\ndate: 2015-7-24 22:21:13\ntype: \"tags\"\ncomment: false\n---\n```\n## 步骤三\n在菜单中添加链接。编辑 主题配置文件 ，添加 tags 到 menu 中，如下:\n```\nmenu:\n  home: /\n  categories: /categories\n  about: /about\n  archives: /archives\n  tags: /tags\n  #commonweal: /404.html\n```\n**分类的解决方法同标签**","source":"_posts/2015/201507/20150724-3.md","raw":"layout: post\ntitle: hexo分类和标签无法显示\ndate: 2015-07-24 22:13:33\ntags:\n- hexo\ncategories:\n- hexo\n---\nhexo 下的分类和标签无法显示，解决方法\n## 步骤一\n新建一个页面，命名为 tags 。命令如下：\n```\n$ hexo new page \"tags\"\n```\n## 步骤二\n编辑刚刚新建的页面，将页面的类型设置为tags，主题将自动为这个页面显示标签云。页面内容如下：\n```\ntitle: Tagcloud\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---\n```\n\n<!-- more -->\n\n注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：\n```\ntitle: Tagcloud\ndate: 2015-7-24 22:21:13\ntype: \"tags\"\ncomment: false\n---\n```\n## 步骤三\n在菜单中添加链接。编辑 主题配置文件 ，添加 tags 到 menu 中，如下:\n```\nmenu:\n  home: /\n  categories: /categories\n  about: /about\n  archives: /archives\n  tags: /tags\n  #commonweal: /404.html\n```\n**分类的解决方法同标签**","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjih000tpgwimcyxh58w"},{"layout":"post","title":"Hexo SEO优化","date":"2015-07-25T15:25:36.000Z","_content":"\n当我们搭建一个网站之后，如果没有做一些相关的搜索引擎优化SEO，那么我们的网站是很难获取来自搜索引擎的流量的，用户很难在搜索引擎上搜索到我们网站的内容，所以接下来我们要为Hexo网站做一些简单的搜索优化。\n\n----------\n\n##### 将网站链接提交到百度\n百度搜索引擎提交入口\n有三种验证方式，我选择Html标签验证，在themes\\next\\layout\\_partials\\head.swing中添加验证代码：\n\n    <meta name=\"baidu-site-verification\" content=\"s8Pe1TBqyy\" />\n\n然后点击完成验证，通过即可。同理将站点链接也提交到Google和搜狗，此处不表。\n##### 给站点添加sitemap\nHexo安装sitemap\n\n    npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\n\n    npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n\n2、 在站点配置文件_config.yml中添加以下代码\n```\n# 自动生成sitemap\nsitemap:\npath: sitemap.xml\nbaidusitemap:\npath: baidusitemap.xml\n```\n<!-- more -->\n3、 修改站点配置文件_config.yml\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite\n```\n4、 Hexo编译\n```\nhexo clean\nhexo g\n```\n会/public目录下生成sitemap.xml和baidusitemap.xml，这就是你的站点地图。\n5、 提交sitemap到站长平台\n百度站长平台sitemap提交是邀请制的，并没有对所有站长开放，只有网站到一定等级百度才会在你后台开放提交sitemap的入口。\n##### 添加蜘蛛协议robots.txt\n1、 新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下。\n```\n# hexo robots.txt\nUser-agent: *\nAllow: /\nAllow: /categories/\nAllow: /tags/\nAllow: /archives/\nAllow: /about/\nDisallow: /vendors/\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /vendors/\nDisallow: /fancybox/\nSitemap: http://www.zaoanx.com/sitemap.xml\nSitemap: http://www.zaoanx.com/baidusitemap.xml\n```\n2、 在百度站长平台监测并更新Robots\n提示检测到您更新了Robots文件即成功。\n##### 给出站链接添加 “nofollow” 标签\nnofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。\n以hexo的NexT主题为例，需要修改两处\n1、 找到footer.swig，路径在your-hexo-site\\themes\\next\\layout\\_partials，将下面代码\n\n    {{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\">Hexo</a>') }}\n\n改成\n\n    {{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\" rel=\"external nofollow\">Hexo</a>') }}\n\n将下面代码\n\n    <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n\n改成\n\n    <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" rel=\"external nofollow\">\n\n2、 修改sidebar.swig文件，路径在your-hexo-site\\themes\\next\\layout_macro，将下面代码\n\n    <a href=\"{{ link }}\" target=\"_blank\">{{ name }}</a>\n\n改成\n\n    <a href=\"{{ link }}\" target=\"_blank\" rel=\"external nofollow\">{{ name }}</a>\n\n将下面代码\n\n    <a href=\"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0\" class=\"cc-opacity\" target=\"_blank\">\n\n改成\n\n    <a href=\"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0\" class=\"cc-opacity\" target=\"_blank\" rel=\"external nofollow\">\n\n可以使用chinaz站长工具进行各项检测。\n##### keywords 和 description\n在\\scaffolds\\post.md中添加如下代码，用于生成的文章中添加关键字和描述。\n```\nkeywords: \ndescription:\n```\n在\\themes\\next\\layout\\_partials\\head.swig有如下代码，用于生成文章的keywords。暂时还没找到生成description的位置。\n```\n{% if page.keywords %}\n  <meta name=\"keywords\" content=\"{{ page.keywords }}\" />\n{% elif page.tags and page.tags.length %}\n  <meta name=\"keywords\" content=\"{% for tag in page.tags %}{{ tag.name }},{% endfor %}\" />\n{% elif theme.keywords %}\n  <meta name=\"keywords\" content=\"{{ theme.keywords }}\" />\n{% endif %}\n```\n然后在\\themes\\next\\layout\\_macro\\post.swig中找到这个位置：\n\n    {% if post.description %}\n\n将以下代码去掉：\n```\n{% if post.description %}\n  {{ post.description }}\n  <div class=\"post-more-link text-center\">\n\t<a class=\"btn\" href=\"{{ url_for(post.path) }}\">\n\t  {{ __('post.read_more') }} &raquo;\n\t</a>\n  </div>\n```\n否则首页的文章摘要就会变成文章的description。\n##### 首页title的优化\n更改index.swig文件，文件路径是your-hexo-site\\themes\\next\\layout，将下面代码\n\n    {% block title %} {{ config.title }} {% endblock %}\n\n改成\n\n    {% block title %} {{ config.title }} - {{ theme.description }} {% endblock %}\n\n这时候你的首页标题会更符合网站名称 - 网站描述这习惯。\n##### 修改文章链接\nHEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可.\n","source":"_posts/2015/201507/20150725-1.md","raw":"layout: post\ntitle: Hexo SEO优化 \ndate: 2015-07-25 23:25:36\ntags:\n- hexo\n- seo\n---\n\n当我们搭建一个网站之后，如果没有做一些相关的搜索引擎优化SEO，那么我们的网站是很难获取来自搜索引擎的流量的，用户很难在搜索引擎上搜索到我们网站的内容，所以接下来我们要为Hexo网站做一些简单的搜索优化。\n\n----------\n\n##### 将网站链接提交到百度\n百度搜索引擎提交入口\n有三种验证方式，我选择Html标签验证，在themes\\next\\layout\\_partials\\head.swing中添加验证代码：\n\n    <meta name=\"baidu-site-verification\" content=\"s8Pe1TBqyy\" />\n\n然后点击完成验证，通过即可。同理将站点链接也提交到Google和搜狗，此处不表。\n##### 给站点添加sitemap\nHexo安装sitemap\n\n    npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\n\n    npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n\n2、 在站点配置文件_config.yml中添加以下代码\n```\n# 自动生成sitemap\nsitemap:\npath: sitemap.xml\nbaidusitemap:\npath: baidusitemap.xml\n```\n<!-- more -->\n3、 修改站点配置文件_config.yml\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite\n```\n4、 Hexo编译\n```\nhexo clean\nhexo g\n```\n会/public目录下生成sitemap.xml和baidusitemap.xml，这就是你的站点地图。\n5、 提交sitemap到站长平台\n百度站长平台sitemap提交是邀请制的，并没有对所有站长开放，只有网站到一定等级百度才会在你后台开放提交sitemap的入口。\n##### 添加蜘蛛协议robots.txt\n1、 新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下。\n```\n# hexo robots.txt\nUser-agent: *\nAllow: /\nAllow: /categories/\nAllow: /tags/\nAllow: /archives/\nAllow: /about/\nDisallow: /vendors/\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /vendors/\nDisallow: /fancybox/\nSitemap: http://www.zaoanx.com/sitemap.xml\nSitemap: http://www.zaoanx.com/baidusitemap.xml\n```\n2、 在百度站长平台监测并更新Robots\n提示检测到您更新了Robots文件即成功。\n##### 给出站链接添加 “nofollow” 标签\nnofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。\n以hexo的NexT主题为例，需要修改两处\n1、 找到footer.swig，路径在your-hexo-site\\themes\\next\\layout\\_partials，将下面代码\n\n    {{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\">Hexo</a>') }}\n\n改成\n\n    {{ __('footer.powered', '<a class=\"theme-link\" href=\"http://hexo.io\" rel=\"external nofollow\">Hexo</a>') }}\n\n将下面代码\n\n    <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n\n改成\n\n    <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" rel=\"external nofollow\">\n\n2、 修改sidebar.swig文件，路径在your-hexo-site\\themes\\next\\layout_macro，将下面代码\n\n    <a href=\"{{ link }}\" target=\"_blank\">{{ name }}</a>\n\n改成\n\n    <a href=\"{{ link }}\" target=\"_blank\" rel=\"external nofollow\">{{ name }}</a>\n\n将下面代码\n\n    <a href=\"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0\" class=\"cc-opacity\" target=\"_blank\">\n\n改成\n\n    <a href=\"http://creativecommons.org/licenses/{{ theme.creative_commons }}/4.0\" class=\"cc-opacity\" target=\"_blank\" rel=\"external nofollow\">\n\n可以使用chinaz站长工具进行各项检测。\n##### keywords 和 description\n在\\scaffolds\\post.md中添加如下代码，用于生成的文章中添加关键字和描述。\n```\nkeywords: \ndescription:\n```\n在\\themes\\next\\layout\\_partials\\head.swig有如下代码，用于生成文章的keywords。暂时还没找到生成description的位置。\n```\n{% if page.keywords %}\n  <meta name=\"keywords\" content=\"{{ page.keywords }}\" />\n{% elif page.tags and page.tags.length %}\n  <meta name=\"keywords\" content=\"{% for tag in page.tags %}{{ tag.name }},{% endfor %}\" />\n{% elif theme.keywords %}\n  <meta name=\"keywords\" content=\"{{ theme.keywords }}\" />\n{% endif %}\n```\n然后在\\themes\\next\\layout\\_macro\\post.swig中找到这个位置：\n\n    {% if post.description %}\n\n将以下代码去掉：\n```\n{% if post.description %}\n  {{ post.description }}\n  <div class=\"post-more-link text-center\">\n\t<a class=\"btn\" href=\"{{ url_for(post.path) }}\">\n\t  {{ __('post.read_more') }} &raquo;\n\t</a>\n  </div>\n```\n否则首页的文章摘要就会变成文章的description。\n##### 首页title的优化\n更改index.swig文件，文件路径是your-hexo-site\\themes\\next\\layout，将下面代码\n\n    {% block title %} {{ config.title }} {% endblock %}\n\n改成\n\n    {% block title %} {{ config.title }} - {{ theme.description }} {% endblock %}\n\n这时候你的首页标题会更符合网站名称 - 网站描述这习惯。\n##### 修改文章链接\nHEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname 的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可.\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjij000xpgwip4bv5fhu"},{"layout":"post","title":"CSS默认样式表","date":"2015-07-30T14:43:11.000Z","_content":"网页设计，让人最头疼的莫过于让页面兼容各大浏览器，准确些是兼容它们“默认”的CSS样式表。\n\n#### 第一部分\n\n##### 第一种方式\n```\n* {margin:0px; padding:0px;}\n```\n>这行代码虽然简单，但却让网页解析太慢。\n于是出现了几种CSS重置方法：\n\n##### 第二种方式\n\n<!-- more -->\n\n```\nbody, html, div, blockquote, img, label, p, h1, h2, h3, h4, h5, h6, pre, ul, ol,\nli, dl, dt, dd, form, a, fieldset, input, th, td\n{margin: 0; padding: 0; border: 0; outline: none;}\nbody{line-height: 1;font-size: 88% /* Decide for yourself if you want to include this. */;}\nh1, h2, h3, h4, h5, h6{font-size: 100%;padding: .6em 0;margin: 0 15px;}\nul, ol{list-style: none;}\na{color: black;text-decoration: none;}\na:hover\n{text-decoration: underline;}\n.floatLeft{float: left;padding: .5em .5em .5em 0;}\n.floatRight{float: right;padding: .5em 0 .5em .5em;}\n````\n>NETTUTS上的 Jeffrey Way写了篇文章Weekend Quick Tip: Create Your Own Simple Reset.css File\n释出自己用来重置CSS样式表的方法,这个方法适用于大多数的网页设计。\n\n##### 第三种方式\n```\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, font, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        outline: 0;\n        font-size: 100%;\n        vertical-align: baseline;\n        background: transparent;\n}\nbody {line-height: 1;}\nol, ul {list-style: none;}\nblockquote, q {quotes: none;}\nblockquote:before, blockquote:after,\nq:before, q:after {content: '';content: none;}\n\n/* remember to define focus styles! */\n:focus {outline: 0;}\n\n/* remember to highlight inserts somehow! */\nins {text-decoration: none;}\ndel { text-decoration: line-through;}\n\n/* tables still need 'cellspacing=\"0\"' in the markup */\ntable {border-collapse: collapse;border-spacing: 0;}\n```\n>这个重置的太多\n\n##### 第四种方式\n```\nbody,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td {\n        margin:0;\n        padding:0;\n}\ntable {border-collapse:collapse;border-spacing:0;}\nfieldset,img { border:0;}\naddress,caption,cite,code,dfn,em,strong,th,var {font-style:normal;\nfont-weight:normal;}\nol,ul {list-style:none;}\ncaption,th {text-align:left;}\nh1,h2,h3,h4,h5,h6 {font-size:100%;font-weight:normal;}\nq:before,q:after {content:'';}\nabbr,acronym { border:0;}\n```\n\n#### 第二部分\n##### CSS通用样式\n```\nbody,ul,ol,dl,dd,h1,h2,h3,h4,h5,h6,p,input,select,textarea,form{margin: 0; padding: 0;}\nbody{font:14px/1.5 \"宋体\";}\nimg{border:none;}\nul,ol{list-style:none;}\ninput,select,textarea{outline:none;border:none;background:none;}\ntextarea{resize:none;}\na{text-decoration:none;}\n\n/*清浮动*/\n.clearfix:after{content:\"\";*display:block;*clear:both;}\n.clearfix{zoom:1;}\n```\n##### 选择\n```\n::selection {background-color:#669900; color:#ffffff; text-shadow:none;}\n::-moz-selection {background-color:#669900; color:#ffffff;text-shadow:none;}\n```\n\n##### 去掉a的下划线\n```\na {blr:expression(this.onFocus=this.blur())} /*if IE*/\na {outline:none;}/*if 火狐等现代浏览器浏览器*/ \n```\n\n\n##### 省略号\n```\nwhite-space:nowrap;overflow:hidden;text-overflow:ellipsis;\n```\n\n##### 英文自动换行\n```\nword-break: break-all;\n```\n\n##### 强制不换行\n```\nwhite-space:nowrap;\n\n\ncontenteditable=\"true\"\n````\n\n-------------------------------------------------\n##### clearfix完整版\n```\n.clearfix:before,.clearfix:after { content:\"\"; display:table;}\n.clearfix:after{clear:both;}\n.clearfix{*zoom:1;}\n--------------------\nexpression(this.onFocus=this.blur())\n```","source":"_posts/2015/201507/20150730-1.md","raw":"layout: post\ntitle: CSS默认样式表\ndate: 2015-07-30 22:43:11\ntags:\n- CSS\ncategories:\n- CSS\n---\n网页设计，让人最头疼的莫过于让页面兼容各大浏览器，准确些是兼容它们“默认”的CSS样式表。\n\n#### 第一部分\n\n##### 第一种方式\n```\n* {margin:0px; padding:0px;}\n```\n>这行代码虽然简单，但却让网页解析太慢。\n于是出现了几种CSS重置方法：\n\n##### 第二种方式\n\n<!-- more -->\n\n```\nbody, html, div, blockquote, img, label, p, h1, h2, h3, h4, h5, h6, pre, ul, ol,\nli, dl, dt, dd, form, a, fieldset, input, th, td\n{margin: 0; padding: 0; border: 0; outline: none;}\nbody{line-height: 1;font-size: 88% /* Decide for yourself if you want to include this. */;}\nh1, h2, h3, h4, h5, h6{font-size: 100%;padding: .6em 0;margin: 0 15px;}\nul, ol{list-style: none;}\na{color: black;text-decoration: none;}\na:hover\n{text-decoration: underline;}\n.floatLeft{float: left;padding: .5em .5em .5em 0;}\n.floatRight{float: right;padding: .5em 0 .5em .5em;}\n````\n>NETTUTS上的 Jeffrey Way写了篇文章Weekend Quick Tip: Create Your Own Simple Reset.css File\n释出自己用来重置CSS样式表的方法,这个方法适用于大多数的网页设计。\n\n##### 第三种方式\n```\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, font, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        outline: 0;\n        font-size: 100%;\n        vertical-align: baseline;\n        background: transparent;\n}\nbody {line-height: 1;}\nol, ul {list-style: none;}\nblockquote, q {quotes: none;}\nblockquote:before, blockquote:after,\nq:before, q:after {content: '';content: none;}\n\n/* remember to define focus styles! */\n:focus {outline: 0;}\n\n/* remember to highlight inserts somehow! */\nins {text-decoration: none;}\ndel { text-decoration: line-through;}\n\n/* tables still need 'cellspacing=\"0\"' in the markup */\ntable {border-collapse: collapse;border-spacing: 0;}\n```\n>这个重置的太多\n\n##### 第四种方式\n```\nbody,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td {\n        margin:0;\n        padding:0;\n}\ntable {border-collapse:collapse;border-spacing:0;}\nfieldset,img { border:0;}\naddress,caption,cite,code,dfn,em,strong,th,var {font-style:normal;\nfont-weight:normal;}\nol,ul {list-style:none;}\ncaption,th {text-align:left;}\nh1,h2,h3,h4,h5,h6 {font-size:100%;font-weight:normal;}\nq:before,q:after {content:'';}\nabbr,acronym { border:0;}\n```\n\n#### 第二部分\n##### CSS通用样式\n```\nbody,ul,ol,dl,dd,h1,h2,h3,h4,h5,h6,p,input,select,textarea,form{margin: 0; padding: 0;}\nbody{font:14px/1.5 \"宋体\";}\nimg{border:none;}\nul,ol{list-style:none;}\ninput,select,textarea{outline:none;border:none;background:none;}\ntextarea{resize:none;}\na{text-decoration:none;}\n\n/*清浮动*/\n.clearfix:after{content:\"\";*display:block;*clear:both;}\n.clearfix{zoom:1;}\n```\n##### 选择\n```\n::selection {background-color:#669900; color:#ffffff; text-shadow:none;}\n::-moz-selection {background-color:#669900; color:#ffffff;text-shadow:none;}\n```\n\n##### 去掉a的下划线\n```\na {blr:expression(this.onFocus=this.blur())} /*if IE*/\na {outline:none;}/*if 火狐等现代浏览器浏览器*/ \n```\n\n\n##### 省略号\n```\nwhite-space:nowrap;overflow:hidden;text-overflow:ellipsis;\n```\n\n##### 英文自动换行\n```\nword-break: break-all;\n```\n\n##### 强制不换行\n```\nwhite-space:nowrap;\n\n\ncontenteditable=\"true\"\n````\n\n-------------------------------------------------\n##### clearfix完整版\n```\n.clearfix:before,.clearfix:after { content:\"\"; display:table;}\n.clearfix:after{clear:both;}\n.clearfix{*zoom:1;}\n--------------------\nexpression(this.onFocus=this.blur())\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjik000zpgwi6ypqmpfs"},{"layout":"post","title":"jQuery中hover连续触发动画的bug","date":"2015-07-31T14:21:54.000Z","_content":"##### 在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如：\n\n```\njQuery(\"#nav li\").hover(function(){\n    $(this).find(\"ul:first\").slideDown(\"slow\");\n},function(){\n    $(this).find(\"ul:first\").slideUp(\"fast\");\n});\n```\n\n<!-- more -->\n\n##### 度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下：\n```\njQuery(\"#nav li\").hover(function(){\n    $(this).find(\"ul:first\").filter(':not(:animated)').slideDown(\"slow\");\n},function(){\n    $(this).find(\"ul:first\").slideUp(\"fast\");\n});\n```","source":"_posts/2015/201507/20150731-1.md","raw":"layout: post\ntitle: jQuery中hover连续触发动画的bug\ndate: 2015-07-31 22:21:54\ntags:\n- jQuery\ncategories:\n- 前端\n- jQuery\n---\n##### 在用jQuery实现下拉菜单特效时，发现鼠标连续触碰对象会导致hover事件反复发生，如：\n\n```\njQuery(\"#nav li\").hover(function(){\n    $(this).find(\"ul:first\").slideDown(\"slow\");\n},function(){\n    $(this).find(\"ul:first\").slideUp(\"fast\");\n});\n```\n\n<!-- more -->\n\n##### 度娘找到相关的解决方法，增加filter过滤到正在执行的动画模块即可，修正后的代码如下：\n```\njQuery(\"#nav li\").hover(function(){\n    $(this).find(\"ul:first\").filter(':not(:animated)').slideDown(\"slow\");\n},function(){\n    $(this).find(\"ul:first\").slideUp(\"fast\");\n});\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjim0013pgwiaf1n7l17"},{"layout":"post","title":"github 常用命令","date":"2015-07-31T15:32:35.000Z","_content":"#### 使用git在本地创建一个项目的过程\n:q 退出编辑页面\n##### 创建项目\n\n```\n$ makdir test    //创建一个项目test\n$ cd test/       //打开这个项目\n$ git clone https://github.com/uiste/test.git   //检出项目到本地\n$ ls             //即list显示当前目录中的文件名字\n$ vi README.md   //打开文件，进入编辑状态;编辑完成后 :wq 保存退出\n$ git init       //初始化\n$ touch README\t //创建README文件\n$ git status     //查看工作区状态，是否有为跟踪文件\n$ git add README //更新README文件\n$ git commit -m ‘记录修改内容’   //提交更新，并注释信息“first commit”\n$ git remote add Hexo https://github.com/uiste/Hexo.git   //连接远程github项目\n$ git push -u Hexo master   //将本地项目更新到github项目上去\n```\n\n##### 回到过去\n\n```\n$ git log  //查看提交日志，找到对应记录的修改文件，复制commit 指针\n$ git reflog //查询具体的版本号，最前面即为commit ID号\n$ git reset --hard 0ce6fd2\t//恢复到以前版本\n```\n\n##### 建立里程碑\n\n\n> 在github上打开项目首页\n> release菜单->Draft a new release\n> 版本号 @ Target:master ->Write 记录项目信息\n> Publish release 发布里程碑\n\n\n##### 分支开发\n\n> 在github客户端操作\n> 创建新分支：项目文件名 -> Manage -> 右侧Unpbulish -> Branch 建立分支名为BUG\n> 在新分支中：修改项目文件内容 -> Commit to BUG 提交修改内容到BUG分支\n> 合并分支内容：项目文件名 -> Manage -> BUG 移动到左侧Merge ，master移动到右侧Merge -> 点击Merge\n\n\n<!-- more -->\n**以下是互联网摘取信息**\n#### 最基本的命令：\n\n拷贝并跟踪远程的master分支。跟踪的好处是以后可以直接通过pull和push命令来提交或者获取远程最新的代码，而不需要指定远程分支名字。\n\n```\ngit clone \n\ngit submodule init\n\ngit submodule update\n```\n\n#### 显示信息类命令 \n\n```\ngit ls-files -u 显示冲突的文件，-s是显示标记为冲突已解决的文件\n\ngit diff 对比工作区和stage文件的差异 \ngit diff --cached 对比stage和branch之间的差异\n\ngit branch 列出当前repository下的所有branch \ngit branch --a 列出local 和remote下的所有branch\n\ngit ls-files --stage 检查保存在stage的文件\n\ngit log 显示到HEAD所指向的commit为止的所有commit记录 。使用reset HEAD~n 命令使HEAD指针向前移动，会导致HEAD之后的commit记录不会被显示。\n\ngit log -g则会查询reflog去查看最近做了哪些动作，这样可以配合git branch 恢复之前因为移动HEAD指针所丢弃的commit对象。如果reflog丢失则可以通过git fsck --full来查看没被引用的commit对象。 \ngit log -p -2 对比最新两次的commit对象 \nlog -1 HEAD\n\ngit log --pretty=oneline\n\ngit log --stat 1a410e 查看sha1为1a410e的commit对象的记录\n\ngit blame -L 12,22 sth.cs 如果你发现自己代码中 的一个方法存在缺陷,你可以用git blame来标注文件,查看那个方法的每一行分别是由谁 在哪一天修改的。下面这个例子使用了-L选项来限制输出范围在第12至22行\n```\n\n#### 创建类命令 \n\n```\ngit brach branchName 创建名为branchName的branch \ngit checkout branchName 切换到branchName的branch \ngit checkout -b 创建并切换，也就是上面两个命令的合并\n\ngit brach branchName ef71 从commit ef71创建名为branchName的branch\n```\n\n#### 撤销类命令 \n\n```\n如果是单个文件 \n1.use \"git reset HEAD <file>...\" to unstage \n如果已经用add 命令把文件加入stage了，就先需要从stage中撤销\n\n然后再从工作区撤销 \n2.use \"git checkout -- <file>...\" to discard changes in working directory\n\ngit checkout a.txt  撤销a.txt的变动（工作区上的文件） \n如果是多个文件 \ngit chenkout .\n\n如果已经commit 了，则需要 \ngit commit --amend 来修改，这个只能修改最近上一次的,也就是用一个新的提交来覆盖上一次的提交。因此如果push以后再做这个动作就会有危险\n\n$ git reset --hard HEAD 放弃工作区和index的改动,HEAD指针仍然指向当前的commit.（参照第一幅图）\n\n这条命令同时还可以用来撤销还没commit的merge,其实原理就是放弃index和工作区的改动，因为没commit的改动只存在于index和工作区中。\n\n$ git reset --hard HEAD^ 用来撤销已经commit的内容(等价于 git reset --hard HEAD~1) 。原理就是放弃工作区和index的改动，同时HEAD指针指向前一个commit对象。\n\ngit revert 也是撤销命令，区别在于reset是指向原地或者向前移动指针，git revert是创建一个commit来覆盖当前的commit,指针向后移动\n```\n\n#### 提交类命令 \n\n```\ngit add 跟踪新文件或者已有文件的改动，或者用来解决冲突\n\ngit commit 把文件从stage提交到branch\n\ngit commit -a 把修改的文件先提交到stage,然后再从stash提交到branch\n```\n\n#### 删除类命令 \n\n```\ngit rm --cached readme.txt 只从stage中删除，保留物理文件\n\ngit rm readme.txt 不但从stage中删除，同时删除物理文件\n\ngit mv a.txt b.txt 把a.txt改名为b.txt\n```\n\n#### Merge类命令\n\n```\n在冲突状态下，需要解决冲突的文件会从index打回到工作区。\n\n1.用工具或者手工解决冲突 \n2.git add 命令来表明冲突已经解决。 \n3.再次commit 已解决冲突的文件。\n\n$ git reset --hard ORIG_HEAD 用来撤销已经commit 的merge. \n$ git reset --hard HEAD 用来撤销还没commit 的merge,其实原理就是放弃index和工作区的改动。\n\ngit reset --merge ORIG_HEAD，注意其中的--hard 换成了 --merge，这样就可以避免在回滚时清除working tree。\n```\n\n![github常用命令](http://7xwlfk.com1.z0.glb.clouddn.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png)\n\n","source":"_posts/2015/201507/20150731-2.md","raw":"layout: post\ntitle: github 常用命令\ndate: 2015-07-31 23:32:35\ntags:\n- github\ncategories:\n- tool\n---\n#### 使用git在本地创建一个项目的过程\n:q 退出编辑页面\n##### 创建项目\n\n```\n$ makdir test    //创建一个项目test\n$ cd test/       //打开这个项目\n$ git clone https://github.com/uiste/test.git   //检出项目到本地\n$ ls             //即list显示当前目录中的文件名字\n$ vi README.md   //打开文件，进入编辑状态;编辑完成后 :wq 保存退出\n$ git init       //初始化\n$ touch README\t //创建README文件\n$ git status     //查看工作区状态，是否有为跟踪文件\n$ git add README //更新README文件\n$ git commit -m ‘记录修改内容’   //提交更新，并注释信息“first commit”\n$ git remote add Hexo https://github.com/uiste/Hexo.git   //连接远程github项目\n$ git push -u Hexo master   //将本地项目更新到github项目上去\n```\n\n##### 回到过去\n\n```\n$ git log  //查看提交日志，找到对应记录的修改文件，复制commit 指针\n$ git reflog //查询具体的版本号，最前面即为commit ID号\n$ git reset --hard 0ce6fd2\t//恢复到以前版本\n```\n\n##### 建立里程碑\n\n\n> 在github上打开项目首页\n> release菜单->Draft a new release\n> 版本号 @ Target:master ->Write 记录项目信息\n> Publish release 发布里程碑\n\n\n##### 分支开发\n\n> 在github客户端操作\n> 创建新分支：项目文件名 -> Manage -> 右侧Unpbulish -> Branch 建立分支名为BUG\n> 在新分支中：修改项目文件内容 -> Commit to BUG 提交修改内容到BUG分支\n> 合并分支内容：项目文件名 -> Manage -> BUG 移动到左侧Merge ，master移动到右侧Merge -> 点击Merge\n\n\n<!-- more -->\n**以下是互联网摘取信息**\n#### 最基本的命令：\n\n拷贝并跟踪远程的master分支。跟踪的好处是以后可以直接通过pull和push命令来提交或者获取远程最新的代码，而不需要指定远程分支名字。\n\n```\ngit clone \n\ngit submodule init\n\ngit submodule update\n```\n\n#### 显示信息类命令 \n\n```\ngit ls-files -u 显示冲突的文件，-s是显示标记为冲突已解决的文件\n\ngit diff 对比工作区和stage文件的差异 \ngit diff --cached 对比stage和branch之间的差异\n\ngit branch 列出当前repository下的所有branch \ngit branch --a 列出local 和remote下的所有branch\n\ngit ls-files --stage 检查保存在stage的文件\n\ngit log 显示到HEAD所指向的commit为止的所有commit记录 。使用reset HEAD~n 命令使HEAD指针向前移动，会导致HEAD之后的commit记录不会被显示。\n\ngit log -g则会查询reflog去查看最近做了哪些动作，这样可以配合git branch 恢复之前因为移动HEAD指针所丢弃的commit对象。如果reflog丢失则可以通过git fsck --full来查看没被引用的commit对象。 \ngit log -p -2 对比最新两次的commit对象 \nlog -1 HEAD\n\ngit log --pretty=oneline\n\ngit log --stat 1a410e 查看sha1为1a410e的commit对象的记录\n\ngit blame -L 12,22 sth.cs 如果你发现自己代码中 的一个方法存在缺陷,你可以用git blame来标注文件,查看那个方法的每一行分别是由谁 在哪一天修改的。下面这个例子使用了-L选项来限制输出范围在第12至22行\n```\n\n#### 创建类命令 \n\n```\ngit brach branchName 创建名为branchName的branch \ngit checkout branchName 切换到branchName的branch \ngit checkout -b 创建并切换，也就是上面两个命令的合并\n\ngit brach branchName ef71 从commit ef71创建名为branchName的branch\n```\n\n#### 撤销类命令 \n\n```\n如果是单个文件 \n1.use \"git reset HEAD <file>...\" to unstage \n如果已经用add 命令把文件加入stage了，就先需要从stage中撤销\n\n然后再从工作区撤销 \n2.use \"git checkout -- <file>...\" to discard changes in working directory\n\ngit checkout a.txt  撤销a.txt的变动（工作区上的文件） \n如果是多个文件 \ngit chenkout .\n\n如果已经commit 了，则需要 \ngit commit --amend 来修改，这个只能修改最近上一次的,也就是用一个新的提交来覆盖上一次的提交。因此如果push以后再做这个动作就会有危险\n\n$ git reset --hard HEAD 放弃工作区和index的改动,HEAD指针仍然指向当前的commit.（参照第一幅图）\n\n这条命令同时还可以用来撤销还没commit的merge,其实原理就是放弃index和工作区的改动，因为没commit的改动只存在于index和工作区中。\n\n$ git reset --hard HEAD^ 用来撤销已经commit的内容(等价于 git reset --hard HEAD~1) 。原理就是放弃工作区和index的改动，同时HEAD指针指向前一个commit对象。\n\ngit revert 也是撤销命令，区别在于reset是指向原地或者向前移动指针，git revert是创建一个commit来覆盖当前的commit,指针向后移动\n```\n\n#### 提交类命令 \n\n```\ngit add 跟踪新文件或者已有文件的改动，或者用来解决冲突\n\ngit commit 把文件从stage提交到branch\n\ngit commit -a 把修改的文件先提交到stage,然后再从stash提交到branch\n```\n\n#### 删除类命令 \n\n```\ngit rm --cached readme.txt 只从stage中删除，保留物理文件\n\ngit rm readme.txt 不但从stage中删除，同时删除物理文件\n\ngit mv a.txt b.txt 把a.txt改名为b.txt\n```\n\n#### Merge类命令\n\n```\n在冲突状态下，需要解决冲突的文件会从index打回到工作区。\n\n1.用工具或者手工解决冲突 \n2.git add 命令来表明冲突已经解决。 \n3.再次commit 已解决冲突的文件。\n\n$ git reset --hard ORIG_HEAD 用来撤销已经commit 的merge. \n$ git reset --hard HEAD 用来撤销还没commit 的merge,其实原理就是放弃index和工作区的改动。\n\ngit reset --merge ORIG_HEAD，注意其中的--hard 换成了 --merge，这样就可以避免在回滚时清除working tree。\n```\n\n![github常用命令](http://7xwlfk.com1.z0.glb.clouddn.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png)\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjin0016pgwioamz6tk3"},{"layout":"post","title":"sublime","date":"2015-08-01T15:13:56.000Z","_content":"* alt+command+2  左右分2屏\n* ctrl+shift+k 快速删除整行\n* Ctrl+command+⬆️\t上下行交换\n* ctrl+K \t\t从光标位置，删除代码至行尾\n* command + P \n* @\n* js\n\n* command + D  多次输入\n* command + K\n* alt + F3  多选\n\n* command + enter\n* command + shift + enter\n\n* command + H\n\n* command + A\n* command + shift + L\n\n* shift + 鼠标右键 + 向下移动\n\n* ul>.item$*10\n* h2{内容}\n\n* command + shift + V  带缩进粘贴\n\n\n[资源收集](http://www.jianshu.com/p/3cb5c6f2421c \"玩转Sublime\")","source":"_posts/2015/201508/20150801-1.md","raw":"layout: post\ntitle: sublime\ndate: 2015-08-01 23:13:56\ntags:\n- sublime\n---\n* alt+command+2  左右分2屏\n* ctrl+shift+k 快速删除整行\n* Ctrl+command+⬆️\t上下行交换\n* ctrl+K \t\t从光标位置，删除代码至行尾\n* command + P \n* @\n* js\n\n* command + D  多次输入\n* command + K\n* alt + F3  多选\n\n* command + enter\n* command + shift + enter\n\n* command + H\n\n* command + A\n* command + shift + L\n\n* shift + 鼠标右键 + 向下移动\n\n* ul>.item$*10\n* h2{内容}\n\n* command + shift + V  带缩进粘贴\n\n\n[资源收集](http://www.jianshu.com/p/3cb5c6f2421c \"玩转Sublime\")","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjio001bpgwib6xuqakv"},{"layout":"post","title":"冒泡，选择，插入，快速","date":"2015-08-07T14:10:18.000Z","_content":"冒泡，选择，插入，快速，四种常用的排序方法\n\n```php\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>冒泡排序法</title>\n</head>\n<body>\n<?php \n\t\n\t\n\tfunction bubbleSort($arr){\n\t//利用双重循环完成\n\t//外层循环控制 比较的轮数，每轮会将一个最大的气泡（数）浮到水面\n\t//如果数组的元素个数为N 则需要N-1轮完成\n\t\tfor ($i=0,$len = count($arr); $i < $len-1; $i++) { \n\t\t\t//内层循环控制 的比较的次数，\n\t\t\t////第一轮需要比较 N-1次\n\t\t\t//第二轮需要比较 N-2次\n\t\t\tfor ($j=0; $j < $len-1-$i; $j++) { \n\t\t\t\tif ($arr[$j]>$arr[$j+1]) {\n\t\t\t\t\t$temp = $arr[$j];\n\t\t\t\t\t$arr[$j]=$arr[$j+1];\n\t\t\t\t\t$arr[$j+1]=$temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n\n\tfunction selectSort($arr){\n\t\t//实现思路\n\t\t//双重循环完成，外层控制轮数，当前的最小值。\n\t\t//内层 控制的比较次数\n\t\t//$i 当前最小值的位置， 需要参与比较的元素\n\t\tfor ($i=0,$len=count($arr); $i < $len-1; $i++) { \n\t\t\t$p=$i;\n\t\t\tfor ($j=$i+1; $j < $len; $j++) { \n\t\t\t\tif($arr[$j]<$arr[$p]){\n\t\t\t\t\t$p=$j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($p!=$i) {\n\t\t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i]=$arr[$p];\n\t\t\t\t$arr[$p]=$temp;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn $arr;\n\t}\n\tfunction insertSort($arr){\n\t\t//利用双重循环，外层控制要进行插入判断的数\n\t\t//内层是已经排好的数与外层的数进行比较交换\n\t\tfor ($i=1,$len=count($arr); $i < $len; $i++) { \n\t\t\t$temp=$arr[$i];\n\t\t\tfor ($j=$i-1; $j >= 0; $j--) { \n\t\t\t\tif ($temp<$arr[$j]) {\n\t\t\t\t\t$arr[$j+1]=$arr[$j];\n\t\t\t\t\t$arr[$j]=$temp;\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n/**\n*快速排序\n*\n* @param array $arr 需要排序的数组\n*\n* @return array 排序好的数组\n*/\nfunction quick_sort($arr) {\n    //先判断是否需要继续进行\n    $length = count($arr);\n    if($length <= 1) {\n        return $arr;\n    }\n    //如果没有返回，说明数组内的元素个数 多余1个，需要排序\n    //选择一个标尺\n    //选择第一个元素\n    $base_num = $arr[0];\n    //遍历 除了标尺外的所有元素，按照大小关系放入两个数组内\n    //初始化两个数组\n    $left_array = array();//小于标尺的\n    $right_array = array();//大于标尺的\n    for($i=1; $i<$length; $i++) {\n        if($base_num > $arr[$i]) {\n            //放入左边数组\n            $left_array[] = $arr[$i];\n        } else {\n            //放入右边\n            $right_array[] = $arr[$i];\n        }\n    }\n    //再分别对 左边 和 右边的数组进行相同的排序处理方式\n    //递归调用这个函数,并记录结果\n    $left_array = quick_sort($left_array);\n    $right_array = quick_sort($right_array);\n    //合并左边 标尺 右边\n    return array_merge($left_array, array($base_num), $right_array);\n}\n\n\t$myarr=array(23,45,64,21,5,75);\n\tprint_r(bubbleSort($myarr));\n\techo \"<br/>\";\n\tprint_r(selectSort($myarr));\n\techo \"<br/>\";\n\tprint_r(insertSort($myarr));\n\techo \"<br/>\";\n\tprint_r(quick_sort($myarr));\n\n ?>\n</body>\n</html>\n```","source":"_posts/2015/201508/20150807-1.md","raw":"layout: post\ntitle: 冒泡，选择，插入，快速\ndate: 2015-08-07 22:10:18\ntags:\n- PHP\n- 排序\n---\n冒泡，选择，插入，快速，四种常用的排序方法\n\n```php\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>冒泡排序法</title>\n</head>\n<body>\n<?php \n\t\n\t\n\tfunction bubbleSort($arr){\n\t//利用双重循环完成\n\t//外层循环控制 比较的轮数，每轮会将一个最大的气泡（数）浮到水面\n\t//如果数组的元素个数为N 则需要N-1轮完成\n\t\tfor ($i=0,$len = count($arr); $i < $len-1; $i++) { \n\t\t\t//内层循环控制 的比较的次数，\n\t\t\t////第一轮需要比较 N-1次\n\t\t\t//第二轮需要比较 N-2次\n\t\t\tfor ($j=0; $j < $len-1-$i; $j++) { \n\t\t\t\tif ($arr[$j]>$arr[$j+1]) {\n\t\t\t\t\t$temp = $arr[$j];\n\t\t\t\t\t$arr[$j]=$arr[$j+1];\n\t\t\t\t\t$arr[$j+1]=$temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n\n\tfunction selectSort($arr){\n\t\t//实现思路\n\t\t//双重循环完成，外层控制轮数，当前的最小值。\n\t\t//内层 控制的比较次数\n\t\t//$i 当前最小值的位置， 需要参与比较的元素\n\t\tfor ($i=0,$len=count($arr); $i < $len-1; $i++) { \n\t\t\t$p=$i;\n\t\t\tfor ($j=$i+1; $j < $len; $j++) { \n\t\t\t\tif($arr[$j]<$arr[$p]){\n\t\t\t\t\t$p=$j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($p!=$i) {\n\t\t\t\t$temp = $arr[$i];\n\t\t\t\t$arr[$i]=$arr[$p];\n\t\t\t\t$arr[$p]=$temp;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn $arr;\n\t}\n\tfunction insertSort($arr){\n\t\t//利用双重循环，外层控制要进行插入判断的数\n\t\t//内层是已经排好的数与外层的数进行比较交换\n\t\tfor ($i=1,$len=count($arr); $i < $len; $i++) { \n\t\t\t$temp=$arr[$i];\n\t\t\tfor ($j=$i-1; $j >= 0; $j--) { \n\t\t\t\tif ($temp<$arr[$j]) {\n\t\t\t\t\t$arr[$j+1]=$arr[$j];\n\t\t\t\t\t$arr[$j]=$temp;\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n/**\n*快速排序\n*\n* @param array $arr 需要排序的数组\n*\n* @return array 排序好的数组\n*/\nfunction quick_sort($arr) {\n    //先判断是否需要继续进行\n    $length = count($arr);\n    if($length <= 1) {\n        return $arr;\n    }\n    //如果没有返回，说明数组内的元素个数 多余1个，需要排序\n    //选择一个标尺\n    //选择第一个元素\n    $base_num = $arr[0];\n    //遍历 除了标尺外的所有元素，按照大小关系放入两个数组内\n    //初始化两个数组\n    $left_array = array();//小于标尺的\n    $right_array = array();//大于标尺的\n    for($i=1; $i<$length; $i++) {\n        if($base_num > $arr[$i]) {\n            //放入左边数组\n            $left_array[] = $arr[$i];\n        } else {\n            //放入右边\n            $right_array[] = $arr[$i];\n        }\n    }\n    //再分别对 左边 和 右边的数组进行相同的排序处理方式\n    //递归调用这个函数,并记录结果\n    $left_array = quick_sort($left_array);\n    $right_array = quick_sort($right_array);\n    //合并左边 标尺 右边\n    return array_merge($left_array, array($base_num), $right_array);\n}\n\n\t$myarr=array(23,45,64,21,5,75);\n\tprint_r(bubbleSort($myarr));\n\techo \"<br/>\";\n\tprint_r(selectSort($myarr));\n\techo \"<br/>\";\n\tprint_r(insertSort($myarr));\n\techo \"<br/>\";\n\tprint_r(quick_sort($myarr));\n\n ?>\n</body>\n</html>\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjip001cpgwizs6g57dk"},{"layout":"post","title":"margin：0 auto 不能居中","date":"2015-08-12T13:11:55.000Z","_content":"\n既然用了 position:absolute, margin 也就不再对元素的位置产生影响了。\n办法很多:\n- 如果ul宽度是固定的话（已知数量的li以及图片长度），可以用 left: calc(100% - *ul 宽度的一半*)。\n- 又或者，把 Position: absolute 等使元素沉底的 styles 放置到外一层的div当中。将 ul 设为 text-align: center，li 设为 display:inline-block 来居中图片元素。\n\n>作者：Eastenluis\n链接：http://www.zhihu.com/question/23861520/answer/25936737\n来源：知乎\n著作权归作者所有，转载请联系作者获得授权。\n\n---\n\n因为有position:absolute\n一种可以参考的方法是套两层，外面一层margin-left:50%，里面margin-left:-50%\n另一种是外面一层width:100%，里面再margin:0 auto;display:table\n\n就算没有position:absolute，要是不明确设宽的话也需要display:table或者其它方法\n\n\n>作者：于航\n链接：http://www.zhihu.com/question/23861520/answer/25893095\n来源：知乎\n著作权归作者所有，转载请联系作者获得授权。","source":"_posts/2015/201508/20150812-1.md","raw":"layout: post\ntitle: margin：0 auto 不能居中\ndate: 2015-08-12 21:11:55\ntags:\n- css\n---\n\n既然用了 position:absolute, margin 也就不再对元素的位置产生影响了。\n办法很多:\n- 如果ul宽度是固定的话（已知数量的li以及图片长度），可以用 left: calc(100% - *ul 宽度的一半*)。\n- 又或者，把 Position: absolute 等使元素沉底的 styles 放置到外一层的div当中。将 ul 设为 text-align: center，li 设为 display:inline-block 来居中图片元素。\n\n>作者：Eastenluis\n链接：http://www.zhihu.com/question/23861520/answer/25936737\n来源：知乎\n著作权归作者所有，转载请联系作者获得授权。\n\n---\n\n因为有position:absolute\n一种可以参考的方法是套两层，外面一层margin-left:50%，里面margin-left:-50%\n另一种是外面一层width:100%，里面再margin:0 auto;display:table\n\n就算没有position:absolute，要是不明确设宽的话也需要display:table或者其它方法\n\n\n>作者：于航\n链接：http://www.zhihu.com/question/23861520/answer/25893095\n来源：知乎\n著作权归作者所有，转载请联系作者获得授权。","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjir001gpgwipcuvr3nv"},{"layout":"post","title":"PHP弱类型安全问题总结","date":"2015-08-15T11:21:38.000Z","_content":">PHP特性就是弱类型，以及内置函数对于传入参数的松散处理\n本篇文章主要就是记录PHP的弱类型所带来的问题。\n\n# PHP弱类型简介\n在PHP中，可以进行一下的操作。\n```\n$param = 1;\n$param = array();\n$param = \"stringg\";\n```\n弱类型的语言对变量的数据类型没有限制，你可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。\n\n# 类型转换问题\n\n类型转换是无法避免的问题。例如需要将GET或者是POST的参数转换为int类型，或者是两个变量不匹配的时候，PHP会自动地进行变量转换。但是PHP是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题。\n\n比较操作符\n类型转换\n在$a==$b的比较中\n```\n$a=null;$b=flase ; //true\n$a='';$b=null; //true\n```\n这样的例子还有很多，这种比较都是相等。\n使用比较操作符的时候也存在类型转换的问题，如下：\n```\n0=='0' //true\n0 == 'abcdefg' //true\n0 === 'abcdefg' //false\n1 == '1abcdef' //true\n```\n当不同类型的变量进行比较的时候就会存在变量转换的问题，在转换之后就有可能会存在问题。\n\n# Hash比较\n\n除了以上的这种方式之外在进行hash比较的时候也会存在问题。如下：\n```\n\"0e132456789\"==\"0e7124511451155\" //true\n\"0e123456abc\"==\"0e1dddada\" //false\n\"0e1abc\"==\"0\"     //true\n```\n在进行比较运算时，如果遇到了0e\\d+这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中2个数的值都是0因而就相等了。如果不满足0e\\d+这种模式就不会相等。这个题目在攻防平台中的md5 collision就有考到。\n\n# 十六进制转换\n\n还存在一种十六进制余字符串进行比较运算时的问题。例子如下：\n```\n\"0x1e240\"==\"123456\" //true\n\"0x1e240\"==123456 //true\n\"0x1e240\"==\"1e240\" //false\n```\n当其中的一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较，0×1240解析成为十进制就是123456，所以与int类型和string类型的123456比较都是相等。攻防平台中的起名字真难就是考察的这个特性。\n\n# 类型转换\n\n常见的转换主要就是int转换为string，string转换为int。\n\nint转string：\n`\n$var = 5;\n`\n方式1：$item = (string)$var;\n\n方式2：$item = strval($var);\n\nstring转int：intval()函数。\n\n对于这个函数，可以先看2个例子。\n```\nvar_dump(intval('2')) //2\nvar_dump(intval('3abcd')) //3\nvar_dump(intval('abcd')) //0\n```\n说明intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval()不会报错而是返回0。\nintval()的这种特性在攻防平台中的MYSQL这道题目中就有考到。\n同时，程序员在编程的时候也不应该使用如下的这段代码：\n```\nif(intval($a)>1000) {\n    mysql_query(\"select * from news where id=\".$a)\n}\n```\n这个时候$a的值有可能是1002 union…..\n\n# 内置函数的参数的松散性\n\n内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。解释起来有点拗口，还是直接通过实际的例子来说明问题，下面会重点介绍几个这种函数。\n```\nmd5()\n$array1[] = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n);\n$array2 = array(\"foo\", \"bar\", \"hello\", \"world\");\nvar_dump(md5($array1)==var_dump($array2)); //true\n```\nPHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。\n\nstrcmp()\n\nstrcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。\n\n如果传入给出strcmp()的参数是数字呢？\n```\n$array=[1,2,3];\nvar_dump(strcmp($array,'123')); //null,在某种意义上null也就是相当于false。\n```\nstrcmp这种特性在攻防平台中的pass check有考到。\n\nswitch()\n\n如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：\n```\n$i =\"2abc\";\nswitch ($i) {\ncase 0:\ncase 1:\ncase 2:\n    echo \"i is less than 3 but not negative\";\n    break;\ncase 3:\n    echo \"i is 3\";\n}\n```\n\n这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。\n\nin_array()\n\n在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。\n```\n$array=[0,1,2,'3'];\nvar_dump(in_array('abc', $array));  //true\nvar_dump(in_array('1bc', $array)); //true\n```\n可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。\narray_search()与in_array()也是一样的问题。","source":"_posts/2015/201508/20150815-1.md","raw":"layout: post\ntitle: PHP弱类型安全问题总结\ndate: 2015-08-15 19:21:38\ntags: \n- PHP安全问题\ncategories:\n- PHP\n---\n>PHP特性就是弱类型，以及内置函数对于传入参数的松散处理\n本篇文章主要就是记录PHP的弱类型所带来的问题。\n\n# PHP弱类型简介\n在PHP中，可以进行一下的操作。\n```\n$param = 1;\n$param = array();\n$param = \"stringg\";\n```\n弱类型的语言对变量的数据类型没有限制，你可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。\n\n# 类型转换问题\n\n类型转换是无法避免的问题。例如需要将GET或者是POST的参数转换为int类型，或者是两个变量不匹配的时候，PHP会自动地进行变量转换。但是PHP是一个弱类型的语言，导致在进行类型转换的时候会存在很多意想不到的问题。\n\n比较操作符\n类型转换\n在$a==$b的比较中\n```\n$a=null;$b=flase ; //true\n$a='';$b=null; //true\n```\n这样的例子还有很多，这种比较都是相等。\n使用比较操作符的时候也存在类型转换的问题，如下：\n```\n0=='0' //true\n0 == 'abcdefg' //true\n0 === 'abcdefg' //false\n1 == '1abcdef' //true\n```\n当不同类型的变量进行比较的时候就会存在变量转换的问题，在转换之后就有可能会存在问题。\n\n# Hash比较\n\n除了以上的这种方式之外在进行hash比较的时候也会存在问题。如下：\n```\n\"0e132456789\"==\"0e7124511451155\" //true\n\"0e123456abc\"==\"0e1dddada\" //false\n\"0e1abc\"==\"0\"     //true\n```\n在进行比较运算时，如果遇到了0e\\d+这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中2个数的值都是0因而就相等了。如果不满足0e\\d+这种模式就不会相等。这个题目在攻防平台中的md5 collision就有考到。\n\n# 十六进制转换\n\n还存在一种十六进制余字符串进行比较运算时的问题。例子如下：\n```\n\"0x1e240\"==\"123456\" //true\n\"0x1e240\"==123456 //true\n\"0x1e240\"==\"1e240\" //false\n```\n当其中的一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较，0×1240解析成为十进制就是123456，所以与int类型和string类型的123456比较都是相等。攻防平台中的起名字真难就是考察的这个特性。\n\n# 类型转换\n\n常见的转换主要就是int转换为string，string转换为int。\n\nint转string：\n`\n$var = 5;\n`\n方式1：$item = (string)$var;\n\n方式2：$item = strval($var);\n\nstring转int：intval()函数。\n\n对于这个函数，可以先看2个例子。\n```\nvar_dump(intval('2')) //2\nvar_dump(intval('3abcd')) //3\nvar_dump(intval('abcd')) //0\n```\n说明intval()转换的时候，会将从字符串的开始进行转换知道遇到一个非数字的字符。即使出现无法转换的字符串，intval()不会报错而是返回0。\nintval()的这种特性在攻防平台中的MYSQL这道题目中就有考到。\n同时，程序员在编程的时候也不应该使用如下的这段代码：\n```\nif(intval($a)>1000) {\n    mysql_query(\"select * from news where id=\".$a)\n}\n```\n这个时候$a的值有可能是1002 union…..\n\n# 内置函数的参数的松散性\n\n内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。解释起来有点拗口，还是直接通过实际的例子来说明问题，下面会重点介绍几个这种函数。\n```\nmd5()\n$array1[] = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n);\n$array2 = array(\"foo\", \"bar\", \"hello\", \"world\");\nvar_dump(md5($array1)==var_dump($array2)); //true\n```\nPHP手册中的md5()函数的描述是string md5 ( string $str [, bool $raw_output = false ] )，md5()中的需要是一个string类型的参数。但是当你传递一个array时，md5()不会报错，知识会无法正确地求出array的md5值，这样就会导致任意2个array的md5值都会相等。这个md5()的特性在攻防平台中的bypass again同样有考到。\n\nstrcmp()\n\nstrcmp()函数在PHP官方手册中的描述是int strcmp ( string $str1 , string $str2 ),需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。\n\n如果传入给出strcmp()的参数是数字呢？\n```\n$array=[1,2,3];\nvar_dump(strcmp($array,'123')); //null,在某种意义上null也就是相当于false。\n```\nstrcmp这种特性在攻防平台中的pass check有考到。\n\nswitch()\n\n如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：\n```\n$i =\"2abc\";\nswitch ($i) {\ncase 0:\ncase 1:\ncase 2:\n    echo \"i is less than 3 but not negative\";\n    break;\ncase 3:\n    echo \"i is 3\";\n}\n```\n\n这个时候程序输出的是i is less than 3 but not negative，是由于switch()函数将$i进行了类型转换，转换结果为2。\n\nin_array()\n\n在PHP手册中，in_array()函数的解释是bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ),如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，in_array()会比较needls的类型和haystack中的类型是否相同。\n```\n$array=[0,1,2,'3'];\nvar_dump(in_array('abc', $array));  //true\nvar_dump(in_array('1bc', $array)); //true\n```\n可以看到上面的情况返回的都是true,因为’abc’会转换为0，’1bc’转换为1。\narray_search()与in_array()也是一样的问题。","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjis001ipgwib943r9pp"},{"layout":"post","title":"图片轮播","date":"2015-08-17T08:31:54.000Z","_content":"### 实现思路\n**一步一步来**\n* 图片切换\n* 鼠标悬停\n* 按钮跟踪\n* ………………\n### 源代码\n```html css javascript\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>轮播图片</title>\n\t<style type=\"text/css\">\n\t*{\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\tdiv {\n\t\tmargin:50px;\n\t\twidth: 470px;\n\t}\n\tdiv ul{\n\t\tfloat: right;\n\t\tmargin-top:45px;\n\t}\n\tdiv ul li{\n\t\tlist-style:none;\n\t\twidth:30px;\n\t\theight: 20px;\n\t\tline-height: 20px;\n\t\ttext-align: center;\n\t\tborder: 1px solid orange;\n\t\tmargin-top:5px;\n\t}\n\t</style>\n\t<script type=\"text/javascript\">\n\t\twindow.onload = init;\t\t\n\t\tvar i =1;\n\t\tvar time;\n\t\tfunction init(){\n\t\t\tvar obj = document.getElementById(\"d1\");\n\t\t\t//解决第一背景颜色不变的情况\n\t\t\tobj.style.background = \"orange\";\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t\tfunction change(){\n\t\t\ti++;\n\t\t\tif (i>5) {\n\t\t\t\ti=1;\n\t\t\t}\n\t\t\tvar obj = document.getElementById('img');\n\t\t\tobj.src = \"images/beijing_\" + i + \".jpg\";\n\t\t\tvar obj2 = document.getElementById(\"d\"+i);\n\t\t\tobj2.style.background = \"orange\";\n\t\t\tfor (var j=1 ; j<6; j++){\n\t\t\t\tif(j!=i){\n\t\t\t\tvar obj3 = document.getElementById(\"d\"+j);\n\t\t\t\tobj3.style.background = \"white\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction stop(){\n\t\t\twindow.clearInterval(time);\n\t\t}\n\t\tfunction start(){\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t\tfunction stopImg(n,m){\n\t\t\ti = n;\n\t\t\tvar obj = document.getElementById('img');\n\t\t\tobj.src = \"images/beijing_\" + i + \".jpg\";\n\t\t\twindow.clearInterval(time);\n\t\t\tm.style.background=\"orange\";\n\t\t\tfor (var j=1 ; j<6; j++){\n\t\t\t\tif(j!=i){\n\t\t\t\tvar obj3 = document.getElementById(\"d\"+j);\n\t\t\t\tobj3.style.background = \"white\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction startImg(m){\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div>\n\t\t<img src=\"images/beijing_1.jpg\" width=\"400\" id=\"img\" onmousemove=\"stop()\" onmouseout=\"start()\" title=\"背景图1\" alt=\"背景图1\">\n\t\t<ul>\n\t\t\t<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>\n\t\t\t<li id=\"d2\" onmousemove=\"stopImg(2,this)\" onmouseout=\"startImg(this)\">2</li>\n\t\t\t<li id=\"d3\" onmousemove=\"stopImg(3,this)\" onmouseout=\"startImg(this)\">3</li>\n\t\t\t<li id=\"d4\" onmousemove=\"stopImg(4,this)\" onmouseout=\"startImg(this)\">4</li>\n\t\t\t<li id=\"d5\" onmousemove=\"stopImg(5,this)\" onmouseout=\"startImg(this)\">5</li>\n\t\t</ul>\n\t</div>\n</body>\n</html>\n```\n### 代码分析\n>声明全局变量：背景图变换的序号i,用于清楚定时器的time；\n第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数\n第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式\n第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(**注意设置定时器名字**)\n`（dsq=window.setInterval(\"change()\",1000);）`重写一遍定时器\n第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(**注意i=n来控制图片切换避免鼠标离开时乱启动图片**)\n`<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>`\n","source":"_posts/2015/201508/20150817-1.md","raw":"layout: post\ntitle: 图片轮播\ndate: 2015-08-17 16:31:54\ntags: \n- js特效\ncategories:\n- JavaScript\n---\n### 实现思路\n**一步一步来**\n* 图片切换\n* 鼠标悬停\n* 按钮跟踪\n* ………………\n### 源代码\n```html css javascript\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>轮播图片</title>\n\t<style type=\"text/css\">\n\t*{\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\tdiv {\n\t\tmargin:50px;\n\t\twidth: 470px;\n\t}\n\tdiv ul{\n\t\tfloat: right;\n\t\tmargin-top:45px;\n\t}\n\tdiv ul li{\n\t\tlist-style:none;\n\t\twidth:30px;\n\t\theight: 20px;\n\t\tline-height: 20px;\n\t\ttext-align: center;\n\t\tborder: 1px solid orange;\n\t\tmargin-top:5px;\n\t}\n\t</style>\n\t<script type=\"text/javascript\">\n\t\twindow.onload = init;\t\t\n\t\tvar i =1;\n\t\tvar time;\n\t\tfunction init(){\n\t\t\tvar obj = document.getElementById(\"d1\");\n\t\t\t//解决第一背景颜色不变的情况\n\t\t\tobj.style.background = \"orange\";\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t\tfunction change(){\n\t\t\ti++;\n\t\t\tif (i>5) {\n\t\t\t\ti=1;\n\t\t\t}\n\t\t\tvar obj = document.getElementById('img');\n\t\t\tobj.src = \"images/beijing_\" + i + \".jpg\";\n\t\t\tvar obj2 = document.getElementById(\"d\"+i);\n\t\t\tobj2.style.background = \"orange\";\n\t\t\tfor (var j=1 ; j<6; j++){\n\t\t\t\tif(j!=i){\n\t\t\t\tvar obj3 = document.getElementById(\"d\"+j);\n\t\t\t\tobj3.style.background = \"white\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction stop(){\n\t\t\twindow.clearInterval(time);\n\t\t}\n\t\tfunction start(){\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t\tfunction stopImg(n,m){\n\t\t\ti = n;\n\t\t\tvar obj = document.getElementById('img');\n\t\t\tobj.src = \"images/beijing_\" + i + \".jpg\";\n\t\t\twindow.clearInterval(time);\n\t\t\tm.style.background=\"orange\";\n\t\t\tfor (var j=1 ; j<6; j++){\n\t\t\t\tif(j!=i){\n\t\t\t\tvar obj3 = document.getElementById(\"d\"+j);\n\t\t\t\tobj3.style.background = \"white\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction startImg(m){\n\t\t\ttime = window.setInterval('change()',1000);\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div>\n\t\t<img src=\"images/beijing_1.jpg\" width=\"400\" id=\"img\" onmousemove=\"stop()\" onmouseout=\"start()\" title=\"背景图1\" alt=\"背景图1\">\n\t\t<ul>\n\t\t\t<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>\n\t\t\t<li id=\"d2\" onmousemove=\"stopImg(2,this)\" onmouseout=\"startImg(this)\">2</li>\n\t\t\t<li id=\"d3\" onmousemove=\"stopImg(3,this)\" onmouseout=\"startImg(this)\">3</li>\n\t\t\t<li id=\"d4\" onmousemove=\"stopImg(4,this)\" onmouseout=\"startImg(this)\">4</li>\n\t\t\t<li id=\"d5\" onmousemove=\"stopImg(5,this)\" onmouseout=\"startImg(this)\">5</li>\n\t\t</ul>\n\t</div>\n</body>\n</html>\n```\n### 代码分析\n>声明全局变量：背景图变换的序号i,用于清楚定时器的time；\n第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数\n第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式\n第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(**注意设置定时器名字**)\n`（dsq=window.setInterval(\"change()\",1000);）`重写一遍定时器\n第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(**注意i=n来控制图片切换避免鼠标离开时乱启动图片**)\n`<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>`\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjit001lpgwiob72i5jn"},{"layout":"post","title":"js基础知识点","date":"2015-08-17T09:44:45.000Z","_content":"### 优先级\n运算符优先级：\n括号优先\n逻辑与比逻辑或优先\n赋值运算符最后\n\n\ntypeof(变量名) 输出变量数据类型\n\nfirebug 调试js代码，函数执行完成后会继续返回到调研的位置\n\n在函数内部定义的变量为局部变量，局部变量取消前面的var 就默认为全局变量，全局变量在函数外部使用时，需要先调用函数；\n\n\n函数可以先定义后调用，同时也可以先调用后定义；\n\narr.length  计算数组长度\n\nisNaN(24)  判断是否不是一个数字,若为\"23b\"，则不是一个数字，返回ture\n\n### 数组对象\nvar arrr = [23,24,25];\narr.concat(arr1,arr2) 使用concat连接数组或者在arr数组后面增加元素,组成的是新的数组\n\narr.join(\"-\") 使用“-”连接数组的每一项 返回的结果是 23-24-25;如果以空字符串连接，返回的是字符串\npop(),删除数组的最后一项，并且返回被删除的元素；\npush(),加入新的内容，并返回新的长度；\nreverse():翻转数组的顺序；\n\n### 字符串对象\ncharAt(3) ,获取指定字符串下标的元素\ncharCodeAt(3),获取指定字符串下标元素的ASCCI值\nindexOf(\"d\"),获取字符d在字符串中第一次出现的位置，若无法查找返回-1；\nlastIndexOf(\"d\"),获取字符d在字符串中最后一次出现的位置，若无法查找返回-1；\nsplit(\"n\"),将字符串以字符n进行分割，返回一个数组；\nsubstr(n,m),截取字符串从n开始的m个元素，如果只有一个参数就截取到最后\nsubstring(n,m),截取从下标为n的位置到m的位置；左开右闭区间；如果只有一个参数就截取到最后\ntoLowerCase():将字符串字母转换成小写形式返回，原有字符串大小写不变\ntoUpperCase():将字符串字母转换成大写形式返回，原有字符串大小写不变\n\n>判断上传文件的思路：通过使用lastIndexOf(\".\")判断“.”最后出现的文字，再通过substr(n+1,4)截取文件格式后缀进行判断；为避免大小写问题可以通过toLowerCase()统一转换成小写进行判断\n\n### Math对象\nMath.pow(n,m):求n的m次方\nMath.abs(n)：求n的绝对值\nMath.round(n):求n的四舍五入值\nMath.floor(n):求n的向下取整的值\nMath.ceil(n):求n的向上取整的值\nMath.random():求0-1的随机整数 ，左开右闭区间求10-20的整数Math.floor(Math.random()*10+10);\n使用floor比用round公平，出现0的概率与出现1的概率相同；\n\n### DaTe对象\n四种创建方式：\nvar n1 = new Date();\nvar n2 = new Date(\"1991/11/5\");\nvar n3 = new Date(1991,11,5);显示12月\nvar n4 = new Date(233428408324);\ntoLocaleString():该方法以本地格式显示\n\ngetFullYear();获取年份\ngetMonth();获取月份\ngetDate();获取日期\ngetHours();获取小时\ngetMinutes();获取分钟\ngetSeconds();获取秒\ngetMilliSeconds();获取毫秒\ngetDay();获取星期\ngetTime();获取从1970到时间点的毫秒\n\n### 样式对象\nobj.style.background = \"res\"; 背景颜色变为红色\nobj.style.fontSize = \"60px\"; 更改字体大小\ninnerHtml获取文档内容（带html标签）\ninnerText获取文本内容（去除HTML标签）\n\n\n### 事件\nonfous:获得焦点\nonblur:失去焦点\nonsubmit：提交事件\nonchange:当发生改变的时候\nonreset：重置事件\nonload 当页面加载完成立刻执行的事件\n两种方式：\n<script> window.onload=init;</script>\n<body onload=\"init()\"></body>\n\n### Event事件信息对象\nEvent:保存事件发生时的相关信息\nEvent.clientX:事件发生时的X的坐标（鼠标事件的对象）\nvar obj = Event.target:事件发生源（返回触发此事件的元素）\nEvent：必须通过参数形式传递给函数才可以使用\n\n### cursor 光标\ncursor：crosshair;\ncursor: help;\ncursor：wait;\n\n### 错误调试\ntry{运行错误代码}\ncatch(err){alert(err.message);}\n\n### 创建标签对象\nvar obj = document.createElement(\"标签名\") 通过createElement创建标签对象\ndocument.body.appendChild(obj); 将标签对象增加到obj中\n\n注意：body中由于margin边距原因可能导致事件不会被触发（小星星案例）\n\n### 按钮开关的切换方式\n方法一：通过if语句进行判断value值\n方法二：通过记录点击的次数，默认开，如果是偶数就返回开，如果是奇数就返回关。注意定义记次变量需作为全局变量\n方法三：定义一个flag 变量记录bool值，开为ture，关为false\n方法四：通过this传递当前对象，判断当前对象的value值\nthis代表当前obj\n\n### window对象\nvar n = prompt(\"提示信息\",\"默认值\");   //pppp就是可以输入信息的\nconfirm()选择确定和取消\nopen(\"www.uiste.com\",\"uiste博客\",\"width=300,height=300,top=20,left=20\") 打开一个新的窗口\n\n### 定时器\n一次性定时器：var time1 = windows.setTimeout(\"js代码\",时间);\n反复性定时器：var time2= window.setInterval(\"js代码\",时间);\n清楚定时器：window.clearTimeout(time1);\n\n### 图片轮播的思想\n>声明全局变量：背景图变换的序号i,用于清楚定时器的time；\n第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数\n第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式\n第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(**注意设置定时器名字**)\n`（dsq=window.setInterval(\"change()\",1000);）`重写一遍定时器\n第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(**注意i=n来控制图片切换避免鼠标离开时乱启动图片**)\n`<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>`\n\n### 找对象的方法\nid:document.getElementById(\"id名\")；\n标签名：document.getElementsByTagName(\"标签名\");//多个标签以数组形式保存\nname:document.getElementsByName(\"name名\");//数组\nclassName:document.getElementsByClassName(\"class名\");//数组\nimg:document.images;//数组\nlink对象：document.links;//获取连接对象，数组\n表单对象：document.form;\nbody标签对象：document.body;\nhtml标签对象：document.docuementElement;\n事件信息对象：event;\n当前对象：this;\n\n### location对象\nlocation.属性 返回当前页面的URL相关信息\nlocation.方法()\nassign加载新文档【跳转】\nreload重新加载当前文档【刷新】\nreplace 用新文档替换当前文档【不会再history中生成新的记录】\n\n### history 对象\n包含用户访问过的URL\n属性：\nlength：返回历史记录中的URL数量\n方法：\nback():加载前一个页面\nforward()：加载后一个页面\ngo(-3)：跳转到指定页面，后退几个页面就写数字几\n\n### screen对象\nscreen.height:获取屏幕的高度\nscreen.width:获取屏幕的宽度\n\n### navigation对象\n包含有关浏览器的相关信息\nappName : 返回浏览器名称\nappCodeName：返回浏览器代码名\nappVersion:浏览器版本号和平台信息\nuserAgent:浏览器信息\n浏览器判断\n```\n\tvar obj = navigator.userAgent;\n\tif(obj.indexOf(\"Firefox\"!=-1)){\n\t\talert(\"火狐浏览器\");\n\t}else if (obj.indexOf(\"Chrome\"!=-1)){\n\t\talert(\"谷歌浏览器\");\n\t}else{\n\t\talert(\"其它浏览器\");\n\t}\n```\n","source":"_posts/2015/201508/20150817-2.md","raw":"layout: post\ntitle: js基础知识点\ndate: 2015-08-17 17:44:45\ntags:\n- 知识点\ncategories:\n- javascript\n---\n### 优先级\n运算符优先级：\n括号优先\n逻辑与比逻辑或优先\n赋值运算符最后\n\n\ntypeof(变量名) 输出变量数据类型\n\nfirebug 调试js代码，函数执行完成后会继续返回到调研的位置\n\n在函数内部定义的变量为局部变量，局部变量取消前面的var 就默认为全局变量，全局变量在函数外部使用时，需要先调用函数；\n\n\n函数可以先定义后调用，同时也可以先调用后定义；\n\narr.length  计算数组长度\n\nisNaN(24)  判断是否不是一个数字,若为\"23b\"，则不是一个数字，返回ture\n\n### 数组对象\nvar arrr = [23,24,25];\narr.concat(arr1,arr2) 使用concat连接数组或者在arr数组后面增加元素,组成的是新的数组\n\narr.join(\"-\") 使用“-”连接数组的每一项 返回的结果是 23-24-25;如果以空字符串连接，返回的是字符串\npop(),删除数组的最后一项，并且返回被删除的元素；\npush(),加入新的内容，并返回新的长度；\nreverse():翻转数组的顺序；\n\n### 字符串对象\ncharAt(3) ,获取指定字符串下标的元素\ncharCodeAt(3),获取指定字符串下标元素的ASCCI值\nindexOf(\"d\"),获取字符d在字符串中第一次出现的位置，若无法查找返回-1；\nlastIndexOf(\"d\"),获取字符d在字符串中最后一次出现的位置，若无法查找返回-1；\nsplit(\"n\"),将字符串以字符n进行分割，返回一个数组；\nsubstr(n,m),截取字符串从n开始的m个元素，如果只有一个参数就截取到最后\nsubstring(n,m),截取从下标为n的位置到m的位置；左开右闭区间；如果只有一个参数就截取到最后\ntoLowerCase():将字符串字母转换成小写形式返回，原有字符串大小写不变\ntoUpperCase():将字符串字母转换成大写形式返回，原有字符串大小写不变\n\n>判断上传文件的思路：通过使用lastIndexOf(\".\")判断“.”最后出现的文字，再通过substr(n+1,4)截取文件格式后缀进行判断；为避免大小写问题可以通过toLowerCase()统一转换成小写进行判断\n\n### Math对象\nMath.pow(n,m):求n的m次方\nMath.abs(n)：求n的绝对值\nMath.round(n):求n的四舍五入值\nMath.floor(n):求n的向下取整的值\nMath.ceil(n):求n的向上取整的值\nMath.random():求0-1的随机整数 ，左开右闭区间求10-20的整数Math.floor(Math.random()*10+10);\n使用floor比用round公平，出现0的概率与出现1的概率相同；\n\n### DaTe对象\n四种创建方式：\nvar n1 = new Date();\nvar n2 = new Date(\"1991/11/5\");\nvar n3 = new Date(1991,11,5);显示12月\nvar n4 = new Date(233428408324);\ntoLocaleString():该方法以本地格式显示\n\ngetFullYear();获取年份\ngetMonth();获取月份\ngetDate();获取日期\ngetHours();获取小时\ngetMinutes();获取分钟\ngetSeconds();获取秒\ngetMilliSeconds();获取毫秒\ngetDay();获取星期\ngetTime();获取从1970到时间点的毫秒\n\n### 样式对象\nobj.style.background = \"res\"; 背景颜色变为红色\nobj.style.fontSize = \"60px\"; 更改字体大小\ninnerHtml获取文档内容（带html标签）\ninnerText获取文本内容（去除HTML标签）\n\n\n### 事件\nonfous:获得焦点\nonblur:失去焦点\nonsubmit：提交事件\nonchange:当发生改变的时候\nonreset：重置事件\nonload 当页面加载完成立刻执行的事件\n两种方式：\n<script> window.onload=init;</script>\n<body onload=\"init()\"></body>\n\n### Event事件信息对象\nEvent:保存事件发生时的相关信息\nEvent.clientX:事件发生时的X的坐标（鼠标事件的对象）\nvar obj = Event.target:事件发生源（返回触发此事件的元素）\nEvent：必须通过参数形式传递给函数才可以使用\n\n### cursor 光标\ncursor：crosshair;\ncursor: help;\ncursor：wait;\n\n### 错误调试\ntry{运行错误代码}\ncatch(err){alert(err.message);}\n\n### 创建标签对象\nvar obj = document.createElement(\"标签名\") 通过createElement创建标签对象\ndocument.body.appendChild(obj); 将标签对象增加到obj中\n\n注意：body中由于margin边距原因可能导致事件不会被触发（小星星案例）\n\n### 按钮开关的切换方式\n方法一：通过if语句进行判断value值\n方法二：通过记录点击的次数，默认开，如果是偶数就返回开，如果是奇数就返回关。注意定义记次变量需作为全局变量\n方法三：定义一个flag 变量记录bool值，开为ture，关为false\n方法四：通过this传递当前对象，判断当前对象的value值\nthis代表当前obj\n\n### window对象\nvar n = prompt(\"提示信息\",\"默认值\");   //pppp就是可以输入信息的\nconfirm()选择确定和取消\nopen(\"www.uiste.com\",\"uiste博客\",\"width=300,height=300,top=20,left=20\") 打开一个新的窗口\n\n### 定时器\n一次性定时器：var time1 = windows.setTimeout(\"js代码\",时间);\n反复性定时器：var time2= window.setInterval(\"js代码\",时间);\n清楚定时器：window.clearTimeout(time1);\n\n### 图片轮播的思想\n>声明全局变量：背景图变换的序号i,用于清楚定时器的time；\n第一步：初始化函数中加入一个交换背景图片的反复性定时器用于加载交换函数\n第二步：图片自动播放联动按钮变化：在交换函数中通过for循环改变i的值，再通过元素样式对象属性进行切换图片；通过第二个循环，与第一循环的i值关联，用于联动按钮的背景样式\n第三步：写一个stop函数当鼠标放置在img上清楚定时器，start函数鼠标离开时重新启动定时器(**注意设置定时器名字**)\n`（dsq=window.setInterval(\"change()\",1000);）`重写一遍定时器\n第五步：按钮点击联动图片自动切换：通过使用函数值传递，进行判断切换stopImg函数(**注意i=n来控制图片切换避免鼠标离开时乱启动图片**)\n`<li id=\"d1\" onmousemove=\"stopImg(1,this)\" onmouseout=\"startImg(this)\">1</li>`\n\n### 找对象的方法\nid:document.getElementById(\"id名\")；\n标签名：document.getElementsByTagName(\"标签名\");//多个标签以数组形式保存\nname:document.getElementsByName(\"name名\");//数组\nclassName:document.getElementsByClassName(\"class名\");//数组\nimg:document.images;//数组\nlink对象：document.links;//获取连接对象，数组\n表单对象：document.form;\nbody标签对象：document.body;\nhtml标签对象：document.docuementElement;\n事件信息对象：event;\n当前对象：this;\n\n### location对象\nlocation.属性 返回当前页面的URL相关信息\nlocation.方法()\nassign加载新文档【跳转】\nreload重新加载当前文档【刷新】\nreplace 用新文档替换当前文档【不会再history中生成新的记录】\n\n### history 对象\n包含用户访问过的URL\n属性：\nlength：返回历史记录中的URL数量\n方法：\nback():加载前一个页面\nforward()：加载后一个页面\ngo(-3)：跳转到指定页面，后退几个页面就写数字几\n\n### screen对象\nscreen.height:获取屏幕的高度\nscreen.width:获取屏幕的宽度\n\n### navigation对象\n包含有关浏览器的相关信息\nappName : 返回浏览器名称\nappCodeName：返回浏览器代码名\nappVersion:浏览器版本号和平台信息\nuserAgent:浏览器信息\n浏览器判断\n```\n\tvar obj = navigator.userAgent;\n\tif(obj.indexOf(\"Firefox\"!=-1)){\n\t\talert(\"火狐浏览器\");\n\t}else if (obj.indexOf(\"Chrome\"!=-1)){\n\t\talert(\"谷歌浏览器\");\n\t}else{\n\t\talert(\"其它浏览器\");\n\t}\n```\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjiu001ppgwi8pa978gi"},{"layout":"post","title":"js思想养成-光标定位","date":"2015-08-18T07:36:20.000Z","_content":"### 当鼠标划过文本框,自动选中文本框中的内容\n```javascript\n<body>\n\t<form action=\"a.php\" method=\"post\" name=\"login\" id=\"form1\" onsubmit=\"return checkName()\">\n\t用户名：<input type=\"text\" name=\"username\" id=\"username\"/><br/>\n\t<input type=\"submit\" id=\"btn\" value=\"提交\">\n\t</form>\n\t<script type=\"text/javascript\">\n\t// 当鼠标划过文本 框,自动选中文本框中的内容\n\tvar obj = document.getElementById(\"username\");\n\tobj.onmouseover = function(){\n\t\tthis.select();\n\t}\n\t// 表单验证不为空\n\tfunction checkName(){\n\t\tif (obj.value != \"\") {\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\t</script>\n</body>\n```\n### 网页自动跳转so easy!!!\n```\n\tfunction gonewpage(){\n\t\twindow.location.href = \"./new.html\";\n\t}\n\tsetTimeout(\"gonewpage()\",2000);\n```\n\n### 在弹出窗页面输入信息，返回到原始页面中\n>一个网页,使得打开它时弹出一个全屏的窗口,该窗口中有一个文本框和一个按钮。\n**主窗口**\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>主窗口</title>\t\n</head>\n<body>\n\t<!-- 通过弹出窗口接受信息 -->\n\t<a href=\"\" id=\"a1\" target=\"new\">新窗口</a>\n\t<input type=\"text\" id=\"msg\">\n\t<script type=\"text/javascript\">\n\tvar a1 = document.getElementById(\"a1\");\n\ta1.onclick = function(){\n\t\twindow.open(\"new.html\",\"弹出窗口\",\"location=no,toolbar=no,menubar=no\");\n\t\treturn false;\n\t}\n\t</script>\n</body>\n</html>\n```\n**弹出窗口**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>弹出窗口</title>\n</head>\n<body>\n\t\t<input type=\"text\" name=\"message\" id=\"m1\"/><br/>\n\t\t<input type=\"button\" value=\"关闭\" id=\"btn\" onclick=\"btn3()\">\n\t<script type=\"text/javascript\">\n\tvar message = document.getElementById(\"m1\");\n\tvar btn2 = document.getElementById(\"btn2\");\n\tfunction btn3(){\n\t\tvar form1 = window.opener.document.getElementById(\"msg\");\n\t\tform1.value = message.value;\n\t\twindow.close();\n\t}\n\t</script>\n</body>\n</html>\n```","source":"_posts/2015/201508/20150818-1.md","raw":"layout: post\ntitle: js思想养成-光标定位\ndate: 2015-08-18 15:36:20\ntags:\n- js思想养成\ncategories:\n- javascript\n---\n### 当鼠标划过文本框,自动选中文本框中的内容\n```javascript\n<body>\n\t<form action=\"a.php\" method=\"post\" name=\"login\" id=\"form1\" onsubmit=\"return checkName()\">\n\t用户名：<input type=\"text\" name=\"username\" id=\"username\"/><br/>\n\t<input type=\"submit\" id=\"btn\" value=\"提交\">\n\t</form>\n\t<script type=\"text/javascript\">\n\t// 当鼠标划过文本 框,自动选中文本框中的内容\n\tvar obj = document.getElementById(\"username\");\n\tobj.onmouseover = function(){\n\t\tthis.select();\n\t}\n\t// 表单验证不为空\n\tfunction checkName(){\n\t\tif (obj.value != \"\") {\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\t</script>\n</body>\n```\n### 网页自动跳转so easy!!!\n```\n\tfunction gonewpage(){\n\t\twindow.location.href = \"./new.html\";\n\t}\n\tsetTimeout(\"gonewpage()\",2000);\n```\n\n### 在弹出窗页面输入信息，返回到原始页面中\n>一个网页,使得打开它时弹出一个全屏的窗口,该窗口中有一个文本框和一个按钮。\n**主窗口**\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>主窗口</title>\t\n</head>\n<body>\n\t<!-- 通过弹出窗口接受信息 -->\n\t<a href=\"\" id=\"a1\" target=\"new\">新窗口</a>\n\t<input type=\"text\" id=\"msg\">\n\t<script type=\"text/javascript\">\n\tvar a1 = document.getElementById(\"a1\");\n\ta1.onclick = function(){\n\t\twindow.open(\"new.html\",\"弹出窗口\",\"location=no,toolbar=no,menubar=no\");\n\t\treturn false;\n\t}\n\t</script>\n</body>\n</html>\n```\n**弹出窗口**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>弹出窗口</title>\n</head>\n<body>\n\t\t<input type=\"text\" name=\"message\" id=\"m1\"/><br/>\n\t\t<input type=\"button\" value=\"关闭\" id=\"btn\" onclick=\"btn3()\">\n\t<script type=\"text/javascript\">\n\tvar message = document.getElementById(\"m1\");\n\tvar btn2 = document.getElementById(\"btn2\");\n\tfunction btn3(){\n\t\tvar form1 = window.opener.document.getElementById(\"msg\");\n\t\tform1.value = message.value;\n\t\twindow.close();\n\t}\n\t</script>\n</body>\n</html>\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjiv001rpgwiddusic87"},{"layout":"post","title":"wamp 多站点配置","date":"2015-08-20T07:14:56.000Z","_content":">wamp\nwindows\na:apache\nm:mysql\np:php\n\n### apache的安装\n\n安装好了以后右下方会有一个小羽毛按钮。\n\n测试，浏览器的地址栏上输入`127.0.0.1`\n\n**apache四种开启方式**\n\n* 左击小羽毛或者双击小羽毛\n右击我的电脑，选择管理，再选择服务\ncmd命令行的模式\n`httpd -k start`\n\n>环境变量的设置，右击我的电脑，属性，高级系统设置，环境变量，选择path进行编辑。\nhttpd -t 检查apache是否可以正常运行\n   \n**apache几个比较重要的文件夹**\n\n* bin:里面都是一些apache可执行文件httpd.exe，apacheMonitor.exe\nhtdocs:默认站点，一般刚安装完apache以后，运行网页会放在htdocs中\nconf:里面都是apache一些可以配置的文件\nmodule：里面是apache的一些模块，加载的模块的功能就是apache的功能。\n\n### php的安装\n\n解压安装包就可以运行了。\n打开cmd，输入php.exe -v 可以查看php的版本号\n目前apache和php是两个独立的存在。\n打开apache的配置文件。\n所有加载模块都是 LoadModule 模块名 “路径”\n加载完了以后，apache不知道后缀名是.php的文件交给php脚本处理器。\n\n加载PHP模块\n``LoadModule php5_module \"C:/wamp/php/php5apache2_2.dll\"``\n\n引入php.ini配置文件\n``PHPIniDir \"C:/wamp/php\"``\n\n`addtype application/x-httpd-php  .php`\n重启apache\n\n代码中输入`phpinfo（）`可以查看php的所有信息。\n\n方法一：`c:/windows，php.ini`复制到`c:/windows`\n方法二：打开apache的配置文件，输入PHPIniDir “路径”\n\nPhp的配置文件有两个，`php.ini-development`  `php.ini-product`\n一定要重命名php.ini\n\n要给php设置时区。\n打开php.ini 搜索`date.timezone = PRC`\n\n### 安装mysql\nmysql 是一个c/s结构，同时安装了客户端和服务器端。\n配置mysql的配置文件，打开配置向导\n配置完安装，有四个勾\n打开cmd 输入`mysql.exe -uroot -proot `\n如果出现welcome界面代表大家安装成功\n\n`mysql_connect();`\n关联mysql和php\n打开php的配置文件\nextension，将php_mysql.dll的注释去掉\n`extension_dir=”路径”`\n\n打开apache的配置文件httpd.conf\n站点：`documentRoot `\n允许加载：`allow from all`\n关于允许拒绝的顺序 `order`\n设置目录：`options indexes`\n设置首页: `directoryIndex 首页名称  `\n\n配置虚拟主机\n```\n<virtualHost *:80>\ndocumentRoot 设置站点\nserverName 设置域名\ndirectoryIndex 站点\n<directory “站点”>\n\n< /directory>\n</virtualHost>\n\n```\n分布式部署\n\n`allowoverride all`\n分布式部署的文件夹 .htaccess\n不能直接创建，需要通过编辑器去创建。\n\n# 虚拟站点配置\n```\n<VirtualHost *:80>\n\t# 配置管理员的邮箱，当服务器产生500错误（服务器内部错误）的时候会在错误页面上展示该邮箱\n\tServerAdmin hi@uiste.com\n\t# 站点根目录\n\tDocumentRoot \"E:\\webdocs\\sh06\"\n\t# 站点所绑定的域名\n\tServerName www.uiste.com\n\t# 站点配置别名（域名绑定的另一种形式）\n\tServerName uiste.com\n\t# 错误日志，logs目录是指Apache目录下\n\tErrorLog \"logs/sh/error.log\"\n\t# 正常访问日志，logs也是在Apache目录下，common是指日志记录规则\n\tCustomLog \"logs/sh/access.log\" common\n\t# 针对站点目录的详细配置\n\t<Directory \"E:\\webdocs\\sh06\">\n\t\tallow from all\n\t\tAllowOverride all\n\t\tOptions +indexes\n\t</Directory>\n</VirtualHost>\n```\n\n`cmd to hosts`\n`127.0.0.1 www.sh06.com sh06.com`\n","source":"_posts/2015/201508/20150820-1.md","raw":"layout: post\ntitle: wamp 多站点配置\ndate: 2015-08-20 15:14:56\ntags:\n- PHP开发环境\ncategories:\n- PHP\n---\n>wamp\nwindows\na:apache\nm:mysql\np:php\n\n### apache的安装\n\n安装好了以后右下方会有一个小羽毛按钮。\n\n测试，浏览器的地址栏上输入`127.0.0.1`\n\n**apache四种开启方式**\n\n* 左击小羽毛或者双击小羽毛\n右击我的电脑，选择管理，再选择服务\ncmd命令行的模式\n`httpd -k start`\n\n>环境变量的设置，右击我的电脑，属性，高级系统设置，环境变量，选择path进行编辑。\nhttpd -t 检查apache是否可以正常运行\n   \n**apache几个比较重要的文件夹**\n\n* bin:里面都是一些apache可执行文件httpd.exe，apacheMonitor.exe\nhtdocs:默认站点，一般刚安装完apache以后，运行网页会放在htdocs中\nconf:里面都是apache一些可以配置的文件\nmodule：里面是apache的一些模块，加载的模块的功能就是apache的功能。\n\n### php的安装\n\n解压安装包就可以运行了。\n打开cmd，输入php.exe -v 可以查看php的版本号\n目前apache和php是两个独立的存在。\n打开apache的配置文件。\n所有加载模块都是 LoadModule 模块名 “路径”\n加载完了以后，apache不知道后缀名是.php的文件交给php脚本处理器。\n\n加载PHP模块\n``LoadModule php5_module \"C:/wamp/php/php5apache2_2.dll\"``\n\n引入php.ini配置文件\n``PHPIniDir \"C:/wamp/php\"``\n\n`addtype application/x-httpd-php  .php`\n重启apache\n\n代码中输入`phpinfo（）`可以查看php的所有信息。\n\n方法一：`c:/windows，php.ini`复制到`c:/windows`\n方法二：打开apache的配置文件，输入PHPIniDir “路径”\n\nPhp的配置文件有两个，`php.ini-development`  `php.ini-product`\n一定要重命名php.ini\n\n要给php设置时区。\n打开php.ini 搜索`date.timezone = PRC`\n\n### 安装mysql\nmysql 是一个c/s结构，同时安装了客户端和服务器端。\n配置mysql的配置文件，打开配置向导\n配置完安装，有四个勾\n打开cmd 输入`mysql.exe -uroot -proot `\n如果出现welcome界面代表大家安装成功\n\n`mysql_connect();`\n关联mysql和php\n打开php的配置文件\nextension，将php_mysql.dll的注释去掉\n`extension_dir=”路径”`\n\n打开apache的配置文件httpd.conf\n站点：`documentRoot `\n允许加载：`allow from all`\n关于允许拒绝的顺序 `order`\n设置目录：`options indexes`\n设置首页: `directoryIndex 首页名称  `\n\n配置虚拟主机\n```\n<virtualHost *:80>\ndocumentRoot 设置站点\nserverName 设置域名\ndirectoryIndex 站点\n<directory “站点”>\n\n< /directory>\n</virtualHost>\n\n```\n分布式部署\n\n`allowoverride all`\n分布式部署的文件夹 .htaccess\n不能直接创建，需要通过编辑器去创建。\n\n# 虚拟站点配置\n```\n<VirtualHost *:80>\n\t# 配置管理员的邮箱，当服务器产生500错误（服务器内部错误）的时候会在错误页面上展示该邮箱\n\tServerAdmin hi@uiste.com\n\t# 站点根目录\n\tDocumentRoot \"E:\\webdocs\\sh06\"\n\t# 站点所绑定的域名\n\tServerName www.uiste.com\n\t# 站点配置别名（域名绑定的另一种形式）\n\tServerName uiste.com\n\t# 错误日志，logs目录是指Apache目录下\n\tErrorLog \"logs/sh/error.log\"\n\t# 正常访问日志，logs也是在Apache目录下，common是指日志记录规则\n\tCustomLog \"logs/sh/access.log\" common\n\t# 针对站点目录的详细配置\n\t<Directory \"E:\\webdocs\\sh06\">\n\t\tallow from all\n\t\tAllowOverride all\n\t\tOptions +indexes\n\t</Directory>\n</VirtualHost>\n```\n\n`cmd to hosts`\n`127.0.0.1 www.sh06.com sh06.com`\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjix001wpgwi2artkfoj"},{"layout":"post","title":"php基础语法-常量、变量、数据类型","date":"2015-08-21T07:27:09.000Z","_content":"\n### php的四种头文件\n\n2种标准模式的头文件 \n><?php  ?>   \n<script language=’php’></script>\n\n短标签模式    <?     ?>   修改配置文件`short_open_tag=on`\n\nasp模式\t\t\t<%    %>   修改配置文件`asp_tags=on`\n\n### php的基本语法\n1.\tphp每条语句结束时必须加上结束符;，除非是代码的最后一条语句，并且要有结束标签。\n2.\tphp在单独存在的时候，结束标签可以省略，但是，如果是和html混编在一起，并且结束时后面还有Html代码，则结束标签不能省略\n3.\tphp的输出。\n\n```\necho \nprint\nvar_dump    3个  类型，长度，值\n\n```\n\n### 变量\n\n$变量名 = 变量值；\n变量名是由字母，数字和下划线组成，但是数字不能开头，也可以是中文。\n帕斯卡命名，驼峰命名，下划线命名。\n删除：unset(), 删除的是变量名和变量的引用，保留了变量值。\n值传递和引用传递：\n$变量名1=$变量名2  复制的是值，两个变量是独立存在的，修改一个不影响另一个结果\n$变量名1=&$变量名2  复制的是变量的引用，两个变量同时指向一个变量值，修改一个变量，另一个也会发生变化。\n\n九大超全局预定义数组变量\n\n>$_GET  :  获取地址栏提交的数据\n$_POST :   获取表单post提交的数据\n$_REQUEST  :   既能获取get提交的数据也能获取post提交的数据\n$_SERVER  :   获取服务器的信息\n$_COOKIE  :   获取cookie存储的数据\n$_FILE    :    获取文件信息\n$_SESSION   :   获取session信息\n$_ENV   :    在linux系统下获取的信息\n$GLOBALS  :   设置一个超全局变量\n\n\n$_GET获取方式：\n>表单提交\n<a>提交\njs提交\n\n?:  分割域名和get提交数据\n=： 下标和值的分割\n&： 获取的不同元素之间的分割。\n\n$_POST获取方式：表单提交\n$_POST的安全性能更高，\n$_POST获取的大小更大\n$_POST 可以获取各种数据类型\n$_GET只能获取字符串。\n\n`$_REQUEST 理解成$_GET+$_POST`\n\n既可以获取get数据也可以获取post数据\n默认情况下如果get和post提交的数据发生冲突，以post提交的数据为主。\n修改方法：打开php.ini，搜索 request_order，将GP改成PG则以get数据为主\n\n### 常量：\n\n`define(“常量名”，‘常量值’，boolean)`\n\n常量名：如果直接输出，则必须是字母数字和下划线组成，中文也可以。\n如果想输出特殊的函数，使用constant(‘常量名’)进行输出。\n\ndefined（‘常量名’）判断常量是否已经被定义。\n\n```\ndefine(\"^_^\", \"老的常量值\");\nif (!defined(\"^_^\")) {\n\tdefine(\"^_^\", \"新的常量值\");\n}else{\n\techo \"常量已经定义：\";\n}\necho constant(\"^_^\");\n```\n\nget_defined_constants（） 获取所有已经被定义过的常量\n魔术常量：\n披着常量外皮的变量。\n__LINE__    获取代码当前的行数\n__FILE__\t获取文件所在的路径\n\nconst 常量名=值。\n\n### 数据类型\n\n**标量数据类型**\n整型  int\n浮点型  float\n布尔型   boolean\n字符串   string\n\n**复合数据类型**\n数组   array\n对象\t object\n\n**特殊数据类型**\n空型    null\n资源    resource\n\n整型  \n四个字节，32位，第一位为符号位  0为正  1为负\n最大值  $$2^31-1    -2^31$$     如果超出最大值，则会变成浮点型。\nPHP_INT_MAX 可以获取Int类型的最大值\n\n**进制转换**\n十进制 转其他进制使用除法\n从下往上读取\n其他进制转换成十进制使用乘法\n\n2\t：\tbin\n8\t：\toct\n10\t：\tdec\n16\t：\thex\n二进制转换为十进制：\nbindec(‘需要转换的数字’)\n八进制转换为十进制：\noctdec(‘需要转换的数字’)\n十六进制转换成十进制：\nhexdec(‘需要转换的数字’)\n十进制转换为二，八，十六进制：\ndecbin();   decoct();    dechex();\n\n**浮点型**\n有效数字是14位\n如果要表示一个有效数字超出14位的数字，使用科学记数法。\naEb  a*10^b\naE-b   a*10^-b\n约（1.8E308）\n浮点型的比较是不标准的。\n浮点型的进制转换\n十进制到二进制\n乘法    \n从上往下读取。\n绝大情况下获取的数字都是无限循环小数，所以，php只能取他的近似值。\n\n**布尔型**\n只有真和假，一般在条件判断中使用。\n整型：值为零的情况下是false其他都是true\n字符串：字符串0，和空的情况下，是false，其他都是true\n其他数据类型：只有空的情况下，结果为false，其他都是true\n\n**字符串**\n单引号：若输出字符串使用单引号速度较快\n双引号：会解析引号内的内容，如果包含的是变量会转换成结果\nheredoc：\n>语法\n<<<heredoc\n.......................\n.........\nheredoc;\n\nnowdoc：\n>语法\n<<<’heredoc’\n................\n............\nheredoc;\n\n注意：\n>前后名称可以随意起但是必须要一致。\n结束名称必须要在当前行的最左边。\n结束名称后面必须要加;\nheredoc可以解析php中的变量，但是nowdoc不能解析php中的变量。他俩的区别和单引号双引号的区别非常的相似\nnowdoc是高版本php中才支持的语言\n\n\n/*php会将机器语言，存储在内存之中*/","source":"_posts/2015/201508/20150821-1.md","raw":"layout: post\ntitle: php基础语法-常量、变量、数据类型\ndate: 2015-08-21 15:27:09\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n\n### php的四种头文件\n\n2种标准模式的头文件 \n><?php  ?>   \n<script language=’php’></script>\n\n短标签模式    <?     ?>   修改配置文件`short_open_tag=on`\n\nasp模式\t\t\t<%    %>   修改配置文件`asp_tags=on`\n\n### php的基本语法\n1.\tphp每条语句结束时必须加上结束符;，除非是代码的最后一条语句，并且要有结束标签。\n2.\tphp在单独存在的时候，结束标签可以省略，但是，如果是和html混编在一起，并且结束时后面还有Html代码，则结束标签不能省略\n3.\tphp的输出。\n\n```\necho \nprint\nvar_dump    3个  类型，长度，值\n\n```\n\n### 变量\n\n$变量名 = 变量值；\n变量名是由字母，数字和下划线组成，但是数字不能开头，也可以是中文。\n帕斯卡命名，驼峰命名，下划线命名。\n删除：unset(), 删除的是变量名和变量的引用，保留了变量值。\n值传递和引用传递：\n$变量名1=$变量名2  复制的是值，两个变量是独立存在的，修改一个不影响另一个结果\n$变量名1=&$变量名2  复制的是变量的引用，两个变量同时指向一个变量值，修改一个变量，另一个也会发生变化。\n\n九大超全局预定义数组变量\n\n>$_GET  :  获取地址栏提交的数据\n$_POST :   获取表单post提交的数据\n$_REQUEST  :   既能获取get提交的数据也能获取post提交的数据\n$_SERVER  :   获取服务器的信息\n$_COOKIE  :   获取cookie存储的数据\n$_FILE    :    获取文件信息\n$_SESSION   :   获取session信息\n$_ENV   :    在linux系统下获取的信息\n$GLOBALS  :   设置一个超全局变量\n\n\n$_GET获取方式：\n>表单提交\n<a>提交\njs提交\n\n?:  分割域名和get提交数据\n=： 下标和值的分割\n&： 获取的不同元素之间的分割。\n\n$_POST获取方式：表单提交\n$_POST的安全性能更高，\n$_POST获取的大小更大\n$_POST 可以获取各种数据类型\n$_GET只能获取字符串。\n\n`$_REQUEST 理解成$_GET+$_POST`\n\n既可以获取get数据也可以获取post数据\n默认情况下如果get和post提交的数据发生冲突，以post提交的数据为主。\n修改方法：打开php.ini，搜索 request_order，将GP改成PG则以get数据为主\n\n### 常量：\n\n`define(“常量名”，‘常量值’，boolean)`\n\n常量名：如果直接输出，则必须是字母数字和下划线组成，中文也可以。\n如果想输出特殊的函数，使用constant(‘常量名’)进行输出。\n\ndefined（‘常量名’）判断常量是否已经被定义。\n\n```\ndefine(\"^_^\", \"老的常量值\");\nif (!defined(\"^_^\")) {\n\tdefine(\"^_^\", \"新的常量值\");\n}else{\n\techo \"常量已经定义：\";\n}\necho constant(\"^_^\");\n```\n\nget_defined_constants（） 获取所有已经被定义过的常量\n魔术常量：\n披着常量外皮的变量。\n__LINE__    获取代码当前的行数\n__FILE__\t获取文件所在的路径\n\nconst 常量名=值。\n\n### 数据类型\n\n**标量数据类型**\n整型  int\n浮点型  float\n布尔型   boolean\n字符串   string\n\n**复合数据类型**\n数组   array\n对象\t object\n\n**特殊数据类型**\n空型    null\n资源    resource\n\n整型  \n四个字节，32位，第一位为符号位  0为正  1为负\n最大值  $$2^31-1    -2^31$$     如果超出最大值，则会变成浮点型。\nPHP_INT_MAX 可以获取Int类型的最大值\n\n**进制转换**\n十进制 转其他进制使用除法\n从下往上读取\n其他进制转换成十进制使用乘法\n\n2\t：\tbin\n8\t：\toct\n10\t：\tdec\n16\t：\thex\n二进制转换为十进制：\nbindec(‘需要转换的数字’)\n八进制转换为十进制：\noctdec(‘需要转换的数字’)\n十六进制转换成十进制：\nhexdec(‘需要转换的数字’)\n十进制转换为二，八，十六进制：\ndecbin();   decoct();    dechex();\n\n**浮点型**\n有效数字是14位\n如果要表示一个有效数字超出14位的数字，使用科学记数法。\naEb  a*10^b\naE-b   a*10^-b\n约（1.8E308）\n浮点型的比较是不标准的。\n浮点型的进制转换\n十进制到二进制\n乘法    \n从上往下读取。\n绝大情况下获取的数字都是无限循环小数，所以，php只能取他的近似值。\n\n**布尔型**\n只有真和假，一般在条件判断中使用。\n整型：值为零的情况下是false其他都是true\n字符串：字符串0，和空的情况下，是false，其他都是true\n其他数据类型：只有空的情况下，结果为false，其他都是true\n\n**字符串**\n单引号：若输出字符串使用单引号速度较快\n双引号：会解析引号内的内容，如果包含的是变量会转换成结果\nheredoc：\n>语法\n<<<heredoc\n.......................\n.........\nheredoc;\n\nnowdoc：\n>语法\n<<<’heredoc’\n................\n............\nheredoc;\n\n注意：\n>前后名称可以随意起但是必须要一致。\n结束名称必须要在当前行的最左边。\n结束名称后面必须要加;\nheredoc可以解析php中的变量，但是nowdoc不能解析php中的变量。他俩的区别和单引号双引号的区别非常的相似\nnowdoc是高版本php中才支持的语言\n\n\n/*php会将机器语言，存储在内存之中*/","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjiy001zpgwi8n204ozc"},{"layout":"post","title":"Mac系统截图快捷键详细介绍","date":"2015-08-21T16:53:12.000Z","_content":"这篇文章介绍了Mac系统截图快捷键组合方式，使用不同的快捷键组合可以在Mac系统截取不同大小和区域的截图。完全可以不用第三方截图工具了，Mac很强大！\n\n### 一、基础快捷键（+表示同时操作、-表示分步操作)\n\nCmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。\n\nCmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。\n\nCmd+Shift+4 – 单击空格键 – 鼠标单击指定窗口：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面文件夹。\n\n### 二、进阶快捷键\n\nCmd+Shift+4 – 按住空格键拖动鼠标：区域截图；选取区域范围后，按住空格键并拖到鼠标可移动选取范围，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Shift – 上下/左右移动鼠标：区域截图；选取区域范围后，按住 Shift 并上下/左右移动鼠标即可固定选取范围宽度/高度改变高度/宽度，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Shift和Option: 区域截图；选取区域范围后，按住 Shift 和 Option 键在上一快捷键功能的基础上自由切换高度宽度，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Option: 区域截图；选取区域范围后，按住 Option 键可按比例缩放选取范围，释放按键后保存截图至桌面文件夹。\n\nPS：以上介绍的快捷键配合按住 Control 键即可将截图文件保存在剪切板，以供调用。\n\n### 三、利用终端截图\n\n还有比较 Geek 的方法就是通过终端（Terminal）命令来截图，终端截图命令 screencapture 有十多种参数可以选择，比如截图后立即显示、消除截图声音、延迟数秒后截图等。有兴趣的读者可以通过下面这条命令查看各个参数的具体使用方法。 screencapture -h","source":"_posts/2015/201508/20150822-1.md","raw":"layout: post\ntitle: Mac系统截图快捷键详细介绍\ndate: 2015-08-22 00:53:12\ntags:\n- Mac系统工具\ncategories:\n- 工具\n---\n这篇文章介绍了Mac系统截图快捷键组合方式，使用不同的快捷键组合可以在Mac系统截取不同大小和区域的截图。完全可以不用第三方截图工具了，Mac很强大！\n\n### 一、基础快捷键（+表示同时操作、-表示分步操作)\n\nCmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。\n\nCmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。\n\nCmd+Shift+4 – 单击空格键 – 鼠标单击指定窗口：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面文件夹。\n\n### 二、进阶快捷键\n\nCmd+Shift+4 – 按住空格键拖动鼠标：区域截图；选取区域范围后，按住空格键并拖到鼠标可移动选取范围，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Shift – 上下/左右移动鼠标：区域截图；选取区域范围后，按住 Shift 并上下/左右移动鼠标即可固定选取范围宽度/高度改变高度/宽度，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Shift和Option: 区域截图；选取区域范围后，按住 Shift 和 Option 键在上一快捷键功能的基础上自由切换高度宽度，释放按键后保存截图至桌面文件夹。\n\nCmd+Shift+4 – 按住Option: 区域截图；选取区域范围后，按住 Option 键可按比例缩放选取范围，释放按键后保存截图至桌面文件夹。\n\nPS：以上介绍的快捷键配合按住 Control 键即可将截图文件保存在剪切板，以供调用。\n\n### 三、利用终端截图\n\n还有比较 Geek 的方法就是通过终端（Terminal）命令来截图，终端截图命令 screencapture 有十多种参数可以选择，比如截图后立即显示、消除截图声音、延迟数秒后截图等。有兴趣的读者可以通过下面这条命令查看各个参数的具体使用方法。 screencapture -h","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjiz0022pgwi6pbxra67"},{"layout":"post","title":"PHP思想养成-打印菱形","date":"2015-08-22T08:47:09.000Z","_content":"\n>拿出一张纸画个图，站在代码外面的世界，分析一下功能实现的步骤，再讲思想转换成代码\n\n```php\n<?php \nheader(\"content-type:text/html;charset=utf-8\");\n// PHP打印菱形的两种方法，备注的信息由于定义层数是从0开始，所以思想与代码有略微区别\n// copyright ：uiste\necho \"方法一：通过判定半个菱形的层数将剩余层数输出<br/>\";\n//定义所打印菱形的上半区的层数\n$row = 5;\n//循环上半区层数从第0层到层数减一\nfor ($i=0; $i < $row; $i++) { \n\t//先打印左侧的空格：总层数减去当前层数减1\n\tfor ($j=0; $j < $row-$i-1; $j++) { \n\t\techo \"&nbsp\";\n\t}\n\t//打印“*”号，当前层数乘以2加1\n\tfor ($k=0; $k < $i*2+1; $k++) { \n\t\techo \"*\";\n\t}\n\techo \"<br/>\";\n}\n//循环下班去层数从上半区总层数减1\nfor ($i=0; $i < $row-1; $i++) { \n\t//打印左侧空格等于下班去当前的层数\n\tfor ($j=0; $j <= $i; $j++) { \n\t\techo \"&nbsp\";\n\t}\n\t//打印“*”号，下半区总层数减去当前层数乘以2加1\n\tfor ($k=0; $k < ($row-1-$i)*2-1; $k++) { \n\t\techo \"*\";\n\t}\n\techo \"<br/>\";\n}\n\necho \"<br/>方法：通过整个层数判定分区进行输出（必须为奇数层数）<br/>\";\n//定义所打印菱形的总层数\n$row=9;\n//定义上半区的总层数\n$n = ceil($row/2);\n//循环所有层数\nfor ($i=0; $i < $row; $i++) { \n\t//判断若小于上半区层数进行上半区的循环\n\tif ($i<$n) {\n\t\t//打印空格上半区总层数减去当前层数\n\t\tfor ($j=0; $j < $n-$i-1; $j++) { \n\t\t\techo \"&nbsp\";\n\t\t}\n\t\t//打印“*”号，当前层数乘以2减1\n\t\tfor ($k=0; $k < $i*2+1; $k++) { \n\t\t\techo \"*\";\n\t\t}\n\t\techo \"<br/>\";\n\t}else{\n\t\t//如果条件不满足上去，开始打印下半区信息\n\t\t//先打印空格，等于当前层数减去上半区层数\n\t\tfor ($j=0; $j < $i-$n+1; $j++) { \n\t\t\techo \"&nbsp\";\n\t\t}\n\t\t//打印“*”号，等于总层数减去已经打印层数乘以2加1\n\t\tfor ($k=0; $k < ($row-$i)*2-1; $k++) { \n\t\t\techo \"*\";\n\t\t}\n\t\techo \"<br/>\";\n\t}\n}\n\n ?>\n ```","source":"_posts/2015/201508/20150822-2.md","raw":"layout: post\ntitle: PHP思想养成-打印菱形\ndate: 2015-08-22 16:47:09\ntags:\n- PHP思想养成\ncategories:\n- PHP\n---\n\n>拿出一张纸画个图，站在代码外面的世界，分析一下功能实现的步骤，再讲思想转换成代码\n\n```php\n<?php \nheader(\"content-type:text/html;charset=utf-8\");\n// PHP打印菱形的两种方法，备注的信息由于定义层数是从0开始，所以思想与代码有略微区别\n// copyright ：uiste\necho \"方法一：通过判定半个菱形的层数将剩余层数输出<br/>\";\n//定义所打印菱形的上半区的层数\n$row = 5;\n//循环上半区层数从第0层到层数减一\nfor ($i=0; $i < $row; $i++) { \n\t//先打印左侧的空格：总层数减去当前层数减1\n\tfor ($j=0; $j < $row-$i-1; $j++) { \n\t\techo \"&nbsp\";\n\t}\n\t//打印“*”号，当前层数乘以2加1\n\tfor ($k=0; $k < $i*2+1; $k++) { \n\t\techo \"*\";\n\t}\n\techo \"<br/>\";\n}\n//循环下班去层数从上半区总层数减1\nfor ($i=0; $i < $row-1; $i++) { \n\t//打印左侧空格等于下班去当前的层数\n\tfor ($j=0; $j <= $i; $j++) { \n\t\techo \"&nbsp\";\n\t}\n\t//打印“*”号，下半区总层数减去当前层数乘以2加1\n\tfor ($k=0; $k < ($row-1-$i)*2-1; $k++) { \n\t\techo \"*\";\n\t}\n\techo \"<br/>\";\n}\n\necho \"<br/>方法：通过整个层数判定分区进行输出（必须为奇数层数）<br/>\";\n//定义所打印菱形的总层数\n$row=9;\n//定义上半区的总层数\n$n = ceil($row/2);\n//循环所有层数\nfor ($i=0; $i < $row; $i++) { \n\t//判断若小于上半区层数进行上半区的循环\n\tif ($i<$n) {\n\t\t//打印空格上半区总层数减去当前层数\n\t\tfor ($j=0; $j < $n-$i-1; $j++) { \n\t\t\techo \"&nbsp\";\n\t\t}\n\t\t//打印“*”号，当前层数乘以2减1\n\t\tfor ($k=0; $k < $i*2+1; $k++) { \n\t\t\techo \"*\";\n\t\t}\n\t\techo \"<br/>\";\n\t}else{\n\t\t//如果条件不满足上去，开始打印下半区信息\n\t\t//先打印空格，等于当前层数减去上半区层数\n\t\tfor ($j=0; $j < $i-$n+1; $j++) { \n\t\t\techo \"&nbsp\";\n\t\t}\n\t\t//打印“*”号，等于总层数减去已经打印层数乘以2加1\n\t\tfor ($k=0; $k < ($row-$i)*2-1; $k++) { \n\t\t\techo \"*\";\n\t\t}\n\t\techo \"<br/>\";\n\t}\n}\n\n ?>\n ```","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjj00024pgwi103i9cqf"},{"layout":"post","title":"php基础语法-数据类型、运算符、分支结构、包含文件","date":"2015-08-23T13:03:06.000Z","_content":"\n### ASCII编码\n\nASCII码一共有128个，一个ASCII编码占用1个字节，也就是8位。所以我们书写字符串的时候，一个字母占用1个字节。\nASCII编码全部都是连续的，比如A是65，B是66，C，67。\nASCII编码小写字母比大写字母大32。比如A是65，小写a是97。\n\nchr()   :\t将一个数字转换成对应的ASCII码的字符。\nord() \t:\t将一个ASCII码的字符转换成相对应的数\n\n\\num   就是将八进制的num转换成ascii编码\n\\xnum  就是将十六进制的num转换成ascii编码\n\n### 布尔型\n\n数字：0、0.0、0.00 等0数都是false\n字符串：\"0\"、\" \"空字符串都是false\nnull 和所有为空的数据类型都是false\n\n### 数组\n\n如果不给数组添加下标，则默认下标从0开始依次递增\n如果数组元素下标之前已经存在数字下标了，那么新的元素下标则为之前元素下标的最大值`+1`;\n如果数组元素存在同样的下标，那么后面下标对应的值会将前面的值给**覆盖**。\n数组的**下标**只能是字符串或者整型，如果是其他数据类型，他会将其强制转换成字符串或者整型。\n\n### 对象\n\n对象和数组非常的相似，唯一的区别就是可以在对象里面书写函数，所以我们一般成对象为有生命的数组\n\n### 空型  null\n\n如果一个变量，我们不进行赋值，那么他就是一个null\n同样的我们也可以主动的给一个变量赋值为null\n一般情况下，如果一个变量占据了很大的空间，我们又暂时用不到他，我们就可以将他赋值为null，这样他所占据的空间就会被释放\n\n### 资源  resource\n\n一般来说，我们不能自己去创建一个资源，所有的资源都是php已经预先定义好的，我们所能做的就是直接拿过来使用。\n\n### 数据类型的转换\n\n字符串存储在计算机中，是以ASCII编码进行存储，所以他们的存储方式不一样，在做不同数据类型计算的时候，计算机会自动的做一个数据类型的转换\n\n计算机自动的做数据类型的转换\n\n```\n$a = 12;\n$b = '4abc';\necho $a+$b;\n```\n\n获取的数据和我们想要的结果不一样，所以我们需要手动的做数据类型的转换\n\n```\n$a = 12;\n$b = 3.45;\necho $a+(int)$b;\n```\n(需要转换的数据类型)需要转换的数字即可\n\n>如果是一个纯数字的字符串转换的结果就是数字本身，如果带有字母，则从最左边寻找，如果遇到字母，则直接将右边的部分抛弃，如果是空的内容，则强制转换整型的结果为0，false为0,true为1\n\n### 运算符\n\n当进行逻辑运算的时候，如果左边已经达到了最终的结果，那么php为了节省运算的时间，右边就不进行运算了，那么相当于右边的内容被短路了。所以为了避免逻辑短路，尽量不要在逻辑运算符中做算数运算\n\n>思考： a++和a+=1对于a本身而言是否一样？\n答案： 不一样，在++操作字符串的时候，他会做ASCII编码操作。\n一般来说，只有在算数运算中使用自增自减操作\n\n### 常用的函数\n\n**isset()**\n\nisset(变量名) ： 判断一个变量是否已经被定义。如果被定义，返回的结果是true，否则返回的结果是false。\n只有变量没有被定义或者变量被定义的结果是null，那么isset()返回的结果是false，除此以外，只要你定义了这个变量，isset的结果就是true。\n\n**empty()**\n\n语法：empty(变量名)，如果变量里面的内容不为空，则返回的结果是false，否则返回的结果为true。\n\nempty转换的结果和boolean转换的结果正好相反，所以，只需要记住其中一个就可以了。\n\n**is_XXX**\n\nXXX表示一个数据类型。\nis_int(变量)  判断变量是否是一个整型，true表示是整型，false表示不是整型。\nis_boolean()\nis_string()\nis_float()\n\n### 替代语法\n\n将开始的大括号使用:进行替代，将结束的大括号使用end XXX来替代，这里面的XXX代表的就是这个结构的名称\n结尾加上“;”分号\n\n>替代语法一般来说，是写在html和php的混编语言中\n使用替代语法，可以非常清晰明了的判断，结束标记到底是属于哪个结构\n\n**if语句中如果要是用elseif的话在else和if之间不要加上空格**\n\n>思考：如果for循环执行了n次循环，那么初始化变量，条件判断和变量更新分别执行了多少次？\n答案： 初始化变量执行1次，条件判断执行n+1次，变量更新执行n次。\n\n**break,continue参数的问题**\nbreak和continue默认的参数是1，代表break和continue只会跳出当前的一层for循环，如果你想让break和continue一次性跳出多层循环，需要在break和continue的后面加上一个需要跳出的层数\n\n**关于switch跳出循环的问题**\n我们可以将switch看成是一个只执行一次的循环体，所以如果要在switch中跳出循环，则要在break的基础上+1\n\n在switch语句中写break和continue的效果是一模一样的\n\n### 绝对路径和相对路径\n\n所谓的相对路径，就是相对于当前文件去查找另一个文件就是一个相对路径。\n绝对路径就是不参照任何一个位置，所书写的地址。\n程序中的绝对路径就是从盘符开始，去书写一个路径\n\n../文件名   \t上一级文件夹\n./文件名    \t当前文件夹\n文件名\t\t当前文件夹\n\n\n### 包含文件\n\n所谓的包含文件就是将需要的文件加载到你所编写的文件中去，包含文件有四种方式。\n`include`  `include_once`  `require`   `require_once`\n\n**include加载文件**\n语法，include(需要加载的文件) ， include 需要加载的文件\n\n>相对路径的位置不太好确定，在工作中容易引发报错，所以在工作中最好去使用绝对路径\n\n打开phpinfo()，搜索include_path\n\n使用`set_include_path`(‘需要设置的目录’)\n```\n$str = get_include_path();\nset_include_path('c:/php/joker;'.$str);\ninclude('joker.php');\n```\n>思考，将原来的路径放在新增文件夹路径的左边效率更高还是右边效率更高？\n答案：放在右边更高\n>一般情况下，在项目中，会将所有需要加载的文件统一放在一个文件夹中，通过set_include_path去进行设置加载\n\n**include PK require**\nrequire也是加载一个文件\ninclude加载文件，如果出现了错误，会报一个警告性（warning）的错误，然后代码还会继续往下执行。\nrequire加载文件，如果出现了错误，会报一个致命性（fatal error）的错误。然后代码就不会继续往下执行。\n\n**include PK include_once**\ninclude如果载入相同的文件都会分别去执行，但是include_once如果载入相同的文件，只会执行一次。\n\n`include_once` 的效率更低，因为include_once在加载一个文件之前，都会检查前面的代码，看看这个文件是否已经被加载过了\n\n**exit()/die()**\nexit()和die()是同一样函数，只不过起的名字不同。它的作用就是让一个程序终止执行。\n\n**sleep()**\n延时函数，让一个程序停止任意秒后继续执行\n\n\n\n\n","source":"_posts/2015/201508/20150823-1.md","raw":"layout: post\ntitle: php基础语法-数据类型、运算符、分支结构、包含文件\ndate: 2015-08-23 21:03:06\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n\n### ASCII编码\n\nASCII码一共有128个，一个ASCII编码占用1个字节，也就是8位。所以我们书写字符串的时候，一个字母占用1个字节。\nASCII编码全部都是连续的，比如A是65，B是66，C，67。\nASCII编码小写字母比大写字母大32。比如A是65，小写a是97。\n\nchr()   :\t将一个数字转换成对应的ASCII码的字符。\nord() \t:\t将一个ASCII码的字符转换成相对应的数\n\n\\num   就是将八进制的num转换成ascii编码\n\\xnum  就是将十六进制的num转换成ascii编码\n\n### 布尔型\n\n数字：0、0.0、0.00 等0数都是false\n字符串：\"0\"、\" \"空字符串都是false\nnull 和所有为空的数据类型都是false\n\n### 数组\n\n如果不给数组添加下标，则默认下标从0开始依次递增\n如果数组元素下标之前已经存在数字下标了，那么新的元素下标则为之前元素下标的最大值`+1`;\n如果数组元素存在同样的下标，那么后面下标对应的值会将前面的值给**覆盖**。\n数组的**下标**只能是字符串或者整型，如果是其他数据类型，他会将其强制转换成字符串或者整型。\n\n### 对象\n\n对象和数组非常的相似，唯一的区别就是可以在对象里面书写函数，所以我们一般成对象为有生命的数组\n\n### 空型  null\n\n如果一个变量，我们不进行赋值，那么他就是一个null\n同样的我们也可以主动的给一个变量赋值为null\n一般情况下，如果一个变量占据了很大的空间，我们又暂时用不到他，我们就可以将他赋值为null，这样他所占据的空间就会被释放\n\n### 资源  resource\n\n一般来说，我们不能自己去创建一个资源，所有的资源都是php已经预先定义好的，我们所能做的就是直接拿过来使用。\n\n### 数据类型的转换\n\n字符串存储在计算机中，是以ASCII编码进行存储，所以他们的存储方式不一样，在做不同数据类型计算的时候，计算机会自动的做一个数据类型的转换\n\n计算机自动的做数据类型的转换\n\n```\n$a = 12;\n$b = '4abc';\necho $a+$b;\n```\n\n获取的数据和我们想要的结果不一样，所以我们需要手动的做数据类型的转换\n\n```\n$a = 12;\n$b = 3.45;\necho $a+(int)$b;\n```\n(需要转换的数据类型)需要转换的数字即可\n\n>如果是一个纯数字的字符串转换的结果就是数字本身，如果带有字母，则从最左边寻找，如果遇到字母，则直接将右边的部分抛弃，如果是空的内容，则强制转换整型的结果为0，false为0,true为1\n\n### 运算符\n\n当进行逻辑运算的时候，如果左边已经达到了最终的结果，那么php为了节省运算的时间，右边就不进行运算了，那么相当于右边的内容被短路了。所以为了避免逻辑短路，尽量不要在逻辑运算符中做算数运算\n\n>思考： a++和a+=1对于a本身而言是否一样？\n答案： 不一样，在++操作字符串的时候，他会做ASCII编码操作。\n一般来说，只有在算数运算中使用自增自减操作\n\n### 常用的函数\n\n**isset()**\n\nisset(变量名) ： 判断一个变量是否已经被定义。如果被定义，返回的结果是true，否则返回的结果是false。\n只有变量没有被定义或者变量被定义的结果是null，那么isset()返回的结果是false，除此以外，只要你定义了这个变量，isset的结果就是true。\n\n**empty()**\n\n语法：empty(变量名)，如果变量里面的内容不为空，则返回的结果是false，否则返回的结果为true。\n\nempty转换的结果和boolean转换的结果正好相反，所以，只需要记住其中一个就可以了。\n\n**is_XXX**\n\nXXX表示一个数据类型。\nis_int(变量)  判断变量是否是一个整型，true表示是整型，false表示不是整型。\nis_boolean()\nis_string()\nis_float()\n\n### 替代语法\n\n将开始的大括号使用:进行替代，将结束的大括号使用end XXX来替代，这里面的XXX代表的就是这个结构的名称\n结尾加上“;”分号\n\n>替代语法一般来说，是写在html和php的混编语言中\n使用替代语法，可以非常清晰明了的判断，结束标记到底是属于哪个结构\n\n**if语句中如果要是用elseif的话在else和if之间不要加上空格**\n\n>思考：如果for循环执行了n次循环，那么初始化变量，条件判断和变量更新分别执行了多少次？\n答案： 初始化变量执行1次，条件判断执行n+1次，变量更新执行n次。\n\n**break,continue参数的问题**\nbreak和continue默认的参数是1，代表break和continue只会跳出当前的一层for循环，如果你想让break和continue一次性跳出多层循环，需要在break和continue的后面加上一个需要跳出的层数\n\n**关于switch跳出循环的问题**\n我们可以将switch看成是一个只执行一次的循环体，所以如果要在switch中跳出循环，则要在break的基础上+1\n\n在switch语句中写break和continue的效果是一模一样的\n\n### 绝对路径和相对路径\n\n所谓的相对路径，就是相对于当前文件去查找另一个文件就是一个相对路径。\n绝对路径就是不参照任何一个位置，所书写的地址。\n程序中的绝对路径就是从盘符开始，去书写一个路径\n\n../文件名   \t上一级文件夹\n./文件名    \t当前文件夹\n文件名\t\t当前文件夹\n\n\n### 包含文件\n\n所谓的包含文件就是将需要的文件加载到你所编写的文件中去，包含文件有四种方式。\n`include`  `include_once`  `require`   `require_once`\n\n**include加载文件**\n语法，include(需要加载的文件) ， include 需要加载的文件\n\n>相对路径的位置不太好确定，在工作中容易引发报错，所以在工作中最好去使用绝对路径\n\n打开phpinfo()，搜索include_path\n\n使用`set_include_path`(‘需要设置的目录’)\n```\n$str = get_include_path();\nset_include_path('c:/php/joker;'.$str);\ninclude('joker.php');\n```\n>思考，将原来的路径放在新增文件夹路径的左边效率更高还是右边效率更高？\n答案：放在右边更高\n>一般情况下，在项目中，会将所有需要加载的文件统一放在一个文件夹中，通过set_include_path去进行设置加载\n\n**include PK require**\nrequire也是加载一个文件\ninclude加载文件，如果出现了错误，会报一个警告性（warning）的错误，然后代码还会继续往下执行。\nrequire加载文件，如果出现了错误，会报一个致命性（fatal error）的错误。然后代码就不会继续往下执行。\n\n**include PK include_once**\ninclude如果载入相同的文件都会分别去执行，但是include_once如果载入相同的文件，只会执行一次。\n\n`include_once` 的效率更低，因为include_once在加载一个文件之前，都会检查前面的代码，看看这个文件是否已经被加载过了\n\n**exit()/die()**\nexit()和die()是同一样函数，只不过起的名字不同。它的作用就是让一个程序终止执行。\n\n**sleep()**\n延时函数，让一个程序停止任意秒后继续执行\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjj20029pgwis9upi6cp"},{"dlayout":"post","title":"php数组比较-usort","date":"2015-08-28T08:07:47.000Z","_content":"\n### usort()、getdate()\n自定义排序，书写一个函数，对数组里面的元素大小两两进行比较，如果return -1，则将大的放在前面，如果return 1，则将大的放在后面。\n\n```php\n<?php \n$arr5 = array(\n\t\tarray('name'=>'jack','age'=>24,'sex'=>'man'),\n\t\tarray('name'=>'rose','age'=>38,'sex'=>'wom'),\n\t\tarray('name'=>'lucy','age'=>16,'sex'=>'girl'),\n\t\tarray('name'=>'lili','age'=>19,'sex'=>'girl'),\n\t\tarray('name'=>'Tomi','age'=>27,'sex'=>'boy')\n\t);\n\nusort($arr5,function($num1,$num2){\n\tif ($num1['age']==$num2['age']) {\n\t\treturn 0;\n\t}\n\treturn ($num1['age']>$num2['age'] ? 1 : -1);\n});\n\necho \"<pre>\";\nvar_dump($arr5);\necho \"</pre>\";\n\n ?>\n ```\n\n >将二维数组按年龄进行排序\n\n计算上月最后一天星期几\n\n```\n//方法一：玩转一周7天\n$t = time();\n$today = date('d',$t);//28\n$weekday = localtime(time(),true);//时间数组\n$week = $weekday['tm_wday'];//今天星期几\n$res = ($today + $week)%7; //本月已过的天数+星期取7的余数就是上月最后一天\necho '上月最后一天星期：'.$res;\n\necho \"<hr>\";\n\n//方法二：玩转时间戳\n$today = getdate(time())['mday'];\n$today2 = $today*24*60*60*1000;\n$today1 = time();\n$diff = $today1 - $today2;\n$res2 = getdate($diff);\necho '上月最后一天星期：'.$res2['wday'];\n```\n\n补充小知识：\n\n```\ngetdate()[0] == time();\ngetdate(time())['mday'] == date('d',time());\n```\n\n获取当前页面编码：``mb_internal_encoding()``\n修改当前页面编码：``mb_interval_encoding(utf-8)``\n","source":"_posts/2015/201508/20150828-1.md","raw":"dlayout: post\ntitle: php数组比较-usort\ndate: 2015-08-28 16:07:47\ntags:\n- PHP思想养成\n- 数组比较\ncategories:\n- PHP\n---\n\n### usort()、getdate()\n自定义排序，书写一个函数，对数组里面的元素大小两两进行比较，如果return -1，则将大的放在前面，如果return 1，则将大的放在后面。\n\n```php\n<?php \n$arr5 = array(\n\t\tarray('name'=>'jack','age'=>24,'sex'=>'man'),\n\t\tarray('name'=>'rose','age'=>38,'sex'=>'wom'),\n\t\tarray('name'=>'lucy','age'=>16,'sex'=>'girl'),\n\t\tarray('name'=>'lili','age'=>19,'sex'=>'girl'),\n\t\tarray('name'=>'Tomi','age'=>27,'sex'=>'boy')\n\t);\n\nusort($arr5,function($num1,$num2){\n\tif ($num1['age']==$num2['age']) {\n\t\treturn 0;\n\t}\n\treturn ($num1['age']>$num2['age'] ? 1 : -1);\n});\n\necho \"<pre>\";\nvar_dump($arr5);\necho \"</pre>\";\n\n ?>\n ```\n\n >将二维数组按年龄进行排序\n\n计算上月最后一天星期几\n\n```\n//方法一：玩转一周7天\n$t = time();\n$today = date('d',$t);//28\n$weekday = localtime(time(),true);//时间数组\n$week = $weekday['tm_wday'];//今天星期几\n$res = ($today + $week)%7; //本月已过的天数+星期取7的余数就是上月最后一天\necho '上月最后一天星期：'.$res;\n\necho \"<hr>\";\n\n//方法二：玩转时间戳\n$today = getdate(time())['mday'];\n$today2 = $today*24*60*60*1000;\n$today1 = time();\n$diff = $today1 - $today2;\n$res2 = getdate($diff);\necho '上月最后一天星期：'.$res2['wday'];\n```\n\n补充小知识：\n\n```\ngetdate()[0] == time();\ngetdate(time())['mday'] == date('d',time());\n```\n\n获取当前页面编码：``mb_internal_encoding()``\n修改当前页面编码：``mb_interval_encoding(utf-8)``\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39ugjj3002cpgwie81qrpem"},{"layout":"post","title":"PHP操作数据库","date":"2015-09-04T09:18:51.000Z","_content":"### 连接数据库\n\n```\n$link=@mysql_connect('localhost:3306','root','aaa') or die(mysql_error());\t//连接数据库\nmysql_query('set names utf8');\t//设置字符编码\n//mysql_query('use jokedb');\t\t//选择数据库\nmysql_select_db('jokedb');\t//选择数据库\n```\n\n### 显示数据库函数\n#### mysql_fetch_row()\n获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false\n\n#### mysql_fetch_assoc()\nmysql_fetch_row()\n获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false\n\n#### mysql_fetch_array()\n获取资源中的一条记录，并匹配成关联数组和索引，指针下移一条。匹配不到返回false\n>数据的个数是记录的两倍，一般不使用\n\n#### mysql_fetch_object()\n获取资源中的一条记录，并匹配成对象，指针下移一条。匹配不到返回false\n\n```\n$rows = mysql_fetch_object($rs);\necho $rows->ID,'<br>'.$rows->Title;\n```\n\n### 分页原理\n总页码：``$pagecount=ceil($recordcount/$pagesize)``\n\n```\n<?php\n$titleid=isset($_GET['titleid'])?$_GET['titleid']:1;\t//笑话类别\n$pagesize=10;\t//声明一页放10条记录\n//第一步：求总记录数\n$sql=\"select count(*) from contents where title=$titleid\";\n$rs=mysql_query($sql);\n$rows=mysql_fetch_row($rs);\n$recordcount=$rows[0];\t//总记录数\n//第二步：求总页数\n$pagecount=ceil($recordcount/$pagesize);\t//总页数\n//第四步：获取当前页码\n$pageno=isset($_GET['pageno'])?$_GET['pageno']:1;\nif($pageno<1)\n\t$pageno=1;\nif($pageno>$pagecount)\n\t$pageno=$pagecount;\n//第五步：计算起始位置\n$startno=($pageno-1)*$pagesize;\n//第六步：获取当前页面的内容\n$sql=\"select * from contents where title=$titleid limit $startno,$pagesize\";\n$rs=mysql_query($sql,$link);\n?>\n```\n\n### mysql_close()关闭数据库\n如果没有的话，系统也会自动关闭的\n\n>数据库使用原则，尽量晚创建，早释放\n\n### mysql_affected_rows($link)\n取得前一次操作说影响的记录数\n\n### SqlTool工具类封装\n\n```php\n<?php\nclass SqlTool{\n\tprivate $conn;\n\tprivate $host = \"localhost\";\n\tprivate $user = \"root\";\n\tprivate $password = \"root\";\n\tprivate $db = \"test\";\n\tfunction SqlTool(){\n\t\t$this->conn=mysql_connect($this->host,$this->user,$this->password);\n\t\tif (!$this->conn) {\n\t\t\tdie(\"连接数据库失败：\").mysql_error();\n\t\t}\n\t\tmysql_select_db($db);\n\t\tmysql_query('set names utf8');\n\t}\n\n\tpublic function exeute_dql($sql){\n\t\t$res = mysql_query($sql);\n\t\treturn $res;\n\t}\n\t//完成 update,delete,insert;\n\tpublic function exeute_dml($sql){\n\t\t$b=mysql_query($sql);\n\t\tif (!$b) {\n\t\t\treturn 0;//失败\n\t\t}else{\n\t\t\tif (mysql_affected_rows($this->conn)>0) {\n\t\t\t\treturn 1;//表示成功\n\t\t\t}else{\n\t\t\t\treturn 2;//表示没有行数影响\n\t\t\t}\n\t\t}\n\t}\n}\n?>\n```\n\n调用类方法\n\n```php\n<?php \nrequire \"SqlTool.class.php\";\n$sql = \"  \";\n$sqlTool = new SqlTool();\n$res=$sqlTool->exeute_dml($sql);\n\n ?>\n```\n\n$res = mysql_query($sql,$conn);\n获取行数：$rows = mysql_affected_rows();  \n获取列数：$cols = mysql_num_fields($res);\n\n输出表头：\nfor($i = 0;$i<$colums;$i++)\t{\n\t$field_name=mysql_field_name($res,$i);\n\techo \"<th>$field_name</th>\";\n}\n\nmysql_insert_id 取得上一步insert操作产生的id号\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150904-1.md","raw":"layout: post\ntitle: PHP操作数据库\ndate: 2015-09-04 17:18:51\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n### 连接数据库\n\n```\n$link=@mysql_connect('localhost:3306','root','aaa') or die(mysql_error());\t//连接数据库\nmysql_query('set names utf8');\t//设置字符编码\n//mysql_query('use jokedb');\t\t//选择数据库\nmysql_select_db('jokedb');\t//选择数据库\n```\n\n### 显示数据库函数\n#### mysql_fetch_row()\n获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false\n\n#### mysql_fetch_assoc()\nmysql_fetch_row()\n获取资源中的一条记录，并匹配成索引数组，指针下移一条。如果匹配不到返回false\n\n#### mysql_fetch_array()\n获取资源中的一条记录，并匹配成关联数组和索引，指针下移一条。匹配不到返回false\n>数据的个数是记录的两倍，一般不使用\n\n#### mysql_fetch_object()\n获取资源中的一条记录，并匹配成对象，指针下移一条。匹配不到返回false\n\n```\n$rows = mysql_fetch_object($rs);\necho $rows->ID,'<br>'.$rows->Title;\n```\n\n### 分页原理\n总页码：``$pagecount=ceil($recordcount/$pagesize)``\n\n```\n<?php\n$titleid=isset($_GET['titleid'])?$_GET['titleid']:1;\t//笑话类别\n$pagesize=10;\t//声明一页放10条记录\n//第一步：求总记录数\n$sql=\"select count(*) from contents where title=$titleid\";\n$rs=mysql_query($sql);\n$rows=mysql_fetch_row($rs);\n$recordcount=$rows[0];\t//总记录数\n//第二步：求总页数\n$pagecount=ceil($recordcount/$pagesize);\t//总页数\n//第四步：获取当前页码\n$pageno=isset($_GET['pageno'])?$_GET['pageno']:1;\nif($pageno<1)\n\t$pageno=1;\nif($pageno>$pagecount)\n\t$pageno=$pagecount;\n//第五步：计算起始位置\n$startno=($pageno-1)*$pagesize;\n//第六步：获取当前页面的内容\n$sql=\"select * from contents where title=$titleid limit $startno,$pagesize\";\n$rs=mysql_query($sql,$link);\n?>\n```\n\n### mysql_close()关闭数据库\n如果没有的话，系统也会自动关闭的\n\n>数据库使用原则，尽量晚创建，早释放\n\n### mysql_affected_rows($link)\n取得前一次操作说影响的记录数\n\n### SqlTool工具类封装\n\n```php\n<?php\nclass SqlTool{\n\tprivate $conn;\n\tprivate $host = \"localhost\";\n\tprivate $user = \"root\";\n\tprivate $password = \"root\";\n\tprivate $db = \"test\";\n\tfunction SqlTool(){\n\t\t$this->conn=mysql_connect($this->host,$this->user,$this->password);\n\t\tif (!$this->conn) {\n\t\t\tdie(\"连接数据库失败：\").mysql_error();\n\t\t}\n\t\tmysql_select_db($db);\n\t\tmysql_query('set names utf8');\n\t}\n\n\tpublic function exeute_dql($sql){\n\t\t$res = mysql_query($sql);\n\t\treturn $res;\n\t}\n\t//完成 update,delete,insert;\n\tpublic function exeute_dml($sql){\n\t\t$b=mysql_query($sql);\n\t\tif (!$b) {\n\t\t\treturn 0;//失败\n\t\t}else{\n\t\t\tif (mysql_affected_rows($this->conn)>0) {\n\t\t\t\treturn 1;//表示成功\n\t\t\t}else{\n\t\t\t\treturn 2;//表示没有行数影响\n\t\t\t}\n\t\t}\n\t}\n}\n?>\n```\n\n调用类方法\n\n```php\n<?php \nrequire \"SqlTool.class.php\";\n$sql = \"  \";\n$sqlTool = new SqlTool();\n$res=$sqlTool->exeute_dml($sql);\n\n ?>\n```\n\n$res = mysql_query($sql,$conn);\n获取行数：$rows = mysql_affected_rows();  \n获取列数：$cols = mysql_num_fields($res);\n\n输出表头：\nfor($i = 0;$i<$colums;$i++)\t{\n\t$field_name=mysql_field_name($res,$i);\n\techo \"<th>$field_name</th>\";\n}\n\nmysql_insert_id 取得上一步insert操作产生的id号\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjj6002fpgwitz04pi6g"},{"layout":"post","title":"PHP闲来无事，小打小闹","date":"2015-09-05T08:28:29.000Z","_content":"### 文件操作\n```php\n<?php \nif (!file_exists('a/b/c/d/')) {\n\tmkdir('a/b/c/d',0777,true);\n\techo \"文件目录创建成功\";\n}elseif(!file_exists('a/b/c/d/aaa.txt')){\n\t$fp=fopen('a/b/c/d/aaa.txt','w');\n\tfwrite($fp, '闲的无聊');\n\techo \"文件内容创建成功\";\n}elseif(file_exists('a/b/c/d/aaa.txt')){\n\tunlink('a/b/c/d/aaa.txt');\n\techo \"文件内容删除成功\",'<br>';\n\trmdir('a/b/c/d');\n\trmdir('a/b/c');\n\trmdir('a/b');\n\trmdir('a');\n\techo \"文件目录删除成功\";\n}\n?>\n```\n\n### 上传下载\n核心\n>1. 设计表单时注意属性：``enctype=\"multipart/form-data\"；``\n2. 文件接收时：``print_r ($_FILES['file']);``返回数组文件内容\n3. 判断文件是否上传成功：``is_uploaded_file($_FILES['file']['tmp_name'])``\n4. 定义上传路径与保存路径\n5. // 把文件转存到希望的文件目录\n``$upload_file = $_FILES['file']['tmp_name'];``\n6. ``file_exists``判断转移文件夹存在与否，通过``mkdir``新建转移文件夹\n7. // 通过``time()``与``rand()``获取时间戳对文件重命名避免上传文件的重复而被覆盖\n``$move_file = $_SERVER['DOCUMENT_ROOT'].\"upload/\".time().rand(0,100).$_FILES['file']['name'];``\n8. 文件路径转移函数\n``move_uploaded_file($upload_file,$move_file)``\n9. 中文转码：``string iconv ( string $in_charset , string $out_charset , string $str );``\n\n前台页面\n\n```HTML\n<form action=\"control.php\" method=\"post\" enctype=\"multipart/form-data\">\n<table>\n\t<tr><td colspan=\"2\" ><font style=\"font-size: 20px;\">上传文件</font></td></tr>\n\t<tr>\n\t\t<td>文件分类</td>\n\t\t<td>\n\t\t\t<select name=\"resource\">\n\t\t\t\t<option value='pic'>图片</option>\n\t\t\t\t<option value='mus'>音乐</option>\n\t\t\t\t<option value='vio'>视频</option>\n\t\t\t\t<option value='doc'>文档</option>\n\t\t\t\t<option value='txt'>文件</option>\n\t\t\t</select>\n\t\t\t<span style='font-size:6px;color:#ff9955;'>暂时只支持上传“png”与“jpg”格式的图片资源</span>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>文件介绍</td>\n\t\t<td><textarea cols=\"30\" rows=\"10\" name=\"describe\"></textarea></td>\n\t</tr>\n\t<tr>\n\t\t<td>上传文件</td>\n\t\t<td><input type=\"file\" name=\"file\"></td>\n\t</tr>\n\t<tr>\n\t\t<td>点击提交</td>\n\t\t<td><input type=\"submit\" name=\"btn\"></td>\n\t</tr>\n</table>\n</form>\n```\n\n控制器\n\n```php\n<?php \nrequire $_SERVER['DOCUMENT_ROOT'].'inc/conn.php';\n// 判断是否提交数据\nif ($_POST['btn']) {\n\t// 接收提交内容\n\t$resource = $_POST['resource'];\n\t$describe = $_POST['describe'];\n\t// 显示FILES全局变量的信息\n\t// echo \"<pre>\";\n\t// print_r ($_FILES['file']);\n\t// echo \"</pre>\";\n\n\t//判断文件大小，限制在10M以内\n\tif ($_FILES['file']['size']>10*1024*1024) {\n\t\techo \"上传文件太大，请重新上传，页面正在跳转\";\n\t\theader('refresh:10;url=upload.php');\n\t\texit();\n\t}\n\n\t//判断上传文件格式是否满足条件(暂未完善暂时只支持png与jpg格式图片)\n\t$type = $_FILES['file']['type'];\n\t//echo $type;//通过该输出确认文件格式；\n\tif ($type!='image/jpeg'&&$type!='image/png') {\n\t\techo \"上传格式不对，请重新上传，页面正在跳转\";\n\t\theader('refresh:3;url=upload.php');\n\t\texit();\n\t}\n\t// 判断文件是否上传成功$_FILES['file']['tmp_name']代表临时文件 \n\tif (is_uploaded_file($_FILES['file']['tmp_name'])) {\n\t\t// 把文件转存到希望的文件目录\n\t\t$upload_file = $_FILES['file']['tmp_name'];\n\t\t//根据分类创建对应文件夹（应用于根据用户创建对应文件夹）\n\t\t$user_path = $_SERVER['DOCUMENT_ROOT'].\"upload/\".$resource;\n\t\tif (!file_exists($user_path)) {\n\t\t\tmkdir($user_path,0777,true);\n\t\t}\n\t\t// 通过time()与rand()获取时间戳对文件重命名避免上传文件的重复而被覆盖\n\t\t$move_file = $user_path.\"/\".time().rand(0,100).$_FILES['file']['name'];\n\t\t// 测试路径地址正确与否\n\t\t// echo $upload_file,'<br>';\n\t\t// echo $move_file;\n\t\t// 中文出错时转码函数iconv ('utf-8','gb2312',$move_file);\n\t\tif (move_uploaded_file($upload_file,$move_file)) {\n\t\t\t$sql = \"insert into resource values(null,'$resource','$describe','$move_file')\";\n\t\t\tif (mysql_query($sql)) {\n\t\t\t\techo '文件上传成功，正在跳转到下载页面...';\n\t\t\t\theader('refresh:3;url=download.php');\n\t\t\t}else{\n\t\t\t\tmysql_query($sql) or die(mysql_error());\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\techo \"文件上传失败,请上传文件...\";\n\t\t\theader('refresh:3;url=upload.php');\n\t\t}\t\n\t}else{\n\t\techo \"没有文件上传,请上传文件...\";\n\t\theader('refresh:3;url=upload.php');\n\t}\n}else{\n\techo \"未进行文件上传，正在跳转到上传页面...\";\n\theader('refresh:3;url=upload.php');\n}\n?>\n\n```\n\n显示页面\n\n```\n<?php \nrequire $_SERVER['DOCUMENT_ROOT'].'/inc/conn.php';\n$sql = \"select * from resource\";\n$resource_content = mysql_query($sql);\n\nheader('content-type:image/png');\nheader('content-length:'.filesize($filename));\nheader('Content-Disposition: attachment; filename=\"1.png\"');\nreadfile($filename);\nwhile ($resource = mysql_fetch_assoc($resource_content)) {\n\techo '<h1>文件分类:'.$resource['resource'].'<hr>';\n\techo '文件简介:'.$resource['describe'].'<br>';\n\techo '下载地址:'.$resource['filename'].'<br><br>';\n}\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150905-1.md","raw":"layout: post\ntitle: PHP闲来无事，小打小闹\ndate: 2015-09-05 16:28:29\ntags:\n- PHP思想\n---\n### 文件操作\n```php\n<?php \nif (!file_exists('a/b/c/d/')) {\n\tmkdir('a/b/c/d',0777,true);\n\techo \"文件目录创建成功\";\n}elseif(!file_exists('a/b/c/d/aaa.txt')){\n\t$fp=fopen('a/b/c/d/aaa.txt','w');\n\tfwrite($fp, '闲的无聊');\n\techo \"文件内容创建成功\";\n}elseif(file_exists('a/b/c/d/aaa.txt')){\n\tunlink('a/b/c/d/aaa.txt');\n\techo \"文件内容删除成功\",'<br>';\n\trmdir('a/b/c/d');\n\trmdir('a/b/c');\n\trmdir('a/b');\n\trmdir('a');\n\techo \"文件目录删除成功\";\n}\n?>\n```\n\n### 上传下载\n核心\n>1. 设计表单时注意属性：``enctype=\"multipart/form-data\"；``\n2. 文件接收时：``print_r ($_FILES['file']);``返回数组文件内容\n3. 判断文件是否上传成功：``is_uploaded_file($_FILES['file']['tmp_name'])``\n4. 定义上传路径与保存路径\n5. // 把文件转存到希望的文件目录\n``$upload_file = $_FILES['file']['tmp_name'];``\n6. ``file_exists``判断转移文件夹存在与否，通过``mkdir``新建转移文件夹\n7. // 通过``time()``与``rand()``获取时间戳对文件重命名避免上传文件的重复而被覆盖\n``$move_file = $_SERVER['DOCUMENT_ROOT'].\"upload/\".time().rand(0,100).$_FILES['file']['name'];``\n8. 文件路径转移函数\n``move_uploaded_file($upload_file,$move_file)``\n9. 中文转码：``string iconv ( string $in_charset , string $out_charset , string $str );``\n\n前台页面\n\n```HTML\n<form action=\"control.php\" method=\"post\" enctype=\"multipart/form-data\">\n<table>\n\t<tr><td colspan=\"2\" ><font style=\"font-size: 20px;\">上传文件</font></td></tr>\n\t<tr>\n\t\t<td>文件分类</td>\n\t\t<td>\n\t\t\t<select name=\"resource\">\n\t\t\t\t<option value='pic'>图片</option>\n\t\t\t\t<option value='mus'>音乐</option>\n\t\t\t\t<option value='vio'>视频</option>\n\t\t\t\t<option value='doc'>文档</option>\n\t\t\t\t<option value='txt'>文件</option>\n\t\t\t</select>\n\t\t\t<span style='font-size:6px;color:#ff9955;'>暂时只支持上传“png”与“jpg”格式的图片资源</span>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>文件介绍</td>\n\t\t<td><textarea cols=\"30\" rows=\"10\" name=\"describe\"></textarea></td>\n\t</tr>\n\t<tr>\n\t\t<td>上传文件</td>\n\t\t<td><input type=\"file\" name=\"file\"></td>\n\t</tr>\n\t<tr>\n\t\t<td>点击提交</td>\n\t\t<td><input type=\"submit\" name=\"btn\"></td>\n\t</tr>\n</table>\n</form>\n```\n\n控制器\n\n```php\n<?php \nrequire $_SERVER['DOCUMENT_ROOT'].'inc/conn.php';\n// 判断是否提交数据\nif ($_POST['btn']) {\n\t// 接收提交内容\n\t$resource = $_POST['resource'];\n\t$describe = $_POST['describe'];\n\t// 显示FILES全局变量的信息\n\t// echo \"<pre>\";\n\t// print_r ($_FILES['file']);\n\t// echo \"</pre>\";\n\n\t//判断文件大小，限制在10M以内\n\tif ($_FILES['file']['size']>10*1024*1024) {\n\t\techo \"上传文件太大，请重新上传，页面正在跳转\";\n\t\theader('refresh:10;url=upload.php');\n\t\texit();\n\t}\n\n\t//判断上传文件格式是否满足条件(暂未完善暂时只支持png与jpg格式图片)\n\t$type = $_FILES['file']['type'];\n\t//echo $type;//通过该输出确认文件格式；\n\tif ($type!='image/jpeg'&&$type!='image/png') {\n\t\techo \"上传格式不对，请重新上传，页面正在跳转\";\n\t\theader('refresh:3;url=upload.php');\n\t\texit();\n\t}\n\t// 判断文件是否上传成功$_FILES['file']['tmp_name']代表临时文件 \n\tif (is_uploaded_file($_FILES['file']['tmp_name'])) {\n\t\t// 把文件转存到希望的文件目录\n\t\t$upload_file = $_FILES['file']['tmp_name'];\n\t\t//根据分类创建对应文件夹（应用于根据用户创建对应文件夹）\n\t\t$user_path = $_SERVER['DOCUMENT_ROOT'].\"upload/\".$resource;\n\t\tif (!file_exists($user_path)) {\n\t\t\tmkdir($user_path,0777,true);\n\t\t}\n\t\t// 通过time()与rand()获取时间戳对文件重命名避免上传文件的重复而被覆盖\n\t\t$move_file = $user_path.\"/\".time().rand(0,100).$_FILES['file']['name'];\n\t\t// 测试路径地址正确与否\n\t\t// echo $upload_file,'<br>';\n\t\t// echo $move_file;\n\t\t// 中文出错时转码函数iconv ('utf-8','gb2312',$move_file);\n\t\tif (move_uploaded_file($upload_file,$move_file)) {\n\t\t\t$sql = \"insert into resource values(null,'$resource','$describe','$move_file')\";\n\t\t\tif (mysql_query($sql)) {\n\t\t\t\techo '文件上传成功，正在跳转到下载页面...';\n\t\t\t\theader('refresh:3;url=download.php');\n\t\t\t}else{\n\t\t\t\tmysql_query($sql) or die(mysql_error());\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\techo \"文件上传失败,请上传文件...\";\n\t\t\theader('refresh:3;url=upload.php');\n\t\t}\t\n\t}else{\n\t\techo \"没有文件上传,请上传文件...\";\n\t\theader('refresh:3;url=upload.php');\n\t}\n}else{\n\techo \"未进行文件上传，正在跳转到上传页面...\";\n\theader('refresh:3;url=upload.php');\n}\n?>\n\n```\n\n显示页面\n\n```\n<?php \nrequire $_SERVER['DOCUMENT_ROOT'].'/inc/conn.php';\n$sql = \"select * from resource\";\n$resource_content = mysql_query($sql);\n\nheader('content-type:image/png');\nheader('content-length:'.filesize($filename));\nheader('Content-Disposition: attachment; filename=\"1.png\"');\nreadfile($filename);\nwhile ($resource = mysql_fetch_assoc($resource_content)) {\n\techo '<h1>文件分类:'.$resource['resource'].'<hr>';\n\techo '文件简介:'.$resource['describe'].'<br>';\n\techo '下载地址:'.$resource['filename'].'<br><br>';\n}\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjj8002jpgwicr1jzjqu"},{"layout":"Control Mac","title":"PHP、终端-模拟get请求","date":"2015-09-05T08:57:44.000Z","_content":"\n### Mac 设置文件夹权限为777\n>1.cd 你的文件夹路径的上一级目录。\n2.``sudo chmod -R 777 文件夹名``\n3.输入密码\n4.成功\n\nfsockopen('主机','端口号','错误号','错误描述'，'连接时限');\n\n### 使用命令行模拟get请求\n\n+ telnet www.test.com 80\n\n+ ctrl + ]\n\n+ enter\n\n+ GET /httpget.php HTTP/1.1\n\n+ Host: www.test.com\n\n### 使用PHP模拟get请求\n\n```<?php \nheader('content-type:text/html;charset=utf8');\n$fp = fsockopen('www.test.com',80,$errno,$error,3);\nif (!$fp) {\n\t// 主机或者端口等定义内容写错了就会报错\n\techo '错误号'.$errno.'<br>';\n\techo '错误描述'.$error.'<br>';\n}\n$str = 'GET /httpget.php HTTP/1.1'.PHP_EOL;\n$str.= 'Host: www.test.com'.PHP_EOL;\n$str.= PHP_EOL;\n\n// 向打开的连接资源中写入数据，就是get请求数据\nfwrite($fp,$str);\n// 读取数据\nwhile (!feof($fp)) {\n\techo fgets($fp).'<br>';\n}\n\nfclose($fp);\n?>\n```\n\n","source":"_posts/2015/201509/20150905-2.md","raw":"layout: Control Mac\ntitle: PHP、终端-模拟get请求\ndate: 2015-09-05 16:57:44\ntags:\n- Mac命令熟记\n---\n\n### Mac 设置文件夹权限为777\n>1.cd 你的文件夹路径的上一级目录。\n2.``sudo chmod -R 777 文件夹名``\n3.输入密码\n4.成功\n\nfsockopen('主机','端口号','错误号','错误描述'，'连接时限');\n\n### 使用命令行模拟get请求\n\n+ telnet www.test.com 80\n\n+ ctrl + ]\n\n+ enter\n\n+ GET /httpget.php HTTP/1.1\n\n+ Host: www.test.com\n\n### 使用PHP模拟get请求\n\n```<?php \nheader('content-type:text/html;charset=utf8');\n$fp = fsockopen('www.test.com',80,$errno,$error,3);\nif (!$fp) {\n\t// 主机或者端口等定义内容写错了就会报错\n\techo '错误号'.$errno.'<br>';\n\techo '错误描述'.$error.'<br>';\n}\n$str = 'GET /httpget.php HTTP/1.1'.PHP_EOL;\n$str.= 'Host: www.test.com'.PHP_EOL;\n$str.= PHP_EOL;\n\n// 向打开的连接资源中写入数据，就是get请求数据\nfwrite($fp,$str);\n// 读取数据\nwhile (!feof($fp)) {\n\techo fgets($fp).'<br>';\n}\n\nfclose($fp);\n?>\n```\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjb002lpgwiaavuyfkp"},{"layout":"post","title":"PHP-错误处理、异常处理","date":"2015-09-07T11:33:15.000Z","_content":"\n### die 的应用\n方式一：\nif(条件){\n\tdie('错误信息');\n}\n方式二：\n执行语句 or die('错误信息');\n\n### 错误函数（处理器）\n自定义错误处理方式\n#### 创建自定义错误处理器\n\n```\nfunction customError($errno, $errstr)\n { \n echo \"<b>Error:</b> [$errno] $errstr<br />\";\n echo \"Ending Script\";\n die();\n }\n```\n\n#### Set Error Handler\n``set_error_handler(\"customError\");``\n\n#### 实例\n\n```\n<?php\n//error handler function\nfunction customError($errno, $errstr)\n { \n echo \"<b>Error:</b> [$errno] $errstr\";\n }\n\n//set error handler\nset_error_handler(\"customError\");\n\n//trigger error\necho($test);\n?>\n以上代码的输出应该类似这样：\nError: [8] Undefined variable: test\n```\n\n### 错误函数（触发器）\n\n```php\n<?php\n$age = 700;\nif ($age>120) {\n\ttrigger_error('输入年龄太大',E_USER_ERROR);\n\texit();\n}\n\n?>\n```\n\n>指定报错方式\n\n### 错误日志\n根据php.ini中的error_log配置，PHP向服务器的错误记录系统或文件发送错误记录。通过使用error_log()函数，用户可以向指定的文件或远程目的地发送错误记录\n\n``bool error_log (string $message [,int$message_type=0[,string $destination [,string $extra_headers]]])\n\n\n### 预定义异常\nexception\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150907-1.md","raw":"layout: post\ntitle: PHP-错误处理、异常处理\ndate: 2015-09-07 19:33:15\ntags:\n- PHP错误处理\n- PHP异常处理\n---\n\n### die 的应用\n方式一：\nif(条件){\n\tdie('错误信息');\n}\n方式二：\n执行语句 or die('错误信息');\n\n### 错误函数（处理器）\n自定义错误处理方式\n#### 创建自定义错误处理器\n\n```\nfunction customError($errno, $errstr)\n { \n echo \"<b>Error:</b> [$errno] $errstr<br />\";\n echo \"Ending Script\";\n die();\n }\n```\n\n#### Set Error Handler\n``set_error_handler(\"customError\");``\n\n#### 实例\n\n```\n<?php\n//error handler function\nfunction customError($errno, $errstr)\n { \n echo \"<b>Error:</b> [$errno] $errstr\";\n }\n\n//set error handler\nset_error_handler(\"customError\");\n\n//trigger error\necho($test);\n?>\n以上代码的输出应该类似这样：\nError: [8] Undefined variable: test\n```\n\n### 错误函数（触发器）\n\n```php\n<?php\n$age = 700;\nif ($age>120) {\n\ttrigger_error('输入年龄太大',E_USER_ERROR);\n\texit();\n}\n\n?>\n```\n\n>指定报错方式\n\n### 错误日志\n根据php.ini中的error_log配置，PHP向服务器的错误记录系统或文件发送错误记录。通过使用error_log()函数，用户可以向指定的文件或远程目的地发送错误记录\n\n``bool error_log (string $message [,int$message_type=0[,string $destination [,string $extra_headers]]])\n\n\n### 预定义异常\nexception\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjc002qpgwindce70pq"},{"layout":"post","title":"PHP-http协议请求、防盗链","date":"2015-09-09T11:28:00.000Z","_content":"\nHyperText Transfer Protocol  超文本传输协议（文本、图片、视频等）\nhttp 是建立在 TCP/IP协议的一个应用层协议\n\n内容一样浏览器只发出1次http请求！\n\n```\n请求行：GET /js.php HTTP/1.1 【请求资源-协议版本】\n消息头：\nHost: www.test.com  【主机】\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0   【告诉服务器浏览器的内核、操作系统】\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8  【客户端可以接受的文件类型】\nAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3  【网页语言】\nAccept-Encoding: gzip, deflate   【接收什么样的数据压缩格式】\nReferer: http://www.test.com/     【代表页面是从哪儿来的】\nConnection: keep-alive   【表示不要立即断掉】\n```\n\n```\n响应头信息\nHTTP/1.1 200 OK   【200 OK 表示客户端请求成功】\nDate: Fri, 09 Sep 2015 08:52:49 GMT  【告诉浏览器请求页面的时间】\nServer: Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3  【告诉浏览器服务的情况】\nX-Powered-By: PHP/5.5.9  \nContent-Length: 1331  【表示或送的数据有多少字节】\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html   【文档类型】\n```\n\n>Date：告诉浏览器，请求页面的时间！（用于判断页面相应时间，根据时间反应是否可以调用缓存信息）\n\n一个空行：\n消息体（实体内容）\nxxx\n\n### $_SERVER 服务器和执行环境信息\n\n```\nArray\n(\n    [UNIQUE_ID] => V9J4YX8AAAEAAPozd4EAAAAC\n    [HTTP_HOST] => www.test.com\n    [HTTP_USER_AGENT] => Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0\n    [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n    [HTTP_ACCEPT_LANGUAGE] => zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\n    [HTTP_ACCEPT_ENCODING] => gzip, deflate\n    [HTTP_CONNECTION] => keep-alive\n    [PATH] => /usr/bin:/bin:/usr/sbin:/sbin\n    [DYLD_LIBRARY_PATH] => /Applications/XAMPP/xamppfiles/lib\n    [SERVER_SIGNATURE] => \n    [SERVER_SOFTWARE] => Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3\n    [SERVER_NAME] => www.test.com\n    [SERVER_ADDR] => 127.0.0.1\n    [SERVER_PORT] => 80\n    [REMOTE_ADDR] => 127.0.0.1\n    [DOCUMENT_ROOT] => /Users/uiste/www/\n    [REQUEST_SCHEME] => http\n    [CONTEXT_PREFIX] => \n    [CONTEXT_DOCUMENT_ROOT] => /Users/uiste/www/\n    [SERVER_ADMIN] => you@example.com\n    [SCRIPT_FILENAME] => /Users/uiste/www/test.php\n    [REMOTE_PORT] => 50802\n    [GATEWAY_INTERFACE] => CGI/1.1\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [REQUEST_METHOD] => GET\n    [QUERY_STRING] => \n    [REQUEST_URI] => /test.php\n    [SCRIPT_NAME] => /test.php\n    [PHP_SELF] => /test.php\n    [REQUEST_TIME_FLOAT] => 1473411169.446\n    [REQUEST_TIME] => 1473411169\n)\n```\n\n【PATH】：服务器端的环境变量\n$_SERVER['REMOTE_ADDR'] 获取本地的IP地址；\nREQUEST_URI  获取请求的资源名\n\nDOCUMENT_ROOT 站点根目录\n\n### Referer ：防盗链\n\n```\nif (isset($_SERVER['HTTP_REFERER'])) {\n\tif (strpos($_SERVER['SERVER_ADDR'],$_SERVER['HTTP_REFERER'])===0) {\n\t\techo '您是合法用户';\n\t}else{\n\t\techo \"您是非法用户\";\n\t}\n}else{\n\techo \"你这用户不合法\";\n}\n```\n\n>注意字符串查找返回0，0与false的比较问题\n\n### http请求有两种主要的方式\nget/post\n相同：都是向服务器发送数据\n区别：\n1、安全性get请求的数据会显示在地址栏上，post请求的数据，放在http协议的消息体上\n2、http协议本身并没有限制数据的大小，主要是浏览器限制get请求2k+35\n\t对post请求没有限制\n3、get提交的更利于添加到收藏夹\n\n### 状态码\n状态码-含义\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程\n200~299：表示成功接收请求并已完成整个处理过程，常用200\n300~399：为完成请求，客户需进一步细化请求，例如，请求的资源已经移动到一个新地址，常用302，304\n400~499：客户端的请求有错误，常用404\n500~599：服务器端出现错误，常用500\n\n>302:页面重定向\n404:该页面不存在\n304:资源已存在\n\n跳转``header(\"refresh:3;url=http://www.uiste.com\");``\n\n### 通过header禁用缓存(ajax)\nheader(\"Expires:-1\");\nheader(\"Cache-Control:noch\");\nheader(\"Pragma:no-cache\");\n\n### 文件下载\n```php\n<?php \nfunction downfile($filename){\n$filename = 'xxx.jpg';\n//中文转码\n$filename = iconv('utf-8','gb2312',$filename);\n//绝对路径\n$filepath = $_SERVER['DOCUMENT_ROOT'].'down/'.$filename;\n//打开文件\nif (!file_exists($filepath)) {\n\techo '文件不存在';\n\treturn;\n}\n$fp=fopen($filename,'r');\n//获取下载文件的大小\n$filesize = filesize($filepath);\n//返回的文件\nheader(\"Content-Type:application/octet-stream\");\n//按照字节大小返回\nheader(\"Accept-Ranges:bytes\");\n//返回文件大小\nheader(\"Accept-Length:$filesize\");\n//客户端弹出对话框，对应的文件名\nheader(\"Content-Disposition:attachment;filename=\".$filename);\n//先客户端回送数据\n$buffer = 1024;\n//读取文件\n$filedata = fread($fp,$buffer);\n//关闭文件\nfclose($fp);\n}\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150909-1.md","raw":"layout: post\ntitle: PHP-http协议请求、防盗链\ndate: 2015-09-09 19:28:00\ntags:\n- http协议\n---\n\nHyperText Transfer Protocol  超文本传输协议（文本、图片、视频等）\nhttp 是建立在 TCP/IP协议的一个应用层协议\n\n内容一样浏览器只发出1次http请求！\n\n```\n请求行：GET /js.php HTTP/1.1 【请求资源-协议版本】\n消息头：\nHost: www.test.com  【主机】\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0   【告诉服务器浏览器的内核、操作系统】\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8  【客户端可以接受的文件类型】\nAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3  【网页语言】\nAccept-Encoding: gzip, deflate   【接收什么样的数据压缩格式】\nReferer: http://www.test.com/     【代表页面是从哪儿来的】\nConnection: keep-alive   【表示不要立即断掉】\n```\n\n```\n响应头信息\nHTTP/1.1 200 OK   【200 OK 表示客户端请求成功】\nDate: Fri, 09 Sep 2015 08:52:49 GMT  【告诉浏览器请求页面的时间】\nServer: Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3  【告诉浏览器服务的情况】\nX-Powered-By: PHP/5.5.9  \nContent-Length: 1331  【表示或送的数据有多少字节】\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html   【文档类型】\n```\n\n>Date：告诉浏览器，请求页面的时间！（用于判断页面相应时间，根据时间反应是否可以调用缓存信息）\n\n一个空行：\n消息体（实体内容）\nxxx\n\n### $_SERVER 服务器和执行环境信息\n\n```\nArray\n(\n    [UNIQUE_ID] => V9J4YX8AAAEAAPozd4EAAAAC\n    [HTTP_HOST] => www.test.com\n    [HTTP_USER_AGENT] => Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0\n    [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n    [HTTP_ACCEPT_LANGUAGE] => zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\n    [HTTP_ACCEPT_ENCODING] => gzip, deflate\n    [HTTP_CONNECTION] => keep-alive\n    [PATH] => /usr/bin:/bin:/usr/sbin:/sbin\n    [DYLD_LIBRARY_PATH] => /Applications/XAMPP/xamppfiles/lib\n    [SERVER_SIGNATURE] => \n    [SERVER_SOFTWARE] => Apache/2.4.7 (Unix) PHP/5.5.9 OpenSSL/1.0.1f mod_perl/2.0.8-dev Perl/v5.16.3\n    [SERVER_NAME] => www.test.com\n    [SERVER_ADDR] => 127.0.0.1\n    [SERVER_PORT] => 80\n    [REMOTE_ADDR] => 127.0.0.1\n    [DOCUMENT_ROOT] => /Users/uiste/www/\n    [REQUEST_SCHEME] => http\n    [CONTEXT_PREFIX] => \n    [CONTEXT_DOCUMENT_ROOT] => /Users/uiste/www/\n    [SERVER_ADMIN] => you@example.com\n    [SCRIPT_FILENAME] => /Users/uiste/www/test.php\n    [REMOTE_PORT] => 50802\n    [GATEWAY_INTERFACE] => CGI/1.1\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [REQUEST_METHOD] => GET\n    [QUERY_STRING] => \n    [REQUEST_URI] => /test.php\n    [SCRIPT_NAME] => /test.php\n    [PHP_SELF] => /test.php\n    [REQUEST_TIME_FLOAT] => 1473411169.446\n    [REQUEST_TIME] => 1473411169\n)\n```\n\n【PATH】：服务器端的环境变量\n$_SERVER['REMOTE_ADDR'] 获取本地的IP地址；\nREQUEST_URI  获取请求的资源名\n\nDOCUMENT_ROOT 站点根目录\n\n### Referer ：防盗链\n\n```\nif (isset($_SERVER['HTTP_REFERER'])) {\n\tif (strpos($_SERVER['SERVER_ADDR'],$_SERVER['HTTP_REFERER'])===0) {\n\t\techo '您是合法用户';\n\t}else{\n\t\techo \"您是非法用户\";\n\t}\n}else{\n\techo \"你这用户不合法\";\n}\n```\n\n>注意字符串查找返回0，0与false的比较问题\n\n### http请求有两种主要的方式\nget/post\n相同：都是向服务器发送数据\n区别：\n1、安全性get请求的数据会显示在地址栏上，post请求的数据，放在http协议的消息体上\n2、http协议本身并没有限制数据的大小，主要是浏览器限制get请求2k+35\n\t对post请求没有限制\n3、get提交的更利于添加到收藏夹\n\n### 状态码\n状态码-含义\n100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程\n200~299：表示成功接收请求并已完成整个处理过程，常用200\n300~399：为完成请求，客户需进一步细化请求，例如，请求的资源已经移动到一个新地址，常用302，304\n400~499：客户端的请求有错误，常用404\n500~599：服务器端出现错误，常用500\n\n>302:页面重定向\n404:该页面不存在\n304:资源已存在\n\n跳转``header(\"refresh:3;url=http://www.uiste.com\");``\n\n### 通过header禁用缓存(ajax)\nheader(\"Expires:-1\");\nheader(\"Cache-Control:noch\");\nheader(\"Pragma:no-cache\");\n\n### 文件下载\n```php\n<?php \nfunction downfile($filename){\n$filename = 'xxx.jpg';\n//中文转码\n$filename = iconv('utf-8','gb2312',$filename);\n//绝对路径\n$filepath = $_SERVER['DOCUMENT_ROOT'].'down/'.$filename;\n//打开文件\nif (!file_exists($filepath)) {\n\techo '文件不存在';\n\treturn;\n}\n$fp=fopen($filename,'r');\n//获取下载文件的大小\n$filesize = filesize($filepath);\n//返回的文件\nheader(\"Content-Type:application/octet-stream\");\n//按照字节大小返回\nheader(\"Accept-Ranges:bytes\");\n//返回文件大小\nheader(\"Accept-Length:$filesize\");\n//客户端弹出对话框，对应的文件名\nheader(\"Content-Disposition:attachment;filename=\".$filename);\n//先客户端回送数据\n$buffer = 1024;\n//读取文件\n$filedata = fread($fp,$buffer);\n//关闭文件\nfclose($fp);\n}\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjd002spgwimgcsqjxk"},{"layout":"post","title":"会话控制、cookie、sessions","date":"2015-09-11T06:09:59.000Z","_content":"### HTTP协议\nHTTP是无状态的协议\nHTTP协议没有内建机制来维持两个事务间的状态，无法判断在请求一个页面后再请求另外一个页面时是来自同一用户。\n\n会话控制的思想是指能够在网站中根据一个会话跟踪用户。\n\n>作用：用户登录的支持\n根据授权级别和个人喜好显示相应的内容。\n实现购物车功能\n\n实现原理：\n通过一个唯一会话ID来驱动的。会话ID是一个加密的随机数字。由PHP生成，在会话的生命周期中都会保存在客户端。保存在用户机器里的cookie中，通过URL在网络上传递。\n\n### 经典方案\n上次登录时间\n上次浏览信息\n规定时间内，不用反复登录\n\n### cookie\n如果没有设置时间，cookie不会保存到客户端，浏览器的会话结束，我们的cookie就失效了\ncookie只能保存字符串 《在此电脑记住用户名》\n对于中文，cookie会进行urlencode编码，我们可以使用urldecode解码\ncookie保存的时间可以不一样，虽然是在一个文件内\ncookie信息是通过http协议传递的\n\n如果需要保存密码，最好使用**md5**加密\n\n\n\n### 增加、更新、删除\n``setcookie('username','uiste',time()+60);``\n\n\n```\nif (isset($_COOKIE[\"user\"])) {\n\techo \"当前COOKIE是：\".$_COOKIE[\"user\"];\n\techo \"正在清楚cookie<br>\";\n\tsetcookie(\"user\",\"uiste\",time()-3600);\n}else{\n\techo \"您设置的COOKIE时间已超时<br>\";\n\techo \"正在创建COOKIE<br>\";\n\tsetcookie(\"user\",\"uiste\",time()+5);\n\techo \"cookie 创建成功有效时间为5秒<br>\";\n}\n```\n\n```\ndate_default_timezone_set(\"Asia/Shanghai\");\nif (isset($_COOKIE['time'])) {\n\techo \"您上次登录的时间是\".$_COOKIE['time'];\n\tsetcookie('time',Date(\"Y-m-d H:i:s\",time()));\n}else{\n\techo \"您是第一次登录，登录时间：\".Date('Y-m-d H:i:s',time());\n\tsetcookie('time',Date(\"Y-m-d H:i:s\",time()));\n}\n```\n\n### session\n实现简单的会话\n\n开始一个会话\n注册会话变量\n使用会话变量\n注销变量并销毁会话\n\n作用：\n>购物车\n用户信息\n一个数据供同一用户不同页面使用\n防止用户非法登录到某个页面\n\n### session可以保存的数据类型\n整形、浮点型、字符串、布尔、数组、对象\n\n### 注意\n要使用session都需要初始化\nkey不能重复\n如果要取出对象，需要事先声明类的定义\nsession文件创建是在session_start()执行后立即创建；\n\n### 配置文件\n《手册-附录-配置选项》\nphp.ini配置文件中有一组会话配置选项，可以对其进行设置。如下：\nsession.auto_start = 0 ; 在请求启动时初始化session \nsession.cache_expire = 180 ; 设置缓存中的会话文档在 n 分钟后过时\nsession.cookie_lifetime = 0 ; 设置按秒记的cookie的保存时间， 相当于设置Session的过期时间，为0时表示直到浏览器被重启 \nsession.cookie_path = / ; cookie的有效路径 \nsession.cookie_domain = ; cookie的有效域\nsession.name = PHPSESSID；  用在cookie里的session的名字 \nsession.save_handler = files ; 用于保存/取回数据的控制方式 \nsession.save_path = /tmp ; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径. \nsession.use_cookies = 1 ; 是否使用cookies \n\n需要重启Apache\n\n\n>这些步骤不一定都要发生在同一个脚本中，其中\n\n```php\n<form action=\"\" method=\"post\">\n\t\t用户名：<input type=\"text\" name=\"username\"><br>\n\t\t密　码: <input type=\"password\" name=\"password\"><br>\n\t\t<input type=\"submit\" value=\"提交\">\n\t</form>\n\t<?php \n\tif ($_POST) {\n\t\t$username = $_POST['username'];\n\t\t$password = mysql_real_escape_string($_POST['password']);\n\t\trequire '../inc/conn.php';\n\t\t$sql = \"select * from cookie where username='$username' and password='$password'\";\n\t\t$res = mysql_query($sql);\n\t\tif (mysql_fetch_assoc($res)) {\n\t\t\techo \"登录成功\";\n\t\t\t//登录成功就设置session\n\t\t\tsession_start();\n\t\t\t$_SESSION['username']=$username;\n\t\t\t$_SESSION['password']=$password;\n\t\t\techo $_SESSION['username'];\n\t\t}else{\n\t\t\techo '用户名或密码错误，请重新登录';\n\t\t}\n\t}\n\t ?>\n```\n\n```php\n<?php \nheader(\"content-type:text/html;charset=utf8\");\nsession_start();\nif (empty($_SESSION['username'])) {\n\techo \"你没有登录请重新登录<br>\";\n\techo \"<a href='hw1_form.php'>登录</a>\";\n}else{\n\techo \"可以购物\";\n\techo \"<hr>以下内容是退出功能的实现\";\n\techo \"<hr>兄弟不好意思，既然成功了我就要给你清除session了<br>\";\n\techo '清除session一共两步<br>第一步：注销变量<br>第二步：销毁会话<br>';\n\tunset($_SESSION['username']);\n\tsession_destroy();\n}\n ?>\n```\n\nsession与cookie的区别\ncookie是把用户的信息写给用户的浏览器\nsession是把用户的数据写到用户都占的``$_SESSION``中，存在服务器的某个路径文件中，只用`session`时要先初始化`session_start()`;\nphp.ini->`session.auto_start=1` 自动开启session不推荐\n\n如果客户端禁用cookie怎样实现session多页面共享\n在每个超链接上添加一个PHPSESSID=sessionid；\n同时在每个页面加入：\nif(isset($_GET['PHPSESSID'])){\n\t//设置session_id;\n\tsession_id($_GET['PHPSESSID']);\n}\n\nsession_start();\n\n使用系统内置常量：`SID`;\n\necho \"<a href='a.php?\".SID.\"'></a>\"\n>以上解决方案为URL重写\n\n\n解决非法登录问题\nif($name!=''){\n\tsession_start();\n\t$_SESSION['username']=$name;\n\theader(\"Location:登录成功页?name=$name\");\n}\n\nif(empty($_SESSION['username'])){\n\theader('Location:login.php?error=1');\n}\n\n>垃圾回收机制\ncookie默认关闭浏览器即失效\n\ncookie的生命周期是固定的\nsession的生命周期是访问即重新计算\n\n\n","source":"_posts/2015/201509/20150911-1.md","raw":"layout: post\ntitle: 会话控制、cookie、sessions\ndate: 2015-09-11 14:09:59\ntags:\n- cookie\n- sessions\n---\n### HTTP协议\nHTTP是无状态的协议\nHTTP协议没有内建机制来维持两个事务间的状态，无法判断在请求一个页面后再请求另外一个页面时是来自同一用户。\n\n会话控制的思想是指能够在网站中根据一个会话跟踪用户。\n\n>作用：用户登录的支持\n根据授权级别和个人喜好显示相应的内容。\n实现购物车功能\n\n实现原理：\n通过一个唯一会话ID来驱动的。会话ID是一个加密的随机数字。由PHP生成，在会话的生命周期中都会保存在客户端。保存在用户机器里的cookie中，通过URL在网络上传递。\n\n### 经典方案\n上次登录时间\n上次浏览信息\n规定时间内，不用反复登录\n\n### cookie\n如果没有设置时间，cookie不会保存到客户端，浏览器的会话结束，我们的cookie就失效了\ncookie只能保存字符串 《在此电脑记住用户名》\n对于中文，cookie会进行urlencode编码，我们可以使用urldecode解码\ncookie保存的时间可以不一样，虽然是在一个文件内\ncookie信息是通过http协议传递的\n\n如果需要保存密码，最好使用**md5**加密\n\n\n\n### 增加、更新、删除\n``setcookie('username','uiste',time()+60);``\n\n\n```\nif (isset($_COOKIE[\"user\"])) {\n\techo \"当前COOKIE是：\".$_COOKIE[\"user\"];\n\techo \"正在清楚cookie<br>\";\n\tsetcookie(\"user\",\"uiste\",time()-3600);\n}else{\n\techo \"您设置的COOKIE时间已超时<br>\";\n\techo \"正在创建COOKIE<br>\";\n\tsetcookie(\"user\",\"uiste\",time()+5);\n\techo \"cookie 创建成功有效时间为5秒<br>\";\n}\n```\n\n```\ndate_default_timezone_set(\"Asia/Shanghai\");\nif (isset($_COOKIE['time'])) {\n\techo \"您上次登录的时间是\".$_COOKIE['time'];\n\tsetcookie('time',Date(\"Y-m-d H:i:s\",time()));\n}else{\n\techo \"您是第一次登录，登录时间：\".Date('Y-m-d H:i:s',time());\n\tsetcookie('time',Date(\"Y-m-d H:i:s\",time()));\n}\n```\n\n### session\n实现简单的会话\n\n开始一个会话\n注册会话变量\n使用会话变量\n注销变量并销毁会话\n\n作用：\n>购物车\n用户信息\n一个数据供同一用户不同页面使用\n防止用户非法登录到某个页面\n\n### session可以保存的数据类型\n整形、浮点型、字符串、布尔、数组、对象\n\n### 注意\n要使用session都需要初始化\nkey不能重复\n如果要取出对象，需要事先声明类的定义\nsession文件创建是在session_start()执行后立即创建；\n\n### 配置文件\n《手册-附录-配置选项》\nphp.ini配置文件中有一组会话配置选项，可以对其进行设置。如下：\nsession.auto_start = 0 ; 在请求启动时初始化session \nsession.cache_expire = 180 ; 设置缓存中的会话文档在 n 分钟后过时\nsession.cookie_lifetime = 0 ; 设置按秒记的cookie的保存时间， 相当于设置Session的过期时间，为0时表示直到浏览器被重启 \nsession.cookie_path = / ; cookie的有效路径 \nsession.cookie_domain = ; cookie的有效域\nsession.name = PHPSESSID；  用在cookie里的session的名字 \nsession.save_handler = files ; 用于保存/取回数据的控制方式 \nsession.save_path = /tmp ; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径. \nsession.use_cookies = 1 ; 是否使用cookies \n\n需要重启Apache\n\n\n>这些步骤不一定都要发生在同一个脚本中，其中\n\n```php\n<form action=\"\" method=\"post\">\n\t\t用户名：<input type=\"text\" name=\"username\"><br>\n\t\t密　码: <input type=\"password\" name=\"password\"><br>\n\t\t<input type=\"submit\" value=\"提交\">\n\t</form>\n\t<?php \n\tif ($_POST) {\n\t\t$username = $_POST['username'];\n\t\t$password = mysql_real_escape_string($_POST['password']);\n\t\trequire '../inc/conn.php';\n\t\t$sql = \"select * from cookie where username='$username' and password='$password'\";\n\t\t$res = mysql_query($sql);\n\t\tif (mysql_fetch_assoc($res)) {\n\t\t\techo \"登录成功\";\n\t\t\t//登录成功就设置session\n\t\t\tsession_start();\n\t\t\t$_SESSION['username']=$username;\n\t\t\t$_SESSION['password']=$password;\n\t\t\techo $_SESSION['username'];\n\t\t}else{\n\t\t\techo '用户名或密码错误，请重新登录';\n\t\t}\n\t}\n\t ?>\n```\n\n```php\n<?php \nheader(\"content-type:text/html;charset=utf8\");\nsession_start();\nif (empty($_SESSION['username'])) {\n\techo \"你没有登录请重新登录<br>\";\n\techo \"<a href='hw1_form.php'>登录</a>\";\n}else{\n\techo \"可以购物\";\n\techo \"<hr>以下内容是退出功能的实现\";\n\techo \"<hr>兄弟不好意思，既然成功了我就要给你清除session了<br>\";\n\techo '清除session一共两步<br>第一步：注销变量<br>第二步：销毁会话<br>';\n\tunset($_SESSION['username']);\n\tsession_destroy();\n}\n ?>\n```\n\nsession与cookie的区别\ncookie是把用户的信息写给用户的浏览器\nsession是把用户的数据写到用户都占的``$_SESSION``中，存在服务器的某个路径文件中，只用`session`时要先初始化`session_start()`;\nphp.ini->`session.auto_start=1` 自动开启session不推荐\n\n如果客户端禁用cookie怎样实现session多页面共享\n在每个超链接上添加一个PHPSESSID=sessionid；\n同时在每个页面加入：\nif(isset($_GET['PHPSESSID'])){\n\t//设置session_id;\n\tsession_id($_GET['PHPSESSID']);\n}\n\nsession_start();\n\n使用系统内置常量：`SID`;\n\necho \"<a href='a.php?\".SID.\"'></a>\"\n>以上解决方案为URL重写\n\n\n解决非法登录问题\nif($name!=''){\n\tsession_start();\n\t$_SESSION['username']=$name;\n\theader(\"Location:登录成功页?name=$name\");\n}\n\nif(empty($_SESSION['username'])){\n\theader('Location:login.php?error=1');\n}\n\n>垃圾回收机制\ncookie默认关闭浏览器即失效\n\ncookie的生命周期是固定的\nsession的生命周期是访问即重新计算\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjg002wpgwi5y2k7wgr"},{"layout":"post","title":"PHP面向对象1","date":"2015-09-14T13:40:18.000Z","_content":"### 概念\n1、\tOOP：Object Oriented Programming\t面向对象编程\n2、\tOOA：Object-Oriented Analysis\t面向对象分析     \n3、\tOOD：Object-Oriented Design\t\t面向对象设计\n4、\t对象只能有属性、方法、和常量\n\n\n>类-数据类型\n对象-复杂的变量\n属性-变量\nfunction-方法、函数\n\n### 类\n类名不区分大小写\n\n通过new关键字类实例化对象，实例化的过程就是分配内存的过程\n`$stu = new Student();//实例化对象就是把对象的地址传递给$stu1变量` \n\n### 封装\na)\tpublic：公有的\t\t\t可以在类的内部和外部访问\nb)\tprotected：受保护的\t\t在整个继承链上访问\nc)\tprivate：私有的\t\t\t只能在类的内部访问\n\n>属性一般是私有的，通过公有的方法对私有的属性进行赋值和取值。这样做为了保证数据完整性\n$this在类的内部使用，表示调用当前方法的对象\n\n### 类、对象、属性、方法在内存中的表现\n内存区域\n静态区和常量区\n代码区\t<===>\t类\n堆区\t\t<===>\t对象\n栈区\t\t<===>\t对象的变量，变量指向的是对象的地址\n\n>调用属性直接调用对象中的对应属性即可。\n调用方法先获取对象所在的类，然后调用类中的方法。\n\n类的本质是一个复杂的数据类型；对象的本质是内存中的空间，是一个复杂的变量\n\n### 构造函数\n`__construct()`\n构造函数：在对象产生的时候自动调用\t\na)\t可以传递不同的参数\nb)\t用来初始化成员变量（属性）\n\n>跟类名同名的方法也是构造方法;PHP中推荐使用__construct()做构造函数,且优先级较高\n\n```\n<?php \nclass Student {\n\t//构造函数语法二\n\tpublic function Student() {\n\t\techo 'i am a boy!<br>';\n\t}\n\t//构造函数语法一(优先级高)\n\tpublic function __construct() {\n\t\techo 'i am a student<br>';\n\t}\n}\n//测试\nnew Student;\t//i am a student\nnew Student;\t//i am a student\n ?>\n```\n\n### 析构函数\n`__destruct()`\n析构函数：在对象销毁的时候自动调用\t\na)\t析构函数不能有参数\n\n\n### 继承（extends）\n语法：\n\n```\nClass 子类 extends 父类{\n\t//类成员\n}\n```\n\n#### 私有的属性也是可以被继承的\n\n```\n<?php\nclass Person{\n\tprivate $name = 'uiste';\n\tpublic function show(){\n\t\techo \"好学生就是：\".$this->name;\n\t}\n}\n\nclass Student extends Person{\n\n}\n\n$stu1 = new Student();\n$stu1->show();\n?>\n好学生就是：uiste\n```\n\n>如果父类private私有属性重写的时候，无论子类属性是：public、protected、private都会生成性的属性;\n如果父类是protected受把偶的属性时，子类不可以是private私有的。只能是protected、public，且属性会被重写；\n如果父类是public公有的属性时，子类也只能是public公有的；\n\n总之：父类属性不是私有状态，子类的属性就不能比父类属性的权限严格。\n父类属性时私有状态是，子类的属性可以任何状态，重写则会被重新建立。\n\n#### 子类中调用父类的属性和方法\n调用父类的属性和方法用$this关键字\n\n#### 调用父类的构造方法\n通过parent和父类的类名来调用父类的构造函数\n语法：\n``parent::__construct()``\n``父类类名::__construct()``\n\n>如果子类有构造函数就调用子类的构造函数，如果子类没有就调用父类的构造函数\n\n1、\t继承：extends关键字\n2、\t$this：当前对象的引用\n3、\tparent：父类的类名\n4、\t私有属性也是可以被继承的\n\n#### 给父类的构造函数传递参数\n\n```\n<?php \nclass Person{\n\tprivate $name;\n\tprivate $sex;\n\tpublic function __construct($name,$sex){\n\t\t$this->name = $name;\n\t\t$this->sex = $sex;\n\t}\n}\n\nclass Student extends Person{\n\tprivate $score;\n\tpublic function __construct($name,$sex,$score){\n\t\tparent::__construct($name,$sex);\n\t\t$this->score = $score;\n\t}\n\tpublic function show(){\n\t\techo $this->name.'是'.$this->sex.'生，考了：'.$this->score.'分数';\n\t}\n}\n\n$stu1 = new Student('小明','男',98);\n$stu1->show();\n ?>\nNotice: Undefined property: Student::$name in /Users/uiste/www/test.php on line 135\nNotice: Undefined property: Student::$sex in /Users/uiste/www/test.php on line 135\n是生，考了：98分数\n父类是private私有的不能被继承下来；\n```\n\n```\n<?php\nclass Person{\n\tprotected $name;\n\tprotected $sex;\n\tpublic function __construct($name,$sex){\n\t\t$this->name = $name;\n\t\t$this->sex = $sex;\n\t}\n}\n\nclass Student extends Person{\n\tprivate $score;\n\tpublic function __construct($name,$sex,$score){\n\t\tparent::__construct($name,$sex);\n\t\t$this->score = $score;\n\t}\n\tpublic function show(){\n\t\techo $this->name.'是'.$this->sex.'生，考了：'.$this->score.'分数';\n\t}\n}\n\n$stu1 = new Student('小明','男',98);\n$stu1->show();\n?>\n小明是男生，考了：98分数\n```\n>protected 修饰的成员在整个继承连上访问\n$this 表示当前对象的引用(地址)\n\nA类\t\t\t\tB类\nprivate \t\t不可访问\nprotected\t\t不可访问\npublic\t\t\t可以访问\n\n父类 \t\t\t子类\n\n\n\n\n","source":"_posts/2015/201509/20150914-1.md","raw":"layout: post\ntitle: PHP面向对象1\ndate: 2015-09-14 21:40:18\ntags:\n---\n### 概念\n1、\tOOP：Object Oriented Programming\t面向对象编程\n2、\tOOA：Object-Oriented Analysis\t面向对象分析     \n3、\tOOD：Object-Oriented Design\t\t面向对象设计\n4、\t对象只能有属性、方法、和常量\n\n\n>类-数据类型\n对象-复杂的变量\n属性-变量\nfunction-方法、函数\n\n### 类\n类名不区分大小写\n\n通过new关键字类实例化对象，实例化的过程就是分配内存的过程\n`$stu = new Student();//实例化对象就是把对象的地址传递给$stu1变量` \n\n### 封装\na)\tpublic：公有的\t\t\t可以在类的内部和外部访问\nb)\tprotected：受保护的\t\t在整个继承链上访问\nc)\tprivate：私有的\t\t\t只能在类的内部访问\n\n>属性一般是私有的，通过公有的方法对私有的属性进行赋值和取值。这样做为了保证数据完整性\n$this在类的内部使用，表示调用当前方法的对象\n\n### 类、对象、属性、方法在内存中的表现\n内存区域\n静态区和常量区\n代码区\t<===>\t类\n堆区\t\t<===>\t对象\n栈区\t\t<===>\t对象的变量，变量指向的是对象的地址\n\n>调用属性直接调用对象中的对应属性即可。\n调用方法先获取对象所在的类，然后调用类中的方法。\n\n类的本质是一个复杂的数据类型；对象的本质是内存中的空间，是一个复杂的变量\n\n### 构造函数\n`__construct()`\n构造函数：在对象产生的时候自动调用\t\na)\t可以传递不同的参数\nb)\t用来初始化成员变量（属性）\n\n>跟类名同名的方法也是构造方法;PHP中推荐使用__construct()做构造函数,且优先级较高\n\n```\n<?php \nclass Student {\n\t//构造函数语法二\n\tpublic function Student() {\n\t\techo 'i am a boy!<br>';\n\t}\n\t//构造函数语法一(优先级高)\n\tpublic function __construct() {\n\t\techo 'i am a student<br>';\n\t}\n}\n//测试\nnew Student;\t//i am a student\nnew Student;\t//i am a student\n ?>\n```\n\n### 析构函数\n`__destruct()`\n析构函数：在对象销毁的时候自动调用\t\na)\t析构函数不能有参数\n\n\n### 继承（extends）\n语法：\n\n```\nClass 子类 extends 父类{\n\t//类成员\n}\n```\n\n#### 私有的属性也是可以被继承的\n\n```\n<?php\nclass Person{\n\tprivate $name = 'uiste';\n\tpublic function show(){\n\t\techo \"好学生就是：\".$this->name;\n\t}\n}\n\nclass Student extends Person{\n\n}\n\n$stu1 = new Student();\n$stu1->show();\n?>\n好学生就是：uiste\n```\n\n>如果父类private私有属性重写的时候，无论子类属性是：public、protected、private都会生成性的属性;\n如果父类是protected受把偶的属性时，子类不可以是private私有的。只能是protected、public，且属性会被重写；\n如果父类是public公有的属性时，子类也只能是public公有的；\n\n总之：父类属性不是私有状态，子类的属性就不能比父类属性的权限严格。\n父类属性时私有状态是，子类的属性可以任何状态，重写则会被重新建立。\n\n#### 子类中调用父类的属性和方法\n调用父类的属性和方法用$this关键字\n\n#### 调用父类的构造方法\n通过parent和父类的类名来调用父类的构造函数\n语法：\n``parent::__construct()``\n``父类类名::__construct()``\n\n>如果子类有构造函数就调用子类的构造函数，如果子类没有就调用父类的构造函数\n\n1、\t继承：extends关键字\n2、\t$this：当前对象的引用\n3、\tparent：父类的类名\n4、\t私有属性也是可以被继承的\n\n#### 给父类的构造函数传递参数\n\n```\n<?php \nclass Person{\n\tprivate $name;\n\tprivate $sex;\n\tpublic function __construct($name,$sex){\n\t\t$this->name = $name;\n\t\t$this->sex = $sex;\n\t}\n}\n\nclass Student extends Person{\n\tprivate $score;\n\tpublic function __construct($name,$sex,$score){\n\t\tparent::__construct($name,$sex);\n\t\t$this->score = $score;\n\t}\n\tpublic function show(){\n\t\techo $this->name.'是'.$this->sex.'生，考了：'.$this->score.'分数';\n\t}\n}\n\n$stu1 = new Student('小明','男',98);\n$stu1->show();\n ?>\nNotice: Undefined property: Student::$name in /Users/uiste/www/test.php on line 135\nNotice: Undefined property: Student::$sex in /Users/uiste/www/test.php on line 135\n是生，考了：98分数\n父类是private私有的不能被继承下来；\n```\n\n```\n<?php\nclass Person{\n\tprotected $name;\n\tprotected $sex;\n\tpublic function __construct($name,$sex){\n\t\t$this->name = $name;\n\t\t$this->sex = $sex;\n\t}\n}\n\nclass Student extends Person{\n\tprivate $score;\n\tpublic function __construct($name,$sex,$score){\n\t\tparent::__construct($name,$sex);\n\t\t$this->score = $score;\n\t}\n\tpublic function show(){\n\t\techo $this->name.'是'.$this->sex.'生，考了：'.$this->score.'分数';\n\t}\n}\n\n$stu1 = new Student('小明','男',98);\n$stu1->show();\n?>\n小明是男生，考了：98分数\n```\n>protected 修饰的成员在整个继承连上访问\n$this 表示当前对象的引用(地址)\n\nA类\t\t\t\tB类\nprivate \t\t不可访问\nprotected\t\t不可访问\npublic\t\t\t可以访问\n\n父类 \t\t\t子类\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-09T15:32:25.307Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjh002zpgwiy5snky87"},{"layout":"post","title":"Vim（VI）","date":"2015-09-24T04:05:39.000Z","_content":"# Vim(VI)介绍\nVim（vi）是Linux提供的一个更改文件的工具。\nVi有3种模式：\n-------\n命令模式、尾行模式、编辑模式\n![](media/14744245835193/14746880050755.jpg)\n## 尾行模式\n\n| : | 进入尾行模式 |\n| --- | --- |\n| :w | 保存 |\n| :w! | 强制保存 |\n| :q | 退出 |\n| :q! | 强制退出 |\n| :wq | 保存并退出 |\n| :wq! | 强制保存并退出 |\n| set number 或 set nu | 设置行号 |\n| set nonumber 或 set nonu | 取消行号 |\n| u | 撤销上一条命令 |\n| . | 重复最后一条命令 |\n| J | 连接上下两行 |\n| r+w | 将当前的字母替换成w |\n| :n | 跳转到第n行 |\n| :/str 或 /str | 从上往下搜索str n 下一个 N 上一个 |\n| ?str | 从下往上搜索str |\n| :s/str/aa | 将str替换成aa |\n| :s/str/aa/g | 将一行的所有str替换成aa |\n| :%s/str/aa/g | 将整个页面的str替换成aa |\n\n## 编辑模式\n\n| i | 在当前位置上插入，原来位置上字符后移 |\n| --- | :-- |\n| a | 光标先后移动一位插入 |\n| o | 新起一个空白行插入 |\n| s | 删除光标所在字符再插入 |\n\n## 命令模式\n### 移动光标\n\n| ⬆️ | ⬇️ | ⬅️ | ➡️ |\n| --- | --- | --- | --- |\n| k | j | h | l |\n\n### 单词级别\n\n| e | 本单词的末尾，如果当前光标就在本单词末尾就跳转到下个单词的末尾 |\n| --- | --- |\n| b | 本单词的首字母，如果当前光标就在本单词的首字母上就跳到上一个单词的首字母 |\n| w | 跳转到下一个单词的首字母 |\n\n### 行级\n\n| $ | 调到行尾 |\n| --- | --- |\n| 0 | 调到行首 |\n\n### 段级\n\n| { | 段首 |\n| --- | --- |\n| } | 段尾 |\n\n### 屏幕级\n\n\n| H | 屏幕的首部 |\n| --- | --- |\n| L | 屏幕的尾部 |\n\n### 文档级\n\n\n| nG | 跳转到第n行 |\n| --- | --- |\n| G | 移动到文档尾部 |\n\n## 删除操作\n\n| x | 删除当前的字符 |\n| --- | --- |\n| dd | 删除当前行 |\n| 3dd | 删除3行 |\n| d+e | 表示从光标开始删除，删除到单词末尾或下一个单词末尾 |\n| d+$ | 删除从光标开始到这行结束 |\n\n## 复制操作\n\n\n| yy | 复制当前行 |\n| --- | --- |\n| p | 粘贴 |\n| 3yy | 复制3行 |\n| y+e | 从光标开始复制，复制到单词结束或下一个单词结束 |\n\n","source":"_posts/2015/201509/20150924-1.md","raw":"layout: post\ntitle: Vim（VI）\ndate: 2015-09-24 12:05:39\ntags:\n- VI\ncategories:\n- Linux\n---\n# Vim(VI)介绍\nVim（vi）是Linux提供的一个更改文件的工具。\nVi有3种模式：\n-------\n命令模式、尾行模式、编辑模式\n![](media/14744245835193/14746880050755.jpg)\n## 尾行模式\n\n| : | 进入尾行模式 |\n| --- | --- |\n| :w | 保存 |\n| :w! | 强制保存 |\n| :q | 退出 |\n| :q! | 强制退出 |\n| :wq | 保存并退出 |\n| :wq! | 强制保存并退出 |\n| set number 或 set nu | 设置行号 |\n| set nonumber 或 set nonu | 取消行号 |\n| u | 撤销上一条命令 |\n| . | 重复最后一条命令 |\n| J | 连接上下两行 |\n| r+w | 将当前的字母替换成w |\n| :n | 跳转到第n行 |\n| :/str 或 /str | 从上往下搜索str n 下一个 N 上一个 |\n| ?str | 从下往上搜索str |\n| :s/str/aa | 将str替换成aa |\n| :s/str/aa/g | 将一行的所有str替换成aa |\n| :%s/str/aa/g | 将整个页面的str替换成aa |\n\n## 编辑模式\n\n| i | 在当前位置上插入，原来位置上字符后移 |\n| --- | :-- |\n| a | 光标先后移动一位插入 |\n| o | 新起一个空白行插入 |\n| s | 删除光标所在字符再插入 |\n\n## 命令模式\n### 移动光标\n\n| ⬆️ | ⬇️ | ⬅️ | ➡️ |\n| --- | --- | --- | --- |\n| k | j | h | l |\n\n### 单词级别\n\n| e | 本单词的末尾，如果当前光标就在本单词末尾就跳转到下个单词的末尾 |\n| --- | --- |\n| b | 本单词的首字母，如果当前光标就在本单词的首字母上就跳到上一个单词的首字母 |\n| w | 跳转到下一个单词的首字母 |\n\n### 行级\n\n| $ | 调到行尾 |\n| --- | --- |\n| 0 | 调到行首 |\n\n### 段级\n\n| { | 段首 |\n| --- | --- |\n| } | 段尾 |\n\n### 屏幕级\n\n\n| H | 屏幕的首部 |\n| --- | --- |\n| L | 屏幕的尾部 |\n\n### 文档级\n\n\n| nG | 跳转到第n行 |\n| --- | --- |\n| G | 移动到文档尾部 |\n\n## 删除操作\n\n| x | 删除当前的字符 |\n| --- | --- |\n| dd | 删除当前行 |\n| 3dd | 删除3行 |\n| d+e | 表示从光标开始删除，删除到单词末尾或下一个单词末尾 |\n| d+$ | 删除从光标开始到这行结束 |\n\n## 复制操作\n\n\n| yy | 复制当前行 |\n| --- | --- |\n| p | 粘贴 |\n| 3yy | 复制3行 |\n| y+e | 从光标开始复制，复制到单词结束或下一个单词结束 |\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjji0032pgwi0twfhhzx"},{"layout":"post","title":"PHP-验证码图片排错","date":"2015-09-27T06:44:17.000Z","_content":"第一步：如果看到不显示验证码，直接输入验证码的地址来排错\n\n第二步：将header()函数注释掉就可能会显示错误\n\n第三步：查看图片源码\n在图片二进制代码前不能出现任何字符，包括空白字符\n\n第四步：在header()前面添加ob_clean()","source":"_posts/2015/201509/20150927-1.md","raw":"layout: post\ntitle: PHP-验证码图片排错\ndate: 2015-09-27 14:44:17\ntags:\n- PHP错误处理\n---\n第一步：如果看到不显示验证码，直接输入验证码的地址来排错\n\n第二步：将header()函数注释掉就可能会显示错误\n\n第三步：查看图片源码\n在图片二进制代码前不能出现任何字符，包括空白字符\n\n第四步：在header()前面添加ob_clean()","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjj0034pgwiqltotezd"},{"layout":"post","title":"laravel - 路由基础","date":"2015-09-30T11:01:27.000Z","_content":"laravel框架与传统框架的不同：\nlaravel框架不同于传统的MVC，传统的MVC请求一般直接对应的是控制器，laravel中的请求对应的是路由\nlaravel中的路由简单来说就是将用户的请求转发给相应的程序进行处理\n作用就是建立URL和程序之间的映射\n请求类型：get、post、put、patch、delete\n# 基本路由\n路径：`app/Http/routes.php`中定义应用中的大多数路由\n该文件加载了`App\\Providers\\RouteServiceProvider`类\n\n### GET路由\n\n```\nRoute::get('/', function()\n{\n    return 'Hello World';\n});\n```\n\n### 其它路由\n\n```\nRoute::post('foo/bar', function()\n{\n    return 'Hello World';\n});\n\nRoute::put('foo/bar', function()\n{\n    //\n});\n\nRoute::delete('foo/bar', function()\n{\n    //\n});\n```\n\n### match请求注册多路由\n\n```\nRoute::match(['get', 'post'], '/', function()\n{\n    return 'Hello World';\n});\n```\n\n### any注册路由所有http请求\n\n```\nRoute::any('foo', function()\n{\n    return 'Hello World';\n});\n```\n\n>路由产生 URL，可以使用 url 辅助函数来操作：\n$url = url('foo');\n\n# 路由参数\n### 基本路由参数\n\n```\nRoute::get('user/{id}', function($id)\n{\n    return 'User '.$id;\n});\n```\n\n>路由参数不能包含 - 字符。使用下划线替代 (_)。\n\n### 可选择路由参数/带默认值参数\n\n```\nRoute::get('user/{name?}', function($name = 'John')\n{\n    return $name;\n});\n```\n\n### 使用正则表达式限制参数\n\n```\nRoute::get('user/{id}/{name}', function($id, $name)\n{\n    //\n})\n->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\n# 命名路由\n### 使用as方便产生URL\n\n```\nRoute::get('user/profile', ['as' => 'profile', function()\n{\n    return route('profile');\n}]);\n```\n\n### 为控制器方法指定路由名称\n\n```\nRoute::get('user/profile', [\n    'as' => 'profile', 'uses' => 'UserController@showProfile'\n]);\n```\n\n# 路由群组\n### Middleware\n在群组共享属性数组的 middleware 参数定义中间件列表，这些中间件就会应用到群组内的所有路由上。中间件将会按在列表内指定的顺序执行：\n\n```\nRoute::group(['middleware' => ['foo', 'bar']], function()\n{\n    Route::get('/', function()\n    {\n        // Has Foo And Bar Middleware\n    });\n\n    Route::get('user/profile', function()\n    {\n        // Has Foo And Bar Middleware\n    });\n\n});\n```\n\n### Namespaces\n可以在 group 属性数组中使用 namespace 参数，指定在这群组中控制器的命名空间：\n\n```\nRoute::group(['namespace' => 'Admin'], function()\n{\n    // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace\n\n    Route::group(['namespace' => 'User'], function()\n    {\n        // Controllers Within The \"App\\Http\\Controllers\\Admin\\User\" Namespace\n    });\n});\n```\n\n>在默认情况下，RouteServiceProvider 包含内置您命名空间群组的 routes.php 文件，让您不须使用完整的 App\\Http\\Controllers 命名空间前缀就可以注册控制器路由。\n","source":"_posts/2015/201509/20150930-3.md","raw":"layout: post\ntitle: laravel - 路由基础\ndate: 2015-09-30 19:01:27\ntags:\n- laravel\n---\nlaravel框架与传统框架的不同：\nlaravel框架不同于传统的MVC，传统的MVC请求一般直接对应的是控制器，laravel中的请求对应的是路由\nlaravel中的路由简单来说就是将用户的请求转发给相应的程序进行处理\n作用就是建立URL和程序之间的映射\n请求类型：get、post、put、patch、delete\n# 基本路由\n路径：`app/Http/routes.php`中定义应用中的大多数路由\n该文件加载了`App\\Providers\\RouteServiceProvider`类\n\n### GET路由\n\n```\nRoute::get('/', function()\n{\n    return 'Hello World';\n});\n```\n\n### 其它路由\n\n```\nRoute::post('foo/bar', function()\n{\n    return 'Hello World';\n});\n\nRoute::put('foo/bar', function()\n{\n    //\n});\n\nRoute::delete('foo/bar', function()\n{\n    //\n});\n```\n\n### match请求注册多路由\n\n```\nRoute::match(['get', 'post'], '/', function()\n{\n    return 'Hello World';\n});\n```\n\n### any注册路由所有http请求\n\n```\nRoute::any('foo', function()\n{\n    return 'Hello World';\n});\n```\n\n>路由产生 URL，可以使用 url 辅助函数来操作：\n$url = url('foo');\n\n# 路由参数\n### 基本路由参数\n\n```\nRoute::get('user/{id}', function($id)\n{\n    return 'User '.$id;\n});\n```\n\n>路由参数不能包含 - 字符。使用下划线替代 (_)。\n\n### 可选择路由参数/带默认值参数\n\n```\nRoute::get('user/{name?}', function($name = 'John')\n{\n    return $name;\n});\n```\n\n### 使用正则表达式限制参数\n\n```\nRoute::get('user/{id}/{name}', function($id, $name)\n{\n    //\n})\n->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\n# 命名路由\n### 使用as方便产生URL\n\n```\nRoute::get('user/profile', ['as' => 'profile', function()\n{\n    return route('profile');\n}]);\n```\n\n### 为控制器方法指定路由名称\n\n```\nRoute::get('user/profile', [\n    'as' => 'profile', 'uses' => 'UserController@showProfile'\n]);\n```\n\n# 路由群组\n### Middleware\n在群组共享属性数组的 middleware 参数定义中间件列表，这些中间件就会应用到群组内的所有路由上。中间件将会按在列表内指定的顺序执行：\n\n```\nRoute::group(['middleware' => ['foo', 'bar']], function()\n{\n    Route::get('/', function()\n    {\n        // Has Foo And Bar Middleware\n    });\n\n    Route::get('user/profile', function()\n    {\n        // Has Foo And Bar Middleware\n    });\n\n});\n```\n\n### Namespaces\n可以在 group 属性数组中使用 namespace 参数，指定在这群组中控制器的命名空间：\n\n```\nRoute::group(['namespace' => 'Admin'], function()\n{\n    // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace\n\n    Route::group(['namespace' => 'User'], function()\n    {\n        // Controllers Within The \"App\\Http\\Controllers\\Admin\\User\" Namespace\n    });\n});\n```\n\n>在默认情况下，RouteServiceProvider 包含内置您命名空间群组的 routes.php 文件，让您不须使用完整的 App\\Http\\Controllers 命名空间前缀就可以注册控制器路由。\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjk0038pgwi850ns3u7"},{"layout":"post","title":"laravel - 控制器基础","date":"2015-09-30T11:20:46.000Z","_content":"路径：`app/Http/Controllers`\n\n# 基础控制器\n\n```php\n<?php namespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller {\n\n    /**\n     * 显示所给定的用户个人数据。\n     *\n     * @param  int  $id\n     * @return Response\n     */\n    public function showProfile($id)\n    {\n        return view('user.profile', ['user' => User::findOrFail($id)]);\n    }\n\n}\n?>\n```\n\n>可以通过如下方式引导路由至对应的控制器动作：\n`Route::any('test1',['uses'=>'StudentController@test1']);`\n\n# Controller之Request\n# Controller之Session\n# Controller之Response\n# Controller之Middleware\nlaravel中间件提供一个方便的机制来过滤进入应用程序的HTTP请求\n### 第一步新建中间件\n`Middleware=>Activity.php`\n\n```\n<?php \nnamespace App\\Http\\Middleware;\nuse closure;\nclass Activity{\n    //新建一个固定的方法handle($request,$next);\n    //next 是一个全局的包\n    //请求执行前操作，前置操作\n    //$next($request)响应\n    public function handle($request,$next){\n        if (time()<strtotime('2015-10-2')) {\n            return redirect('activity0');\n        }\n        return $next($request);\n    }\n}\n?>\n```\n\n### 第二步注册中间件\n`Kernel.php=>protected $routeMiddleware`\n\n``'activity' => \\App\\Http\\Middleware\\Activity::class``\n\n### 第三步使用中间件\n`routes.php`\n\n```\n    Route::any('activity0',['uses'=>'StudentController@activity0']);\n    //使用中间件\n    Route::group(['middleware'=>'activity'],function(){\n        Route::any('activity1',['uses'=>'StudentController@activity1']);\n        Route::any('activity2',['uses'=>'StudentController@activity2']);\n});\n```\n\n补充StudentController：\n\n```\npublic function activity0(){\n        return '活动快要开始了，敬请期待';\n    }\n    public function activity1(){\n        return '活动进行中，谢谢您的参与';\n    }\n    public function activity2(){\n        return '活动仍在进行中，谢谢参与';\n    }\n```\n\n","source":"_posts/2015/201509/20150930-4.md","raw":"layout: post\ntitle: laravel - 控制器基础\ndate: 2015-09-30 19:20:46\ntags:\n- laravel\n---\n路径：`app/Http/Controllers`\n\n# 基础控制器\n\n```php\n<?php namespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller {\n\n    /**\n     * 显示所给定的用户个人数据。\n     *\n     * @param  int  $id\n     * @return Response\n     */\n    public function showProfile($id)\n    {\n        return view('user.profile', ['user' => User::findOrFail($id)]);\n    }\n\n}\n?>\n```\n\n>可以通过如下方式引导路由至对应的控制器动作：\n`Route::any('test1',['uses'=>'StudentController@test1']);`\n\n# Controller之Request\n# Controller之Session\n# Controller之Response\n# Controller之Middleware\nlaravel中间件提供一个方便的机制来过滤进入应用程序的HTTP请求\n### 第一步新建中间件\n`Middleware=>Activity.php`\n\n```\n<?php \nnamespace App\\Http\\Middleware;\nuse closure;\nclass Activity{\n    //新建一个固定的方法handle($request,$next);\n    //next 是一个全局的包\n    //请求执行前操作，前置操作\n    //$next($request)响应\n    public function handle($request,$next){\n        if (time()<strtotime('2015-10-2')) {\n            return redirect('activity0');\n        }\n        return $next($request);\n    }\n}\n?>\n```\n\n### 第二步注册中间件\n`Kernel.php=>protected $routeMiddleware`\n\n``'activity' => \\App\\Http\\Middleware\\Activity::class``\n\n### 第三步使用中间件\n`routes.php`\n\n```\n    Route::any('activity0',['uses'=>'StudentController@activity0']);\n    //使用中间件\n    Route::group(['middleware'=>'activity'],function(){\n        Route::any('activity1',['uses'=>'StudentController@activity1']);\n        Route::any('activity2',['uses'=>'StudentController@activity2']);\n});\n```\n\n补充StudentController：\n\n```\npublic function activity0(){\n        return '活动快要开始了，敬请期待';\n    }\n    public function activity1(){\n        return '活动进行中，谢谢您的参与';\n    }\n    public function activity2(){\n        return '活动仍在进行中，谢谢参与';\n    }\n```\n\n","slug":"4","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjl003bpgwilbm7ohd2"},{"layout":"post","title":"Laravel - 表单操作","date":"2015-09-30T17:17:43.000Z","_content":"# 静态资源管理及模板布局\n# 表单列表及分页实现\n# 通过表单实现新增及操作状态提示功能\n设置成功之后有提示？\n使用session的暂存数据，也就是flash，跟上一个with即可？？？\n# 表单验证及数据保持详解\n控制器验证\nValidator\n数据保持\n\n```\n//添加学生信息\n\t//接收表单提交数据-create方法\n\tpublic function create(Request $request){\n\t\tif($request->isMethod('POST')){\n\t\t\t//表单验证必填项，最小2个字符，最大20字符\n\t\t\t$this->validate($request,[\n\t\t\t\t'student.name'\t=>\t'required|min:2|max:20',\n\t\t\t\t'student.age'\t=>\t'required|integer',\n\t\t\t\t'student.sex'\t=>\t'required|integer'\n\t\t\t]);\n\t\t\t$data = $request->input('student');\n//\t\t\t保存提交数据方法一\n//\t\t\t$student = new Student();\n//\t\t\t$student->name = $data['name'];\n//\t\t\t$student->age = $data['age'];\n//\t\t\t$student->sex = $data['sex'];\n//\t\t\tif($student->save())\n\t\t\tif(Student::create($data))\n\t\t\t\tretur\tn redirect('student/index')->with('success','添加成功');\n//\t\t\t\treturn redirect('student/index');\n\t\t\treturn redirect()->back();\n\t\t}\n\t\treturn view('student.create');\n\t}\n```\n# 通过模型处理性别\n# 通过表单实现修改\n# 表单中查看详情及删除\n","source":"_posts/2015/201510/20151001-1.md","raw":"layout: post\ntitle: Laravel - 表单操作\ndate: 2015-10-01 01:17:43\ntags:\n- laravel\n---\n# 静态资源管理及模板布局\n# 表单列表及分页实现\n# 通过表单实现新增及操作状态提示功能\n设置成功之后有提示？\n使用session的暂存数据，也就是flash，跟上一个with即可？？？\n# 表单验证及数据保持详解\n控制器验证\nValidator\n数据保持\n\n```\n//添加学生信息\n\t//接收表单提交数据-create方法\n\tpublic function create(Request $request){\n\t\tif($request->isMethod('POST')){\n\t\t\t//表单验证必填项，最小2个字符，最大20字符\n\t\t\t$this->validate($request,[\n\t\t\t\t'student.name'\t=>\t'required|min:2|max:20',\n\t\t\t\t'student.age'\t=>\t'required|integer',\n\t\t\t\t'student.sex'\t=>\t'required|integer'\n\t\t\t]);\n\t\t\t$data = $request->input('student');\n//\t\t\t保存提交数据方法一\n//\t\t\t$student = new Student();\n//\t\t\t$student->name = $data['name'];\n//\t\t\t$student->age = $data['age'];\n//\t\t\t$student->sex = $data['sex'];\n//\t\t\tif($student->save())\n\t\t\tif(Student::create($data))\n\t\t\t\tretur\tn redirect('student/index')->with('success','添加成功');\n//\t\t\t\treturn redirect('student/index');\n\t\t\treturn redirect()->back();\n\t\t}\n\t\treturn view('student.create');\n\t}\n```\n# 通过模型处理性别\n# 通过表单实现修改\n# 表单中查看详情及删除\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjm003epgwi6667ur2n"},{"layout":"post","title":"PHP - 递归实现无限极联动","date":"2015-10-06T16:56:02.000Z","_content":"# 递归实现无限极联动\n\n```php\n<?php\nmysql_connect('localhost','root','aa');\nmysql_select_db('php6');\nmysql_query('set names utf8');\n//获取所有类别\n$sql='select * from category';\n$rs=mysql_query($sql);\n//将资源转成二维数组\n$list=array();\nwhile($rows=mysql_fetch_assoc($rs)) {\n\t$list[]=$rows;\n}\n/**\n*将二维数组按树形结构显示【递归】\n*@param $list array 存放所有类别的二维数组\n*@param $parentid int 在数组中查找属于某个父类的子级\n*@param $deep int 元素的缩进深度\n*/\nfunction createTree($list,$parentid=0,$deep=0) {\n\tstatic $tree=array();\t//声明一个静态数组，这样在整个递归过程中一直存在\n\tforeach($list as $rows) {\n\t\tif($rows['parentid']==$parentid){\n\t\t\t$rows['deep']=$deep;\n\t\t\t$tree[]=$rows;\n\t\t\tcreateTree($list,$rows['cat_id'],$deep+1);\n\t\t}\n\t}\n\treturn $tree;;\n}\n//测试\n$array=createTree($list);\nforeach($array as $rows) {\n\t//str_repeat()：字符串重复\n\techo str_repeat('&nbsp;',$rows['deep']*20),$rows['cat_name'],'<br>';\n}\n?>\n```\n\n# 二级联动\n\n```php\n<?php\n//连接数据库\nmysql_connect('localhost','root','aa');\nmysql_select_db('php6');\nmysql_query('set names utf8');\n//获取第一级\n$sql=\"select * from category where parentid=0\";\n$rs1=mysql_query($sql);\n?>\n<select name=\"\">\n\t<?php\n\twhile($rows1=mysql_fetch_assoc($rs1)):\n\t?>\n\t\t<optgroup label=\"<?php echo $rows1['cat_name']?>\">\n\t\t\t<?php\n\t\t\t\t$sql=\"select * from category where parentid=\".$rows1['cat_id'];\n\t\t\t\t$rs2=mysql_query($sql);\n\t\t\t\twhile($rows2=mysql_fetch_assoc($rs2)):\n\t\t\t?>\n\t\t\t\t<option value=\"<?php echo $rows2['cat_id']?>\"><?php echo $rows2['cat_name']?></option>\n\t\t\t<?php\n\t\t\t\tendwhile;\n\t\t\t?>\n\t\t</optgroup>\n\t<?php\n\tendwhile;\n\t?>\n</select>\n```\n\n# 三级联动\n\n```php\n<script type=\"text/javascript\">\n/*\n*@param cat1 int 一级的id\n*@param cat2 int 二级的id\n*/\nfunction jump(cat1,cat2) {\n\tlocation.href='?cat1='+cat1+'&cat2='+cat2;\n}\n</script>\n<?php\n\tmysql_connect('localhost','root','aa');\n\tmysql_select_db('php6');\n\tmysql_query('set names utf8');\n\n\t//获取一级和二级的编号\n\t$cat1=isset($_GET['cat1'])?(int)$_GET['cat1']:'';\t//获取传递的一级编号\n\t$cat2=isset($_GET['cat2'])?(int)$_GET['cat2']:'';\t//获取传递的二级编号\n?>\n<!--一级-->\n<select id=\"cat1\" onchange='jump(this.value,\"\")'>\n<option value=\"\">---请选择---</option>\n<?php\n\t$sql=\"select * from category where parentid=0\";\n\t$rs=mysql_query($sql);\n\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t<option value=\"<?php echo $rows['cat_id']?>\" <?php echo $cat1==$rows['cat_id']?'selected':''?>><?php echo $rows['cat_name']?></option>\n<?php\n\tendwhile;\n?>\t\n</select>\n<!--二级-->\n<select id=\"cat2\" onchange='jump(document.getElementById(\"cat1\").value,this.value)'>\n<option value=\"\">---请选择---</option>\n<?php\n\tif(isset($_GET['cat1'])):\n\t\t$sql=\"select * from category where parentid=$cat1\";\n\t\t$rs=mysql_query($sql);\n\t\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t\t<option value=\"<?php echo $rows['cat_id']?>\" <?php echo $cat2==$rows['cat_id']?'selected':''?>><?php echo $rows['cat_name']?></option>\n<?php\n\t\tendwhile;\n\tendif;\n?>\n</select>\n<select id=\"cat3\">\n<option value=\"\">---请选择---</option>\n<?php\n\tif(!empty($_GET['cat2'])):\n\t\t$sql=\"select * from category where parentid=$cat2\";\n\t\t$rs=mysql_query($sql);\n\t\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t\t<option value=\"<?php echo $rows['cat_id']?>\" ><?php echo $rows['cat_name']?></option>\n<?php\n\t\tendwhile;\n\tendif;\n?>\n</select>\n```","source":"_posts/2015/201510/20151007-1.md","raw":"layout: post\ntitle: PHP - 递归实现无限极联动\ndate: 2015-10-07 00:56:02\ntags:\n- PHP思想养成\n---\n# 递归实现无限极联动\n\n```php\n<?php\nmysql_connect('localhost','root','aa');\nmysql_select_db('php6');\nmysql_query('set names utf8');\n//获取所有类别\n$sql='select * from category';\n$rs=mysql_query($sql);\n//将资源转成二维数组\n$list=array();\nwhile($rows=mysql_fetch_assoc($rs)) {\n\t$list[]=$rows;\n}\n/**\n*将二维数组按树形结构显示【递归】\n*@param $list array 存放所有类别的二维数组\n*@param $parentid int 在数组中查找属于某个父类的子级\n*@param $deep int 元素的缩进深度\n*/\nfunction createTree($list,$parentid=0,$deep=0) {\n\tstatic $tree=array();\t//声明一个静态数组，这样在整个递归过程中一直存在\n\tforeach($list as $rows) {\n\t\tif($rows['parentid']==$parentid){\n\t\t\t$rows['deep']=$deep;\n\t\t\t$tree[]=$rows;\n\t\t\tcreateTree($list,$rows['cat_id'],$deep+1);\n\t\t}\n\t}\n\treturn $tree;;\n}\n//测试\n$array=createTree($list);\nforeach($array as $rows) {\n\t//str_repeat()：字符串重复\n\techo str_repeat('&nbsp;',$rows['deep']*20),$rows['cat_name'],'<br>';\n}\n?>\n```\n\n# 二级联动\n\n```php\n<?php\n//连接数据库\nmysql_connect('localhost','root','aa');\nmysql_select_db('php6');\nmysql_query('set names utf8');\n//获取第一级\n$sql=\"select * from category where parentid=0\";\n$rs1=mysql_query($sql);\n?>\n<select name=\"\">\n\t<?php\n\twhile($rows1=mysql_fetch_assoc($rs1)):\n\t?>\n\t\t<optgroup label=\"<?php echo $rows1['cat_name']?>\">\n\t\t\t<?php\n\t\t\t\t$sql=\"select * from category where parentid=\".$rows1['cat_id'];\n\t\t\t\t$rs2=mysql_query($sql);\n\t\t\t\twhile($rows2=mysql_fetch_assoc($rs2)):\n\t\t\t?>\n\t\t\t\t<option value=\"<?php echo $rows2['cat_id']?>\"><?php echo $rows2['cat_name']?></option>\n\t\t\t<?php\n\t\t\t\tendwhile;\n\t\t\t?>\n\t\t</optgroup>\n\t<?php\n\tendwhile;\n\t?>\n</select>\n```\n\n# 三级联动\n\n```php\n<script type=\"text/javascript\">\n/*\n*@param cat1 int 一级的id\n*@param cat2 int 二级的id\n*/\nfunction jump(cat1,cat2) {\n\tlocation.href='?cat1='+cat1+'&cat2='+cat2;\n}\n</script>\n<?php\n\tmysql_connect('localhost','root','aa');\n\tmysql_select_db('php6');\n\tmysql_query('set names utf8');\n\n\t//获取一级和二级的编号\n\t$cat1=isset($_GET['cat1'])?(int)$_GET['cat1']:'';\t//获取传递的一级编号\n\t$cat2=isset($_GET['cat2'])?(int)$_GET['cat2']:'';\t//获取传递的二级编号\n?>\n<!--一级-->\n<select id=\"cat1\" onchange='jump(this.value,\"\")'>\n<option value=\"\">---请选择---</option>\n<?php\n\t$sql=\"select * from category where parentid=0\";\n\t$rs=mysql_query($sql);\n\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t<option value=\"<?php echo $rows['cat_id']?>\" <?php echo $cat1==$rows['cat_id']?'selected':''?>><?php echo $rows['cat_name']?></option>\n<?php\n\tendwhile;\n?>\t\n</select>\n<!--二级-->\n<select id=\"cat2\" onchange='jump(document.getElementById(\"cat1\").value,this.value)'>\n<option value=\"\">---请选择---</option>\n<?php\n\tif(isset($_GET['cat1'])):\n\t\t$sql=\"select * from category where parentid=$cat1\";\n\t\t$rs=mysql_query($sql);\n\t\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t\t<option value=\"<?php echo $rows['cat_id']?>\" <?php echo $cat2==$rows['cat_id']?'selected':''?>><?php echo $rows['cat_name']?></option>\n<?php\n\t\tendwhile;\n\tendif;\n?>\n</select>\n<select id=\"cat3\">\n<option value=\"\">---请选择---</option>\n<?php\n\tif(!empty($_GET['cat2'])):\n\t\t$sql=\"select * from category where parentid=$cat2\";\n\t\t$rs=mysql_query($sql);\n\t\twhile($rows=mysql_fetch_assoc($rs)):\n?>\n\t\t<option value=\"<?php echo $rows['cat_id']?>\" ><?php echo $rows['cat_name']?></option>\n<?php\n\t\tendwhile;\n\tendif;\n?>\n</select>\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjn003gpgwi9r1g7noq"},{"layout":"post","title":"PHP - 错误处理 | 异常处理","date":"2015-10-08T15:47:19.000Z","_content":"# 错误处理简介\n**PHP独有的处理**\n默认情况下，当错误发生的时候在浏览器上显示错误报告。\n可以使用操作符（@）来屏蔽语句生成的错误报告，注意@符号只对函数有用，对echo语句不起作用\n\n### 错误级别\n按照错误的严重程度将错误划分为3种\nNotice：提示性错误\nWarning：警告性错误\nFatal error：致命性错误\n\n>notice和warning级别错误后继续执行，error级别错误后终止执行\n\n### 处理方式\n显示错误报告【默认】\n记录错误日志\n错误发生后交个自定义脚本去完成【比如，错误发生后发一个电子邮件】\n\n### 错误触发\nPHP程序触发：PHP在运行的过程中，发现并触发错误。比如include、require等等。\n由用户触发，通过trigger_error()来触发错误。\neg:定义年龄不能超过30，超过30即报错\n```\n$age = 30;\nif($age>30)\n\ttrigger_error(\"age cannot over 30\",E_USER_ERROR);\n```\n\n用户错误的级别，他们是常量,默认触发notice错误。\n```\n;E_USER_ERROR\t- user-generated error message\n;E_USER_WARNING - user-generated warning message\n;E_USER_NOTICE  - user-generated notice message\n```\n\n### 实现错误处理\n#### 更改php配置有3种方法\n\n##### 在php.ini中更改\n所有的虚拟目录中有效\n\n##### .htaccess分布式部署文件\n.htaccess通过php_flag和php_value 在某个虚拟目录，或某个目录有效.\n\n##### ini_set()：某一个页面有效\n`ini_set('display_errors':'on')` 开启错误显示\n`ini_set('display_errors':'off')` 关闭错误显示\n\n#### 在浏览器上显示错误报告\n`display_errors = On`\n#### 在日志中显示错误报告\n`log_errors = On`\n错误日志保存的地址\n`error_log = php_errors.log`\n#### 用户自定义错误处理\n默认情况下，一旦定义了错误处理函数，则错误报告和错误日志不再执行\n\n```php\n<?php\nfunction error(){\n\techo '这是自定义错误';\n}\n//注册错误处理函数\nset_error_handler('error');\n?>\n```\n\n>在自定义错误处理函数中添加return false，则自定义错误处理后再交个PHP处理。\n\n应用：不同的级别使用不同错误处理\n```php\n<?php\n/**\n*@param $level 错误级别\n*@param $msg\t错误信息\n*@param $file\t错误文件\n*@param $line\t错误行号\n*/\nfunction error($level,$msg,$file,$line) {\n\tswitch($level) {\n\t\tcase E_NOTICE:\n\t\tcase E_USER_NOTICE:\n\t\t\techo '将错误信息屏蔽掉<br>';\n\t\t\tbreak;\n\t\tcase E_WARNING :\n\t\tcase E_USER_WARNING:\n\t\t\techo '将错误信息记录到日志中<br>';\n\t\t\tbreak;\n\t\tcase E_ERROR:\n\t\tcase E_USER_ERROR:\n\t\t\techo '给管理员发邮件<br>';\n\t\t\tbreak;\n\t}\n\techo \"错误信息：{$msg}<br>\";\n\techo \"错误文件：{$file}<br>\";\n\techo \"错误行号：{$line}\";\n}\nset_error_handler('error');\t//注册错误处理函数\nheader('content-type:text/html;charset=utf-8');\necho $aa,'<hr>';\ninclude './aa.php';\n?>\n```\n\n### 指定显示错误级别\n`;Error Level Constants:`\n`error_reporting = E_ALL | E_STRICT`\n思考：为什么在php5.3中显示所有错误是E_ALL | E_STRICT？\n答：在php5.3中，E_ALL不是表示所有错误，E_ALL | E_STRICT也表示所有错误。\n在php5.4以上版本，E_ALL的错误都会报的。\n\nE_ALL:   111011111111111\nE_STRICT:000100000000000\n\n例题：\n只有PHP的notice才报错\n`ini_set('error_reporting',E_NOTICE);`\n只报PHP的notice和用户的notice\n`ini_set('error_reporting',E_NOTICE | E_USER_NOTICE);`\n系统的notice不报，其他全报\n`ini_set('error_reporting',(E_ALL | E_STRICT) & ~E_NOTICE);`\n>~是按位取非，0变成1,1变成0。\n\n```php\n<?php \n/**\n * 自定义错误处理函数\n * @param  int $level 错误级别\n * @param  string $msg   错误信息\n * @param  string $file  错误文件名\n * @param  int $line  错误行号\n * @return Bool        错误处理情况\n */\nfunction error($level,$msg,$file,$line){\n\tswitch ($level) {\n\t\tcase E_NOTICE:\n\t\tcase E_USER_NOTICE:\n\t\t\techo '将错误屏蔽';\n\t\t\tbreak;\n\t\tcase E_WARNING:\n\t\tcase E_USER_WARNING:\n\t\t\techo '将错误记录在日志中<br>';\n\t\t\tbreak;\n\t\t// case E_ERROR: //一般不设置，若报了该错误，程序将终止运行\n\t\tcase E_USER_ERROR:\n\t\t\techo '将错误发送给管理员<br>';\n\t\t\tbreak;\n\t}\n\techo '错误信息：'.$msg,\"<br>\";\n\techo '错误文件：'.$file.\"<br>\";\n\techo '错误行号：'.$line,'<br>';\n\t// return false 自定义错误处理完毕后，交给计算机继续处理\n\treturn false;\n}\n// 注册错误函数\nset_error_handler('error');\n?>\n```\n\n# 项目中的错误处理\n项目开发的时候错误显示在浏览器上，不用记录在日志中\n项目运行的时候错误记录在日志中，不显示在浏览器上\n* php.ini  log_errors = on 开启错误日志\n* php.ini  error_log = $log_path.$error_log;\n\n将项目的运行模式分为“开发模式（调试模式）”和“运行模式”\n\n* 在配置文件中，添加一个配置用来保存开发的模式\n* 在Application文件夹下新建Log文件夹，用来保存日志\n* 在Framework类中添加定义Log文件夹的路径常量\n* 在Framework类中定义错误处理的方法\n```php\n<?php \nprivate static function initError(){\n\tini_set('error_reporting', E_ALL | E_STRICT); //报所有错误\n\tif($GLOBALS['config']['app']['app_dubeg']){//开发模式\n\t\tini_set('display_errors','on'); //浏览器显示错误\n\t\tini_set('log_errors','off'); //不记录日志\n\t}else{\n\t\tini_set('display_errors','off'); //浏览器不显示错误\n\t\tini_set('log_errors','on'); //记录日志\n\t\t$error_log = date('Y-m-d').'.log';\n\t\tini_set('error_log',LOG_PATH.$error_log);\n\t}\n}\n ?>\n```\n\n# 异常处理\n异常处理使用关键字：try、catch、throw\n1. try:用来监测代码\n2. thr ow：用来抛出异常\n3. catch：用来捕获异常\n4. Exception：PHP内置的异常类,是所有异常类的父类\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<?php \n\t\tif(isset($_POST['button'])){\n\t\t\ttry{\n\t\t\t\t$age = $_POST['age'];\n\t\t\t\tif ($age<20 || $age>30) {\n\t\t\t\t\tthrow new Exception('年龄必须在20到30之间');//抛出异常类\n\t\t\t\t\techo '错误抛出后这里不会再执行了';\n\t\t\t\t}else{\n\t\t\t\t\techo '青春年少，用行动做一辈子不能被注定的事！';\n\t\t\t\t}\n\t\t\t}catch(Exception $e){  //数据类型约束，只能是Exception\n\t\t\t\t//catch 用来捕获错误\n\t\t\t\techo '错误信息：'.$e->getMessage().'<br>';\n\t\t\t\techo '异常码：'.$e->getCode().'<br>';\n\t\t\t\techo '当前文件：'.$e->getFile().'<br>';\n\t\t\t\techo '异常行号：'.$e->getLine().'<br>';\n\t\t\t}\n\t\t}\n\t ?>\n\t <form action=\"\" method=\"post\">\n\t \t请输入年龄：<input type=\"text\" name=\"age\"><br>\n\t \t<input type=\"submit\" name=\"button\" value=\"提交\">\n\t </form>\n</body>\n</html>\n```\n\n","source":"_posts/2015/201510/20151008-2.md","raw":"layout: post\ntitle: PHP - 错误处理 | 异常处理\ndate: 2015-10-08 23:47:19\ntags:\n- PHP错误\n- PHP异常\n---\n# 错误处理简介\n**PHP独有的处理**\n默认情况下，当错误发生的时候在浏览器上显示错误报告。\n可以使用操作符（@）来屏蔽语句生成的错误报告，注意@符号只对函数有用，对echo语句不起作用\n\n### 错误级别\n按照错误的严重程度将错误划分为3种\nNotice：提示性错误\nWarning：警告性错误\nFatal error：致命性错误\n\n>notice和warning级别错误后继续执行，error级别错误后终止执行\n\n### 处理方式\n显示错误报告【默认】\n记录错误日志\n错误发生后交个自定义脚本去完成【比如，错误发生后发一个电子邮件】\n\n### 错误触发\nPHP程序触发：PHP在运行的过程中，发现并触发错误。比如include、require等等。\n由用户触发，通过trigger_error()来触发错误。\neg:定义年龄不能超过30，超过30即报错\n```\n$age = 30;\nif($age>30)\n\ttrigger_error(\"age cannot over 30\",E_USER_ERROR);\n```\n\n用户错误的级别，他们是常量,默认触发notice错误。\n```\n;E_USER_ERROR\t- user-generated error message\n;E_USER_WARNING - user-generated warning message\n;E_USER_NOTICE  - user-generated notice message\n```\n\n### 实现错误处理\n#### 更改php配置有3种方法\n\n##### 在php.ini中更改\n所有的虚拟目录中有效\n\n##### .htaccess分布式部署文件\n.htaccess通过php_flag和php_value 在某个虚拟目录，或某个目录有效.\n\n##### ini_set()：某一个页面有效\n`ini_set('display_errors':'on')` 开启错误显示\n`ini_set('display_errors':'off')` 关闭错误显示\n\n#### 在浏览器上显示错误报告\n`display_errors = On`\n#### 在日志中显示错误报告\n`log_errors = On`\n错误日志保存的地址\n`error_log = php_errors.log`\n#### 用户自定义错误处理\n默认情况下，一旦定义了错误处理函数，则错误报告和错误日志不再执行\n\n```php\n<?php\nfunction error(){\n\techo '这是自定义错误';\n}\n//注册错误处理函数\nset_error_handler('error');\n?>\n```\n\n>在自定义错误处理函数中添加return false，则自定义错误处理后再交个PHP处理。\n\n应用：不同的级别使用不同错误处理\n```php\n<?php\n/**\n*@param $level 错误级别\n*@param $msg\t错误信息\n*@param $file\t错误文件\n*@param $line\t错误行号\n*/\nfunction error($level,$msg,$file,$line) {\n\tswitch($level) {\n\t\tcase E_NOTICE:\n\t\tcase E_USER_NOTICE:\n\t\t\techo '将错误信息屏蔽掉<br>';\n\t\t\tbreak;\n\t\tcase E_WARNING :\n\t\tcase E_USER_WARNING:\n\t\t\techo '将错误信息记录到日志中<br>';\n\t\t\tbreak;\n\t\tcase E_ERROR:\n\t\tcase E_USER_ERROR:\n\t\t\techo '给管理员发邮件<br>';\n\t\t\tbreak;\n\t}\n\techo \"错误信息：{$msg}<br>\";\n\techo \"错误文件：{$file}<br>\";\n\techo \"错误行号：{$line}\";\n}\nset_error_handler('error');\t//注册错误处理函数\nheader('content-type:text/html;charset=utf-8');\necho $aa,'<hr>';\ninclude './aa.php';\n?>\n```\n\n### 指定显示错误级别\n`;Error Level Constants:`\n`error_reporting = E_ALL | E_STRICT`\n思考：为什么在php5.3中显示所有错误是E_ALL | E_STRICT？\n答：在php5.3中，E_ALL不是表示所有错误，E_ALL | E_STRICT也表示所有错误。\n在php5.4以上版本，E_ALL的错误都会报的。\n\nE_ALL:   111011111111111\nE_STRICT:000100000000000\n\n例题：\n只有PHP的notice才报错\n`ini_set('error_reporting',E_NOTICE);`\n只报PHP的notice和用户的notice\n`ini_set('error_reporting',E_NOTICE | E_USER_NOTICE);`\n系统的notice不报，其他全报\n`ini_set('error_reporting',(E_ALL | E_STRICT) & ~E_NOTICE);`\n>~是按位取非，0变成1,1变成0。\n\n```php\n<?php \n/**\n * 自定义错误处理函数\n * @param  int $level 错误级别\n * @param  string $msg   错误信息\n * @param  string $file  错误文件名\n * @param  int $line  错误行号\n * @return Bool        错误处理情况\n */\nfunction error($level,$msg,$file,$line){\n\tswitch ($level) {\n\t\tcase E_NOTICE:\n\t\tcase E_USER_NOTICE:\n\t\t\techo '将错误屏蔽';\n\t\t\tbreak;\n\t\tcase E_WARNING:\n\t\tcase E_USER_WARNING:\n\t\t\techo '将错误记录在日志中<br>';\n\t\t\tbreak;\n\t\t// case E_ERROR: //一般不设置，若报了该错误，程序将终止运行\n\t\tcase E_USER_ERROR:\n\t\t\techo '将错误发送给管理员<br>';\n\t\t\tbreak;\n\t}\n\techo '错误信息：'.$msg,\"<br>\";\n\techo '错误文件：'.$file.\"<br>\";\n\techo '错误行号：'.$line,'<br>';\n\t// return false 自定义错误处理完毕后，交给计算机继续处理\n\treturn false;\n}\n// 注册错误函数\nset_error_handler('error');\n?>\n```\n\n# 项目中的错误处理\n项目开发的时候错误显示在浏览器上，不用记录在日志中\n项目运行的时候错误记录在日志中，不显示在浏览器上\n* php.ini  log_errors = on 开启错误日志\n* php.ini  error_log = $log_path.$error_log;\n\n将项目的运行模式分为“开发模式（调试模式）”和“运行模式”\n\n* 在配置文件中，添加一个配置用来保存开发的模式\n* 在Application文件夹下新建Log文件夹，用来保存日志\n* 在Framework类中添加定义Log文件夹的路径常量\n* 在Framework类中定义错误处理的方法\n```php\n<?php \nprivate static function initError(){\n\tini_set('error_reporting', E_ALL | E_STRICT); //报所有错误\n\tif($GLOBALS['config']['app']['app_dubeg']){//开发模式\n\t\tini_set('display_errors','on'); //浏览器显示错误\n\t\tini_set('log_errors','off'); //不记录日志\n\t}else{\n\t\tini_set('display_errors','off'); //浏览器不显示错误\n\t\tini_set('log_errors','on'); //记录日志\n\t\t$error_log = date('Y-m-d').'.log';\n\t\tini_set('error_log',LOG_PATH.$error_log);\n\t}\n}\n ?>\n```\n\n# 异常处理\n异常处理使用关键字：try、catch、throw\n1. try:用来监测代码\n2. thr ow：用来抛出异常\n3. catch：用来捕获异常\n4. Exception：PHP内置的异常类,是所有异常类的父类\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<?php \n\t\tif(isset($_POST['button'])){\n\t\t\ttry{\n\t\t\t\t$age = $_POST['age'];\n\t\t\t\tif ($age<20 || $age>30) {\n\t\t\t\t\tthrow new Exception('年龄必须在20到30之间');//抛出异常类\n\t\t\t\t\techo '错误抛出后这里不会再执行了';\n\t\t\t\t}else{\n\t\t\t\t\techo '青春年少，用行动做一辈子不能被注定的事！';\n\t\t\t\t}\n\t\t\t}catch(Exception $e){  //数据类型约束，只能是Exception\n\t\t\t\t//catch 用来捕获错误\n\t\t\t\techo '错误信息：'.$e->getMessage().'<br>';\n\t\t\t\techo '异常码：'.$e->getCode().'<br>';\n\t\t\t\techo '当前文件：'.$e->getFile().'<br>';\n\t\t\t\techo '异常行号：'.$e->getLine().'<br>';\n\t\t\t}\n\t\t}\n\t ?>\n\t <form action=\"\" method=\"post\">\n\t \t请输入年龄：<input type=\"text\" name=\"age\"><br>\n\t \t<input type=\"submit\" name=\"button\" value=\"提交\">\n\t </form>\n</body>\n</html>\n```\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjp003hpgwieue1zjbk"},{"layout":"post","title":"PHP - MySQL 两表联查 | 显示不同类型","date":"2015-10-09T02:00:38.000Z","_content":"# 两表联查\n### 需求\n不同商品的属性扩展\n如：\n>音乐：中文片名、英文片名、商品别名、介质/格式、国家地区、导演/指挥、主唱、长度、歌词\n书：作者、出版社、图书书号、出版日期、图书页数、字数、所属分类\n等...\n\n### 思想\n通过对产品类型划分，使用属性类别`(attr_type)`表作为中间表，对属性`(attribute)`扩展连接。\n\n### 代码\n```php\n //获取attr_type表数据\n    public function getAttrTypeList(){\n        $sql='select attr_type_name,count(attr_name) as `count` from attr_type natural left join attribute group by attr_type_id';\n        return $this->db->fetchAll($sql);\n    }\n```\n\n# 显示不同类型\ncontroller\n```php\n\t//显示属性\n\t$attr_type_id=isset($_GET['attr_type_id'])?(int)$_GET['attr_type_id']:0;\n\t$attr_model=new AttributeModel();\n\t$attr_list=$attr_model->getAttrByTypeId($attr_type_id);\n```\n\nmodel\n```php\n //通过属性类别id获取属性\n    public function getAttrByTypeId($attr_type_id){\n        $sql=\"select * from attribute natural join attr_type where 1\";\n        if($attr_type_id>0)\n            $sql.=\" and attr_type_id=$attr_type_id\";\n        $sql.=' order by attr_type_id';\n        return $this->db->fetchAll($sql);\n    }\n```\n\nview\n```html\n<div class=\"form-div\">\n  <form action=\"\" name=\"searchForm\">\n    <img src=\"/Application/View/Admin/images/icon_search.gif\" width=\"26\" height=\"22\" border=\"0\" alt=\"SEARCH\">\n    按商品类型显示：<select name=\"goods_type\" onchange=\"location.href='index.php?p=Admin&c=Attribute&a=list&attr_type_id='+this.value\">\n    <option value=\"0\">所有商品类型</option>\n    <?php foreach($attr_type_list as $rows):?>\n    \t<option value=\"<?php echo $rows['attr_type_id']?>\" <?php echo $rows['attr_type_id']==$attr_type_id?'selected':''?>><?php echo $rows['attr_type_name']?></option>\n    <?php endforeach;?>\n   </select>\n  </form>\n</div>\n```\n\n# 切换选项禁用状态\n```html\n<form action=\"\" method=\"post\" name=\"theForm\" >\n<table width=\"100%\" id=\"general-table\">\n  <tr>\n    <td class=\"label\">该属性值的录入方式：</td>\n\t<td>\n      <input type=\"radio\" name=\"attr_input_type\" value=\"0\" checked=\"true\" onclick=\"radioClicked(0)\">\n      手工录入\n      <input type=\"radio\" name=\"attr_input_type\" value=\"1\" onclick=\"radioClicked(1)\" <?php echo $info['attr_input_type']==1?'checked':''?>>从下面的列表中选择（一行代表一个可选值）\n      <input type=\"radio\" name=\"attr_input_type\" value=\"2\" onclick=\"radioClicked(0)\" <?php echo $info['attr_input_type']==2?'checked':''?>>多行文本框\n    </td>\n  </tr>\n</table>\n</form>\n<script type=\"text/javascript\">\n/**\n * 点击类型按钮时切换选项的禁用状态\n */\nfunction radioClicked(n)\n{\n  document.forms['theForm'].elements[\"attr_input_value\"].disabled = n > 0 ? false : true;\n}\n</script>\n```","source":"_posts/2015/201510/20151009-1.md","raw":"layout: post\ntitle: PHP - MySQL 两表联查 | 显示不同类型\ndate: 2015-10-09 10:00:38\ntags:\n- MySQL多表联查\n- 显示不同类型\n---\n# 两表联查\n### 需求\n不同商品的属性扩展\n如：\n>音乐：中文片名、英文片名、商品别名、介质/格式、国家地区、导演/指挥、主唱、长度、歌词\n书：作者、出版社、图书书号、出版日期、图书页数、字数、所属分类\n等...\n\n### 思想\n通过对产品类型划分，使用属性类别`(attr_type)`表作为中间表，对属性`(attribute)`扩展连接。\n\n### 代码\n```php\n //获取attr_type表数据\n    public function getAttrTypeList(){\n        $sql='select attr_type_name,count(attr_name) as `count` from attr_type natural left join attribute group by attr_type_id';\n        return $this->db->fetchAll($sql);\n    }\n```\n\n# 显示不同类型\ncontroller\n```php\n\t//显示属性\n\t$attr_type_id=isset($_GET['attr_type_id'])?(int)$_GET['attr_type_id']:0;\n\t$attr_model=new AttributeModel();\n\t$attr_list=$attr_model->getAttrByTypeId($attr_type_id);\n```\n\nmodel\n```php\n //通过属性类别id获取属性\n    public function getAttrByTypeId($attr_type_id){\n        $sql=\"select * from attribute natural join attr_type where 1\";\n        if($attr_type_id>0)\n            $sql.=\" and attr_type_id=$attr_type_id\";\n        $sql.=' order by attr_type_id';\n        return $this->db->fetchAll($sql);\n    }\n```\n\nview\n```html\n<div class=\"form-div\">\n  <form action=\"\" name=\"searchForm\">\n    <img src=\"/Application/View/Admin/images/icon_search.gif\" width=\"26\" height=\"22\" border=\"0\" alt=\"SEARCH\">\n    按商品类型显示：<select name=\"goods_type\" onchange=\"location.href='index.php?p=Admin&c=Attribute&a=list&attr_type_id='+this.value\">\n    <option value=\"0\">所有商品类型</option>\n    <?php foreach($attr_type_list as $rows):?>\n    \t<option value=\"<?php echo $rows['attr_type_id']?>\" <?php echo $rows['attr_type_id']==$attr_type_id?'selected':''?>><?php echo $rows['attr_type_name']?></option>\n    <?php endforeach;?>\n   </select>\n  </form>\n</div>\n```\n\n# 切换选项禁用状态\n```html\n<form action=\"\" method=\"post\" name=\"theForm\" >\n<table width=\"100%\" id=\"general-table\">\n  <tr>\n    <td class=\"label\">该属性值的录入方式：</td>\n\t<td>\n      <input type=\"radio\" name=\"attr_input_type\" value=\"0\" checked=\"true\" onclick=\"radioClicked(0)\">\n      手工录入\n      <input type=\"radio\" name=\"attr_input_type\" value=\"1\" onclick=\"radioClicked(1)\" <?php echo $info['attr_input_type']==1?'checked':''?>>从下面的列表中选择（一行代表一个可选值）\n      <input type=\"radio\" name=\"attr_input_type\" value=\"2\" onclick=\"radioClicked(0)\" <?php echo $info['attr_input_type']==2?'checked':''?>>多行文本框\n    </td>\n  </tr>\n</table>\n</form>\n<script type=\"text/javascript\">\n/**\n * 点击类型按钮时切换选项的禁用状态\n */\nfunction radioClicked(n)\n{\n  document.forms['theForm'].elements[\"attr_input_value\"].disabled = n > 0 ? false : true;\n}\n</script>\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjr003lpgwit009bfsc"},{"layout":"post","title":"PHP常见错误提示","date":"2015-10-11T11:31:45.000Z","_content":"# Fatal error: Call to undefined function……\n函数不存在，可能的原因：\n1、系统不存在这个函数且你也没自定义\n2、因为环境不同，这个函数在本环境配置文件没开，百度函数名字，就能查到函数属于哪个dll，在`php.ini`里开启\n\n# syntax error, unexpected T_STRING, expecting......\n严重语法错误，\n例如`syntax error, unexpected T_STRING, expecting ',' or ';' in F:\\phpnow\\htdocs\\index.php on line 4`\n后边标着行号，去检查那一行的标点就行\n如果是 第三行 echo 1 后边没加;，报错会报 on line 4 \n\n# Parse error: syntax error, unexpected T_VARIABLE in XXX.php on line XXX\n\n这条语句是PHP常见的报错，一般是在XXX行的上一行，或者是XXX行，缺少分号。或者在双引号中使用双引号，且没有转义等等。\n解决方法：找到XXX.php的XXX行，按照上面的分析，找到自己的错误，改正即可。\n\n# Parse error: syntax error, unexpected 'X' in XXX.php on line XXX\n这条语句依然是PHP常见的报错，报错原因是在XXX.php的XXX行，出现了PHP无法识别的字符。常常是因为function，if等需要‘{’、‘}’的地方没有闭合，或者在编程的时候，不小心在‘;’的后面误打了几个字符。\n解决方法：找到XXX.php的XXX行，删除多出的字符，添加缺少的字符即可。\n\n# syntax error, unexpected $end  \n逻辑忘了闭合  这个报错还有个特征，他会提示你最后一行代码报错，譬如你一共30行，他就告诉你 on line 30，这时候你别检查第三十行，你要把30行挨个，检查一遍，看看哪个标签没闭合。\n一共3000行，他就告诉你 on line 3000，这时候你别检查这3000行了，如果你程序排版很乱，在3000行里找哪个括号是个很麻烦的事……我教你一招：\nctrl+a ctrl+d alt+f4\n好了，你现在可以重写了。\n\n\n# Notice:Undefined varialbe:……\n\n这是一个比较常见的警告性提示，解决方法：error_reporting调整错误级别，不会调整，那就百度下\n","source":"_posts/2015/201510/20151011-1.md","raw":"layout: post\ntitle: PHP常见错误提示\ndate: 2015-10-11 19:31:45\ntags:\n- PHP错误\n---\n# Fatal error: Call to undefined function……\n函数不存在，可能的原因：\n1、系统不存在这个函数且你也没自定义\n2、因为环境不同，这个函数在本环境配置文件没开，百度函数名字，就能查到函数属于哪个dll，在`php.ini`里开启\n\n# syntax error, unexpected T_STRING, expecting......\n严重语法错误，\n例如`syntax error, unexpected T_STRING, expecting ',' or ';' in F:\\phpnow\\htdocs\\index.php on line 4`\n后边标着行号，去检查那一行的标点就行\n如果是 第三行 echo 1 后边没加;，报错会报 on line 4 \n\n# Parse error: syntax error, unexpected T_VARIABLE in XXX.php on line XXX\n\n这条语句是PHP常见的报错，一般是在XXX行的上一行，或者是XXX行，缺少分号。或者在双引号中使用双引号，且没有转义等等。\n解决方法：找到XXX.php的XXX行，按照上面的分析，找到自己的错误，改正即可。\n\n# Parse error: syntax error, unexpected 'X' in XXX.php on line XXX\n这条语句依然是PHP常见的报错，报错原因是在XXX.php的XXX行，出现了PHP无法识别的字符。常常是因为function，if等需要‘{’、‘}’的地方没有闭合，或者在编程的时候，不小心在‘;’的后面误打了几个字符。\n解决方法：找到XXX.php的XXX行，删除多出的字符，添加缺少的字符即可。\n\n# syntax error, unexpected $end  \n逻辑忘了闭合  这个报错还有个特征，他会提示你最后一行代码报错，譬如你一共30行，他就告诉你 on line 30，这时候你别检查第三十行，你要把30行挨个，检查一遍，看看哪个标签没闭合。\n一共3000行，他就告诉你 on line 3000，这时候你别检查这3000行了，如果你程序排版很乱，在3000行里找哪个括号是个很麻烦的事……我教你一招：\nctrl+a ctrl+d alt+f4\n好了，你现在可以重写了。\n\n\n# Notice:Undefined varialbe:……\n\n这是一个比较常见的警告性提示，解决方法：error_reporting调整错误级别，不会调整，那就百度下\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjs003mpgwiq6jg07hd"},{"layout":"post","title":"模板引擎","date":"2015-10-16T18:41:37.000Z","_content":"# 前台页面实现、Smarty\n\n### static 和 GLOBALS的区别\n相同点：生命周期是一样的，声明的时候产生，页面执行完毕销毁。\n不同点：\n>超全局变量在所有的地方都能使用\n>静态变量只能在自己的作用域中访问\n>如果一个函数内没有区别，两个函数只能GLOBALS作用域不同\n\n### 前台显示\n实现方法：\n1、递归\n2、三重循环\n\n>在开发的时候能不用递归就不用递归，因为递归消耗资源比较多；如果确定就显示三级就用三重循环来实现\n\n方法一：通过模糊查询\n``select * from goods where `goods_status` like '%hot%';``\n>模糊查询，以`% `百分号开头的查询无法使用索引，只能是全表扫描。效率低下\n\n方法二：使用find_in_set(值，集合)\n``select * from goods where find_in_set('best',`goods_status`);``\n>优化了方法一，效率提高了。但`find_in_set()`函数本身是个全表扫描的函数\n\n方法三：使用位运算符\n查找best：\n``select * from goods where goods_status & 1;``\n查找既有best又有hot同时存在：\n``select * from goods where goods_status & 1 and goods_status & 4`` \n>集合和枚举一样，在计算机内部都是通过数值管理的。\n>要想看有没有那个参数，就与上那个参数就可以了。`&`\n>best => 001\n>new => 010\n>hot   => 100\n>测试：select goods_status,goods_status+0 from goods;\n>best,new       3\n>best,new,hot 7\n>new,hot         6\n\n>best+hot\n>   101\n>&001\n>   001\n\n**已知集合占用8个字节，一个字节8个位，8个直接64个位，所有集合最多可以保存64个选项**\n\n# 模板引擎\n引擎和框架是有区别的。\n我们现在开发的项目，前段代码和服务器端代码同在一个页面中。这样前端和服务器端看起来都不方便。为了让所有的项目开发人员。只关注自己的业务，我们将表现（HTML）和内容（PHP）相分离。\n\n## 模板引擎 推导\n简而言之，界定符的优化。将输出变量更改一下形式\n光说不练假把式 \n将替换的结果当成字符串输出了。\n\n### 模板引擎的思想四步法：\n`file_get_contents();` 获取表现内容\n`str_replace();`  定义左右定界符\n`file_put_contents();` 输出混编文件\n`require();` 引入混编文件\n\n```php\n<?php \n$str = file_get_contents('demo.html');\n$str = str_replace('{','<?php echo ',$str);\n$str = str_replace('}',\";?>\",$str);\nfile_put_contents('./demo.html.php',$str);\nrequire './demo.html.php';\n ?>\n```\n\n### 模板引擎封装\n```php\n<?php \nclass Smarty{\n\tprivate $tpl_var=array();\n\tpublic function assign($key,$value){\n\t\t$this->tpl_var[$Key]=$value;\n\t}\n\t//@param string $tpl HTML页面的地址\n\tpulic function compile($tpl){\n\t\t$com_file = $tpl.'.php';//混编文件名complicated\n\t\tif(file_exists($com_file) && filemtime($tpl)<filetime($com_file)){\n\t\t\trequire $com_file;\n\t\t}else{\n\t\t$str = file_get_contents('demo.html');\n\t\t$str = str_replace('{','<?php echo $this->tpl_var[\\'',$str);\n\t\t$str = str_replace('}',\"\\'];?>\",$str);\n\t\tfile_put_contents('./demo.html.php',$str);\n\t\trequire $com_file;\n\t\t}\n\t}\n}\n$smarty = new Smarty();\n$smarty->assign('title',$title);\n$smarty->compile(demo.html);\n ?>\n```\n\n输出：\n`<?php echo $this->tpl_var[$key]?>`\n\n外部调用\n```\nrequire './Smarty.class.php'; //加载类文件\n$smarty = new Smarty(); //实例化对象\n$smarty->assgin('title',$title); //赋值操作\n$smarty->compile(); //编译输出文件\n```\n\n如何判断混编文件不是最新的?\n>模板的创建时间在混编文件之前`int filemtime ( string $filename )`\n\n将模板文件和混编文件分开存储\n* templates\n* templates_c\n\n一般来说，关键性代码都是私有，通过公有的方法来调用它；\n* 将complie() 方法用private来修饰，用一个公有的方法来调用display()调用","source":"_posts/2015/201510/20151017-2.md","raw":"layout: post\ntitle: 模板引擎\ndate: 2015-10-17 02:41:37\ntags:\n- 模板引擎\n---\n# 前台页面实现、Smarty\n\n### static 和 GLOBALS的区别\n相同点：生命周期是一样的，声明的时候产生，页面执行完毕销毁。\n不同点：\n>超全局变量在所有的地方都能使用\n>静态变量只能在自己的作用域中访问\n>如果一个函数内没有区别，两个函数只能GLOBALS作用域不同\n\n### 前台显示\n实现方法：\n1、递归\n2、三重循环\n\n>在开发的时候能不用递归就不用递归，因为递归消耗资源比较多；如果确定就显示三级就用三重循环来实现\n\n方法一：通过模糊查询\n``select * from goods where `goods_status` like '%hot%';``\n>模糊查询，以`% `百分号开头的查询无法使用索引，只能是全表扫描。效率低下\n\n方法二：使用find_in_set(值，集合)\n``select * from goods where find_in_set('best',`goods_status`);``\n>优化了方法一，效率提高了。但`find_in_set()`函数本身是个全表扫描的函数\n\n方法三：使用位运算符\n查找best：\n``select * from goods where goods_status & 1;``\n查找既有best又有hot同时存在：\n``select * from goods where goods_status & 1 and goods_status & 4`` \n>集合和枚举一样，在计算机内部都是通过数值管理的。\n>要想看有没有那个参数，就与上那个参数就可以了。`&`\n>best => 001\n>new => 010\n>hot   => 100\n>测试：select goods_status,goods_status+0 from goods;\n>best,new       3\n>best,new,hot 7\n>new,hot         6\n\n>best+hot\n>   101\n>&001\n>   001\n\n**已知集合占用8个字节，一个字节8个位，8个直接64个位，所有集合最多可以保存64个选项**\n\n# 模板引擎\n引擎和框架是有区别的。\n我们现在开发的项目，前段代码和服务器端代码同在一个页面中。这样前端和服务器端看起来都不方便。为了让所有的项目开发人员。只关注自己的业务，我们将表现（HTML）和内容（PHP）相分离。\n\n## 模板引擎 推导\n简而言之，界定符的优化。将输出变量更改一下形式\n光说不练假把式 \n将替换的结果当成字符串输出了。\n\n### 模板引擎的思想四步法：\n`file_get_contents();` 获取表现内容\n`str_replace();`  定义左右定界符\n`file_put_contents();` 输出混编文件\n`require();` 引入混编文件\n\n```php\n<?php \n$str = file_get_contents('demo.html');\n$str = str_replace('{','<?php echo ',$str);\n$str = str_replace('}',\";?>\",$str);\nfile_put_contents('./demo.html.php',$str);\nrequire './demo.html.php';\n ?>\n```\n\n### 模板引擎封装\n```php\n<?php \nclass Smarty{\n\tprivate $tpl_var=array();\n\tpublic function assign($key,$value){\n\t\t$this->tpl_var[$Key]=$value;\n\t}\n\t//@param string $tpl HTML页面的地址\n\tpulic function compile($tpl){\n\t\t$com_file = $tpl.'.php';//混编文件名complicated\n\t\tif(file_exists($com_file) && filemtime($tpl)<filetime($com_file)){\n\t\t\trequire $com_file;\n\t\t}else{\n\t\t$str = file_get_contents('demo.html');\n\t\t$str = str_replace('{','<?php echo $this->tpl_var[\\'',$str);\n\t\t$str = str_replace('}',\"\\'];?>\",$str);\n\t\tfile_put_contents('./demo.html.php',$str);\n\t\trequire $com_file;\n\t\t}\n\t}\n}\n$smarty = new Smarty();\n$smarty->assign('title',$title);\n$smarty->compile(demo.html);\n ?>\n```\n\n输出：\n`<?php echo $this->tpl_var[$key]?>`\n\n外部调用\n```\nrequire './Smarty.class.php'; //加载类文件\n$smarty = new Smarty(); //实例化对象\n$smarty->assgin('title',$title); //赋值操作\n$smarty->compile(); //编译输出文件\n```\n\n如何判断混编文件不是最新的?\n>模板的创建时间在混编文件之前`int filemtime ( string $filename )`\n\n将模板文件和混编文件分开存储\n* templates\n* templates_c\n\n一般来说，关键性代码都是私有，通过公有的方法来调用它；\n* 将complie() 方法用private来修饰，用一个公有的方法来调用display()调用","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjt003opgwipnorw75x"},{"layout":"post","title":"命名空间","date":"2015-10-18T15:23:50.000Z","_content":"学编程就像学开车，老司机带你装逼，带你飞 ...···\n# 命名空间\n## 概述\n背景：如果一个项目很大，有很多文件，很可能有同名的文件。这时候如果组织这些文件就成了大问题。\n\n命名空间通过`namespace`声明:\n```\nnamespace China;\nfunction getInfo(){\n    \n}\nnamespace USA;\nfunction getInfo(){\n}\ngetInfo();//访问USA的getInfo\n```\n\n命名空间是一种封装事物的方法\n命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：\n\n1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。\n2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。\n\n## 定义命名空间 \n受命名空间影响的是：类（包括抽象类和traits）、接口、函数和常量。\n语法：`namespace MyProject`\n>必须在其它所有代码之前声明命名空间，命名空间必须是程序脚本的第一条语句。除了一个以外：declare关键字\n\n## 定义子命名空间\n命名空间的名字可以使用分层次的方式定义\nExample #1 声明分层次的单个命名空间\n```\n<?php\nnamespace MyProject\\Sub\\Level;\nconst CONNECT_OK = 1;\nclass Connection { /* ... */ }\nfunction connect() { /* ... */  }\n?>\n```\n\n>可以使用文件的路径来做命名空间。在自动加载类的时候可以通过命名空间的路径来加载类\n\n## 访问空间的三种方法\n1. 非限定名称访问\n2. 完全限定名称访问\n3. [部分]限定名称访问\n\n## 引入命名空间\n完全限定名称访问不方便书写，可以在当前的命名空间下引入其他的命名空间，然后再使用其他命名空间的元素\n通过`use`关键字来引入命名空间\n\n```\nnamespace China\\Shanghai\\PuDong;\nfunction getInfo(){\n    echo 'aaa';\n}\nnamespace USA\\Washington;\nfunction getInfo(){\n    echo 'bb';\n}\nuse China\\Shanghai\\PuDong;\ngetInfo();  //bb\nPuDong\\getInfo(); //aa\n```\n\n## 引入类(use)\n 引入与当前控制器同名的类会报错\n 解决方法：给类取别名\n 使用as 关键字给命名空间取别名\n ```\n use China\\Shanghai\\PuDong\\Person as ChinaPerson;\n $person = new ChinaPerson();\n echo $person->name;\n ```\n\n>引入命名空间和引入类都是用的use,他们的区分就看引入的是不是类，如果不是类就是命名空间\n## 公共的命名空间\n如果一个PHP文件中没有`namespace`关键字声明，则文件中的元素默认存在于公共的空间下。\n\n>在一个页面中，包含另一个文件，不会影响当前页面的命名空间\n\n## 命名空间的注意事项\n1. 命名空间中可以存放：函数、类、const常量，不能存放define常量。\n2. 第一个namespace之前不能有任何代码，header()也不行\n3. 包含文件不会改变当前的命名空间\n\n##　namespace关键字和`__NAMESPACE__`常量\n(PHP 5 >= 5.3.0, PHP 7)\nPHP支持两种抽象的访问当前命名空间内部元素的方法，`__NAMESPACE__` 魔术常量和namespace关键字\n\n常量`__NAMESPACE__`的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串。\n\n>`__NAMESPACE__` 示例, 在命名空间中的代码\n全局代码\n\n常量 `__NAMESPACE__` 在动态创建名称时很有用\n```\n<?php\nnamespace MyProject;\n\nfunction get($classname)\n{\n    $a = __NAMESPACE__ . '\\\\' . $classname;\n    return new $a;\n}\n?>\n```\n允许通过别名引用或导入外部的完全限定名称，是命名空间的一个重要特征。这有点类似于在类 unix 文件系统中可以创建对其它的文件或目录的符号连接。\n\n所有支持命名空间的PHP版本支持三种别名或导入方式：为类名称使用别名、为接口使用别名或为命名空间名称使用别名。PHP 5.6开始允许导入函数或常量或者为它们设置别名。\n\n在PHP中，别名是通过操作符 use 来实现的. 下面是一个使用所有可能的五种导入方式的例子：\n\nExample #1 使用use操作符导入/使用别名\n```\n<?php\nnamespace foo;\nuse My\\Full\\Classname as Another;\n\n// 下面的例子与 use My\\Full\\NSname as NSname 相同\nuse My\\Full\\NSname;\n\n// 导入一个全局类\nuse ArrayObject;\n\n// importing a function (PHP 5.6+)\nuse function My\\Full\\functionName;\n\n// aliasing a function (PHP 5.6+)\nuse function My\\Full\\functionName as func;\n\n// importing a constant (PHP 5.6+)\nuse const My\\Full\\CONSTANT;\n\n$obj = new namespace\\Another; // 实例化 foo\\Another 对象\n$obj = new Another; // 实例化 My\\Full\\Classname　对象\nNSname\\subns\\func(); // 调用函数 My\\Full\\NSname\\subns\\func\n$a = new ArrayObject(array(1)); // 实例化 ArrayObject 对象\n// 如果不使用 \"use \\ArrayObject\" ，则实例化一个 foo\\ArrayObject 对象\nfunc(); // calls function My\\Full\\functionName\necho CONSTANT; // echoes the value of My\\Full\\CONSTANT\n?>\n```\n\n通过use操作符导入/使用别名，一行中包含多个use语句\n`use My\\Full\\Classname as Another, My\\Full\\NSname;`\n\n## 名称解析示例\n```\n<?php\nnamespace A;\nuse B\\D, C\\E as F;\n// 函数调用\nfoo();      // 首先尝试调用定义在命名空间\"A\"中的函数foo()\n            // 再尝试调用全局函数 \"foo\"\n\\foo();     // 调用全局空间函数 \"foo\" \nmy\\foo();   // 调用定义在命名空间\"A\\my\"中函数 \"foo\" \nF();        // 首先尝试调用定义在命名空间\"A\"中的函数 \"F\" \n            // 再尝试调用全局函数 \"F\"\n// 类引用\nnew B();    // 创建命名空间 \"A\" 中定义的类 \"B\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"A\\B\"\nnew D();    // 使用导入规则，创建命名空间 \"B\" 中定义的类 \"D\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"B\\D\"\nnew F();    // 使用导入规则，创建命名空间 \"C\" 中定义的类 \"E\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"C\\E\"\nnew \\B();   // 创建定义在全局空间中的类 \"B\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"B\"\nnew \\D();   // 创建定义在全局空间中的类 \"D\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"D\"\nnew \\F();   // 创建定义在全局空间中的类 \"F\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"F\"\n// 调用另一个命名空间中的静态方法或命名空间函数\nB\\foo();    // 调用命名空间 \"A\\B\" 中函数 \"foo\"\nB::foo();   // 调用命名空间 \"A\" 中定义的类 \"B\" 的 \"foo\" 方法\n            // 如果未找到类 \"A\\B\" ，则尝试自动装载类 \"A\\B\"\nD::foo();   // 使用导入规则，调用命名空间 \"B\" 中定义的类 \"D\" 的 \"foo\" 方法\n            // 如果类 \"B\\D\" 未找到，则尝试自动装载类 \"B\\D\"\n\\B\\foo();   // 调用命名空间 \"B\" 中的函数 \"foo\" \n\\B::foo();  // 调用全局空间中的类 \"B\" 的 \"foo\" 方法\n            // 如果类 \"B\" 未找到，则尝试自动装载类 \"B\"\n// 当前命名空间中的静态方法或函数\nA\\B::foo();   // 调用命名空间 \"A\\A\" 中定义的类 \"B\" 的 \"foo\" 方法\n              // 如果类 \"A\\A\\B\" 未找到，则尝试自动装载类 \"A\\A\\B\"\n\\A\\B::foo();  // 调用命名空间 \"A\\B\" 中定义的类 \"B\" 的 \"foo\" 方法\n              // 如果类 \"A\\B\" 未找到，则尝试自动装载类 \"A\\B\"\n?>\n```","source":"_posts/2015/201510/20151018-2.md","raw":"layout: post\ntitle: 命名空间\ndate: 2015-10-18 23:23:50\ntags:\n- 命名空间\n---\n学编程就像学开车，老司机带你装逼，带你飞 ...···\n# 命名空间\n## 概述\n背景：如果一个项目很大，有很多文件，很可能有同名的文件。这时候如果组织这些文件就成了大问题。\n\n命名空间通过`namespace`声明:\n```\nnamespace China;\nfunction getInfo(){\n    \n}\nnamespace USA;\nfunction getInfo(){\n}\ngetInfo();//访问USA的getInfo\n```\n\n命名空间是一种封装事物的方法\n命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：\n\n1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。\n2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。\n\n## 定义命名空间 \n受命名空间影响的是：类（包括抽象类和traits）、接口、函数和常量。\n语法：`namespace MyProject`\n>必须在其它所有代码之前声明命名空间，命名空间必须是程序脚本的第一条语句。除了一个以外：declare关键字\n\n## 定义子命名空间\n命名空间的名字可以使用分层次的方式定义\nExample #1 声明分层次的单个命名空间\n```\n<?php\nnamespace MyProject\\Sub\\Level;\nconst CONNECT_OK = 1;\nclass Connection { /* ... */ }\nfunction connect() { /* ... */  }\n?>\n```\n\n>可以使用文件的路径来做命名空间。在自动加载类的时候可以通过命名空间的路径来加载类\n\n## 访问空间的三种方法\n1. 非限定名称访问\n2. 完全限定名称访问\n3. [部分]限定名称访问\n\n## 引入命名空间\n完全限定名称访问不方便书写，可以在当前的命名空间下引入其他的命名空间，然后再使用其他命名空间的元素\n通过`use`关键字来引入命名空间\n\n```\nnamespace China\\Shanghai\\PuDong;\nfunction getInfo(){\n    echo 'aaa';\n}\nnamespace USA\\Washington;\nfunction getInfo(){\n    echo 'bb';\n}\nuse China\\Shanghai\\PuDong;\ngetInfo();  //bb\nPuDong\\getInfo(); //aa\n```\n\n## 引入类(use)\n 引入与当前控制器同名的类会报错\n 解决方法：给类取别名\n 使用as 关键字给命名空间取别名\n ```\n use China\\Shanghai\\PuDong\\Person as ChinaPerson;\n $person = new ChinaPerson();\n echo $person->name;\n ```\n\n>引入命名空间和引入类都是用的use,他们的区分就看引入的是不是类，如果不是类就是命名空间\n## 公共的命名空间\n如果一个PHP文件中没有`namespace`关键字声明，则文件中的元素默认存在于公共的空间下。\n\n>在一个页面中，包含另一个文件，不会影响当前页面的命名空间\n\n## 命名空间的注意事项\n1. 命名空间中可以存放：函数、类、const常量，不能存放define常量。\n2. 第一个namespace之前不能有任何代码，header()也不行\n3. 包含文件不会改变当前的命名空间\n\n##　namespace关键字和`__NAMESPACE__`常量\n(PHP 5 >= 5.3.0, PHP 7)\nPHP支持两种抽象的访问当前命名空间内部元素的方法，`__NAMESPACE__` 魔术常量和namespace关键字\n\n常量`__NAMESPACE__`的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串。\n\n>`__NAMESPACE__` 示例, 在命名空间中的代码\n全局代码\n\n常量 `__NAMESPACE__` 在动态创建名称时很有用\n```\n<?php\nnamespace MyProject;\n\nfunction get($classname)\n{\n    $a = __NAMESPACE__ . '\\\\' . $classname;\n    return new $a;\n}\n?>\n```\n允许通过别名引用或导入外部的完全限定名称，是命名空间的一个重要特征。这有点类似于在类 unix 文件系统中可以创建对其它的文件或目录的符号连接。\n\n所有支持命名空间的PHP版本支持三种别名或导入方式：为类名称使用别名、为接口使用别名或为命名空间名称使用别名。PHP 5.6开始允许导入函数或常量或者为它们设置别名。\n\n在PHP中，别名是通过操作符 use 来实现的. 下面是一个使用所有可能的五种导入方式的例子：\n\nExample #1 使用use操作符导入/使用别名\n```\n<?php\nnamespace foo;\nuse My\\Full\\Classname as Another;\n\n// 下面的例子与 use My\\Full\\NSname as NSname 相同\nuse My\\Full\\NSname;\n\n// 导入一个全局类\nuse ArrayObject;\n\n// importing a function (PHP 5.6+)\nuse function My\\Full\\functionName;\n\n// aliasing a function (PHP 5.6+)\nuse function My\\Full\\functionName as func;\n\n// importing a constant (PHP 5.6+)\nuse const My\\Full\\CONSTANT;\n\n$obj = new namespace\\Another; // 实例化 foo\\Another 对象\n$obj = new Another; // 实例化 My\\Full\\Classname　对象\nNSname\\subns\\func(); // 调用函数 My\\Full\\NSname\\subns\\func\n$a = new ArrayObject(array(1)); // 实例化 ArrayObject 对象\n// 如果不使用 \"use \\ArrayObject\" ，则实例化一个 foo\\ArrayObject 对象\nfunc(); // calls function My\\Full\\functionName\necho CONSTANT; // echoes the value of My\\Full\\CONSTANT\n?>\n```\n\n通过use操作符导入/使用别名，一行中包含多个use语句\n`use My\\Full\\Classname as Another, My\\Full\\NSname;`\n\n## 名称解析示例\n```\n<?php\nnamespace A;\nuse B\\D, C\\E as F;\n// 函数调用\nfoo();      // 首先尝试调用定义在命名空间\"A\"中的函数foo()\n            // 再尝试调用全局函数 \"foo\"\n\\foo();     // 调用全局空间函数 \"foo\" \nmy\\foo();   // 调用定义在命名空间\"A\\my\"中函数 \"foo\" \nF();        // 首先尝试调用定义在命名空间\"A\"中的函数 \"F\" \n            // 再尝试调用全局函数 \"F\"\n// 类引用\nnew B();    // 创建命名空间 \"A\" 中定义的类 \"B\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"A\\B\"\nnew D();    // 使用导入规则，创建命名空间 \"B\" 中定义的类 \"D\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"B\\D\"\nnew F();    // 使用导入规则，创建命名空间 \"C\" 中定义的类 \"E\" 的一个对象\n            // 如果未找到，则尝试自动装载类 \"C\\E\"\nnew \\B();   // 创建定义在全局空间中的类 \"B\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"B\"\nnew \\D();   // 创建定义在全局空间中的类 \"D\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"D\"\nnew \\F();   // 创建定义在全局空间中的类 \"F\" 的一个对象\n            // 如果未发现，则尝试自动装载类 \"F\"\n// 调用另一个命名空间中的静态方法或命名空间函数\nB\\foo();    // 调用命名空间 \"A\\B\" 中函数 \"foo\"\nB::foo();   // 调用命名空间 \"A\" 中定义的类 \"B\" 的 \"foo\" 方法\n            // 如果未找到类 \"A\\B\" ，则尝试自动装载类 \"A\\B\"\nD::foo();   // 使用导入规则，调用命名空间 \"B\" 中定义的类 \"D\" 的 \"foo\" 方法\n            // 如果类 \"B\\D\" 未找到，则尝试自动装载类 \"B\\D\"\n\\B\\foo();   // 调用命名空间 \"B\" 中的函数 \"foo\" \n\\B::foo();  // 调用全局空间中的类 \"B\" 的 \"foo\" 方法\n            // 如果类 \"B\" 未找到，则尝试自动装载类 \"B\"\n// 当前命名空间中的静态方法或函数\nA\\B::foo();   // 调用命名空间 \"A\\A\" 中定义的类 \"B\" 的 \"foo\" 方法\n              // 如果类 \"A\\A\\B\" 未找到，则尝试自动装载类 \"A\\A\\B\"\n\\A\\B::foo();  // 调用命名空间 \"A\\B\" 中定义的类 \"B\" 的 \"foo\" 方法\n              // 如果类 \"A\\B\" 未找到，则尝试自动装载类 \"A\\B\"\n?>\n```","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjju003qpgwiq6yzs7ki"},{"layout":"post","title":"Role-Based Access Control","date":"2015-10-31T17:00:21.000Z","_content":"# RBAC\n基于角色的访问控制 (Role-Based Access Control)\n\n## 表设计\n```sql\n#创建后台管理员表\nDROP TABLE IF EXISTS ugo_admin;\nCREATE TABLE ugo_admin(\n\tadmin_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT '管理员id' ,\n\tadmin_name VARCHAR(50) NOT NULL COMMENT '用户名' ,\n\tadmin_pwd VARCHAR(50) NOT NULL COMMENT '密码' ,\n\tadmin_role_id TINYINT UNSIGNED NOT NULL COMMENT '角色编号'\n) ENGINE = INNODB charset = utf8 COMMENT '管理员表';\n# 超级管理员测试数据\ninsert into ugo_admin values (null,'aa','aa',0);\n\n#创建后台权限表\nDROP TABLE IF EXISTS ugo_authority;\nCREATE TABLE ugo_authority(\n\tauth_id INT UNSIGNED auto_increment PRIMARY KEY COMMENT 'auth_id' ,\n\tauth_name VARCHAR(50) NOT NULL COMMENT '权限名称' ,\n\tauth_pid INT UNSIGNED NOT NULL COMMENT '权限父级id' ,\n\tauth_c VARCHAR(50) NULL COMMENT '控制器名' ,\n\tauth_a VARCHAR(50) NULL COMMENT '方法名' ,\n\tauth_path VARCHAR(50) NULL COMMENT '全路径,格式:父级id-子级id' ,\n\tis_show TINYINT NOT NULL DEFAULT 1 COMMENT '是否显示在导航栏上'\n) ENGINE = INNODB charset = utf8 COMMENT '权限表';\n\n#创建后台角色表\nDROP TABLE IF EXISTS ugo_role;\nCREATE TABLE IF NOT EXISTS ugo_role(\n\trole_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT 'role_id' ,\n\trole_name VARCHAR(50) NOT NULL COMMENT '角色名称' ,\n\trole_auth_ids VARCHAR(255) NOT NULL COMMENT '角色具有权限id的集合，格式1,2,5' ,\n\trole_auth_ac text NOT NULL COMMENT '控制器和方法的组合，格式：控制器-方法名'\n) ENGINE = INNODB charset = utf8 COMMENT '角色表';\n\n# *********************************************************** #\n-- 插入测试数据\ninsert into ugo_authority values (1,'商品管理',0,'','',1,1);\ninsert into ugo_authority values (2,'会员管理',0,'','',2,1);\ninsert into ugo_authority values (3,'权限管理',0,'','',3,1);\n\ninsert into ugo_authority values (4,'商品列表',1,'Goods','show','1-4',1);\ninsert into ugo_authority values (5,'添加商品',1,'Goods','add','1-5',1);\ninsert into ugo_authority values (6,'修改商品',1,'Goods','edit','1-6',0);\ninsert into ugo_authority values (7,'删除商品',1,'Goods','del','1-7',0);\n\ninsert into ugo_authority values (8,'会员列表',2,'Role','show','2-12',1);\ninsert into ugo_authority values (9,'添加会员',2,'Role','add','2-13',1);\ninsert into ugo_authority values (10,'修改会员',2,'Role','edit','2-14',0);\ninsert into ugo_authority values (11,'删除会员',2,'Role','del','2-15',0);\n\ninsert into ugo_authority values (12,'权限列表',3,'Authority','show','3-8',1);\ninsert into ugo_authority values (13,'添加权限',3,'Authority','add','3-9',1);\ninsert into ugo_authority values (14,'修改权限',3,'Authority','edit','3-10',0);\ninsert into ugo_authority values (15,'删除权限',3,'Authority','del','3-11',0);\n\ninsert into ugo_role values (1,'经理','1,4,5','Goods-show,Goods-add');\ninsert into ugo_role values (2,'主管','1,4','Goods-show');\n\ninsert into ugo_admin values (null,'aa','aa',0)\n# *********************************************************** #\n```\n\n## 菜单后台\n```php\npublic function menu(){\n        $admin = session('admin');\n        $role_id = $admin['admin_role_id'];\n        if ($role_id==0) { //超级管理员\n            $auth_info1 = M('authority')->where('auth_pid = 0 and is_show = 1')->select();//父级\n            $auth_info2 = M('authority')->where('auth_pid > 0 and is_show = 1')->select();//子级\n        }else{\n            $role = M('role')->find($role_id); //通过管理员角色id找到角色信息\n            $role_auth_ids = $role['role_auth_ids'];//获取该角色的权限信息\n            $auth_info1 = M('authority')->where(\"auth_pid = 0 and is_show =1 and auth_id in ($role_auth_ids)\")->select();\n            $auth_info2 = M('authority')->where(\"auth_pid > 0 and is_show =1 and auth_id in ($role_auth_ids)\")->select();\n        }\n        $this->assign('menu_list',array(\n                'auth_info1' => $auth_info1,\n                'auth_info2' => $auth_info2\n            ));\n    \t$this->display();\n    }\n```\n\n## 菜单前台\n```php\n<volist name=\"menu_list.auth_info1\" id=\"vo1\">\n  <li class=\"collapse\" key=\"{$i}_{$vo1.auth_c}\" name=\"menu\"> {$vo1.auth_name}        \n    <ul style=\"display: none;\">\n      <volist name=\"menu_list.auth_info2\" id=\"vo2\">\n        <li class=\"menu-item\">\n\t        <a href=\"/index.php/Admin/{$vo2.auth_c}/{$vo2.auth_a}\" target=\"main-frame\"><if condition=\"$vo1.auth_id eq $vo2.auth_pid \">{$vo2.auth_name}</if>\n\t        </a>\n\t    </li>\n      </volist>\n    </ul>\n  </li>\n</volist>\n```\n\n## 防翻墙与越权访问\n```php\nclass BaseController extends Controller{\n\tpublic function __construct(){\n\t\tparent::__construct();\n\t\t$this->chenkLogin();\n\t}\n\t// 防翻墙\n\tpublic function chenkLogin(){\n\t\tif (strtoupper(CONTROLLER_NAME)=='LOGIN') {\n\t\t\treturn;\n\t\t}\n\t\t$info = session('admin');\n\t\tif (!$info) {\n\t\t\techo '<script type=\"text/javascript\">';\n\t\t\techo \"parent.location.href='/index.php/Admin/Public/login'\";\n\t\t\techo '</script>';\n\t\t\texit;\n\t\t}\n\t\t//放置越权访问\n\t\tif ($info['admin_role_id']==0) {\n\t\t\treturn;\n\t\t}\n\t\t//非管理员验证是否具有访问权限(防止越权方法)\n\t\t$allow_controller_array = array('INDEX');//所有权限都可以访问Index控制器\n\t\t$controller_name = strtoupper(CONTROLLER_NAME);//将当前控制器名转大写\n\t\tif (!in_array($controller_name, $allow_controller_array)) {\n\t\t\t$role = M('role')->find($info['admin_role_id']);\n\t\t\t$allow_auth_ac = $role['role_auth_ac'];//当前角色允许的权限\n\t\t\t$now_auth_ac = CONTROLLER_NAME . '-' . ACTION_NAME; //当前角色访问权限\n\t\t\tif (FALSE === stripos($allow_auth_ac, $now_auth_ac)) {\n\t\t\t\t$this->error('您没有此访问权限');\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## 五张表\n```\nRBAC建表\n三张主表\n管理员表(it_admin)    角色表(it_role)     权限表(it_privilege)\n两张中间表\n角色表与权限表的关系（多对多）it_role_privilege\n一个角色，拥有多个权限\n一个权限，所属多个角色\n管理员表与角色表的关系（多对多）it_admin_role\n一个角色拥有多个管理员\n一个管理员也可以属于多个角色\n\n#创建一个管理员表\n create table it_admin(\n\tid int unsigned primary key auto_increment,\n\tadmin_name  varchar(32) not null comment '管理员名称',\n\tpassword char(32) not null comment '管理员密码',\n\tsalt  char(6)  not null comment '密码的密钥'\n)engine myisam charset utf8;\n\n密码的加密方式是这样的，md5(md5(password).salt)\n#在建管理员表时，要手工创建一个超级管理员\n密码:'admin'\nsalt: df8trr\ninsert into it_admin(admin_name,password,salt) values('admin','a2040d1137c482b2b5379efb11909db5','df8trr');\n#创建一个角色表\n create table it_role(\n\tid int unsigned primary key auto_increment,\n\trole_name  varchar(32) not null comment '角色名称'\t\n)engine myisam charset utf8;\n#创建一个权限表(节点，按钮)    权限就是按钮\n create table it_privilege(\n\tid int unsigned primary key auto_increment,\n\tpriv_name  varchar(32) not null comment '权限名称',\n\tparent_id  int not null default 0 comment '权限的父权限',\n\tmodule_name varchar(32) not null comment '权限对应模块的名称',\n\tcontroller_name varchar(32) not null comment '权限对应控制器的名称',\n\taction_name varchar(32) not null comment '权限对应方法的名称'\n)engine myisam charset utf8;\n#创建一个角色与权限的中间表\n create table it_role_privilege(\n\trole_id int not null comment '角色的id',\n\tpriv_id int not null comment '权限的id'\n)engine myisam charset utf8;\n#创建一个管理员与角色的中间表\n create table it_admin_role(\n        admin_id int not null comment '管理员的id',\n\trole_id int not null comment '角色的id'\n)engine myisam charset utf8;\n```","source":"_posts/2015/201511/20151101-1.md","raw":"layout: post\ntitle: Role-Based Access Control\ndate: 2015-11-01 01:00:21\ntags:\n- RBAC\n---\n# RBAC\n基于角色的访问控制 (Role-Based Access Control)\n\n## 表设计\n```sql\n#创建后台管理员表\nDROP TABLE IF EXISTS ugo_admin;\nCREATE TABLE ugo_admin(\n\tadmin_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT '管理员id' ,\n\tadmin_name VARCHAR(50) NOT NULL COMMENT '用户名' ,\n\tadmin_pwd VARCHAR(50) NOT NULL COMMENT '密码' ,\n\tadmin_role_id TINYINT UNSIGNED NOT NULL COMMENT '角色编号'\n) ENGINE = INNODB charset = utf8 COMMENT '管理员表';\n# 超级管理员测试数据\ninsert into ugo_admin values (null,'aa','aa',0);\n\n#创建后台权限表\nDROP TABLE IF EXISTS ugo_authority;\nCREATE TABLE ugo_authority(\n\tauth_id INT UNSIGNED auto_increment PRIMARY KEY COMMENT 'auth_id' ,\n\tauth_name VARCHAR(50) NOT NULL COMMENT '权限名称' ,\n\tauth_pid INT UNSIGNED NOT NULL COMMENT '权限父级id' ,\n\tauth_c VARCHAR(50) NULL COMMENT '控制器名' ,\n\tauth_a VARCHAR(50) NULL COMMENT '方法名' ,\n\tauth_path VARCHAR(50) NULL COMMENT '全路径,格式:父级id-子级id' ,\n\tis_show TINYINT NOT NULL DEFAULT 1 COMMENT '是否显示在导航栏上'\n) ENGINE = INNODB charset = utf8 COMMENT '权限表';\n\n#创建后台角色表\nDROP TABLE IF EXISTS ugo_role;\nCREATE TABLE IF NOT EXISTS ugo_role(\n\trole_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT 'role_id' ,\n\trole_name VARCHAR(50) NOT NULL COMMENT '角色名称' ,\n\trole_auth_ids VARCHAR(255) NOT NULL COMMENT '角色具有权限id的集合，格式1,2,5' ,\n\trole_auth_ac text NOT NULL COMMENT '控制器和方法的组合，格式：控制器-方法名'\n) ENGINE = INNODB charset = utf8 COMMENT '角色表';\n\n# *********************************************************** #\n-- 插入测试数据\ninsert into ugo_authority values (1,'商品管理',0,'','',1,1);\ninsert into ugo_authority values (2,'会员管理',0,'','',2,1);\ninsert into ugo_authority values (3,'权限管理',0,'','',3,1);\n\ninsert into ugo_authority values (4,'商品列表',1,'Goods','show','1-4',1);\ninsert into ugo_authority values (5,'添加商品',1,'Goods','add','1-5',1);\ninsert into ugo_authority values (6,'修改商品',1,'Goods','edit','1-6',0);\ninsert into ugo_authority values (7,'删除商品',1,'Goods','del','1-7',0);\n\ninsert into ugo_authority values (8,'会员列表',2,'Role','show','2-12',1);\ninsert into ugo_authority values (9,'添加会员',2,'Role','add','2-13',1);\ninsert into ugo_authority values (10,'修改会员',2,'Role','edit','2-14',0);\ninsert into ugo_authority values (11,'删除会员',2,'Role','del','2-15',0);\n\ninsert into ugo_authority values (12,'权限列表',3,'Authority','show','3-8',1);\ninsert into ugo_authority values (13,'添加权限',3,'Authority','add','3-9',1);\ninsert into ugo_authority values (14,'修改权限',3,'Authority','edit','3-10',0);\ninsert into ugo_authority values (15,'删除权限',3,'Authority','del','3-11',0);\n\ninsert into ugo_role values (1,'经理','1,4,5','Goods-show,Goods-add');\ninsert into ugo_role values (2,'主管','1,4','Goods-show');\n\ninsert into ugo_admin values (null,'aa','aa',0)\n# *********************************************************** #\n```\n\n## 菜单后台\n```php\npublic function menu(){\n        $admin = session('admin');\n        $role_id = $admin['admin_role_id'];\n        if ($role_id==0) { //超级管理员\n            $auth_info1 = M('authority')->where('auth_pid = 0 and is_show = 1')->select();//父级\n            $auth_info2 = M('authority')->where('auth_pid > 0 and is_show = 1')->select();//子级\n        }else{\n            $role = M('role')->find($role_id); //通过管理员角色id找到角色信息\n            $role_auth_ids = $role['role_auth_ids'];//获取该角色的权限信息\n            $auth_info1 = M('authority')->where(\"auth_pid = 0 and is_show =1 and auth_id in ($role_auth_ids)\")->select();\n            $auth_info2 = M('authority')->where(\"auth_pid > 0 and is_show =1 and auth_id in ($role_auth_ids)\")->select();\n        }\n        $this->assign('menu_list',array(\n                'auth_info1' => $auth_info1,\n                'auth_info2' => $auth_info2\n            ));\n    \t$this->display();\n    }\n```\n\n## 菜单前台\n```php\n<volist name=\"menu_list.auth_info1\" id=\"vo1\">\n  <li class=\"collapse\" key=\"{$i}_{$vo1.auth_c}\" name=\"menu\"> {$vo1.auth_name}        \n    <ul style=\"display: none;\">\n      <volist name=\"menu_list.auth_info2\" id=\"vo2\">\n        <li class=\"menu-item\">\n\t        <a href=\"/index.php/Admin/{$vo2.auth_c}/{$vo2.auth_a}\" target=\"main-frame\"><if condition=\"$vo1.auth_id eq $vo2.auth_pid \">{$vo2.auth_name}</if>\n\t        </a>\n\t    </li>\n      </volist>\n    </ul>\n  </li>\n</volist>\n```\n\n## 防翻墙与越权访问\n```php\nclass BaseController extends Controller{\n\tpublic function __construct(){\n\t\tparent::__construct();\n\t\t$this->chenkLogin();\n\t}\n\t// 防翻墙\n\tpublic function chenkLogin(){\n\t\tif (strtoupper(CONTROLLER_NAME)=='LOGIN') {\n\t\t\treturn;\n\t\t}\n\t\t$info = session('admin');\n\t\tif (!$info) {\n\t\t\techo '<script type=\"text/javascript\">';\n\t\t\techo \"parent.location.href='/index.php/Admin/Public/login'\";\n\t\t\techo '</script>';\n\t\t\texit;\n\t\t}\n\t\t//放置越权访问\n\t\tif ($info['admin_role_id']==0) {\n\t\t\treturn;\n\t\t}\n\t\t//非管理员验证是否具有访问权限(防止越权方法)\n\t\t$allow_controller_array = array('INDEX');//所有权限都可以访问Index控制器\n\t\t$controller_name = strtoupper(CONTROLLER_NAME);//将当前控制器名转大写\n\t\tif (!in_array($controller_name, $allow_controller_array)) {\n\t\t\t$role = M('role')->find($info['admin_role_id']);\n\t\t\t$allow_auth_ac = $role['role_auth_ac'];//当前角色允许的权限\n\t\t\t$now_auth_ac = CONTROLLER_NAME . '-' . ACTION_NAME; //当前角色访问权限\n\t\t\tif (FALSE === stripos($allow_auth_ac, $now_auth_ac)) {\n\t\t\t\t$this->error('您没有此访问权限');\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## 五张表\n```\nRBAC建表\n三张主表\n管理员表(it_admin)    角色表(it_role)     权限表(it_privilege)\n两张中间表\n角色表与权限表的关系（多对多）it_role_privilege\n一个角色，拥有多个权限\n一个权限，所属多个角色\n管理员表与角色表的关系（多对多）it_admin_role\n一个角色拥有多个管理员\n一个管理员也可以属于多个角色\n\n#创建一个管理员表\n create table it_admin(\n\tid int unsigned primary key auto_increment,\n\tadmin_name  varchar(32) not null comment '管理员名称',\n\tpassword char(32) not null comment '管理员密码',\n\tsalt  char(6)  not null comment '密码的密钥'\n)engine myisam charset utf8;\n\n密码的加密方式是这样的，md5(md5(password).salt)\n#在建管理员表时，要手工创建一个超级管理员\n密码:'admin'\nsalt: df8trr\ninsert into it_admin(admin_name,password,salt) values('admin','a2040d1137c482b2b5379efb11909db5','df8trr');\n#创建一个角色表\n create table it_role(\n\tid int unsigned primary key auto_increment,\n\trole_name  varchar(32) not null comment '角色名称'\t\n)engine myisam charset utf8;\n#创建一个权限表(节点，按钮)    权限就是按钮\n create table it_privilege(\n\tid int unsigned primary key auto_increment,\n\tpriv_name  varchar(32) not null comment '权限名称',\n\tparent_id  int not null default 0 comment '权限的父权限',\n\tmodule_name varchar(32) not null comment '权限对应模块的名称',\n\tcontroller_name varchar(32) not null comment '权限对应控制器的名称',\n\taction_name varchar(32) not null comment '权限对应方法的名称'\n)engine myisam charset utf8;\n#创建一个角色与权限的中间表\n create table it_role_privilege(\n\trole_id int not null comment '角色的id',\n\tpriv_id int not null comment '权限的id'\n)engine myisam charset utf8;\n#创建一个管理员与角色的中间表\n create table it_admin_role(\n        admin_id int not null comment '管理员的id',\n\trole_id int not null comment '角色的id'\n)engine myisam charset utf8;\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjv003spgwinz2ade49"},{"layout":"post","title":"AJAX跨域请求与AJAX浏览器缓存处理","date":"2015-11-06T12:22:19.000Z","_content":"# AJAX\n## 原生post 提交\n```\n<script type=\"text/javascript\">\nwindow.onload=function(){\n\tdocument.getElementById('username').onblur=function(){\n\t\tvar username=document.getElementById('username').value;\n\t\tusername=encodeURIComponent(username);\t//字符编码，防止与URL关键字相混淆\n\t\tvar req=new XMLHttpRequest();\n\t\treq.open('post','./5-demo.php');\t//创建连接\n\t\treq.onreadystatechange=function(){\t//当状态发生变化\n\t\t\tif(req.readyState==4 && req.status==200){\n\t\t\t\tvar result=req.responseText;\t//接受返回的信息\n\t\t\t\talert(result);\n\t\t\t}\n\t\t}\n\t\treq.setRequestHeader('Content-Type','application/x-www-form-urlencoded'); //设置请求头\n\t\treq.send('username='+username);\t//post提交数据\n\t}\n}\n</script>\n<input type=\"text\" name=\"\" id=\"username\">\n```\n\n## 解决浏览器缓存\n1. 方法一：添加一个随机数，使得URL地址变得唯一\n`req.open('open','./1.php?'+Math.random());`\n2. 方法二：告知浏览器不要缓存页面\n`header(\"Cache-Control:no-cache\");`\n`header(\"Pragma:no-cache\");`\n3. 方法三：当浏览器接受到相应的时候，缓存就已经过期\n`header(\"Expires:-1\");`\n4. 方法四：\n设置请求头：`req.setRequestHeader('If-Modified-Since','0');`\n客户端通过If-Modified-Since头将服务器端最后发过来的页面时间戳发送回去，服务器端通过时间戳判断客户端的页面是否是最新的，如果不是最新的则返回新的内容，如果是最新的，则返回304重定向到客户端缓存中的页面。\n\n## 跨域请求\n背景：浏览器为了安全考虑，不允许跨域请求。\n同源策略：一个域名下的JS只能请求同一个域名下的文件，不能跨域请求\n解决方法：\n1. HTML标记的src属性没有同源限制\n`<script src=\"http://www.uiste.com/test.js\"></script>`\n\n2. PHP同域代理\n```\n文件一：<?php echo file_get_contents('http://www.uiste.com/test.php'); ?>\n文件二：<script>req.open('open','6-demo.php')</script>\n```\n\n3. 设置响应头\n```\nheader(\"Access-Control-Allow-Origin: http://a.com\"); // 允许a.com发起的跨域请求  \n//如果需要设置允许所有域名发起的跨域请求，可以使用通配符 *  \nheader(\"Access-Control-Allow-Origin: *\"); // 允许任意域名发起的跨域请求  \nheader('Access-Control-Allow-Headers: X-Requested-With,X_Requested_With');  \n```\n\n4. jsonp\nJSONP是客户端用get的方式传递一个回调函数的名字给服务器，服务器返回拼接好的调用函数字符串给客户端，然后客户端用js生成script标记，用script标记的src属性引入服务器生成的js代码，\n```\nPHP文件一：\n$stu = array('tom','berry');\n$stu = json_encode($stu);\n$fn = $_GET['fn'];\necho \"$fn($stu)\";\nHTML文件二：\n<script type=\"text/javascript\">\nfunction show(msg){alert(msg);}\nwindow.onload=function(){\n\tdocument.getElementById('btn').onclick=function(){\n\t\tvar script=document.createElement('script');\n\t\tscript.src=\"http://www.uiste.com/test.php?fn=show\";\n\t\tvar body=document.getElementByTagName('body')[0];\n\t\tbody.appendChild(script);\n\t}\n}\n</script>\n<input type=\"button\" value=\"点击\" id=\"btn\">\n```\n\n>jsonp案例\n\n实例1\ntest.html\n```\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>test</title>\n<script src=\"jquery-1.5.2.min.js\"></script>\n<script src=\"ajax.js\"></script>\n</head>\n \n<body>\n</body>\n</html>\n```\n\najax.js\n```\n$.ajax({\n    type : \"post\",\n    url : \"ajax.php\",\n    dataType : \"jsonp\",\n    jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(默认为:callback)\n    jsonpCallback:\"success_jsonpCallback\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名\n    success : function(json){\n        alert('success');\n    },\n    error:function(){\n        alert('fail');\n    }\n});\n```\n\najax.php\n```\n<?php\n \n$data = \".......\";\n$callback = $_GET['callback'];\necho $callback.'('.json_encode($data).')';\nexit;\n?>\n```\n\n>jquery-1.5.2.min.js\n当使用jsonp时，使用 JSONP 形式调用函数时，如 \"myurl?callback=?\" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。\n\n \n\n实例2\ntest.html\n```\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>test</title>\n<script src=\"jquery-1.5.2.min.js\"></script>\n<script src=\"ajax.js\"></script>\n</head>\n \n<body>\n<form name=\"form\">\n<input type=\"text\" name=\"sex\">\n<input type=\"text\" name=\"age\">\n<input type=\"button\" id=\"btn\" value=\"button\" />\n</form>\n</body>\n</html>\n```\n\najax.js\n```\n$(document).ready(function(){\n \n    $(\"#btn\").click(function(k) {\n        //...\n        var j = $(\"form\").serializeArray();//序列化name/value\n        $.ajax({\n            type: 'GET',  //这里用GET\n            url: 'ajax.php',\n            dataType: 'jsonp',  //类型\n            data: j,\n            jsonp: 'callback', //jsonp回调参数，必需\n            async: false,\n            success: function(result) {//返回的json数据\n                alert(result.message); //回调输出\n                 \n                result = result || {};\n                if (result.msg=='err'){\n                    alert(result.info);\n                }else if (result.msg==\"ok\"){\n                    alert('提交成功');\n                }else{\n                    alert('提交失败');\n                }\n                 \n            },\n            timeout: 3000\n        })\n        //...\n    });\n     \n});\n```\n\najax.php\n```\n<?php\n$callback = isset($_GET['callback']) ? trim($_GET['callback']) : ''; //jsonp回调参数，必需\n$date = array(\"age\"=>$_GET['age'], \"message\"=>$_GET['age']);\n$date[\"msg\"]=\"err\";\n$date[\"info\"]=\"因人品问题，发送失败\";\n$tmp= json_encode($date); //json 数据\necho $callback . '(' . $tmp .')';  //返回格式，必需\n?>\n```\n","source":"_posts/2015/201511/20151106-1.md","raw":"layout: post\ntitle: AJAX跨域请求与AJAX浏览器缓存处理\ndate: 2015-11-06 20:22:19\ntags:\n- AJAX\n---\n# AJAX\n## 原生post 提交\n```\n<script type=\"text/javascript\">\nwindow.onload=function(){\n\tdocument.getElementById('username').onblur=function(){\n\t\tvar username=document.getElementById('username').value;\n\t\tusername=encodeURIComponent(username);\t//字符编码，防止与URL关键字相混淆\n\t\tvar req=new XMLHttpRequest();\n\t\treq.open('post','./5-demo.php');\t//创建连接\n\t\treq.onreadystatechange=function(){\t//当状态发生变化\n\t\t\tif(req.readyState==4 && req.status==200){\n\t\t\t\tvar result=req.responseText;\t//接受返回的信息\n\t\t\t\talert(result);\n\t\t\t}\n\t\t}\n\t\treq.setRequestHeader('Content-Type','application/x-www-form-urlencoded'); //设置请求头\n\t\treq.send('username='+username);\t//post提交数据\n\t}\n}\n</script>\n<input type=\"text\" name=\"\" id=\"username\">\n```\n\n## 解决浏览器缓存\n1. 方法一：添加一个随机数，使得URL地址变得唯一\n`req.open('open','./1.php?'+Math.random());`\n2. 方法二：告知浏览器不要缓存页面\n`header(\"Cache-Control:no-cache\");`\n`header(\"Pragma:no-cache\");`\n3. 方法三：当浏览器接受到相应的时候，缓存就已经过期\n`header(\"Expires:-1\");`\n4. 方法四：\n设置请求头：`req.setRequestHeader('If-Modified-Since','0');`\n客户端通过If-Modified-Since头将服务器端最后发过来的页面时间戳发送回去，服务器端通过时间戳判断客户端的页面是否是最新的，如果不是最新的则返回新的内容，如果是最新的，则返回304重定向到客户端缓存中的页面。\n\n## 跨域请求\n背景：浏览器为了安全考虑，不允许跨域请求。\n同源策略：一个域名下的JS只能请求同一个域名下的文件，不能跨域请求\n解决方法：\n1. HTML标记的src属性没有同源限制\n`<script src=\"http://www.uiste.com/test.js\"></script>`\n\n2. PHP同域代理\n```\n文件一：<?php echo file_get_contents('http://www.uiste.com/test.php'); ?>\n文件二：<script>req.open('open','6-demo.php')</script>\n```\n\n3. 设置响应头\n```\nheader(\"Access-Control-Allow-Origin: http://a.com\"); // 允许a.com发起的跨域请求  \n//如果需要设置允许所有域名发起的跨域请求，可以使用通配符 *  \nheader(\"Access-Control-Allow-Origin: *\"); // 允许任意域名发起的跨域请求  \nheader('Access-Control-Allow-Headers: X-Requested-With,X_Requested_With');  \n```\n\n4. jsonp\nJSONP是客户端用get的方式传递一个回调函数的名字给服务器，服务器返回拼接好的调用函数字符串给客户端，然后客户端用js生成script标记，用script标记的src属性引入服务器生成的js代码，\n```\nPHP文件一：\n$stu = array('tom','berry');\n$stu = json_encode($stu);\n$fn = $_GET['fn'];\necho \"$fn($stu)\";\nHTML文件二：\n<script type=\"text/javascript\">\nfunction show(msg){alert(msg);}\nwindow.onload=function(){\n\tdocument.getElementById('btn').onclick=function(){\n\t\tvar script=document.createElement('script');\n\t\tscript.src=\"http://www.uiste.com/test.php?fn=show\";\n\t\tvar body=document.getElementByTagName('body')[0];\n\t\tbody.appendChild(script);\n\t}\n}\n</script>\n<input type=\"button\" value=\"点击\" id=\"btn\">\n```\n\n>jsonp案例\n\n实例1\ntest.html\n```\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>test</title>\n<script src=\"jquery-1.5.2.min.js\"></script>\n<script src=\"ajax.js\"></script>\n</head>\n \n<body>\n</body>\n</html>\n```\n\najax.js\n```\n$.ajax({\n    type : \"post\",\n    url : \"ajax.php\",\n    dataType : \"jsonp\",\n    jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(默认为:callback)\n    jsonpCallback:\"success_jsonpCallback\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名\n    success : function(json){\n        alert('success');\n    },\n    error:function(){\n        alert('fail');\n    }\n});\n```\n\najax.php\n```\n<?php\n \n$data = \".......\";\n$callback = $_GET['callback'];\necho $callback.'('.json_encode($data).')';\nexit;\n?>\n```\n\n>jquery-1.5.2.min.js\n当使用jsonp时，使用 JSONP 形式调用函数时，如 \"myurl?callback=?\" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。\n\n \n\n实例2\ntest.html\n```\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>test</title>\n<script src=\"jquery-1.5.2.min.js\"></script>\n<script src=\"ajax.js\"></script>\n</head>\n \n<body>\n<form name=\"form\">\n<input type=\"text\" name=\"sex\">\n<input type=\"text\" name=\"age\">\n<input type=\"button\" id=\"btn\" value=\"button\" />\n</form>\n</body>\n</html>\n```\n\najax.js\n```\n$(document).ready(function(){\n \n    $(\"#btn\").click(function(k) {\n        //...\n        var j = $(\"form\").serializeArray();//序列化name/value\n        $.ajax({\n            type: 'GET',  //这里用GET\n            url: 'ajax.php',\n            dataType: 'jsonp',  //类型\n            data: j,\n            jsonp: 'callback', //jsonp回调参数，必需\n            async: false,\n            success: function(result) {//返回的json数据\n                alert(result.message); //回调输出\n                 \n                result = result || {};\n                if (result.msg=='err'){\n                    alert(result.info);\n                }else if (result.msg==\"ok\"){\n                    alert('提交成功');\n                }else{\n                    alert('提交失败');\n                }\n                 \n            },\n            timeout: 3000\n        })\n        //...\n    });\n     \n});\n```\n\najax.php\n```\n<?php\n$callback = isset($_GET['callback']) ? trim($_GET['callback']) : ''; //jsonp回调参数，必需\n$date = array(\"age\"=>$_GET['age'], \"message\"=>$_GET['age']);\n$date[\"msg\"]=\"err\";\n$date[\"info\"]=\"因人品问题，发送失败\";\n$tmp= json_encode($date); //json 数据\necho $callback . '(' . $tmp .')';  //返回格式，必需\n?>\n```\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjw003upgwil59w1w9i"},{"layout":"post","title":"Laravel Composer安装","date":"2015-11-11T08:44:49.000Z","_content":"## 全局安装Composer\n1.验证环境PHP环境\n```\nuiste:Downloads uiste$ php -v\nPHP 5.6.24 (cli) (built: Aug  8 2015 16:58:37) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n```\n\n2.监测包安装文件\n`uiste:Downloads uiste$ php composer.phar`\n3.移动文件到全局目录\n`uiste:Downloads uiste$ sudo mv composer.phar /usr/local/bin/composer`\n若没有访问权限\n>```\n>uiste:Downloads uiste$ composer\n>-bash: /usr/local/bin/composer: Permission denied\n>uiste:Downloads uiste$ cd /usr/local/bin/\n>uiste:bin uiste$ ls -l\n>....\n>uiste:bin uiste$ sudo chmod -R 755 composer\n>```\n\n4.切换到任意目录验证\n`uiste:~ uiste$ composer`\n\n## 中国全量镜像\n查看当前的镜像地址\n```\nuiste:~ uiste$ composer config -g repo.packagist\n{\"type\":\"composer\",\"url\":\"https:\\/\\/packagist.phpcomposer.com\"}\n```\n\n`uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n## 使用Composer\n主要命令\n搜索：search\n展示：show\n声明依赖：require\n安装：install\n更新：update\n\n`uiste:test uiste$ composer search monolog`\n```\nuiste:test uiste$ vim composer.json\n\n{\n    \"name\": \"imooc/test\",\n    \"description\": \"test composer\",\n    \"authors\": [\n        {\n            \"name\": \"uiste\",\n            \"email\": \"798407452@qq.com\"\n        }\n    ],\n    \"require\": {\n        \"monolog/monolog\":\"1.21.*\",\n        \"symfony/http-foundation\": \"^3.1\"\n    }\n}\nuiste:test uiste$ composer install\nuiste:test uiste$ composer require symfony/http-foundation\n```\n\n## Composer安装laravel框架\n### 方法一 \n通过 composer Create-Project命令安装Laravel\n`composer create-project laravel/laravel blog --prefer-dist[别名]`\n### 方法二\nlaravel安装器\n```\ncomposer global require \"laravel/installer\"\nlaravel new blog\n```\n\n检查安装状态\n```\nuiste:test uiste$ laravel\nLaravel Installer version 1.3.3\n```\n\n下载laravel\n```\nuiste:test uiste$ laravel new blog\nCrafting application...\n```\n","source":"_posts/2015/201511/20151111-2.md","raw":"layout: post\ntitle: Laravel Composer安装\ndate: 2015-11-11 16:44:49\ntags:\n- laravel\n---\n## 全局安装Composer\n1.验证环境PHP环境\n```\nuiste:Downloads uiste$ php -v\nPHP 5.6.24 (cli) (built: Aug  8 2015 16:58:37) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n```\n\n2.监测包安装文件\n`uiste:Downloads uiste$ php composer.phar`\n3.移动文件到全局目录\n`uiste:Downloads uiste$ sudo mv composer.phar /usr/local/bin/composer`\n若没有访问权限\n>```\n>uiste:Downloads uiste$ composer\n>-bash: /usr/local/bin/composer: Permission denied\n>uiste:Downloads uiste$ cd /usr/local/bin/\n>uiste:bin uiste$ ls -l\n>....\n>uiste:bin uiste$ sudo chmod -R 755 composer\n>```\n\n4.切换到任意目录验证\n`uiste:~ uiste$ composer`\n\n## 中国全量镜像\n查看当前的镜像地址\n```\nuiste:~ uiste$ composer config -g repo.packagist\n{\"type\":\"composer\",\"url\":\"https:\\/\\/packagist.phpcomposer.com\"}\n```\n\n`uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n## 使用Composer\n主要命令\n搜索：search\n展示：show\n声明依赖：require\n安装：install\n更新：update\n\n`uiste:test uiste$ composer search monolog`\n```\nuiste:test uiste$ vim composer.json\n\n{\n    \"name\": \"imooc/test\",\n    \"description\": \"test composer\",\n    \"authors\": [\n        {\n            \"name\": \"uiste\",\n            \"email\": \"798407452@qq.com\"\n        }\n    ],\n    \"require\": {\n        \"monolog/monolog\":\"1.21.*\",\n        \"symfony/http-foundation\": \"^3.1\"\n    }\n}\nuiste:test uiste$ composer install\nuiste:test uiste$ composer require symfony/http-foundation\n```\n\n## Composer安装laravel框架\n### 方法一 \n通过 composer Create-Project命令安装Laravel\n`composer create-project laravel/laravel blog --prefer-dist[别名]`\n### 方法二\nlaravel安装器\n```\ncomposer global require \"laravel/installer\"\nlaravel new blog\n```\n\n检查安装状态\n```\nuiste:test uiste$ laravel\nLaravel Installer version 1.3.3\n```\n\n下载laravel\n```\nuiste:test uiste$ laravel new blog\nCrafting application...\n```\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjx003wpgwi2451a7y2"},{"layout":"post","title":"Laravel Artisan简介","date":"2015-11-11T08:47:18.000Z","_content":"## Artisan简介\n由Symfony Console 组件驱动\n## Artisan基本用法\n1. 查看所有可用的Artisan的命令（list）\n`php artisan`\n`php artisan list`\n\n2. 查看命令的帮助信息（help）\n`php artisan help migrate`\n3. 创建Student控制器、模型、中间件\n```\nuiste:laravel uiste$  php artisan make:controller StudentController\nController created successfully.\nuiste:laravel uiste$  php artisan make:model Student\nModel created successfully.\nuiste:laravel uiste$ php artisan make:middleware Activity\nMiddleware created successfully.\n```\n\n* 命名应用程序\n`php artisan app:name uiste`\n\n\nActisan主要作用创建好已经构建好模板的代码文件及其它高级用法\n\n## Laravel 用户认证功能\n### Laravel中生成Auth所需文件\n```\nuiste:laravel uiste$ php artisan make:auth\nAuthentication scaffolding generated successfully.\n```\n\n1. routs/web.php 文件中，生成如下代码\n```\nAuth::routes();\nRoute::get('/home','HomeController@index');\n```\n\n2. 生成resources/views/auth/login.blade.php & register.blade.php\n3. 修改resources/views/layouts/app.blade.php文件\n```\n<link href=\"/css/app.css\" rel='stylesheet'>\n改为：<link href=\"{asset('css/app.css')}\" rel='stylesheet'>\n<script src=\"/js/app.js}\"></script>\n<script src=\"{asset('js/app.js')}\"></script>\n```\n4. 路由文件：vendor/laravel/src/Routing/Router.php->Auth()方法中\n\n### 生成数据库中所需要的表\n所需文件在：database/migrations中查找\n操作如下：\n```\nuiste:laravel uiste$ php artisan migrate\nMigration table created successfully.\nMigrated: 2014_10_12_000000_create_users_table\nMigrated: 2014_10_12_100000_create_password_resets_table\n```\n\n数据库中生成：\n`migrations` 迁移表\n`password_resets` 密码重置表\n`users` 用户表\n\n### 配置选项\n.evn 文件修改数据库配置项\n","source":"_posts/2015/201511/20151111-3.md","raw":"layout: post\ntitle: Laravel Artisan简介\ndate: 2015-11-11 16:47:18\ntags:\n- laravel\n---\n## Artisan简介\n由Symfony Console 组件驱动\n## Artisan基本用法\n1. 查看所有可用的Artisan的命令（list）\n`php artisan`\n`php artisan list`\n\n2. 查看命令的帮助信息（help）\n`php artisan help migrate`\n3. 创建Student控制器、模型、中间件\n```\nuiste:laravel uiste$  php artisan make:controller StudentController\nController created successfully.\nuiste:laravel uiste$  php artisan make:model Student\nModel created successfully.\nuiste:laravel uiste$ php artisan make:middleware Activity\nMiddleware created successfully.\n```\n\n* 命名应用程序\n`php artisan app:name uiste`\n\n\nActisan主要作用创建好已经构建好模板的代码文件及其它高级用法\n\n## Laravel 用户认证功能\n### Laravel中生成Auth所需文件\n```\nuiste:laravel uiste$ php artisan make:auth\nAuthentication scaffolding generated successfully.\n```\n\n1. routs/web.php 文件中，生成如下代码\n```\nAuth::routes();\nRoute::get('/home','HomeController@index');\n```\n\n2. 生成resources/views/auth/login.blade.php & register.blade.php\n3. 修改resources/views/layouts/app.blade.php文件\n```\n<link href=\"/css/app.css\" rel='stylesheet'>\n改为：<link href=\"{asset('css/app.css')}\" rel='stylesheet'>\n<script src=\"/js/app.js}\"></script>\n<script src=\"{asset('js/app.js')}\"></script>\n```\n4. 路由文件：vendor/laravel/src/Routing/Router.php->Auth()方法中\n\n### 生成数据库中所需要的表\n所需文件在：database/migrations中查找\n操作如下：\n```\nuiste:laravel uiste$ php artisan migrate\nMigration table created successfully.\nMigrated: 2014_10_12_000000_create_users_table\nMigrated: 2014_10_12_100000_create_password_resets_table\n```\n\n数据库中生成：\n`migrations` 迁移表\n`password_resets` 密码重置表\n`users` 用户表\n\n### 配置选项\n.evn 文件修改数据库配置项\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjy003ypgwir5qn6gxh"},{"layout":"post","title":"Laravel 数据迁移与数据填充","date":"2015-11-11T08:49:47.000Z","_content":"## 数据迁移\n\n## 数据填充","source":"_posts/2015/201511/20151111-4.md","raw":"layout: post\ntitle: Laravel 数据迁移与数据填充\ndate: 2015-11-11 16:49:47\ntags:\n- laravel\n---\n## 数据迁移\n\n## 数据填充","slug":"4","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjjz003zpgwid3exvsfk"},{"layout":"post","title":"Laravel 文件上传","date":"2015-11-11T08:50:53.000Z","_content":"## laravel常用功能-文件上传","source":"_posts/2015/201511/20151111-5.md","raw":"layout: post\ntitle: Laravel 文件上传\ndate: 2015-11-11 16:50:53\ntags:\n- laravel\n---\n## laravel常用功能-文件上传","slug":"5","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk00042pgwixlihrnok"},{"layout":"post","title":"Laravel 邮件发送","date":"2015-11-11T08:52:02.000Z","_content":"## Laravel常用功能-邮件发送\n","source":"_posts/2015/201511/20151111-6.md","raw":"layout: post\ntitle: Laravel 邮件发送\ndate: 2015-11-11 16:52:02\ntags:\n- laravel\n---\n## Laravel常用功能-邮件发送\n","slug":"6","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk10043pgwisittc13f"},{"layout":"post","title":"Laravel 缓存使用","date":"2015-11-11T08:53:03.000Z","_content":"## Laravel常用功能-错误与日志","source":"_posts/2015/201511/20151111-7.md","raw":"layout: post\ntitle: Laravel 缓存使用\ndate: 2015-11-11 16:53:03\ntags:\n- laravel\n---\n## Laravel常用功能-错误与日志","slug":"7","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk20045pgwi531i7fxl"},{"layout":"post","title":"Laravel 队列应用","date":"2015-11-11T08:54:02.000Z","_content":"## Laravel常用功能-队列应用","source":"_posts/2015/201511/20151111-8.md","raw":"layout: post\ntitle: Laravel 队列应用\ndate: 2015-11-11 16:54:02\ntags:\n- laravel\n---\n## Laravel常用功能-队列应用","slug":"8","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk30047pgwi5rg6200r"},{"layout":"post","title":"Hexo 扩展工具","date":"2015-11-11T18:03:34.000Z","_content":"## 添加high一下\n\n效果很赞，整个页面渐进式摇摆，摇摆，还有音乐\n\n在 Hexo\\themes\\next\\layout_partials\\header.swig 中的 ul 标签加入如下 li 代码：\n```html\n <li class=\"menu-item menu-item-search\"> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n \n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n \n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n \n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n \n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n \n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n \n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n \n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n \n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n \n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n \n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n \n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n \n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n \n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n})()    '>High</a> </li>\n```\n\n## 站内搜索","source":"_posts/2015/201511/20151112-1.md","raw":"layout: post\ntitle: Hexo 扩展工具\ndate: 2015-11-12 02:03:34\ntags:\n- hexo\n---\n## 添加high一下\n\n效果很赞，整个页面渐进式摇摆，摇摆，还有音乐\n\n在 Hexo\\themes\\next\\layout_partials\\header.swig 中的 ul 标签加入如下 li 代码：\n```html\n <li class=\"menu-item menu-item-search\"> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n \n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n \n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n \n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n \n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n \n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n \n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n \n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n \n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n \n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n \n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n \n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n \n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n \n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n})()    '>High</a> </li>\n```\n\n## 站内搜索","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk40049pgwizleh4a4f"},{"layout":"post","title":"Laravel 开发前奏","date":"2015-11-12T08:55:57.000Z","_content":"## 目录结构\n![目录结构](http://7xwlfk.com1.z0.glb.clouddn.com/6.laravel5.2_1.png)\n## 配置选项\n>php.ini\n`extension=php_openssl.dll`\n`extension=php_mbstring.dll`\n`extension=php_pdo_mysql.dll`\n\n## 修改默认首页\n* server.php => index.php\n* DirectoryIndex server.php\n* 修改入口文件：`DocumentRoot \".../public\"`\n>需要服务器支持修改入口文件或者子目录可以绑定域名\n\n将伪静态配置文件`.htaccess`移动到项目根目录\n\n## 基础路由\n• Route::get($uri, $callback);\n• Route::post($uri, $callback);\n• Route::put($uri, $callback);\n• Route::patch($uri, $callback);\n• Route::delete($uri, $callback);\n• Route::options($uri, $callback);\n• Route::match(['get', 'post'], '/', $callback);\n• Route::any('foo', $callback);\n\n### 参数限定\n\n```\nRoute::get('user/{name}', function($name)\n{\n    //\n})\n->where('name', '[A-Za-z]+');\n\nRoute::get('user/{id}/{name}', function($id, $name)\n{\n    //\n})\n->where(['id' => '[0-9]+', 'name' => '[a-z]+'])\n```\n>postman插件\n>路由参数不能使用`-`,需要使用`_`进行替换\n\n## 基础控制器\nlaravel 控制器没有像ThinkPHP 那种参数访问控制器的方法，所有的控制器访问都需要通过路由进行设置\n\n1. 手动创建路由与控制器相对繁琐\n2. 使用Atrisan方法创建\n```\nuiste:blog uiste$ php artisan make:controller HomeController\nController created successfully.\n```\n\n3. 控制器分文件夹\n>命名空间\n>路由使用 `\\` \n\n## 高级路由\n### 路由命名\n```\nRoute::get('/index', ['as'=>'index',function(){\n    echo route('index');\n}]);\n//简单的命名方法\n---\nhttp://www.blog.com/index\n```\n\n控制路由命名\n`Route::get('/index', ['uses'=>'Admin\\IndexController@index','as'=>'index']);`\n`Route::get('/index', 'Admin\\IndexController@index')->name('index');`\n`return route('index');//控制器调用`\n\n### 路由分组\n将相同的路由放在一起，便于统一的管理\n```\nRoute::get('admin/index', 'Admin\\IndexController@index')->name('index');\nRoute::get('admin/login', 'Admin\\IndexController@login')->name('login');\n```\n\n使用group对平台及命名空间进行分组方式如下：\n```\nRoute::group(['prefix'=>'admin','namespace'=>'Admin'],function(){\n    Route::get('index', 'IndexController@index')->name('index');\n    Route::get('login', 'IndexController@login')->name('login');\n});\n```\n\nTerminal中显示路由列表\n`uiste:blog uiste$ php artisan route:list`\n\nRESTfun 资源路由控制器\n资源路由设置，优点：一条路由生成多种路由规则\n`Route::resource('article','ArticleController');`\n\n![route_resource](http://7xwlfk.com1.z0.glb.clouddn.com/route_resource.png)\n\n### Middleware中间件\nHTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求。\nLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。所有的中间件都位于 app/Http/Middleware 目录内。\n\n自定义路由中间件`app\\Htp\\Kernel.php`\n1. kernel.php中定义中间件名\n```\nprotected $routeMiddleware = [\n\t'admin.login' => \\App\\Http\\Middleware\\AdminLogin::class,\n];\n//后台登录中间件，AdminLogin中间件名\n```\n\n2. 使用Artisan创建中间件\n`uiste:blog uiste$ php artisan make:middleware AdminLogin`\n\n3. routes.php定义路由规则\n```\nRoute::group(['middleware' => ['web','admin.login']], function () {\n    Route::get('test',function(){\n        echo 'test a middleware';\n    });\n});\n```\n\n4. 书写中间件条件\n```\npublic function handle($request, Closure $next)\n{\n    if(session('admin'))\n        return redirect('admin/login');\n    return $next($request);\n}\n```\n\n>使用`web`中间件，才能使用session\n\n## 视图\n方法一：``return view('greeting')->with('name', 'Victoria');``\n>使用：$name; 可以多个with一同使用\n\n方法二：``return = view('greeting', $data);``\n\n方法三：``return view('greeting',compact('data','title'));``\n\n## 模板引擎\nblade模板引擎 基础用法\n```\n• {{ $name }}\n• @{{ $name }} \t\t\t\t\t使用@符屏蔽语法解析\n• {{ $name or 'Default' }} \t\t使用or设置默认值\n• {{ isset($name) ? $name : 'Default' }}\n• {!! $str !!} \t\t\t\t\t算感叹号代表htmlspecialchars_decode()\n```\n\n## Blade模板引擎 流程控制\n有开始标志就要有结束标志\n• @if\n```\n@if($data['score']<60)\n    不及格\n    @else\n    及格\n    @endif\n```\n\n• @unless       除非，用法同if\n• @for\n• @foreach \n```\n@foreach($data['article'] as $v)\n    {{ $v }}\n    @endforeach\n    }\n```\n\n• @forelse      是foreach的补充 \n```\n@forelse($data['article'] as $v)\n    $v\n    @empty\n    没有数据\n    @endforelse\n```\n\n• @while\n以上基本流程控制可以嵌套\n\n## Blade模板引擎 子视图\n• @include(common.header)\n• @include(common.name', ['some' => 'data'])\n• @extends('layouts.master')\n• @yield('content')\n• @section('content') \n```\n头文件\n@section('content')\n<p>父类模板文件中的内容</p>\n@show\n脚文件\n```\n\n子视图文件\n```\n@extends('layouts.home')\n@section('content')\n    @parent\n    替换的内容\n    @section('content')\n```\n\n## 读取配置项\n`echo config('database.connections.mysql.prefix');`\n`echo config('app.debug');`\n\n## 连接数据库\n```\n$pdo = DB :: connection()->getPdo();\ndd($pdo); //dd函数打印并终止程序继续运行\n```\n\n数据表操作\n• DB::table('user')->get();\n• DB::table('user')->where('user',1)->get();\n\n## 模型创建\n• php artisan make:model User\n数据表操作\n• protected $table=\"user\";\n• protected $primaryKey = 'user_id';\n• public $timestamps = false;       //禁止默认时间戳\n","source":"_posts/2015/201511/20151112-2.md","raw":"layout: post\ntitle: Laravel 开发前奏\ndate: 2015-11-12 16:55:57\ntags:\n- Laravel\n---\n## 目录结构\n![目录结构](http://7xwlfk.com1.z0.glb.clouddn.com/6.laravel5.2_1.png)\n## 配置选项\n>php.ini\n`extension=php_openssl.dll`\n`extension=php_mbstring.dll`\n`extension=php_pdo_mysql.dll`\n\n## 修改默认首页\n* server.php => index.php\n* DirectoryIndex server.php\n* 修改入口文件：`DocumentRoot \".../public\"`\n>需要服务器支持修改入口文件或者子目录可以绑定域名\n\n将伪静态配置文件`.htaccess`移动到项目根目录\n\n## 基础路由\n• Route::get($uri, $callback);\n• Route::post($uri, $callback);\n• Route::put($uri, $callback);\n• Route::patch($uri, $callback);\n• Route::delete($uri, $callback);\n• Route::options($uri, $callback);\n• Route::match(['get', 'post'], '/', $callback);\n• Route::any('foo', $callback);\n\n### 参数限定\n\n```\nRoute::get('user/{name}', function($name)\n{\n    //\n})\n->where('name', '[A-Za-z]+');\n\nRoute::get('user/{id}/{name}', function($id, $name)\n{\n    //\n})\n->where(['id' => '[0-9]+', 'name' => '[a-z]+'])\n```\n>postman插件\n>路由参数不能使用`-`,需要使用`_`进行替换\n\n## 基础控制器\nlaravel 控制器没有像ThinkPHP 那种参数访问控制器的方法，所有的控制器访问都需要通过路由进行设置\n\n1. 手动创建路由与控制器相对繁琐\n2. 使用Atrisan方法创建\n```\nuiste:blog uiste$ php artisan make:controller HomeController\nController created successfully.\n```\n\n3. 控制器分文件夹\n>命名空间\n>路由使用 `\\` \n\n## 高级路由\n### 路由命名\n```\nRoute::get('/index', ['as'=>'index',function(){\n    echo route('index');\n}]);\n//简单的命名方法\n---\nhttp://www.blog.com/index\n```\n\n控制路由命名\n`Route::get('/index', ['uses'=>'Admin\\IndexController@index','as'=>'index']);`\n`Route::get('/index', 'Admin\\IndexController@index')->name('index');`\n`return route('index');//控制器调用`\n\n### 路由分组\n将相同的路由放在一起，便于统一的管理\n```\nRoute::get('admin/index', 'Admin\\IndexController@index')->name('index');\nRoute::get('admin/login', 'Admin\\IndexController@login')->name('login');\n```\n\n使用group对平台及命名空间进行分组方式如下：\n```\nRoute::group(['prefix'=>'admin','namespace'=>'Admin'],function(){\n    Route::get('index', 'IndexController@index')->name('index');\n    Route::get('login', 'IndexController@login')->name('login');\n});\n```\n\nTerminal中显示路由列表\n`uiste:blog uiste$ php artisan route:list`\n\nRESTfun 资源路由控制器\n资源路由设置，优点：一条路由生成多种路由规则\n`Route::resource('article','ArticleController');`\n\n![route_resource](http://7xwlfk.com1.z0.glb.clouddn.com/route_resource.png)\n\n### Middleware中间件\nHTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求。\nLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。所有的中间件都位于 app/Http/Middleware 目录内。\n\n自定义路由中间件`app\\Htp\\Kernel.php`\n1. kernel.php中定义中间件名\n```\nprotected $routeMiddleware = [\n\t'admin.login' => \\App\\Http\\Middleware\\AdminLogin::class,\n];\n//后台登录中间件，AdminLogin中间件名\n```\n\n2. 使用Artisan创建中间件\n`uiste:blog uiste$ php artisan make:middleware AdminLogin`\n\n3. routes.php定义路由规则\n```\nRoute::group(['middleware' => ['web','admin.login']], function () {\n    Route::get('test',function(){\n        echo 'test a middleware';\n    });\n});\n```\n\n4. 书写中间件条件\n```\npublic function handle($request, Closure $next)\n{\n    if(session('admin'))\n        return redirect('admin/login');\n    return $next($request);\n}\n```\n\n>使用`web`中间件，才能使用session\n\n## 视图\n方法一：``return view('greeting')->with('name', 'Victoria');``\n>使用：$name; 可以多个with一同使用\n\n方法二：``return = view('greeting', $data);``\n\n方法三：``return view('greeting',compact('data','title'));``\n\n## 模板引擎\nblade模板引擎 基础用法\n```\n• {{ $name }}\n• @{{ $name }} \t\t\t\t\t使用@符屏蔽语法解析\n• {{ $name or 'Default' }} \t\t使用or设置默认值\n• {{ isset($name) ? $name : 'Default' }}\n• {!! $str !!} \t\t\t\t\t算感叹号代表htmlspecialchars_decode()\n```\n\n## Blade模板引擎 流程控制\n有开始标志就要有结束标志\n• @if\n```\n@if($data['score']<60)\n    不及格\n    @else\n    及格\n    @endif\n```\n\n• @unless       除非，用法同if\n• @for\n• @foreach \n```\n@foreach($data['article'] as $v)\n    {{ $v }}\n    @endforeach\n    }\n```\n\n• @forelse      是foreach的补充 \n```\n@forelse($data['article'] as $v)\n    $v\n    @empty\n    没有数据\n    @endforelse\n```\n\n• @while\n以上基本流程控制可以嵌套\n\n## Blade模板引擎 子视图\n• @include(common.header)\n• @include(common.name', ['some' => 'data'])\n• @extends('layouts.master')\n• @yield('content')\n• @section('content') \n```\n头文件\n@section('content')\n<p>父类模板文件中的内容</p>\n@show\n脚文件\n```\n\n子视图文件\n```\n@extends('layouts.home')\n@section('content')\n    @parent\n    替换的内容\n    @section('content')\n```\n\n## 读取配置项\n`echo config('database.connections.mysql.prefix');`\n`echo config('app.debug');`\n\n## 连接数据库\n```\n$pdo = DB :: connection()->getPdo();\ndd($pdo); //dd函数打印并终止程序继续运行\n```\n\n数据表操作\n• DB::table('user')->get();\n• DB::table('user')->where('user',1)->get();\n\n## 模型创建\n• php artisan make:model User\n数据表操作\n• protected $table=\"user\";\n• protected $primaryKey = 'user_id';\n• public $timestamps = false;       //禁止默认时间戳\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk5004bpgwiyah5pjus"},{"layout":"post","title":"Laravel 开发记录1","date":"2015-11-12T14:58:42.000Z","_content":"## phpstrom快捷键：\n* command + E \t\t\t\t查看最近打开的文件或项目\n* command + shift + V \t\t选择粘贴最近的剪切板内容\n* command + D \t\t\t\t复制粘贴选中的文本\n* command + 1 \t\t\t\t切换窗口\n* alt \t  + 上下方向键\t\t调到上下函数\n* alt \t  + 左右方向键 \t\t导航标签切换\n* command + shift + N \t\t根据文件名查找\n* command + shift + alt + N 根据函数名查找\n* /** \t  + Enter\t\t\t自动生成注释\n* command + alt   + L \t\t格式化代码\n* command + R \t\t\t\t替换\n* command + shift + R \t\t全局替换\n* shift\t  + Enter\t\t\t智能跳到下一行\n* command + shift + U \t\t大小写\n\n## 表单提交相关\n视图引入静态资源文件：\n```\n<link rel=\"stylesheet\" href=\"{{asset('resources/views/admin/style/css/ch-ui.admin.css')}}\">\n```\n\n控制器分配视图：`return view('admin.login');`\n控制器跳转：`return redirect('admin/index');`\n\n在使用验证码、QQ登录、七牛存储、支付宝等第三方接口的时候，用到原生session的时候，由于laravel自有session的封装，无办法正常调用\n解决方法：在入口文件开启session \n`session_start();`\n\n模板文件调用控制器方法：\n```\n{{url('admin/code')}}\n```\n\n验证表单是否有数据提交：`Input::all()` 等价于 ThinkPHP中的 `IS_POST`\n打印并终止程序继续运行：`dd();` \t\t\t等价于 ThinkPHP中的 `dump();exit;`\n\n**csrf防护**\n报错：\n`TokenMismatchException in VerifyCsrfToken.php line 67:`\n\n解决：\n```\n{{csrf _ field()}}\n```\n\n登录成功session保存用户信息：`session(['user'=>$user]);`\n\n## 数据验证\n```php\n// 定义验证规则\n$rules = [\n    'password' => 'required|between:6,20|confirmed',\n];\n// 提示信息\n$message = [\n    'password.required' => '新密码不能为空',\n    'password.between'  => '新密码必须在6-20位之间',\n    'password.confirmed'=> '新密码和确认密码不一致',\n];\n$validator = Validator::make($input,$rules,$message);\nif($validator->passes()){//验证规则通过\n\techo 'ok!';\n}else{\n    $validator->errors()->all();//测试打印错误信息\n    return back()->withErrors($validator);\n}\n```            \n\n```\n{`{csrf_field()}`}\n@if(count($errors))\n    @foreach($errors->all() as $error)\n        {{$error}}\n    @endforeach\n@endif\n<tr>\n    <th><i class=\"require\">*</i>新密码：</th>\n    <td>\n        <input type=\"password\" name=\"password\"> </i>新密码6-20位</span>\n    </td>\n</tr>\n<tr>\n    <th><i class=\"require\">*</i>确认密码：</th>\n    <td>\n        <input type=\"password\" name=\"password_confirmation\"> </i>再次输入密码</span>\n    </td>\n</tr>\n```            \n\n## AJAX实现分类排序\n弹出窗插件：`layer.layui.com`\n文本编辑器：ueditor\n上传组件：  `www.uploadify.com`\n\n树形分类（Model）\n```php\n// 树形分类\npublic function getTree($data,$field_name,$field_id='id',$field_pid='pid',$pid=0){\n    $tree = array();\n    foreach($data as $k => $v){\n        if($v->$field_pid == $pid){\n            $tree[] = $data[$k];\n            $data[$k]['_'.$field_name] = $data[$k][$field_name];\n            foreach($data as $m => $n){\n                if($n->$field_pid == $v->$field_id){\n                    $data[$m]['_'.$field_name] = '┣━ '.$data[$m][$field_name];\n                    $tree[] = $data[$m];\n                }\n            }\n        }\n    }\n    return $tree;\n}\n```\n\n更新分类排序（view）\n```html\n <input type=\"text\" onchange=\"changeOrder(this,{{$v->cate_id}})\" name=\"ord[]\" value=\"{{$v->cate_order}}\">\n //ajax\n <script type=\"text/javascript\">\n    function changeOrder(obj,cate_id){\n        var cate_order = $(obj).val();\n        $.post(\"{{url('admin/cate/changeorder')}}\",{'_token':'{{csrf_token()}}','cate_id':cate_id,'cate_order':cate_order},function(data){\n            if(data.status == 0){\n                layer.msg(data.msg,{icon:6});\n            }else{\n                layer.msg(data.msg,{icon:5});\n            }\n        });\n    }\n</script>\n```\n\n更新分类排序（Controller）\n```php\npublic function changeOrder(){\n    $input = Input::all();\n    $cate = Category::find($input['cate_id']);\n    $cate->cate_order = $input['cate_order'];\n    if($cate->update()){\n        $data = [\n            'status' => 0,\n            'msg'    => '分类排序更新成功',\n        ];\n    }else{\n        $data = [\n            'status'    => 1,\n            'msg'       => '分类排序更新失败,请稍后重试...',\n        ];\n    }\n    return $data;\n}\n```\n\n>去除不需要的字段：`$input = Input::except('_token')`\n>`guarded` 除了什么字段，其它都是可以填充的：protected $guarded = [];\n>`fillable` 可以使用create方法填充的字段\n\n## 更新分类字段\nupdate 方法使用put方式接受字段\nview代码\n```\n<form action=\"{{url('admin/category'.$cate_info->cate_id)}}\" method=\"post\">\n<input type=\"hidden\" name=\"_method\" value=\"put\">\n```\n\n刷新页面：`location.href = location.href;`\n\n\n## 图片上传\nuploadify插件\n```html\n<script src=\"{{asset('resources/org/uploadify/jquery.uploadify.min.js')}}\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{asset('resources/org/uploadify/uploadify.css')}}\">\n<script type=\"text/javascript\">\n    <?php $timestamp = time();?>\n    $(function() {\n                $('#file_upload').uploadify({\n                    'buttonText'   : '图片上传',\n                    'formData'     : {\n                        'timestamp' : '<?php echo $timestamp;?>',\n                        '_token'     : '{{csrf_token()}}'\n                    },\n                    'swf'      : \"{{asset('resources/org/uploadify/uploadify.swf')}}\",\n                    'uploader' : \"{{url('admin/upload')}}\",\n                    'onUploadSuccess' : function(file,data,response){\n                        $('input[name=art_thumb]').val(data);\n                        $('#art_thumb_img').attr('src','/'+data);\n                    },\n                });\n            });\n</script>\n<style>\n    .uploadify{display:inline-block;}\n    .uploadify-button{border:none; border-radius:5px; margin-top:8px;}\n    table.add_tab tr td span.uploadify-button-text{color: #FFF; margin:0;}\n</style>\n\n<input id=\"file_upload\" name=\"file_upload\" type=\"file\" multiple=\"true\">\n<img src=\"\" alt=\"\" id=\"art_thumb_img\" style=\"max-width: 350px;max-height: 100px;\">\n```\n\n图片上传\n```php\n// 图片上传\npublic function upload(){\n    $file = Input::file('Filedata');\n    if($file->isValid()){\n        // 上传文件的后缀\n        $entension = $file->getClientOriginalExtension();\n        // 移动文件并重命名\n        $newName = date('YmdHis').mt_rand(100,999).'.'.$entension;\n        $path = $file->move(base_path().'/uploads',$newName);\n        $filepath = 'uploads/'.$newName;\n        return $filepath;\n    }\n}\n```\n\n## 分页\n```\n$data = Article::orderBy('art_id','desc')->paginate(3);\nreturn view('admin.article.list',compact('data'));\n<div class=\"page_list\">\n    {{$data->render()}}\n</div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201511/20151112-3.md","raw":"layout: post\ntitle: Laravel 开发记录1\ndate: 2015-11-12 22:58:42\ntags:\n- laravel\n---\n## phpstrom快捷键：\n* command + E \t\t\t\t查看最近打开的文件或项目\n* command + shift + V \t\t选择粘贴最近的剪切板内容\n* command + D \t\t\t\t复制粘贴选中的文本\n* command + 1 \t\t\t\t切换窗口\n* alt \t  + 上下方向键\t\t调到上下函数\n* alt \t  + 左右方向键 \t\t导航标签切换\n* command + shift + N \t\t根据文件名查找\n* command + shift + alt + N 根据函数名查找\n* /** \t  + Enter\t\t\t自动生成注释\n* command + alt   + L \t\t格式化代码\n* command + R \t\t\t\t替换\n* command + shift + R \t\t全局替换\n* shift\t  + Enter\t\t\t智能跳到下一行\n* command + shift + U \t\t大小写\n\n## 表单提交相关\n视图引入静态资源文件：\n```\n<link rel=\"stylesheet\" href=\"{{asset('resources/views/admin/style/css/ch-ui.admin.css')}}\">\n```\n\n控制器分配视图：`return view('admin.login');`\n控制器跳转：`return redirect('admin/index');`\n\n在使用验证码、QQ登录、七牛存储、支付宝等第三方接口的时候，用到原生session的时候，由于laravel自有session的封装，无办法正常调用\n解决方法：在入口文件开启session \n`session_start();`\n\n模板文件调用控制器方法：\n```\n{{url('admin/code')}}\n```\n\n验证表单是否有数据提交：`Input::all()` 等价于 ThinkPHP中的 `IS_POST`\n打印并终止程序继续运行：`dd();` \t\t\t等价于 ThinkPHP中的 `dump();exit;`\n\n**csrf防护**\n报错：\n`TokenMismatchException in VerifyCsrfToken.php line 67:`\n\n解决：\n```\n{{csrf _ field()}}\n```\n\n登录成功session保存用户信息：`session(['user'=>$user]);`\n\n## 数据验证\n```php\n// 定义验证规则\n$rules = [\n    'password' => 'required|between:6,20|confirmed',\n];\n// 提示信息\n$message = [\n    'password.required' => '新密码不能为空',\n    'password.between'  => '新密码必须在6-20位之间',\n    'password.confirmed'=> '新密码和确认密码不一致',\n];\n$validator = Validator::make($input,$rules,$message);\nif($validator->passes()){//验证规则通过\n\techo 'ok!';\n}else{\n    $validator->errors()->all();//测试打印错误信息\n    return back()->withErrors($validator);\n}\n```            \n\n```\n{`{csrf_field()}`}\n@if(count($errors))\n    @foreach($errors->all() as $error)\n        {{$error}}\n    @endforeach\n@endif\n<tr>\n    <th><i class=\"require\">*</i>新密码：</th>\n    <td>\n        <input type=\"password\" name=\"password\"> </i>新密码6-20位</span>\n    </td>\n</tr>\n<tr>\n    <th><i class=\"require\">*</i>确认密码：</th>\n    <td>\n        <input type=\"password\" name=\"password_confirmation\"> </i>再次输入密码</span>\n    </td>\n</tr>\n```            \n\n## AJAX实现分类排序\n弹出窗插件：`layer.layui.com`\n文本编辑器：ueditor\n上传组件：  `www.uploadify.com`\n\n树形分类（Model）\n```php\n// 树形分类\npublic function getTree($data,$field_name,$field_id='id',$field_pid='pid',$pid=0){\n    $tree = array();\n    foreach($data as $k => $v){\n        if($v->$field_pid == $pid){\n            $tree[] = $data[$k];\n            $data[$k]['_'.$field_name] = $data[$k][$field_name];\n            foreach($data as $m => $n){\n                if($n->$field_pid == $v->$field_id){\n                    $data[$m]['_'.$field_name] = '┣━ '.$data[$m][$field_name];\n                    $tree[] = $data[$m];\n                }\n            }\n        }\n    }\n    return $tree;\n}\n```\n\n更新分类排序（view）\n```html\n <input type=\"text\" onchange=\"changeOrder(this,{{$v->cate_id}})\" name=\"ord[]\" value=\"{{$v->cate_order}}\">\n //ajax\n <script type=\"text/javascript\">\n    function changeOrder(obj,cate_id){\n        var cate_order = $(obj).val();\n        $.post(\"{{url('admin/cate/changeorder')}}\",{'_token':'{{csrf_token()}}','cate_id':cate_id,'cate_order':cate_order},function(data){\n            if(data.status == 0){\n                layer.msg(data.msg,{icon:6});\n            }else{\n                layer.msg(data.msg,{icon:5});\n            }\n        });\n    }\n</script>\n```\n\n更新分类排序（Controller）\n```php\npublic function changeOrder(){\n    $input = Input::all();\n    $cate = Category::find($input['cate_id']);\n    $cate->cate_order = $input['cate_order'];\n    if($cate->update()){\n        $data = [\n            'status' => 0,\n            'msg'    => '分类排序更新成功',\n        ];\n    }else{\n        $data = [\n            'status'    => 1,\n            'msg'       => '分类排序更新失败,请稍后重试...',\n        ];\n    }\n    return $data;\n}\n```\n\n>去除不需要的字段：`$input = Input::except('_token')`\n>`guarded` 除了什么字段，其它都是可以填充的：protected $guarded = [];\n>`fillable` 可以使用create方法填充的字段\n\n## 更新分类字段\nupdate 方法使用put方式接受字段\nview代码\n```\n<form action=\"{{url('admin/category'.$cate_info->cate_id)}}\" method=\"post\">\n<input type=\"hidden\" name=\"_method\" value=\"put\">\n```\n\n刷新页面：`location.href = location.href;`\n\n\n## 图片上传\nuploadify插件\n```html\n<script src=\"{{asset('resources/org/uploadify/jquery.uploadify.min.js')}}\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{asset('resources/org/uploadify/uploadify.css')}}\">\n<script type=\"text/javascript\">\n    <?php $timestamp = time();?>\n    $(function() {\n                $('#file_upload').uploadify({\n                    'buttonText'   : '图片上传',\n                    'formData'     : {\n                        'timestamp' : '<?php echo $timestamp;?>',\n                        '_token'     : '{{csrf_token()}}'\n                    },\n                    'swf'      : \"{{asset('resources/org/uploadify/uploadify.swf')}}\",\n                    'uploader' : \"{{url('admin/upload')}}\",\n                    'onUploadSuccess' : function(file,data,response){\n                        $('input[name=art_thumb]').val(data);\n                        $('#art_thumb_img').attr('src','/'+data);\n                    },\n                });\n            });\n</script>\n<style>\n    .uploadify{display:inline-block;}\n    .uploadify-button{border:none; border-radius:5px; margin-top:8px;}\n    table.add_tab tr td span.uploadify-button-text{color: #FFF; margin:0;}\n</style>\n\n<input id=\"file_upload\" name=\"file_upload\" type=\"file\" multiple=\"true\">\n<img src=\"\" alt=\"\" id=\"art_thumb_img\" style=\"max-width: 350px;max-height: 100px;\">\n```\n\n图片上传\n```php\n// 图片上传\npublic function upload(){\n    $file = Input::file('Filedata');\n    if($file->isValid()){\n        // 上传文件的后缀\n        $entension = $file->getClientOriginalExtension();\n        // 移动文件并重命名\n        $newName = date('YmdHis').mt_rand(100,999).'.'.$entension;\n        $path = $file->move(base_path().'/uploads',$newName);\n        $filepath = 'uploads/'.$newName;\n        return $filepath;\n    }\n}\n```\n\n## 分页\n```\n$data = Article::orderBy('art_id','desc')->paginate(3);\nreturn view('admin.article.list',compact('data'));\n<div class=\"page_list\">\n    {{$data->render()}}\n</div>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk6004epgwiosyjp6ny"},{"layout":"post","title":"Laravel 开发记录2","date":"2015-11-14T19:33:03.000Z","_content":"## Migrations数据迁移创建数据表\n```\nuiste:blog uiste$ php artisan make:migration create_links_table\nCreated Migration: 2015_11_15_033430_create_links_table\n\n---\npublic function up()\n{\n    Schema::create('links', function (Blueprint $table) {\n        $table->engine = 'MyISAM';\n        $table->increments('link_id');\n        $table->string('link_name')->default('')->comment('名称');\n        $table->string('link_title')->default('')->comment('标题');\n        $table->string('link_url')->default('')->comment('链接');\n        $table->integer('link_order')->default(10)->comment('排序');\n    });\n}\n\n---\nMigration table created successfully.\nMigrated: 2015_11_15_033430_create_links_table\n```\n\n## 数据填充\n```\nuiste:blog uiste$ php artisan make:seeder LinksTableSeeder\nSeeder created successfully.\n\n---\npublic function run()\n{\n    $data = [\n        [\n            'link_name' => 'uiste技术博客',\n            'link_title'=> '专注于技术分享，实战经验总结',\n            'link_url'  => 'http://blog.uiste.com',\n            'link_order'=> 1,\n        ],\n        [\n            'link_name' => 'uiste生活博客',\n            'link_title'=> '分享生活，欣赏一切美好的事物',\n            'link_url'  => 'http://www.uiste.com',\n            'link_order'=> 2,\n        ]\n    ];\n    DB::table('links') -> insert($data);\n}\n\n---\npublic function run()\n{\n    $this->call(LinksTableSeeder::class);\n}\n\n---\nuiste:blog uiste$ php artisan db:seed\nSeeded: LinksTableSeeder\n```","source":"_posts/2015/201511/20151115-1.md","raw":"layout: post\ntitle: Laravel 开发记录2\ndate: 2015-11-15 03:33:03\ntags:\n- laravel\n---\n## Migrations数据迁移创建数据表\n```\nuiste:blog uiste$ php artisan make:migration create_links_table\nCreated Migration: 2015_11_15_033430_create_links_table\n\n---\npublic function up()\n{\n    Schema::create('links', function (Blueprint $table) {\n        $table->engine = 'MyISAM';\n        $table->increments('link_id');\n        $table->string('link_name')->default('')->comment('名称');\n        $table->string('link_title')->default('')->comment('标题');\n        $table->string('link_url')->default('')->comment('链接');\n        $table->integer('link_order')->default(10)->comment('排序');\n    });\n}\n\n---\nMigration table created successfully.\nMigrated: 2015_11_15_033430_create_links_table\n```\n\n## 数据填充\n```\nuiste:blog uiste$ php artisan make:seeder LinksTableSeeder\nSeeder created successfully.\n\n---\npublic function run()\n{\n    $data = [\n        [\n            'link_name' => 'uiste技术博客',\n            'link_title'=> '专注于技术分享，实战经验总结',\n            'link_url'  => 'http://blog.uiste.com',\n            'link_order'=> 1,\n        ],\n        [\n            'link_name' => 'uiste生活博客',\n            'link_title'=> '分享生活，欣赏一切美好的事物',\n            'link_url'  => 'http://www.uiste.com',\n            'link_order'=> 2,\n        ]\n    ];\n    DB::table('links') -> insert($data);\n}\n\n---\npublic function run()\n{\n    $this->call(LinksTableSeeder::class);\n}\n\n---\nuiste:blog uiste$ php artisan db:seed\nSeeded: LinksTableSeeder\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk7004gpgwiutdyv2is"},{"layout":"post","title":"Mac上使用brew安装MongoDB","date":"2015-11-15T17:37:05.000Z","_content":"# Mac上使用brew安装MongoDB\nMongoDB的安装有好多种安装方法，有直接使用HomeBrew方式，也有源码编译方式。这里使用最简单的HomeBrew。\n\n1. 使用brew安装MongoDB,首先需要确保你的电脑上安装过了HomeBrew,在终端输入如下命令:\nruby -e \"$(curl -fsSkL raw.github.com/mxcl/homebrew/go)\"\n安装HomeBrew。(如果已经安装过了HomeBrew,可以跳过这一步)\n\n2. 安装完brew后先更新一下:\n`uiste:~ uiste$ brew update`\n\n3. 然后就是安装MongoDB:\n`uiste:~ uiste$ brew install mongodb`\n等待几分钟,如果终端显示以下提示,说明MongoDB安装成功。\n![mongodb_success](http://7xwlfk.com1.z0.glb.clouddn.com/mongodb_success.png)\n\n4. 启动MongoDB,在命令行界面输入:\n`uiste:~ uiste$ mongod --config /usr/local/etc/mongod.conf`\n如果没有报错,说明mongod服务已经成功启动\n\n5. 使用mongo命令连接数据库,打开一个新的命令行窗口,然后输入mongo:\n`uiste:~ uiste$ mongo`\n\n至此,MongoDB数据库安装和连接就成功了.\n![mongodb_login](http://7xwlfk.com1.z0.glb.clouddn.com/mongodb_login.png)","source":"_posts/2015/201511/20151116-1.md","raw":"layout: post\ntitle: Mac上使用brew安装MongoDB\ndate: 2015-11-16 01:37:05\ntags:\n- 数据库优化\n---\n# Mac上使用brew安装MongoDB\nMongoDB的安装有好多种安装方法，有直接使用HomeBrew方式，也有源码编译方式。这里使用最简单的HomeBrew。\n\n1. 使用brew安装MongoDB,首先需要确保你的电脑上安装过了HomeBrew,在终端输入如下命令:\nruby -e \"$(curl -fsSkL raw.github.com/mxcl/homebrew/go)\"\n安装HomeBrew。(如果已经安装过了HomeBrew,可以跳过这一步)\n\n2. 安装完brew后先更新一下:\n`uiste:~ uiste$ brew update`\n\n3. 然后就是安装MongoDB:\n`uiste:~ uiste$ brew install mongodb`\n等待几分钟,如果终端显示以下提示,说明MongoDB安装成功。\n![mongodb_success](http://7xwlfk.com1.z0.glb.clouddn.com/mongodb_success.png)\n\n4. 启动MongoDB,在命令行界面输入:\n`uiste:~ uiste$ mongod --config /usr/local/etc/mongod.conf`\n如果没有报错,说明mongod服务已经成功启动\n\n5. 使用mongo命令连接数据库,打开一个新的命令行窗口,然后输入mongo:\n`uiste:~ uiste$ mongo`\n\n至此,MongoDB数据库安装和连接就成功了.\n![mongodb_login](http://7xwlfk.com1.z0.glb.clouddn.com/mongodb_login.png)","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk8004ipgwi0kdmwxwn"},{"layout":"post","title":"一键安装lnmp环境","date":"2015-11-15T17:42:10.000Z","_content":"## 一键安装lnmp环境\n1.使用putty或类似的SSH工具登陆VPS或服务器\n\n2.下载并安装LNMP一键安装包\n安装LNMP执行:\nwget -c http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz\ntar zxvf lnmp1.3-full.tar.gz\ncd lnmp1.3-full\n./install.sh lnmp\n默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可\n按上述命令执行后，会出现如下提示\nlnmp-1.3-install-1.png\n需要设置MySQL的root密码（不输入直接回车将会设置为root）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除。输入后回车进入下一步，如下图所示\nlnmp-1.3-install-2.png\n询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步\n选择MySQL版本，目前提供了较多版本的MySQL和MariaDB，需要注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择\nlnmp-1.3-install-3.png\n输入对应MySQL或MariaDB版本前面的序号，回车进入下一步，选择PHP版本：\n注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容\nlnmp-1.3-install-4.png\n输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化\nlnmp-1.3-install-5.png\n可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。\n如果是LNMPA或LAMP的话还会提示“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上\nlnmp-1.3-install-6.png\n再选择Apache版本\nlnmp-1.3-install-7.png\n按提示输入对应版本前面的数字序号，回车。\n提示\"Press any key to install...or Press Ctrl+c to cancel\"后，按回车键确认开始安装。\nLNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。\n安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响\n\n3.安装完成\n如果显示Nginx: OK，MySQL: OK，PHP: OK\nlnmp-1.3-install-sucess.png\n并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示Install lnmp V1.3 completed! enjoy it.的话，说明已经安装成功\n\n## LNMP状态管理命令\nLNMP状态管理命令：\nLNMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLNMP 1.2各个程序状态管理: lnmp {nginx|mysql|mariadb|php-fpm|pureftpd} {start|stop|reload|restart|kill|status}\nLNMP 1.1状态管理： /root/lnmp {start|stop|reload|restart|kill|status}\nNginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}\nMySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}\nMemcached状态管理：/etc/init.d/memcached {start|stop|restart}\nPHP-FPM状态管理：/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}\nPureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}\nProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}\n\n## LNMPA状态管理命令：\nLNMPA 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLNMPA 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}\nLNMPA1.1状态管理： /root/lnmpa {start|stop|reload|restart|kill|status}\nNginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}\nMySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}\nMemcached状态管理：/etc/init.d/memcached {start|stop|restart}\nPureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}\nProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}\nApache状态管理：/etc/init.d/httpd {start|stop|restart|graceful|graceful-stop|configtest|status}\n\nLAMP状态管理命令：\nLAMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLAMP 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}\n\n## LNMP相关软件安装目录\nNginx 目录: /usr/local/nginx/\nMySQL 目录 : /usr/local/mysql/\nMySQL数据库所在目录：/usr/local/mysql/var/\nMariaDB 目录 : /usr/local/mariadb/\nMariaDB数据库所在目录：/usr/local/mariadb/var/\nPHP目录 : /usr/local/php/\nPHPMyAdmin目录 : 0.9版本为/home/wwwroot/phpmyadmin/ 1.0及以后版本为 /home/wwwroot/default/phpmyadmin/ 强烈建议将此目录重命名为其不容易猜到的名字。phpmyadmin可自己从官网下载新版替换。\n默认网站目录 : 0.9版本为 /home/wwwroot/ 1.0及以后版本为 /home/wwwroot/default/\nNginx日志目录：/home/wwwlogs/\n/root/vhost.sh添加的虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/\nPureFtpd 目录：/usr/local/pureftpd/\nPureFtpd web管理目录： 0.9版为/home/wwwroot/default/ftp/ 1.0版为 /home/wwwroot/default/ftp/\nProftpd 目录：/usr/local/proftpd/\nRedis 目录：/usr/local/redis/\n\n## LNMP相关配置文件位置\nNginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf\n添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.conf\nMySQL配置文件：/etc/my.cnf\nPHP配置文件：/usr/local/php/etc/php.ini\nphp-fpm配置文件：/usr/local/php/etc/php-fpm.conf\nPureFtpd配置文件：/usr/local/pureftpd/pure-ftpd.conf\nPureFtpd MySQL配置文件：/usr/local/pureftpd/pureftpd-mysql.conf\nProftpd配置文件：/usr/local/proftpd/etc/proftpd.conf 1.2及之前版本为/usr/local/proftpd/proftpd.conf\nProftpd 用户配置文件：/usr/local/proftpd/etc/vhost/用户名.conf\nRedis 配置文件：/usr/local/redis/etc/redis.conf\n\n##LNMPA相关目录文件位置\nApache目录：/usr/local/apache/\nApache配置文件：/usr/local/apache/conf/httpd.conf\nApache虚拟主机配置文件目录：/usr/local/apache/conf/vhost/\nApache默认虚拟主机配置文件：/usr/local/apache/conf/extra/httpd-vhosts.conf\n虚拟主机配置文件名称：/usr/local/apache/conf/vhost/域名.conf","source":"_posts/2015/201511/20151116-2.md","raw":"layout: post\ntitle: 一键安装lnmp环境\ndate: 2015-11-16 01:42:10\ntags:\n- lnmp\n---\n## 一键安装lnmp环境\n1.使用putty或类似的SSH工具登陆VPS或服务器\n\n2.下载并安装LNMP一键安装包\n安装LNMP执行:\nwget -c http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz\ntar zxvf lnmp1.3-full.tar.gz\ncd lnmp1.3-full\n./install.sh lnmp\n默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可\n按上述命令执行后，会出现如下提示\nlnmp-1.3-install-1.png\n需要设置MySQL的root密码（不输入直接回车将会设置为root）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除。输入后回车进入下一步，如下图所示\nlnmp-1.3-install-2.png\n询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步\n选择MySQL版本，目前提供了较多版本的MySQL和MariaDB，需要注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择\nlnmp-1.3-install-3.png\n输入对应MySQL或MariaDB版本前面的序号，回车进入下一步，选择PHP版本：\n注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容\nlnmp-1.3-install-4.png\n输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化\nlnmp-1.3-install-5.png\n可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。\n如果是LNMPA或LAMP的话还会提示“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上\nlnmp-1.3-install-6.png\n再选择Apache版本\nlnmp-1.3-install-7.png\n按提示输入对应版本前面的数字序号，回车。\n提示\"Press any key to install...or Press Ctrl+c to cancel\"后，按回车键确认开始安装。\nLNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。\n安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响\n\n3.安装完成\n如果显示Nginx: OK，MySQL: OK，PHP: OK\nlnmp-1.3-install-sucess.png\n并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示Install lnmp V1.3 completed! enjoy it.的话，说明已经安装成功\n\n## LNMP状态管理命令\nLNMP状态管理命令：\nLNMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLNMP 1.2各个程序状态管理: lnmp {nginx|mysql|mariadb|php-fpm|pureftpd} {start|stop|reload|restart|kill|status}\nLNMP 1.1状态管理： /root/lnmp {start|stop|reload|restart|kill|status}\nNginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}\nMySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}\nMemcached状态管理：/etc/init.d/memcached {start|stop|restart}\nPHP-FPM状态管理：/etc/init.d/php-fpm {start|stop|quit|restart|reload|logrotate}\nPureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}\nProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}\n\n## LNMPA状态管理命令：\nLNMPA 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLNMPA 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}\nLNMPA1.1状态管理： /root/lnmpa {start|stop|reload|restart|kill|status}\nNginx状态管理：/etc/init.d/nginx {start|stop|reload|restart}\nMySQL状态管理：/etc/init.d/mysql {start|stop|restart|reload|force-reload|status}\nMemcached状态管理：/etc/init.d/memcached {start|stop|restart}\nPureFTPd状态管理： /etc/init.d/pureftpd {start|stop|restart|kill|status}\nProFTPd状态管理： /etc/init.d/proftpd {start|stop|restart|reload}\nApache状态管理：/etc/init.d/httpd {start|stop|restart|graceful|graceful-stop|configtest|status}\n\nLAMP状态管理命令：\nLAMP 1.2状态管理: lnmp {start|stop|reload|restart|kill|status}\nLAMP 1.2各个程序状态管理: lnmp {httpd|mysql|mariadb|pureftpd} {start|stop|reload|restart|kill|status}\n\n## LNMP相关软件安装目录\nNginx 目录: /usr/local/nginx/\nMySQL 目录 : /usr/local/mysql/\nMySQL数据库所在目录：/usr/local/mysql/var/\nMariaDB 目录 : /usr/local/mariadb/\nMariaDB数据库所在目录：/usr/local/mariadb/var/\nPHP目录 : /usr/local/php/\nPHPMyAdmin目录 : 0.9版本为/home/wwwroot/phpmyadmin/ 1.0及以后版本为 /home/wwwroot/default/phpmyadmin/ 强烈建议将此目录重命名为其不容易猜到的名字。phpmyadmin可自己从官网下载新版替换。\n默认网站目录 : 0.9版本为 /home/wwwroot/ 1.0及以后版本为 /home/wwwroot/default/\nNginx日志目录：/home/wwwlogs/\n/root/vhost.sh添加的虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/\nPureFtpd 目录：/usr/local/pureftpd/\nPureFtpd web管理目录： 0.9版为/home/wwwroot/default/ftp/ 1.0版为 /home/wwwroot/default/ftp/\nProftpd 目录：/usr/local/proftpd/\nRedis 目录：/usr/local/redis/\n\n## LNMP相关配置文件位置\nNginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf\n添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.conf\nMySQL配置文件：/etc/my.cnf\nPHP配置文件：/usr/local/php/etc/php.ini\nphp-fpm配置文件：/usr/local/php/etc/php-fpm.conf\nPureFtpd配置文件：/usr/local/pureftpd/pure-ftpd.conf\nPureFtpd MySQL配置文件：/usr/local/pureftpd/pureftpd-mysql.conf\nProftpd配置文件：/usr/local/proftpd/etc/proftpd.conf 1.2及之前版本为/usr/local/proftpd/proftpd.conf\nProftpd 用户配置文件：/usr/local/proftpd/etc/vhost/用户名.conf\nRedis 配置文件：/usr/local/redis/etc/redis.conf\n\n##LNMPA相关目录文件位置\nApache目录：/usr/local/apache/\nApache配置文件：/usr/local/apache/conf/httpd.conf\nApache虚拟主机配置文件目录：/usr/local/apache/conf/vhost/\nApache默认虚拟主机配置文件：/usr/local/apache/conf/extra/httpd-vhosts.conf\n虚拟主机配置文件名称：/usr/local/apache/conf/vhost/域名.conf","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk9004kpgwi8330steu"},{"layout":"post","title":"大型项目优化","date":"2015-11-15T17:45:06.000Z","_content":"## 问题与优化方案\n#### 客户端与服务器之间的问题\n描述：由于客户端跟服务器之间的网络不同，导致信号传输缓慢\n解决：使用多线路服务器（运维处理）\n#### Apache性能问题\n描述：Apache在并发访问情况下，表现很一般\n并发：在同一秒中有多少个用户在访问，一般来说并发达到100就特别到了\n解决：使用负载均衡技术（服务器架构）\n#### PHP引擎性能问题\n描述：PHP代码整个解析效率根据引擎不一样，速度不一样\n解决：1、代码优化\t2、更换引擎\n#### MySQL性能问题\n描述：同样MySQL在并发请求比较高的情况下会故障，并发过高MySQL服务器会处于宕机状态。\n工具：`bin/mysqlslap`压力测试工具\n`mysqlslap.exe -a -c 10 -i 10 -uroot -p123456`\n`mysqlslap.exe:Error when connecting to server:1040 Too many connections`\n解决：由于mysql的并发请求特别高，解决该问题可以减少mysql的请求量。可以使用一个高速的存储系统储存数据，以后每次找存储系统获取数据。即使用memcache\n\n## 优化具体方法\n1. 网站开发中尽量使用较小的资源文件\n2. 使用压缩技术（gzip压缩）\n3. 使用cdn加速资源文件（负载均衡）\n4. 使用缓存技术（内存缓存 redis/memcache/页面静态化）\n5. 对数据库进行优化（索引、存储引擎、表规范、sql优化）\n6. 网站架构重构采用分层模式设计，面向接口（API）编程\n7. 使用负载均衡技术（请求分流）\n8. 数据库使用读写分离或者分布式技术\n9. 对相关软件配置进行优化\n10. 硬件升级\n11. 延迟加载\n\n## 项目承载的并发量\n单机+nginx+memcache+文件缓存+mysql数据库测试出的并发量：300\n# Memcache\nMemcache是一款基于**内存**的**键值对**的**缓存系统**，具备高速读写的特性，并且支持**分布式存储**\nMemcached是一个高性能的分布式的内存对象缓存系统，使用这个缓存项目来构建大负载的网站，来分担数据库的压力，通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。\n\n## 概述\n### 为什么内存中的数据读写速度快\n#### 计算机数据运算流程\n数据运算在CPU上进行的，cpu本身不能存储数据，cpu需要运算的数据来源于内存。内存本身可以存储部分数据，也可以从其他存储介质（磁盘）上读取数据\n#### 设计机制\n在磁盘上决定数据读写速度的是磁头定位查找数据。磁盘专属越高读写速度越快，对于MySQL优化，第一步可以将磁盘换成固态硬盘。内存是使用电流信号，所以速度特别快。\n\n###缓存系统\n只是临时存储数据的位置（非持久性数据），真实数据还是靠其他的存储介质保存。因为内存中的数据安全性不够，当由于异常服务器重启，内存中的数据会全部丢失。\n### 分布式存储\n将数据拆分到不同的Memcache服务器上存储。能够解决单台Memcache服务器存储的上线\n\n## Memcache安装\n### windows安装启动\n#### 安装\n方法一：一次性\n\n方法二：加载到服务\n`memcached.exe -d install memcached.exe -d start`\n#### 启动\n方法一：服务启动\n方法二：`memcached.exe -d start`\n方法三：`net start \"memcached Server\"`\n\n#### 使用\nMemcache是一个基于tcp协议的第三方应用。可以使用Telnet工具操作Memcache\n1. 开启Telnet客户端\n控制面板->程序功能->启用或关闭windows功能->勾选Telnet\n\n2. 使用Telnet客户端\n连接方式：进入cmd执行telent   ip地址  端口号\n### Linux安装\n\n`[root@localhost libevent-2.0.20-stable]# make && make install`\n\n2.\n```\n[root@localhost libevent-2.0.20-stable]# cd ../\n[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz\n[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/bibevent\n[root@localhost memcached-1.4.20]# make && make install\n```\n\n#### 常用命令\n\n**memcache的基本命令**\n\n![memcache](http://7xwlfk.com1.z0.glb.clouddn.com/memcache.png)\n\n#### 权限问题\n在Memcache中没有账号密码，因此Memcache中的数据不太安全。\n解决办法：\n1. 将Memcache服务器置于内网中，然后使用反向代理技术访问\n2. 通过服务器防火墙的配置，只允许某个IP地址可以访问\n在Linux可以使用hosts.allow跟hosts.deny文件控制访问权限，也叫黑白名单\n\n```\n[root@localhost ~]# cd /etc/host\nhost.conf hosts hosts.allow hosts.deny\n[root@localhost ~]# cd /etc/host.allow\n```\n\n### 常用操作命令\n#### 设置数据 | set\n语法：\n```\nset keyname(键名) 0|1 (数据是否压缩处理) exprie(有效时间) length(字符长度)\nValue(具体的数据)\n```\n\n如果数据已经存在则修改数据\n>写入具体的value数据时有回车换行操作\n>对于键名的操作一般不操作250字节\n>一般情况数据不压缩，压缩会将数据的体积变小，但读取数据时需要进行解压操作，因此整个效率降低了（时间 <==> 空间）\n>有效时间：针对Memcache中每一个键，都可以设置一个过期时间，如果时间一到，该键数据会消失，时间采用的是秒为单位，即多少秒之后过期，0表示永不过期\n#### 获取数据 | get\n配合set使用\n\n#### 添加数据 | add\n语法：`add key 0|1 失效时间  值的长度 `\n>注意：在使用add时，如果键已经存在，则添加失败。\n\n#### 删除数据 | delete\n语法：`delete key`\n#### 删除所有 | flush_all\n语法：flush_all\n>项目中慎用该命令\n#### 加法操作 | incr\n语法：`incr key number`\n>对数据向下取整\n#### 减法操作 | decr\n语法：`decr key number`\n>使用decr就可以模拟秒杀系统，比如一开始设置值为100 有效期为60秒\n\n#### 状态操作 | stats\n通过查看stats主要计算命中率\n`命中率 = get_hits/cmd_get`  自然是命中率越高越好，如果命中率很低，则说明缓存效率低，需要调整缓存的数据内容，一般项目命中率能够到70%-90%就算很好。如果内存不够用，先删除快过期的，再删除不常用的，由系统底层监控\n\n![memcache_stats](http://7xwlfk.com1.z0.glb.clouddn.com/memcache_stats.png)\n## PHP操作Memcache\n### 安装扩展\n通过phpinfo查看php.ini所在位置，PHP的版本号，及Thread Safety。\n>根据以上信息选择对应版本，Enable 选择使用ts版本。否则使用nts版本，\n\n在php.ini中通过`extension_dir`查看扩展包所在路径\n>将php_memcache.dll文件拷贝到扩展目录下\n>修改php.ini加入配置项：`extension = php_memcache.dll`\n\n重启Apache，查看phpinfo() ，是否包含Memcache扩展模块\n\n### 使用Memcache\n1. 实例化memcache对象\n`$mem = new Memcache();`\n2. 与memcache服务器建立连接\n`$mem->connect('27.0.0.1',11211);`\n3. 向memcache中写入数据\n`$mem->set('name','uiste');`\n4. 查询数据\n`$res = $mem->get('name');`\n\n### 存储原理\nMemcache可以正常存储PHP的标量类型、符合类型、空类型，但不能存储资源类型。在Memcache中本身存储的是字符串，Memcache类的set方法在向Memcache写入数据时会先将数据序列化，在get获取数据后然后反序列化。\n\n## 应用场景\n1. session写入Memcache中\n2. 作为分布式存储系统\n3. 作为缓存系统使用\n","source":"_posts/2015/201511/20151116-3.md","raw":"layout: post\ntitle: 大型项目优化\ndate: 2015-11-16 01:45:06\ntags:\n- 服务器优化\n- 数据库优化\n---\n## 问题与优化方案\n#### 客户端与服务器之间的问题\n描述：由于客户端跟服务器之间的网络不同，导致信号传输缓慢\n解决：使用多线路服务器（运维处理）\n#### Apache性能问题\n描述：Apache在并发访问情况下，表现很一般\n并发：在同一秒中有多少个用户在访问，一般来说并发达到100就特别到了\n解决：使用负载均衡技术（服务器架构）\n#### PHP引擎性能问题\n描述：PHP代码整个解析效率根据引擎不一样，速度不一样\n解决：1、代码优化\t2、更换引擎\n#### MySQL性能问题\n描述：同样MySQL在并发请求比较高的情况下会故障，并发过高MySQL服务器会处于宕机状态。\n工具：`bin/mysqlslap`压力测试工具\n`mysqlslap.exe -a -c 10 -i 10 -uroot -p123456`\n`mysqlslap.exe:Error when connecting to server:1040 Too many connections`\n解决：由于mysql的并发请求特别高，解决该问题可以减少mysql的请求量。可以使用一个高速的存储系统储存数据，以后每次找存储系统获取数据。即使用memcache\n\n## 优化具体方法\n1. 网站开发中尽量使用较小的资源文件\n2. 使用压缩技术（gzip压缩）\n3. 使用cdn加速资源文件（负载均衡）\n4. 使用缓存技术（内存缓存 redis/memcache/页面静态化）\n5. 对数据库进行优化（索引、存储引擎、表规范、sql优化）\n6. 网站架构重构采用分层模式设计，面向接口（API）编程\n7. 使用负载均衡技术（请求分流）\n8. 数据库使用读写分离或者分布式技术\n9. 对相关软件配置进行优化\n10. 硬件升级\n11. 延迟加载\n\n## 项目承载的并发量\n单机+nginx+memcache+文件缓存+mysql数据库测试出的并发量：300\n# Memcache\nMemcache是一款基于**内存**的**键值对**的**缓存系统**，具备高速读写的特性，并且支持**分布式存储**\nMemcached是一个高性能的分布式的内存对象缓存系统，使用这个缓存项目来构建大负载的网站，来分担数据库的压力，通过在内存里维护一个统一的巨大的hash表，它能够用来存储各种格式的数据，包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。\n\n## 概述\n### 为什么内存中的数据读写速度快\n#### 计算机数据运算流程\n数据运算在CPU上进行的，cpu本身不能存储数据，cpu需要运算的数据来源于内存。内存本身可以存储部分数据，也可以从其他存储介质（磁盘）上读取数据\n#### 设计机制\n在磁盘上决定数据读写速度的是磁头定位查找数据。磁盘专属越高读写速度越快，对于MySQL优化，第一步可以将磁盘换成固态硬盘。内存是使用电流信号，所以速度特别快。\n\n###缓存系统\n只是临时存储数据的位置（非持久性数据），真实数据还是靠其他的存储介质保存。因为内存中的数据安全性不够，当由于异常服务器重启，内存中的数据会全部丢失。\n### 分布式存储\n将数据拆分到不同的Memcache服务器上存储。能够解决单台Memcache服务器存储的上线\n\n## Memcache安装\n### windows安装启动\n#### 安装\n方法一：一次性\n\n方法二：加载到服务\n`memcached.exe -d install memcached.exe -d start`\n#### 启动\n方法一：服务启动\n方法二：`memcached.exe -d start`\n方法三：`net start \"memcached Server\"`\n\n#### 使用\nMemcache是一个基于tcp协议的第三方应用。可以使用Telnet工具操作Memcache\n1. 开启Telnet客户端\n控制面板->程序功能->启用或关闭windows功能->勾选Telnet\n\n2. 使用Telnet客户端\n连接方式：进入cmd执行telent   ip地址  端口号\n### Linux安装\n\n`[root@localhost libevent-2.0.20-stable]# make && make install`\n\n2.\n```\n[root@localhost libevent-2.0.20-stable]# cd ../\n[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz\n[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/bibevent\n[root@localhost memcached-1.4.20]# make && make install\n```\n\n#### 常用命令\n\n**memcache的基本命令**\n\n![memcache](http://7xwlfk.com1.z0.glb.clouddn.com/memcache.png)\n\n#### 权限问题\n在Memcache中没有账号密码，因此Memcache中的数据不太安全。\n解决办法：\n1. 将Memcache服务器置于内网中，然后使用反向代理技术访问\n2. 通过服务器防火墙的配置，只允许某个IP地址可以访问\n在Linux可以使用hosts.allow跟hosts.deny文件控制访问权限，也叫黑白名单\n\n```\n[root@localhost ~]# cd /etc/host\nhost.conf hosts hosts.allow hosts.deny\n[root@localhost ~]# cd /etc/host.allow\n```\n\n### 常用操作命令\n#### 设置数据 | set\n语法：\n```\nset keyname(键名) 0|1 (数据是否压缩处理) exprie(有效时间) length(字符长度)\nValue(具体的数据)\n```\n\n如果数据已经存在则修改数据\n>写入具体的value数据时有回车换行操作\n>对于键名的操作一般不操作250字节\n>一般情况数据不压缩，压缩会将数据的体积变小，但读取数据时需要进行解压操作，因此整个效率降低了（时间 <==> 空间）\n>有效时间：针对Memcache中每一个键，都可以设置一个过期时间，如果时间一到，该键数据会消失，时间采用的是秒为单位，即多少秒之后过期，0表示永不过期\n#### 获取数据 | get\n配合set使用\n\n#### 添加数据 | add\n语法：`add key 0|1 失效时间  值的长度 `\n>注意：在使用add时，如果键已经存在，则添加失败。\n\n#### 删除数据 | delete\n语法：`delete key`\n#### 删除所有 | flush_all\n语法：flush_all\n>项目中慎用该命令\n#### 加法操作 | incr\n语法：`incr key number`\n>对数据向下取整\n#### 减法操作 | decr\n语法：`decr key number`\n>使用decr就可以模拟秒杀系统，比如一开始设置值为100 有效期为60秒\n\n#### 状态操作 | stats\n通过查看stats主要计算命中率\n`命中率 = get_hits/cmd_get`  自然是命中率越高越好，如果命中率很低，则说明缓存效率低，需要调整缓存的数据内容，一般项目命中率能够到70%-90%就算很好。如果内存不够用，先删除快过期的，再删除不常用的，由系统底层监控\n\n![memcache_stats](http://7xwlfk.com1.z0.glb.clouddn.com/memcache_stats.png)\n## PHP操作Memcache\n### 安装扩展\n通过phpinfo查看php.ini所在位置，PHP的版本号，及Thread Safety。\n>根据以上信息选择对应版本，Enable 选择使用ts版本。否则使用nts版本，\n\n在php.ini中通过`extension_dir`查看扩展包所在路径\n>将php_memcache.dll文件拷贝到扩展目录下\n>修改php.ini加入配置项：`extension = php_memcache.dll`\n\n重启Apache，查看phpinfo() ，是否包含Memcache扩展模块\n\n### 使用Memcache\n1. 实例化memcache对象\n`$mem = new Memcache();`\n2. 与memcache服务器建立连接\n`$mem->connect('27.0.0.1',11211);`\n3. 向memcache中写入数据\n`$mem->set('name','uiste');`\n4. 查询数据\n`$res = $mem->get('name');`\n\n### 存储原理\nMemcache可以正常存储PHP的标量类型、符合类型、空类型，但不能存储资源类型。在Memcache中本身存储的是字符串，Memcache类的set方法在向Memcache写入数据时会先将数据序列化，在get获取数据后然后反序列化。\n\n## 应用场景\n1. session写入Memcache中\n2. 作为分布式存储系统\n3. 作为缓存系统使用\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjk9004mpgwifxuz93xc"},{"layout":"post","title":"MAMP 安装 Memcache | redis","date":"2015-11-15T18:36:19.000Z","_content":"# Memcache\n`https://github.com/uiste/PHP_Class_Library/tree/master/php-memcached`\n\n[参考文章：](http://blog.sina.com.cn/s/blog_6145ed810102vqu6.html)\n\n# Redis\n\n一.下载安装\n1. 下载：`http://redis.io/`\n2. 移动：`uiste:~ uiste$ cd downloads`\n3. 解压：`uiste:local uiste$ sudo tar -zxf redis-3.2.5.tar.gz `\n4. 进入：`uiste:local uiste$ cd redis-3.2.5`\n5. 测试编译：`uiste:redis-3.2.5 uiste$ sudo make test`\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.16.34.png)\n6. 安装：\n```\nuiste:redis-3.2.5 uiste$ sudo make install\nPassword:\ncd src && /Applications/Xcode.app/Contents/Developer/usr/bin/make install\n    INSTALL redis-sentinel\n    CC redis-cli.o\n    LINK redis-cli\n    CC redis-benchmark.o\n    LINK redis-benchmark\n    INSTALL redis-check-rdb\n\nHint: It's a good idea to run 'make test' ;)\n\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\nuiste:redis-3.2.5 uiste$\n```\n\n7. 配置文件redis.conf\nredis解压目录里有一个配置文件redis.conf ，编辑此配置文件，找到 dir  ./  这一行。redis会将内存中的数据写入文件中，而此配置就是指定数据文件保存的路径。我本机指定的目录为：\n` 247 dir /Users/uiste/Software/redis_data/`\n\n编辑过后，将配置文件移动到 /usr/local/etc 目录下\n`uiste:redis-3.2.5 uiste$ sudo mv redis.conf /usr/local/etc`\n\n8. 启动\n`uiste:redis-3.2.5 uiste$ /usr/local/bin/redis-server /usr/local/etc/redis.conf`\n\n 服务启动成功画面：\n ![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.33.10.png)\n\n9. 测试连通性\n```\nuiste:~ uiste$ cd /usr/local/bin\nuiste:bin uiste$ ./redis-cli\n127.0.0.1:6379> set name uiste\nOK\n127.0.0.1:6379> get name\n\"uiste\"\n```\n\n10. 设置开机自动启动redis server\n新建plist文件\n`uiste:~ uiste$ sudo vi /Library/LaunchDaemons/io.redis.redis-server.plist`\n文件内容如下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>Label</key>\n  <string>io.redis.redis-server</string>\n  <key>ProgramArguments</key>\n  <array>\n        <string>/usr/local/bin/redis-server</string>\n        <string>/usr/local/etc/redis.conf</string>\n  </array>\n  <key>RunAtLoad</key><true/> </dict>\n</plist>\n```\n\n使用launchctl设置开机自动启动\n`uiste:~ uiste$ sudo launchctl load /Library/LaunchDaemons/io.redis.redis-server.plist`\n\n使用launchctl启动redis server\n`uiste:~ uiste$ sudo launchctl start io.redis.redis-server`\n\n使用launchctl停止redis server\n`uiste:~ uiste$ sudo launchctl stop io.redis.redis-server`\n\n## 启动\n`uiste:~ uiste$ redis-cli `\n\n上述方法启动redis时是以非密码形式登录的，许多操作可能会出现  (error) NOAUTH Authentication required.\n解决此问题的方法之一就是找到 /etc/redis.conf，并将＃requirepass 前的 “＃” 去掉。由于每个人电脑不同，有可能没法在 /etc 路径下找到redis.conf， 因此可以选择采用第二种方法：\n（1）、按照原来方式 ./redis-cli 进入redis 客户端， 输入config set requirepass XXX，其中XXX是你要设置的密码。此时会出现 “OK”；\n（2）、之后返回bin目录下，输入 redis-cli -h 127.0.0.1 -p 6379 -a XXX， 就相当于以密码形式登录了。此后也不会再有身份验证失败问题。\n（3）、可以使用config get requirepass 查看密码\n\n四.服务器配置\n\n上面只是基本的安装，如果要用到生产环境，得配置一些文件\n\n1.首先把redis-cli 移动到/usr/local/bin 目录，方便执行，和JAVA_HOME 类似\n\n默认install 的时候已经有了\n\n2.创建你存放配置文件和数据文件的目录\n\nsudo mkdir /etc/redis\nsudo mkdir /var/redis\n3.复制初始化脚本到/etc/init.d 目录,建议默认只有这个端口,作开机启动\n\n$ sudo cp utils/redis_init_script /etc/init.d/redis_6379\n4.进入脚本,确保你的REDISPORT 是你正在使用的\n\nsudo vi /etc/init.d/redis_6379\n5.复制redis.conf ,和脚本保持一致\n\nsudo cp redis.conf /etc/redis/6379.conf\n6.创建一个存放工作数据的目录\n\nsudo mkdir /var/redis/6379\n同时可以对redis.conf配置其他属性\n\ndaemonize：是否以后台daemon方式运行\npidfile：pid文件位置\nport：监听的端口号\ntimeout：请求超时时间\nloglevel：log信息级别\nlogfile：log文件位置\ndatabases：开启数据库的数量\nsave * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。\nrdbcompression：是否使用压缩\ndbfilename：数据快照文件名（只是文件名，不包括目录）\ndir：数据快照的保存目录（这个是目录）\nappendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。\nappendfsync：appendonlylog如何同步到磁盘（三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步）\n7.最后将脚本设置默认启动\n\nsudo update-rc.d redis_6379 defaults\n8.现在可以执行脚本了\n\n/etc/init.d/redis_6379 start","source":"_posts/2015/201511/20151116-5.md","raw":"layout: post\ntitle: MAMP 安装 Memcache | redis\ndate: 2015-11-16 02:36:19\ntags:\n- 服务器优化\n---\n# Memcache\n`https://github.com/uiste/PHP_Class_Library/tree/master/php-memcached`\n\n[参考文章：](http://blog.sina.com.cn/s/blog_6145ed810102vqu6.html)\n\n# Redis\n\n一.下载安装\n1. 下载：`http://redis.io/`\n2. 移动：`uiste:~ uiste$ cd downloads`\n3. 解压：`uiste:local uiste$ sudo tar -zxf redis-3.2.5.tar.gz `\n4. 进入：`uiste:local uiste$ cd redis-3.2.5`\n5. 测试编译：`uiste:redis-3.2.5 uiste$ sudo make test`\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.16.34.png)\n6. 安装：\n```\nuiste:redis-3.2.5 uiste$ sudo make install\nPassword:\ncd src && /Applications/Xcode.app/Contents/Developer/usr/bin/make install\n    INSTALL redis-sentinel\n    CC redis-cli.o\n    LINK redis-cli\n    CC redis-benchmark.o\n    LINK redis-benchmark\n    INSTALL redis-check-rdb\n\nHint: It's a good idea to run 'make test' ;)\n\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\n    INSTALL install\nuiste:redis-3.2.5 uiste$\n```\n\n7. 配置文件redis.conf\nredis解压目录里有一个配置文件redis.conf ，编辑此配置文件，找到 dir  ./  这一行。redis会将内存中的数据写入文件中，而此配置就是指定数据文件保存的路径。我本机指定的目录为：\n` 247 dir /Users/uiste/Software/redis_data/`\n\n编辑过后，将配置文件移动到 /usr/local/etc 目录下\n`uiste:redis-3.2.5 uiste$ sudo mv redis.conf /usr/local/etc`\n\n8. 启动\n`uiste:redis-3.2.5 uiste$ /usr/local/bin/redis-server /usr/local/etc/redis.conf`\n\n 服务启动成功画面：\n ![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2002.33.10.png)\n\n9. 测试连通性\n```\nuiste:~ uiste$ cd /usr/local/bin\nuiste:bin uiste$ ./redis-cli\n127.0.0.1:6379> set name uiste\nOK\n127.0.0.1:6379> get name\n\"uiste\"\n```\n\n10. 设置开机自动启动redis server\n新建plist文件\n`uiste:~ uiste$ sudo vi /Library/LaunchDaemons/io.redis.redis-server.plist`\n文件内容如下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>Label</key>\n  <string>io.redis.redis-server</string>\n  <key>ProgramArguments</key>\n  <array>\n        <string>/usr/local/bin/redis-server</string>\n        <string>/usr/local/etc/redis.conf</string>\n  </array>\n  <key>RunAtLoad</key><true/> </dict>\n</plist>\n```\n\n使用launchctl设置开机自动启动\n`uiste:~ uiste$ sudo launchctl load /Library/LaunchDaemons/io.redis.redis-server.plist`\n\n使用launchctl启动redis server\n`uiste:~ uiste$ sudo launchctl start io.redis.redis-server`\n\n使用launchctl停止redis server\n`uiste:~ uiste$ sudo launchctl stop io.redis.redis-server`\n\n## 启动\n`uiste:~ uiste$ redis-cli `\n\n上述方法启动redis时是以非密码形式登录的，许多操作可能会出现  (error) NOAUTH Authentication required.\n解决此问题的方法之一就是找到 /etc/redis.conf，并将＃requirepass 前的 “＃” 去掉。由于每个人电脑不同，有可能没法在 /etc 路径下找到redis.conf， 因此可以选择采用第二种方法：\n（1）、按照原来方式 ./redis-cli 进入redis 客户端， 输入config set requirepass XXX，其中XXX是你要设置的密码。此时会出现 “OK”；\n（2）、之后返回bin目录下，输入 redis-cli -h 127.0.0.1 -p 6379 -a XXX， 就相当于以密码形式登录了。此后也不会再有身份验证失败问题。\n（3）、可以使用config get requirepass 查看密码\n\n四.服务器配置\n\n上面只是基本的安装，如果要用到生产环境，得配置一些文件\n\n1.首先把redis-cli 移动到/usr/local/bin 目录，方便执行，和JAVA_HOME 类似\n\n默认install 的时候已经有了\n\n2.创建你存放配置文件和数据文件的目录\n\nsudo mkdir /etc/redis\nsudo mkdir /var/redis\n3.复制初始化脚本到/etc/init.d 目录,建议默认只有这个端口,作开机启动\n\n$ sudo cp utils/redis_init_script /etc/init.d/redis_6379\n4.进入脚本,确保你的REDISPORT 是你正在使用的\n\nsudo vi /etc/init.d/redis_6379\n5.复制redis.conf ,和脚本保持一致\n\nsudo cp redis.conf /etc/redis/6379.conf\n6.创建一个存放工作数据的目录\n\nsudo mkdir /var/redis/6379\n同时可以对redis.conf配置其他属性\n\ndaemonize：是否以后台daemon方式运行\npidfile：pid文件位置\nport：监听的端口号\ntimeout：请求超时时间\nloglevel：log信息级别\nlogfile：log文件位置\ndatabases：开启数据库的数量\nsave * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。\nrdbcompression：是否使用压缩\ndbfilename：数据快照文件名（只是文件名，不包括目录）\ndir：数据快照的保存目录（这个是目录）\nappendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。\nappendfsync：appendonlylog如何同步到磁盘（三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步）\n7.最后将脚本设置默认启动\n\nsudo update-rc.d redis_6379 defaults\n8.现在可以执行脚本了\n\n/etc/init.d/redis_6379 start","slug":"5","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjka004npgwiyl8ldntl"},{"layout":"post","title":"MySQL优化","date":"2015-11-15T17:45:13.000Z","_content":"## MySQL优化着手点\n1. 存储层（数据）：存储引擎、列类型、范式规范（三范式与逆范式）\nmyisam查询速度快，但不支持事务\n2. 设计层（单台服务器）：索引、缓存、分区\n索引：主键、唯一键、普通键、外键约束\n缓存：表结构与表数据没有发生变化时，MySQL会将第一次查询的结果缓存到内存中\n分区：\n3. 架构层（多台服务器）：读写分离或者分布式\n\n4. 语句层：更合适的sql语句\nselect 具体字段与（*），黄金索引\n\n## 存储引擎\nMySQL中的数据是通过各种不同的技术（格式）存储在文件（或者内存）中的。技术和本身的特性就称为“存储引擎”\n\n每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术（格式），获取适合的效果。\n\n查询存储引擎：`show engines`\n是否支持引擎：`Support`：default，默认\n是否支持事务：`Transaction`\n\nMySQL默认支持8种存储引擎，默认是`innodb`引擎，\n`memory`存储引擎是将数据存储在内存中，服务器重启会导致内存中的数据丢失\n### myisam引擎和innodb引擎的区别\n#### myisam\n1. myisam数据的读写速度相对于innodb引擎会快\n2. 支持表锁\n3. 数据压缩功能\n4. 支持全文索引（只支持英文）搜索引擎：sphinx，solr+ik 分词器\n\n---\n.frm：数据表的结构\n.MYD：数据表对应的数据\n.MYI：表锁数据表的索引文件\n\n---\n##### myisam引擎特有的压缩功能\n\n**蠕虫复制**\ninsert into address select null,sheng,shi form address\n\n**MySQL server/bin/myisampack.exe进行数据压缩**\n用法：myisampack数据表的地址\nshell>>myisampack.exe 'C:\\Server\\mysql_data\\t_myisam\\t_address'\n\n**解决索引失效的问题**\nRomember to run myisa -rq on compressed tables\n用法：myisamchk.exe -rq 表地址\n>压缩后的数据是一个只读数据表，不能写入数据，如果要写入数据必须解压\n\n**解压缩数据表**\nmyisamchk --unpach(两个-)\n\n删除多余文件：flush table 表名\n**批量写入数据时，开关索引**\nalter table disable(onable) keys\n**典型的应用场景**\n使用mysql储存日志文件信息\n#### innodb\n1. 行锁\n2. 在5.6之前是不支持全文索引\n3. 支持事务\n4. 支持外键\n\n---\n.frm：表示数据表的结构\n在datadir指向的目录下有一个ibdata1的文件该文件储存了innodb引擎数据表信息及索引的文件。此方式也叫共享文件存储\n\n---\n开启innodb引擎单独文件存储\n``\n\n### 数据备份还原\n1. 备份还原myisam引擎\nmyisam引擎由于数据表结构、索引、数据都是用单独的文件存储，备份还原数据只需要复制粘贴文件即可\n2. 备份还原innodb引擎\n对于innodb引擎如果是使用单独文件存储依旧不能使用复制的方式备份数据，只能借助于mysql自带的根据备份\n备份使用：mysqldump工具\n还原使用:mysql工具\n备份用法：`mysqldump -u 用户名 -p 密码 对应数据库名称 > 具体存储地址`\n还原的用法：`mysql -u 用户名 -p 密码 对应数据库名称 < 具体存储地址`\n\n## 数据类型的选择\ndecimal 金钱\n使用char访问速度优于varchar\n\nchar与varchar的区别\n1. 存储的最大字符数不一样，char最多能够存储255个字符，varchar以utf8编码最大长度65535/3-1\n2. varchar存储多少个字符，占用多少个空间\n3. 对于末尾的空格处理不一样，char会过滤末尾的空格，varchar会保留空格\n\nip与整形数据的转换\nMySQL内置函数：\ninet_aton(ip)\ninet_ntoa\nPHP内置函数\nip2long\nlong2ip\n\n## 数据库三范式\n数据表设计规范\n1. 第一范式：所有的字段都是原子不可再分\n2. 第二范式：所有的字段都与主键有关系\n3. 第三范式： 所有字段必须与主键有直接关系\n\n## 索引\n索引是针对某个字段A进行了排序然后写到了一个单独的文件（myisam），innodb在共享文件中存储。以后使用该字段查询数据时，先到索引文件中查找，然后根据物理存储地址直接找到对应的数据\n### 索引类型\n主键索引：primary key ，唯一不重复，不能为空\n唯一索引：unique key， 唯一不重复，可以为空\n普通索引：key\n全文索引：fulltext 只支持英文，中文使用：sphinx软件、solr+ik分词器\n\n## 索引的结构\n非聚族其它索引（myisam）：主键与其他索引排序方式一样\n簇族索引（innodb） ：二分查找法相似\n>在簇族索引下主键索引在最终的叶子节点储存的数据是对应的所有数据（传值）\n\n其他索引\n最终的叶子节点储存的是主键信息\n\n## 执行计划\nsql语句分析\n1. 语法检查\n2. 执行分析\n3. 执行sql语句\n4. 返回执行结果\n\n>`explain + select 语句`\n>ID ：执行顺序\n>select_type\n>possible_keys：可能会用到的索引\n>key：实际将会使用到的索引\n>rows：受影响的行数，将要检索多少条数据\n>type：执行的类型，按照从优到差的顺序排列。system > const >eq_ref > ref > index > all\n\n","source":"_posts/2015/201511/20151116-4.md","raw":"layout: post\ntitle: MySQL优化\ndate: 2015-11-16 01:45:13\ntags:\n- 数据库优化\n---\n## MySQL优化着手点\n1. 存储层（数据）：存储引擎、列类型、范式规范（三范式与逆范式）\nmyisam查询速度快，但不支持事务\n2. 设计层（单台服务器）：索引、缓存、分区\n索引：主键、唯一键、普通键、外键约束\n缓存：表结构与表数据没有发生变化时，MySQL会将第一次查询的结果缓存到内存中\n分区：\n3. 架构层（多台服务器）：读写分离或者分布式\n\n4. 语句层：更合适的sql语句\nselect 具体字段与（*），黄金索引\n\n## 存储引擎\nMySQL中的数据是通过各种不同的技术（格式）存储在文件（或者内存）中的。技术和本身的特性就称为“存储引擎”\n\n每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术（格式），获取适合的效果。\n\n查询存储引擎：`show engines`\n是否支持引擎：`Support`：default，默认\n是否支持事务：`Transaction`\n\nMySQL默认支持8种存储引擎，默认是`innodb`引擎，\n`memory`存储引擎是将数据存储在内存中，服务器重启会导致内存中的数据丢失\n### myisam引擎和innodb引擎的区别\n#### myisam\n1. myisam数据的读写速度相对于innodb引擎会快\n2. 支持表锁\n3. 数据压缩功能\n4. 支持全文索引（只支持英文）搜索引擎：sphinx，solr+ik 分词器\n\n---\n.frm：数据表的结构\n.MYD：数据表对应的数据\n.MYI：表锁数据表的索引文件\n\n---\n##### myisam引擎特有的压缩功能\n\n**蠕虫复制**\ninsert into address select null,sheng,shi form address\n\n**MySQL server/bin/myisampack.exe进行数据压缩**\n用法：myisampack数据表的地址\nshell>>myisampack.exe 'C:\\Server\\mysql_data\\t_myisam\\t_address'\n\n**解决索引失效的问题**\nRomember to run myisa -rq on compressed tables\n用法：myisamchk.exe -rq 表地址\n>压缩后的数据是一个只读数据表，不能写入数据，如果要写入数据必须解压\n\n**解压缩数据表**\nmyisamchk --unpach(两个-)\n\n删除多余文件：flush table 表名\n**批量写入数据时，开关索引**\nalter table disable(onable) keys\n**典型的应用场景**\n使用mysql储存日志文件信息\n#### innodb\n1. 行锁\n2. 在5.6之前是不支持全文索引\n3. 支持事务\n4. 支持外键\n\n---\n.frm：表示数据表的结构\n在datadir指向的目录下有一个ibdata1的文件该文件储存了innodb引擎数据表信息及索引的文件。此方式也叫共享文件存储\n\n---\n开启innodb引擎单独文件存储\n``\n\n### 数据备份还原\n1. 备份还原myisam引擎\nmyisam引擎由于数据表结构、索引、数据都是用单独的文件存储，备份还原数据只需要复制粘贴文件即可\n2. 备份还原innodb引擎\n对于innodb引擎如果是使用单独文件存储依旧不能使用复制的方式备份数据，只能借助于mysql自带的根据备份\n备份使用：mysqldump工具\n还原使用:mysql工具\n备份用法：`mysqldump -u 用户名 -p 密码 对应数据库名称 > 具体存储地址`\n还原的用法：`mysql -u 用户名 -p 密码 对应数据库名称 < 具体存储地址`\n\n## 数据类型的选择\ndecimal 金钱\n使用char访问速度优于varchar\n\nchar与varchar的区别\n1. 存储的最大字符数不一样，char最多能够存储255个字符，varchar以utf8编码最大长度65535/3-1\n2. varchar存储多少个字符，占用多少个空间\n3. 对于末尾的空格处理不一样，char会过滤末尾的空格，varchar会保留空格\n\nip与整形数据的转换\nMySQL内置函数：\ninet_aton(ip)\ninet_ntoa\nPHP内置函数\nip2long\nlong2ip\n\n## 数据库三范式\n数据表设计规范\n1. 第一范式：所有的字段都是原子不可再分\n2. 第二范式：所有的字段都与主键有关系\n3. 第三范式： 所有字段必须与主键有直接关系\n\n## 索引\n索引是针对某个字段A进行了排序然后写到了一个单独的文件（myisam），innodb在共享文件中存储。以后使用该字段查询数据时，先到索引文件中查找，然后根据物理存储地址直接找到对应的数据\n### 索引类型\n主键索引：primary key ，唯一不重复，不能为空\n唯一索引：unique key， 唯一不重复，可以为空\n普通索引：key\n全文索引：fulltext 只支持英文，中文使用：sphinx软件、solr+ik分词器\n\n## 索引的结构\n非聚族其它索引（myisam）：主键与其他索引排序方式一样\n簇族索引（innodb） ：二分查找法相似\n>在簇族索引下主键索引在最终的叶子节点储存的数据是对应的所有数据（传值）\n\n其他索引\n最终的叶子节点储存的是主键信息\n\n## 执行计划\nsql语句分析\n1. 语法检查\n2. 执行分析\n3. 执行sql语句\n4. 返回执行结果\n\n>`explain + select 语句`\n>ID ：执行顺序\n>select_type\n>possible_keys：可能会用到的索引\n>key：实际将会使用到的索引\n>rows：受影响的行数，将要检索多少条数据\n>type：执行的类型，按照从优到差的顺序排列。system > const >eq_ref > ref > index > all\n\n","slug":"4","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkc004opgwihqeg78xz"},{"layout":"post","title":"使用yum快速搭建LAMP环境","date":"2015-11-16T16:09:29.000Z","_content":"## yum 源配置\n1. 挂载光驱\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2020.54.17.png)\n2. 配置yum源\n* 创建挂载点：`[root@localhost mnt]# mkdir /mnt/cdrom`\n* 挂载系统安装光盘：\n```\n[root@localhost mnt]# mount /dev/cdrom /mnt/cdrom\nmount: block device /dev/sr0 is write-protected, mounting read-only\n```\n\n* 配置本地yum源\n```\n[root@localhost mnt]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# ll\n总用量 16\n-rw-r--r--. 1 root root 1926 11月 27 2013 CentOS-Base.repo  //本地配置源\n-rw-r--r--. 1 root root  638 11月 27 2013 CentOS-Debuginfo.repo\n-rw-r--r--. 1 root root  630 11月 27 2013 CentOS-Media.repo  //网络配置源\n-rw-r--r--. 1 root root 3664 11月 27 2013 CentOS-Vault.repo\n[root@localhost yum.repos.d]#\n```\n\n* 修改CentOS-Media.repo在baseurl 中修改第2个路径为/mnt/cdrom（即为光盘挂载点）将enabled=0改为1\n```\n[root@localhost yum.repos.d]# vi CentOS-Media.repo\n[c6-media]\nname=CentOS-$releasever - Media\nbaseurl=file:///media/CentOS/\n        file:///mnt/cdrom/  //改为挂载点\n        file:///media/cdrecorder/\ngpgcheck=1\nenabled=1   //改为1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6\n```\n \n* 禁用默认的yum 网络源\n`[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak`\n\n3. yum方式安装gcc，gcc-c++、make、openssl-devel\n`[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel`\n\n## Apache安装\n`[root@localhost ~]# yum -y install httpd`\n**开机自启动**\n`[root@localhost ~]# chkconfig httpd on`\n**启动httpd服务**\n`[root@localhost ~]# service httpd start`\n**安装Apache一些扩展**\n`[root@localhost ~]# yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql`\n>关闭防火墙\n>`[root@localhost ~]# service iptables stop`\n>输入服务器IP地址测试\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2021.12.36.png)\n\n>[root@localhost ~]# vim /var/www/html/\n## 安装MySQL\n`[root@localhost ~]# yum -y install mysql mysql-server mysql-devel`\n>mysql客户端程序\n>mysql-server 服务器程序\n>mysql-devel 开发设计的库\n\n1. 开机启动\n`[root@localhost ~]# chkconfig mysqld on`\n`[root@localhost ~]# chkconfig --add mysqld`\n查看开机启动设置是否成功：\n```\n[root@localhost ~]# chkconfig --list | grep mysql*\nmysqld         \t0:关闭\t1:关闭\t2:启用\t3:启用\t4:启用\t5:启用\t6:关闭\n```\n\n2. 启动mysqld服务\n`[root@localhost ~]# service mysqld start`\n或：`[root@localhost ~]# /etc/init.d/mysqld start`\n\n3. 登录客户端设置远程访问，默认没有密码。\n4. 修改密码：`mysqladmin -u root password '123456'`\n```\n[root@localhost ~]# mysql -uroot -p\nEnter password:\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> select host,user from user;\n+-----------------------+------+\n| host                  | user |\n+-----------------------+------+\n| 127.0.0.1             | root |\n| localhost             |      |\n| localhost             | root |\n| localhost.localdomain |      |\n| localhost.localdomain | root |\n+-----------------------+------+\n5 rows in set (0.00 sec)\n\nmysql> update user set host='%' where user ='root' and host ='127.0.0.1';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> delete from user where host!='%';\nQuery OK, 4 rows affected (0.00 sec)\n\nmysql> select host,user from user;\n+------+------+\n| host | user |\n+------+------+\n| %    | root |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n5. 报错\n```\n[root@localhost yum.repos.d]# mysql -uroot -p\nEnter password:\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)\n```\n\n>mysql进程使用了同一个socket\n```\n[root@localhost yum.repos.d]# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak\n[root@localhost yum.repos.d]# service mysqld start\n```\n\n\n4. 重启MySQL服务\n`[root@localhost ~]# service mysqld restart`\n>`/usr/bin/mysql_secure_installation`进行安全性设置\n\n## 安装PHP\n`[root@localhost ~]# yum -y install php php-mysql`\n```\n[root@localhost ~]# yum -y install php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt\n\n---\n[root@localhost ~]# yum -y install php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\n```\n\n## 配置文件路径\nPHP配置文件\n`/etc/php.ini`\nApache配置文件\n`/etc/httpd/conf/httpd.conf`\nMySQL配置文件\n`/etc/my.cnf`\n若my.cnf精简可以从安装目录拷贝\n`[root@localhost mysql]# cp /usr/share/mysql/my-medium.cnf /etc/my.cnf`\nmysql解锁`mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak`\n\n## 测试\n>[root@localhost ~]# service httpd restart\n>[root@localhost ~]# vim /var/www/html/1.php\n## 卸载\nyum卸载：yum -y remove mysql*\nrpm卸载：rpm -e mysql \n","source":"_posts/2015/201511/20151117-1.md","raw":"layout: post\ntitle: 使用yum快速搭建LAMP环境\ndate: 2015-11-17 00:09:29\ntags:\n- LAMP\n---\n## yum 源配置\n1. 挂载光驱\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2020.54.17.png)\n2. 配置yum源\n* 创建挂载点：`[root@localhost mnt]# mkdir /mnt/cdrom`\n* 挂载系统安装光盘：\n```\n[root@localhost mnt]# mount /dev/cdrom /mnt/cdrom\nmount: block device /dev/sr0 is write-protected, mounting read-only\n```\n\n* 配置本地yum源\n```\n[root@localhost mnt]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# ll\n总用量 16\n-rw-r--r--. 1 root root 1926 11月 27 2013 CentOS-Base.repo  //本地配置源\n-rw-r--r--. 1 root root  638 11月 27 2013 CentOS-Debuginfo.repo\n-rw-r--r--. 1 root root  630 11月 27 2013 CentOS-Media.repo  //网络配置源\n-rw-r--r--. 1 root root 3664 11月 27 2013 CentOS-Vault.repo\n[root@localhost yum.repos.d]#\n```\n\n* 修改CentOS-Media.repo在baseurl 中修改第2个路径为/mnt/cdrom（即为光盘挂载点）将enabled=0改为1\n```\n[root@localhost yum.repos.d]# vi CentOS-Media.repo\n[c6-media]\nname=CentOS-$releasever - Media\nbaseurl=file:///media/CentOS/\n        file:///mnt/cdrom/  //改为挂载点\n        file:///media/cdrecorder/\ngpgcheck=1\nenabled=1   //改为1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6\n```\n \n* 禁用默认的yum 网络源\n`[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak`\n\n3. yum方式安装gcc，gcc-c++、make、openssl-devel\n`[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel`\n\n## Apache安装\n`[root@localhost ~]# yum -y install httpd`\n**开机自启动**\n`[root@localhost ~]# chkconfig httpd on`\n**启动httpd服务**\n`[root@localhost ~]# service httpd start`\n**安装Apache一些扩展**\n`[root@localhost ~]# yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql`\n>关闭防火墙\n>`[root@localhost ~]# service iptables stop`\n>输入服务器IP地址测试\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-16%2021.12.36.png)\n\n>[root@localhost ~]# vim /var/www/html/\n## 安装MySQL\n`[root@localhost ~]# yum -y install mysql mysql-server mysql-devel`\n>mysql客户端程序\n>mysql-server 服务器程序\n>mysql-devel 开发设计的库\n\n1. 开机启动\n`[root@localhost ~]# chkconfig mysqld on`\n`[root@localhost ~]# chkconfig --add mysqld`\n查看开机启动设置是否成功：\n```\n[root@localhost ~]# chkconfig --list | grep mysql*\nmysqld         \t0:关闭\t1:关闭\t2:启用\t3:启用\t4:启用\t5:启用\t6:关闭\n```\n\n2. 启动mysqld服务\n`[root@localhost ~]# service mysqld start`\n或：`[root@localhost ~]# /etc/init.d/mysqld start`\n\n3. 登录客户端设置远程访问，默认没有密码。\n4. 修改密码：`mysqladmin -u root password '123456'`\n```\n[root@localhost ~]# mysql -uroot -p\nEnter password:\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> select host,user from user;\n+-----------------------+------+\n| host                  | user |\n+-----------------------+------+\n| 127.0.0.1             | root |\n| localhost             |      |\n| localhost             | root |\n| localhost.localdomain |      |\n| localhost.localdomain | root |\n+-----------------------+------+\n5 rows in set (0.00 sec)\n\nmysql> update user set host='%' where user ='root' and host ='127.0.0.1';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> delete from user where host!='%';\nQuery OK, 4 rows affected (0.00 sec)\n\nmysql> select host,user from user;\n+------+------+\n| host | user |\n+------+------+\n| %    | root |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n5. 报错\n```\n[root@localhost yum.repos.d]# mysql -uroot -p\nEnter password:\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)\n```\n\n>mysql进程使用了同一个socket\n```\n[root@localhost yum.repos.d]# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak\n[root@localhost yum.repos.d]# service mysqld start\n```\n\n\n4. 重启MySQL服务\n`[root@localhost ~]# service mysqld restart`\n>`/usr/bin/mysql_secure_installation`进行安全性设置\n\n## 安装PHP\n`[root@localhost ~]# yum -y install php php-mysql`\n```\n[root@localhost ~]# yum -y install php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt\n\n---\n[root@localhost ~]# yum -y install php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc\n```\n\n## 配置文件路径\nPHP配置文件\n`/etc/php.ini`\nApache配置文件\n`/etc/httpd/conf/httpd.conf`\nMySQL配置文件\n`/etc/my.cnf`\n若my.cnf精简可以从安装目录拷贝\n`[root@localhost mysql]# cp /usr/share/mysql/my-medium.cnf /etc/my.cnf`\nmysql解锁`mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak`\n\n## 测试\n>[root@localhost ~]# service httpd restart\n>[root@localhost ~]# vim /var/www/html/1.php\n## 卸载\nyum卸载：yum -y remove mysql*\nrpm卸载：rpm -e mysql \n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkd004rpgwi66qu9z3x"},{"layout":"post","title":"Memcache 分布式缓存","date":"2015-11-18T18:36:19.000Z","_content":"## 概念\nMemcache是一套分布式高速缓存系统，分布式是说你可以在多台服务器上安装Memcache服务，这样可以达到一个很好的集群效果，\n高速是因为Memcache所有的数据都是保存在内存中的，读取速度比存储在硬盘中的数据快的多。\nMemcache的作用，但应用访问量特别大的时候，数据库的访问量也特别大。Memcache就是在应用与数据库之间的一个缓冲层。第一次读取数据库之后就可以保存到Memcache中，之后可以优先通过Memcache访问\nMemcache可以理解为只有一张表的数据库，只有两个字段，分别是主键key和字段\n\nMemcache是非持久化储存，一定要保存对数据的存储要求并不是特别高，即使数据丢失也不会对我们的数据造成太大的影响\n\nMemcache是分布式的存储，对于内存的消耗是特别大的，如果是单机的情况，不建议使用Memcache\n\n格式简单，key与value，保存除了资源以外的所有数据，都是通过内部序列化与反序列化的机制进行数据的存储的。\n\n## memcache的常用参数\n-p：指定memcache的tcp协议使用的端口号\n-d :start/stop：memcache的启动/关闭\n-d: install/uninstall ：memcache服务的安装/卸载\n-u：指定用户名，此参数只在Linux下使用\n-m：表示memcache能够使用的最大的内存，默认64M\n-c：表示指定memcache能够接受的最大的并发量，默认是1024个\n\n在memcache中没有账号密码，因此memcache中的数据不太安全。\n解决办法：\n\n1. 将memcache服务器置于内网中，然后使用反向代理技术访问\n2. 只容许某个IP地址可以访问，通过服务器防火墙的配置\n\n## memcache中常用的操作指令\n**set:**\n作用：是用于设置(添加，修改)某个数据\n语法：set keyname(键名)  0|1(数据是否压缩处理) exprie(有效时间) length(字符长度)\nValue(具体的数据)\n注意写入具体的value数据时有回车换行操作\n\n**get:**\n作用：获取某个键的值\n语法：get keyname\n\n**add:**\n作用：添加某个键\n语法：add keyname(键名)  0|1(数据是否压缩处理) \texprie(有效时间) length(字符长度)\nValue(具体的数据)\n\n**delete:**\n作用：删除某个键\n语法：delete 键名\n\n**incr:**\n作用：自增长\n语法：incr keyname num(具体增长的值)\n\n**decr:**\n作用：自减\n语法： decr keyname num\n\n**flush_all:**\n作用：清除所有的键\n语法:flush_all\n\n**stats**\n作用：表示memcache服务器状态\n语法：stats\n>对于memcache有一个命中率来衡量服务器性能如何\n命中率=get_hits/cmd_get*100%\n\n## 存储数据类型\nmemcache支持php中的除了资源类型外其他的都可以存储\n\n## Linux下安装memcache服务\n关闭防火墙`service iptables stop`\n### 安装libevent\n1. 解压：`[root@localhost memcache]# tar -zxvf libevent-2.0.20-stable`    （进入编译目录）\n2. 编译：`[root@localhost libevent-2.0.20-stable]# ./configure --prefix=/usr/local/libevent`\n3. 安装：`[root@localhost libevent-2.0.20-stable]# make && make install`\n\n### 安装Memcache：\n1. 解压：`[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz`     (进入编译目录)\n2. 编译：`[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/libevent`\n3. 安装：`[root@localhost memcached-1.4.20]# make && make install`\n4. 启动：\n\ta. `[root@localhost memcached-1.4.20]# cd /usr/local/memcache/bin`\n\tb. `[root@localhost bin]# ./memcached -u root -d start`\n5. 检查：`[root@localhost bin]# netstat -tunple | grep 11211`\n\n## memcache实际应用：\n1. session 写入Memcache中\n2. 作为分布式存储系统：一个任务由多台服务器一起协调完成，如果一台服务器出现异常，整个任务链不能正常进行 addServer，依据键名实现分布式存储。\n3. 作为缓存系统使用\n\n### session写入Memcache中：\n* 写入文件中：\n>session过多，会导致文件过多，查询效率变慢\n负载均衡的项目不能正常使用\n\n* 写入数据库中：\n>`session_save_handle($open,$close,$read,$write,$destroy,$gc)`\n\n* 写入Memcache中：\n>session_save_handle();\n>设置配置文件\n>ini_set('session.save_handle','Memcache');\n>ini_set('session.save_path','tcp://127.0.0.1:11211');\n\n### Memcache作为缓存系统\n1. 读取数据时，先通过Memcache服务器读取，如果能读取到则直接使用，如果读取不到，则去数据库中查询，查询到以后将数据缓存到Memcache中\n2. 修改数据时，先将mysql中的数据修改掉，然后更新memcache缓存重点的数据(也可以之间删除对应的key)\n","source":"_posts/2015/201511/20151119-1.md","raw":"layout: post\ntitle: Memcache 分布式缓存\ndate: 2015-11-19 02:36:19\ntags:\n- 服务器优化\n---\n## 概念\nMemcache是一套分布式高速缓存系统，分布式是说你可以在多台服务器上安装Memcache服务，这样可以达到一个很好的集群效果，\n高速是因为Memcache所有的数据都是保存在内存中的，读取速度比存储在硬盘中的数据快的多。\nMemcache的作用，但应用访问量特别大的时候，数据库的访问量也特别大。Memcache就是在应用与数据库之间的一个缓冲层。第一次读取数据库之后就可以保存到Memcache中，之后可以优先通过Memcache访问\nMemcache可以理解为只有一张表的数据库，只有两个字段，分别是主键key和字段\n\nMemcache是非持久化储存，一定要保存对数据的存储要求并不是特别高，即使数据丢失也不会对我们的数据造成太大的影响\n\nMemcache是分布式的存储，对于内存的消耗是特别大的，如果是单机的情况，不建议使用Memcache\n\n格式简单，key与value，保存除了资源以外的所有数据，都是通过内部序列化与反序列化的机制进行数据的存储的。\n\n## memcache的常用参数\n-p：指定memcache的tcp协议使用的端口号\n-d :start/stop：memcache的启动/关闭\n-d: install/uninstall ：memcache服务的安装/卸载\n-u：指定用户名，此参数只在Linux下使用\n-m：表示memcache能够使用的最大的内存，默认64M\n-c：表示指定memcache能够接受的最大的并发量，默认是1024个\n\n在memcache中没有账号密码，因此memcache中的数据不太安全。\n解决办法：\n\n1. 将memcache服务器置于内网中，然后使用反向代理技术访问\n2. 只容许某个IP地址可以访问，通过服务器防火墙的配置\n\n## memcache中常用的操作指令\n**set:**\n作用：是用于设置(添加，修改)某个数据\n语法：set keyname(键名)  0|1(数据是否压缩处理) exprie(有效时间) length(字符长度)\nValue(具体的数据)\n注意写入具体的value数据时有回车换行操作\n\n**get:**\n作用：获取某个键的值\n语法：get keyname\n\n**add:**\n作用：添加某个键\n语法：add keyname(键名)  0|1(数据是否压缩处理) \texprie(有效时间) length(字符长度)\nValue(具体的数据)\n\n**delete:**\n作用：删除某个键\n语法：delete 键名\n\n**incr:**\n作用：自增长\n语法：incr keyname num(具体增长的值)\n\n**decr:**\n作用：自减\n语法： decr keyname num\n\n**flush_all:**\n作用：清除所有的键\n语法:flush_all\n\n**stats**\n作用：表示memcache服务器状态\n语法：stats\n>对于memcache有一个命中率来衡量服务器性能如何\n命中率=get_hits/cmd_get*100%\n\n## 存储数据类型\nmemcache支持php中的除了资源类型外其他的都可以存储\n\n## Linux下安装memcache服务\n关闭防火墙`service iptables stop`\n### 安装libevent\n1. 解压：`[root@localhost memcache]# tar -zxvf libevent-2.0.20-stable`    （进入编译目录）\n2. 编译：`[root@localhost libevent-2.0.20-stable]# ./configure --prefix=/usr/local/libevent`\n3. 安装：`[root@localhost libevent-2.0.20-stable]# make && make install`\n\n### 安装Memcache：\n1. 解压：`[root@localhost memcache]# tar -zxvf memcached-1.4.20.tar.gz`     (进入编译目录)\n2. 编译：`[root@localhost memcached-1.4.20]# ./configure --prefix=/usr/local/memcache --with-libevent=/usr/local/libevent`\n3. 安装：`[root@localhost memcached-1.4.20]# make && make install`\n4. 启动：\n\ta. `[root@localhost memcached-1.4.20]# cd /usr/local/memcache/bin`\n\tb. `[root@localhost bin]# ./memcached -u root -d start`\n5. 检查：`[root@localhost bin]# netstat -tunple | grep 11211`\n\n## memcache实际应用：\n1. session 写入Memcache中\n2. 作为分布式存储系统：一个任务由多台服务器一起协调完成，如果一台服务器出现异常，整个任务链不能正常进行 addServer，依据键名实现分布式存储。\n3. 作为缓存系统使用\n\n### session写入Memcache中：\n* 写入文件中：\n>session过多，会导致文件过多，查询效率变慢\n负载均衡的项目不能正常使用\n\n* 写入数据库中：\n>`session_save_handle($open,$close,$read,$write,$destroy,$gc)`\n\n* 写入Memcache中：\n>session_save_handle();\n>设置配置文件\n>ini_set('session.save_handle','Memcache');\n>ini_set('session.save_path','tcp://127.0.0.1:11211');\n\n### Memcache作为缓存系统\n1. 读取数据时，先通过Memcache服务器读取，如果能读取到则直接使用，如果读取不到，则去数据库中查询，查询到以后将数据缓存到Memcache中\n2. 修改数据时，先将mysql中的数据修改掉，然后更新memcache缓存重点的数据(也可以之间删除对应的key)\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjke004tpgwiugqkbh2e"},{"layout":"post","title":"ThinkPHP 钩子函数使用","date":"2015-11-30T17:49:13.000Z","_content":"## 注册 -> 邮箱验证\n### 通过钩子函数完成数据入库前后的操作\n--Model\n```php\n<?php\n/**\n * 插入的前置钩子函数在注册数据入库前，进行密码加密\n * @param  array &$data  表单提交过来的数据\n * @param  array $option 表名和模型名以及一些查询条件（如果有）\n */\npublic function _before_insert(&$data,$option){\n\t$data['salt']\t\t= uniqid();\n\t$data['password']\t= md5(md5($data['password']) . $data['salt']);\n}\n\n/**\n * 插入的后置钩子函数，在数据真正入库之后会被调用\n * @param  array $data   存入数据库的数据，包含主键id\n * @param  array $option 表名和模型名\n */\npublic function _after_insert($data,$option){\n\t$email_key = md5($data['id'] . C('EMAIL_KEY'));\n\t$content = \"尊敬的用户您好，欢迎注册京西购物网站！<br><a href='http://local.shop.com/index.php/Member/Member/active/id/'\" .$data['id']. \"email_key\" . $email_key. \" target='_blank'>请点击激活您的账户</a>\";\n\tsendMail($data['email'], '京西购物商城', $content );\n}\n?>\n```\n\n--Controller\n```php\n<?php\n// 会员邮箱激活\npublic function active(){\n\t$id = I('id');\n\t$email_key = I('email_key');\n\t$memberModel = D('Member');\n\t// 验证用户id与用户秘钥是否匹配\n\tif (md5($id . C('EMAIL_KEY')) == $email_key) {\n\t\t$userinfo = $memberModel->find($id);\n\t\tif ($userinfo) {\n\t\t\t$where = array('id'=>$id);\n\t\t\t// setField 返回更新信息影响的函数\n\t\t\t$status = $memberModel->where($where)->setField('isactive', 1);\n\t\t\tif ($status) {\n\t\t\t\treturn $this->success('用户激活成功', U('Home/Index/index'));\n\t\t\t}else{\n\t\t\t\treturn $this->error('用户激活失败', U('Home/Index/index'));\n\t\t\t}\n\t\t}else{\n\t\t\t$this->error('用户不存在', U('Home/Index/index'));\n\t\t}\n\t}else{\n\t\treturn $this->error('非法操作，该用户不存在',U('Home/Index/index'));\n\t}\n}\n?>\n```\n\n## 商品 -> 商品模块（简版）\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\nnamespace Admin\\Model;\nuse Think\\Model;\n\n/**\n* 商品模块\n*/\nclass GoodsModel extends Model \n{\n\t\n\t//自动验证\n\tprotected $_validate = array(\n\t\tarray('goods_name', 'require', '商品名称不能为空'),\n\t);\n\t\n\t// 自动填充\n\tprotected $_auto = array(\n\t\tarray('goods_sn','_goods_sn',1,'callback'),\n\t\tarray('add_time','_add_time',1,'callback'),\n\t);\n\n\t// 商品货号填充检查\n\tprotected function _goods_sn($sn){\n\t\tif (empty($sn)) {\n\t\t\treturn 'sn_' . uniqid();\n\t\t}else{\n\t\t\treturn $sn;\n\t\t}\n\t}\n\n\t// 商品添加时间检查\n\tprotected function _add_time($time){\n\t\tif (empty($time)) {\n\t\t\treturn time();\n\t\t}else{\n\t\t\treturn strtotime($time);\n\t\t}\n\t}\n\n\t// 搜索分页功能\n\tpublic function search(){\n\t\t$where = '1 and is_delete = 0';\n\n\t\t// 查询添加依据是否传递查询字段，没有传递默认为空，条件不成立\n\t\tif ($goods_name = I('get.gn')) {\n\t\t\t$where .= \" and `goods_name` like '%$goods_name%'\";\n\t\t}\n\n\t\t// 排序字段与排序方式通过判断前台是否有传递，有传递使用，没有就用默认值\n\t\t$orderBy \t= !empty(I('get.ob')) ? I('get.ob') : 'goods_id';\n\t\t$orderWay \t= !empty(I('get.ow')) ? I('get.ow') : 'desc';\n\n\t\t$count = $this->where($where)->count();\n\t\t$size = 5;\n\t\t$page = new \\Think\\Page($count, $size);\n\n\t\t$page->setConfig('prev','«');\n\t\t$page->setConfig('next','»');\n\t\t$show = $page->show();\n\t\t$list = $this->where($where)\n\t\t\t\t->alias('goods')\n\t            ->join('left join jx_category cate on goods.cate_id = cate.cate_id')\n\t\t\t\t->order(\"$orderBy $orderWay\")\n\t\t\t\t->limit($page->firstRow . ',' . $page->listRows)\n\t\t\t\t->select();\n\t\treturn array(\n\t\t\t'show' \t=> $show,\n\t\t\t'list'\t=>\t$list,\n\t\t);\n\t}\n\n\t// 插入前置钩子函数处理图片上传\n\tprotected function _before_insert(&$data, $option){\n\t\treturn $this->UploadFile($data, $option);\n\t}\n\n\t// 更新前置钩子函数处理更新信息\n\tpublic function _before_update(&$data, $options){\n\t\t// 如果文件上传成功，执行以下更新信息\n\t\t// dump($options);exit();\n\t\t// 如果没有文件$_FILES['goods_img']['error'] == 4\n\t\tif ($_FILES['goods_img']['error']== '0' ) {\n\t\t\t$status = $this->UploadFile($data, $option);\n\t\t\t// dump($status);exit();\n\t\t\tif ($status) {\n\t\t\t\t$goods_id = $options['where']['goods_id'];\n\t\t\t\t$goodsOldImg = $this->field('goods_img , goods_thumb')->find();\n\t\t\t\t// dump($goodsOldImg);exit();\n\t\t\t\tforeach ($goodsOldImg as $key => $value) {\n\t\t\t\t\t@unlink( C('UPLOAD_ROOT_PATH') . $value );\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// 图片上传处理函数\n\tprivate function UploadFile(&$data, $option){\n\t\t$configMaxSize \t= \t(int)C('MAX_UPLOAD_FILE_SIZE');\n\t\t$phpiniMaxSize \t= \t(int)ini_get('upload_max_filesize');\n\t\t$allowMaxSize\t=\tmin($configMaxSize, $phpiniMaxSize);\n\n\t\t$rootPath\t\t= \tC('UPLOAD_ROOT_PATH');\n\t\t$exts \t\t\t=\tC('ALLOW_EXTS');\n\n\t\t$config \t\t=\tarray(\n\t\t\t'maxSize'\t=>\t$allowMaxSize * 1024 * 1024,\n\t\t\t'rootPath'\t=>\t$rootPath,\n\t\t\t'savePath'\t=>\t'Goods/',\n\t\t\t'exts'\t\t=> $exts,\n\t\t);\n\n\t\t$upload = new \\Think\\Upload($config);\n\t\t$info   = $upload->upload();\n\t\tif ($info) {\n\t\t\t// 图片上传路径\n\t\t\t$data['goods_img'] = $info['goods_img']['savepath'] . $info['goods_img']['savename'];\n\t\t\t// 生成缩略图\n\t\t\t$image = new \\Think\\Image();\n\t\t\t$image->open( $rootPath . $data['goods_img'] );\n\n\t\t\t$thumImg = $info['goods_img']['savepath'] . 'thumb_' . $info['goods_img']['savename'];\n\t\t\t$image->thumb( C('THUMB.THUMB_W'), C('THUMB.THUMB_H'), C('THUMB.THUMB_S') )->save($rootPath . $thumImg );\n\t\t\t$data['goods_thumb'] = $thumImg;\n\t\t\treturn true;\n\t\t}else{\n\t\t\t$uploadError = $upload->getError();\n\t\t\t$this->error = $uploadError;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n?>\n```\n\n","source":"_posts/2015/201512/20151201-1.md","raw":"layout: post\ntitle: ThinkPHP 钩子函数使用\ndate: 2015-12-01 01:49:13\ntags:\n- ThinkPHP\n---\n## 注册 -> 邮箱验证\n### 通过钩子函数完成数据入库前后的操作\n--Model\n```php\n<?php\n/**\n * 插入的前置钩子函数在注册数据入库前，进行密码加密\n * @param  array &$data  表单提交过来的数据\n * @param  array $option 表名和模型名以及一些查询条件（如果有）\n */\npublic function _before_insert(&$data,$option){\n\t$data['salt']\t\t= uniqid();\n\t$data['password']\t= md5(md5($data['password']) . $data['salt']);\n}\n\n/**\n * 插入的后置钩子函数，在数据真正入库之后会被调用\n * @param  array $data   存入数据库的数据，包含主键id\n * @param  array $option 表名和模型名\n */\npublic function _after_insert($data,$option){\n\t$email_key = md5($data['id'] . C('EMAIL_KEY'));\n\t$content = \"尊敬的用户您好，欢迎注册京西购物网站！<br><a href='http://local.shop.com/index.php/Member/Member/active/id/'\" .$data['id']. \"email_key\" . $email_key. \" target='_blank'>请点击激活您的账户</a>\";\n\tsendMail($data['email'], '京西购物商城', $content );\n}\n?>\n```\n\n--Controller\n```php\n<?php\n// 会员邮箱激活\npublic function active(){\n\t$id = I('id');\n\t$email_key = I('email_key');\n\t$memberModel = D('Member');\n\t// 验证用户id与用户秘钥是否匹配\n\tif (md5($id . C('EMAIL_KEY')) == $email_key) {\n\t\t$userinfo = $memberModel->find($id);\n\t\tif ($userinfo) {\n\t\t\t$where = array('id'=>$id);\n\t\t\t// setField 返回更新信息影响的函数\n\t\t\t$status = $memberModel->where($where)->setField('isactive', 1);\n\t\t\tif ($status) {\n\t\t\t\treturn $this->success('用户激活成功', U('Home/Index/index'));\n\t\t\t}else{\n\t\t\t\treturn $this->error('用户激活失败', U('Home/Index/index'));\n\t\t\t}\n\t\t}else{\n\t\t\t$this->error('用户不存在', U('Home/Index/index'));\n\t\t}\n\t}else{\n\t\treturn $this->error('非法操作，该用户不存在',U('Home/Index/index'));\n\t}\n}\n?>\n```\n\n## 商品 -> 商品模块（简版）\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\nnamespace Admin\\Model;\nuse Think\\Model;\n\n/**\n* 商品模块\n*/\nclass GoodsModel extends Model \n{\n\t\n\t//自动验证\n\tprotected $_validate = array(\n\t\tarray('goods_name', 'require', '商品名称不能为空'),\n\t);\n\t\n\t// 自动填充\n\tprotected $_auto = array(\n\t\tarray('goods_sn','_goods_sn',1,'callback'),\n\t\tarray('add_time','_add_time',1,'callback'),\n\t);\n\n\t// 商品货号填充检查\n\tprotected function _goods_sn($sn){\n\t\tif (empty($sn)) {\n\t\t\treturn 'sn_' . uniqid();\n\t\t}else{\n\t\t\treturn $sn;\n\t\t}\n\t}\n\n\t// 商品添加时间检查\n\tprotected function _add_time($time){\n\t\tif (empty($time)) {\n\t\t\treturn time();\n\t\t}else{\n\t\t\treturn strtotime($time);\n\t\t}\n\t}\n\n\t// 搜索分页功能\n\tpublic function search(){\n\t\t$where = '1 and is_delete = 0';\n\n\t\t// 查询添加依据是否传递查询字段，没有传递默认为空，条件不成立\n\t\tif ($goods_name = I('get.gn')) {\n\t\t\t$where .= \" and `goods_name` like '%$goods_name%'\";\n\t\t}\n\n\t\t// 排序字段与排序方式通过判断前台是否有传递，有传递使用，没有就用默认值\n\t\t$orderBy \t= !empty(I('get.ob')) ? I('get.ob') : 'goods_id';\n\t\t$orderWay \t= !empty(I('get.ow')) ? I('get.ow') : 'desc';\n\n\t\t$count = $this->where($where)->count();\n\t\t$size = 5;\n\t\t$page = new \\Think\\Page($count, $size);\n\n\t\t$page->setConfig('prev','«');\n\t\t$page->setConfig('next','»');\n\t\t$show = $page->show();\n\t\t$list = $this->where($where)\n\t\t\t\t->alias('goods')\n\t            ->join('left join jx_category cate on goods.cate_id = cate.cate_id')\n\t\t\t\t->order(\"$orderBy $orderWay\")\n\t\t\t\t->limit($page->firstRow . ',' . $page->listRows)\n\t\t\t\t->select();\n\t\treturn array(\n\t\t\t'show' \t=> $show,\n\t\t\t'list'\t=>\t$list,\n\t\t);\n\t}\n\n\t// 插入前置钩子函数处理图片上传\n\tprotected function _before_insert(&$data, $option){\n\t\treturn $this->UploadFile($data, $option);\n\t}\n\n\t// 更新前置钩子函数处理更新信息\n\tpublic function _before_update(&$data, $options){\n\t\t// 如果文件上传成功，执行以下更新信息\n\t\t// dump($options);exit();\n\t\t// 如果没有文件$_FILES['goods_img']['error'] == 4\n\t\tif ($_FILES['goods_img']['error']== '0' ) {\n\t\t\t$status = $this->UploadFile($data, $option);\n\t\t\t// dump($status);exit();\n\t\t\tif ($status) {\n\t\t\t\t$goods_id = $options['where']['goods_id'];\n\t\t\t\t$goodsOldImg = $this->field('goods_img , goods_thumb')->find();\n\t\t\t\t// dump($goodsOldImg);exit();\n\t\t\t\tforeach ($goodsOldImg as $key => $value) {\n\t\t\t\t\t@unlink( C('UPLOAD_ROOT_PATH') . $value );\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// 图片上传处理函数\n\tprivate function UploadFile(&$data, $option){\n\t\t$configMaxSize \t= \t(int)C('MAX_UPLOAD_FILE_SIZE');\n\t\t$phpiniMaxSize \t= \t(int)ini_get('upload_max_filesize');\n\t\t$allowMaxSize\t=\tmin($configMaxSize, $phpiniMaxSize);\n\n\t\t$rootPath\t\t= \tC('UPLOAD_ROOT_PATH');\n\t\t$exts \t\t\t=\tC('ALLOW_EXTS');\n\n\t\t$config \t\t=\tarray(\n\t\t\t'maxSize'\t=>\t$allowMaxSize * 1024 * 1024,\n\t\t\t'rootPath'\t=>\t$rootPath,\n\t\t\t'savePath'\t=>\t'Goods/',\n\t\t\t'exts'\t\t=> $exts,\n\t\t);\n\n\t\t$upload = new \\Think\\Upload($config);\n\t\t$info   = $upload->upload();\n\t\tif ($info) {\n\t\t\t// 图片上传路径\n\t\t\t$data['goods_img'] = $info['goods_img']['savepath'] . $info['goods_img']['savename'];\n\t\t\t// 生成缩略图\n\t\t\t$image = new \\Think\\Image();\n\t\t\t$image->open( $rootPath . $data['goods_img'] );\n\n\t\t\t$thumImg = $info['goods_img']['savepath'] . 'thumb_' . $info['goods_img']['savename'];\n\t\t\t$image->thumb( C('THUMB.THUMB_W'), C('THUMB.THUMB_H'), C('THUMB.THUMB_S') )->save($rootPath . $thumImg );\n\t\t\t$data['goods_thumb'] = $thumImg;\n\t\t\treturn true;\n\t\t}else{\n\t\t\t$uploadError = $upload->getError();\n\t\t\t$this->error = $uploadError;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n?>\n```\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkf004wpgwi9dvkeb7a"},{"layout":"post","title":"PHP数据缓存","date":"2016-01-18T17:49:13.000Z","_content":"缓存技术是web开发用来提高网站访问速度和减缓服务器压力的的重要手段之一，缓存主要分为页面缓存和数据缓存，一般情况下首页都采用页面缓存技术，其他的一些页面采用数据缓存比较多。下面贴上最近用php实现的数据缓存代码\n\ncache.php\n```\n<?php\nclass Cache {\nprivate $cache_path;//path for the cache\nprivate $cache_expire;//seconds that the cache expires\n//cache constructor, optional expiring time and cache path\nfunction __construct($exp_time=3600,$path=”cache/”){\n$this->cache_expire=$exp_time;\n$this->cache_path=$path;\n}\n//returns the filename for the cache\nprivate function fileName($key){\nreturn $this->cache_path.md5($key);\n}\n//creates new cache files with the given data, $key== name of the cache, data the info/values to store\npublic function put($key, $data){\n$values = serialize($data);\n$filename = $this->fileName($key);\n$file = fopen($filename, ‘w’);\n    if ($file){//able to create the file\n        fwrite($file, $values);\n        fclose($file);\n          return true;\n    }\n    else return false;\n}\n//returns cache for the given key\npublic function get($key){\n$filename = $this->fileName($key);\nif (!file_exists($filename) || !is_readable($filename)){//can’t read the cache\nreturn false;\n}\nif ( time() < (filemtime($filename) + $this->cache_expire) ) {//cache for the key not expired\n$file = fopen($filename, “r”);// read data file\n        if ($file){//able to open the file\n            $data = fread($file, filesize($filename));\n            fclose($file);\n            return unserialize($data);//return the values\n        }\n        else return false;\n}\nelse return false;//was expired you need to create new\n  }\n}\n?>\n```\n\n调用方法（完整列子）：\n```\nfunction get_cache_data($key){\n      //从缓存从读取键值 $key 的数据\n      $values = $this->data_cache->get($key);\n      //返回读取结果\n      return $values;\n    }\n    function put_cache_data($key,$data){\n      //insert code here…\n      //写入键值 $key 的数据\n      $is_write = $this->data_cache->put($key, $data);\n      return $is_write;\n    }\n    /**\n      * 最新成交列表\n      */\n    public function get_lastbargainlist()\n    {\n      $list_xml = $this->get_cache_data(“lastbargainlist”);\n      if(!$list_xml){\n        $list_xml = $this->soap_client->doRequest($this->request_xml(“HS”,”lastbargainlist”));\n        if(!$this->put_cache_data(“lastbargainlist”,$list_xml)){\n          // echo “<script> alert(‘失败！’); </script>”;\n        }\n      }\n      $list_arr = simplexml_load_string($list_xml);\n      return $list_arr;\n    }\n```\n\n实现页面缓存需要用到 ob_start  ob_get_content ob_clean等函数，下次有需要的时候再去实现","source":"_posts/2016/201601/20160119-1.md","raw":"layout: post\ntitle: PHP数据缓存\ndate: 2016-01-19 01:49:13\ntags:\n- 缓存优化\n---\n缓存技术是web开发用来提高网站访问速度和减缓服务器压力的的重要手段之一，缓存主要分为页面缓存和数据缓存，一般情况下首页都采用页面缓存技术，其他的一些页面采用数据缓存比较多。下面贴上最近用php实现的数据缓存代码\n\ncache.php\n```\n<?php\nclass Cache {\nprivate $cache_path;//path for the cache\nprivate $cache_expire;//seconds that the cache expires\n//cache constructor, optional expiring time and cache path\nfunction __construct($exp_time=3600,$path=”cache/”){\n$this->cache_expire=$exp_time;\n$this->cache_path=$path;\n}\n//returns the filename for the cache\nprivate function fileName($key){\nreturn $this->cache_path.md5($key);\n}\n//creates new cache files with the given data, $key== name of the cache, data the info/values to store\npublic function put($key, $data){\n$values = serialize($data);\n$filename = $this->fileName($key);\n$file = fopen($filename, ‘w’);\n    if ($file){//able to create the file\n        fwrite($file, $values);\n        fclose($file);\n          return true;\n    }\n    else return false;\n}\n//returns cache for the given key\npublic function get($key){\n$filename = $this->fileName($key);\nif (!file_exists($filename) || !is_readable($filename)){//can’t read the cache\nreturn false;\n}\nif ( time() < (filemtime($filename) + $this->cache_expire) ) {//cache for the key not expired\n$file = fopen($filename, “r”);// read data file\n        if ($file){//able to open the file\n            $data = fread($file, filesize($filename));\n            fclose($file);\n            return unserialize($data);//return the values\n        }\n        else return false;\n}\nelse return false;//was expired you need to create new\n  }\n}\n?>\n```\n\n调用方法（完整列子）：\n```\nfunction get_cache_data($key){\n      //从缓存从读取键值 $key 的数据\n      $values = $this->data_cache->get($key);\n      //返回读取结果\n      return $values;\n    }\n    function put_cache_data($key,$data){\n      //insert code here…\n      //写入键值 $key 的数据\n      $is_write = $this->data_cache->put($key, $data);\n      return $is_write;\n    }\n    /**\n      * 最新成交列表\n      */\n    public function get_lastbargainlist()\n    {\n      $list_xml = $this->get_cache_data(“lastbargainlist”);\n      if(!$list_xml){\n        $list_xml = $this->soap_client->doRequest($this->request_xml(“HS”,”lastbargainlist”));\n        if(!$this->put_cache_data(“lastbargainlist”,$list_xml)){\n          // echo “<script> alert(‘失败！’); </script>”;\n        }\n      }\n      $list_arr = simplexml_load_string($list_xml);\n      return $list_arr;\n    }\n```\n\n实现页面缓存需要用到 ob_start  ob_get_content ob_clean等函数，下次有需要的时候再去实现","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkg004xpgwid8sgehhh"},{"layout":"post","title":"PHP正则","date":"2016-01-22T17:49:13.000Z","_content":"没有金刚钻，别揽瓷器活！正则使用方便也有性能隐患！！！\nPHP 正则替换\n正则中的一些概念\n元字符\n`.` 匹配除换行符意外的任意字符\n\n`\\w` 匹配字母或数字或下划线\n\n`\\s` 匹配任意的空白符\n\n`\\d` 匹配数字\n\n`\\b` 匹配单词的开始或结束\n\n`^` 匹配字符串的开始\n\n`$` 匹配字符串的结束\n\n`[x]` 匹配x字符，如匹配字符串中的 a、b 和 c 字符\n\n`\\W` \\w的反义，即匹配任意非字母，数字，下划线和汉字的字符\n\n`\\S` \\s的反义，即匹配任意非空白符的字符\n\n`\\D` \\d的反义，即匹配任意非数字的字符\n\n`\\B` \\b的反义，即不是单词开头或结束的位置\n\n`[^x]` 匹配除了 x 以外的任意字符，如 [^abc] 匹配除了 abc 这几个字母之外的任意字符\n\n重复\n`*` 重复零次或更多次\n\n`+` 重复 1 次或更多次\n\n`?` 重复零次或 1 次\n\n`{n}` 重复 n 次\n\n`{n,}` 重复 n 次或更多次\n\n`{n,m}` 重复 n 到 m 次\n\n模式修正符\n`i` 模式中的字符将同时匹配大小写字母\n`m` 字符串视为多行\n`s` 将字符串视为单行，换行符作为普通字符\n`x` 将模式中的空白忽略\n`e` preg_replace() 函数在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。\n`A` 强制仅从目标字符串的开头开始匹配\n`D` 模式中的 $ 元字符仅匹配目标字符串的结尾\n`U` 匹配最近的字符串\n`u` 模式字符串被当成 UTF-8\n\nPHP正则函数\n在 PHP 应用中，正则表达式主要用于：\n1. 正则匹配：根据正则表达式匹配相应的内容 2. 正则替换：根据正则表达式匹配内容并替换 3. 正则分割：根据正则表达式分割字符串\n\nPHP 正则表达式匹配 `preg_match` 与 `preg_match_all` 函数\n`preg_match()`\n`preg_match()` 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。\n\n语法：\n\n`int preg_match( string pattern, string subject [, array matches ] )`\n参数说明：\npattern 正则表达式 `subject` 需要匹配检索的对象 `matches` 可选，存储匹配结果的数组， `$matches[0]` 将包含与整个模式匹配的文本，`$matches[1]` 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推\n\n`preg_match_all()`\n`preg_match_all()` 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。\n\n语法：\n\n`int preg_match_all( string pattern, string subject, array matches [, int flags ] )`\n参数说明:\n`pattern`: 正则表达式\n`subject`: 需要匹配检索的对象\n`matches`: 存储匹配结果的数组\n`flags`: 可选，指定匹配结果放入 `matches` 中的顺序，可供选择的标记有： \n1. `PREG_PATTERN_ORDER`：默认，对结果排序使 `$matches[0]` 为全部模式匹配的数组，`$matches[1]` 为第一个括号中的子模式所匹配的字符串组成的数组，以此类推 \n2. `PREG_SET_ORDER`：对结果排序使 $matches[0] 为第一组匹配项的数组，$matches[1] 为第二组匹配项的数组，以此类推 3. `PREG_OFFSET_CAPTURE`：如果设定本标记，对每个出现的匹配结果也同时返回其附属的字符串偏移量\n\n部分实例\n//1，过滤所有html标签的正则表达式： `</?[^>]+>`\n\n//2，过滤所有html标签的属性的正则表达式： `$html = preg_replace(“/<([a-zA-Z]+)[^>]*>/”,“<\\\\1>“,$html);`\n\n//3，过滤部分html标签的正则表达式的排除式（比如排除<p>，即不过滤<p>）： </?[^pP/>]+>\n\n//4，过滤部分html标签的正则表达式的枚举式（比如需要过滤<a><p><b>等）： </?[aApPbB][^>]*>\n\n//5，过滤部分html标签的属性的正则表达式的排除式（比如排除alt属性，即不过滤alt属性）： \\s(?!alt)[a-zA-Z]+=[^\\s]*\n\n//6，过滤部分html标签的属性的正则表达式的枚举式（比如alt属性）： (\\s)alt=[^\\s]*\n\n正则表达式中排除不需要匹配的字符串或字符\n(1)排除不需要匹配的某个字符： 例： [^\\w] 排除匹配中的一个数字或字符串\n\n(2) 排除匹配中不需要的字符串：例：(?!元宝商城|游戏特权|图说新游|多玩策划|新游视频|娱乐视频|多玩演播室|多玩画报)\n\n加上|用于或选择。上面列出的字符串都不会参与匹配\n\n常用正则\n删除空行: `\\r\\n\\r\\n => \\r\\n`\n\n删除有空格的空行: `^ +$ =>`","source":"_posts/2016/201601/20160123-1.md","raw":"layout: post\ntitle: PHP正则\ndate: 2016-01-23 01:49:13\ntags:\n- PHP正则\n---\n没有金刚钻，别揽瓷器活！正则使用方便也有性能隐患！！！\nPHP 正则替换\n正则中的一些概念\n元字符\n`.` 匹配除换行符意外的任意字符\n\n`\\w` 匹配字母或数字或下划线\n\n`\\s` 匹配任意的空白符\n\n`\\d` 匹配数字\n\n`\\b` 匹配单词的开始或结束\n\n`^` 匹配字符串的开始\n\n`$` 匹配字符串的结束\n\n`[x]` 匹配x字符，如匹配字符串中的 a、b 和 c 字符\n\n`\\W` \\w的反义，即匹配任意非字母，数字，下划线和汉字的字符\n\n`\\S` \\s的反义，即匹配任意非空白符的字符\n\n`\\D` \\d的反义，即匹配任意非数字的字符\n\n`\\B` \\b的反义，即不是单词开头或结束的位置\n\n`[^x]` 匹配除了 x 以外的任意字符，如 [^abc] 匹配除了 abc 这几个字母之外的任意字符\n\n重复\n`*` 重复零次或更多次\n\n`+` 重复 1 次或更多次\n\n`?` 重复零次或 1 次\n\n`{n}` 重复 n 次\n\n`{n,}` 重复 n 次或更多次\n\n`{n,m}` 重复 n 到 m 次\n\n模式修正符\n`i` 模式中的字符将同时匹配大小写字母\n`m` 字符串视为多行\n`s` 将字符串视为单行，换行符作为普通字符\n`x` 将模式中的空白忽略\n`e` preg_replace() 函数在替换字符串中对逆向引用作正常的替换，将其作为 PHP 代码求值，并用其结果来替换所搜索的字符串。\n`A` 强制仅从目标字符串的开头开始匹配\n`D` 模式中的 $ 元字符仅匹配目标字符串的结尾\n`U` 匹配最近的字符串\n`u` 模式字符串被当成 UTF-8\n\nPHP正则函数\n在 PHP 应用中，正则表达式主要用于：\n1. 正则匹配：根据正则表达式匹配相应的内容 2. 正则替换：根据正则表达式匹配内容并替换 3. 正则分割：根据正则表达式分割字符串\n\nPHP 正则表达式匹配 `preg_match` 与 `preg_match_all` 函数\n`preg_match()`\n`preg_match()` 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。\n\n语法：\n\n`int preg_match( string pattern, string subject [, array matches ] )`\n参数说明：\npattern 正则表达式 `subject` 需要匹配检索的对象 `matches` 可选，存储匹配结果的数组， `$matches[0]` 将包含与整个模式匹配的文本，`$matches[1]` 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推\n\n`preg_match_all()`\n`preg_match_all()` 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。\n\n语法：\n\n`int preg_match_all( string pattern, string subject, array matches [, int flags ] )`\n参数说明:\n`pattern`: 正则表达式\n`subject`: 需要匹配检索的对象\n`matches`: 存储匹配结果的数组\n`flags`: 可选，指定匹配结果放入 `matches` 中的顺序，可供选择的标记有： \n1. `PREG_PATTERN_ORDER`：默认，对结果排序使 `$matches[0]` 为全部模式匹配的数组，`$matches[1]` 为第一个括号中的子模式所匹配的字符串组成的数组，以此类推 \n2. `PREG_SET_ORDER`：对结果排序使 $matches[0] 为第一组匹配项的数组，$matches[1] 为第二组匹配项的数组，以此类推 3. `PREG_OFFSET_CAPTURE`：如果设定本标记，对每个出现的匹配结果也同时返回其附属的字符串偏移量\n\n部分实例\n//1，过滤所有html标签的正则表达式： `</?[^>]+>`\n\n//2，过滤所有html标签的属性的正则表达式： `$html = preg_replace(“/<([a-zA-Z]+)[^>]*>/”,“<\\\\1>“,$html);`\n\n//3，过滤部分html标签的正则表达式的排除式（比如排除<p>，即不过滤<p>）： </?[^pP/>]+>\n\n//4，过滤部分html标签的正则表达式的枚举式（比如需要过滤<a><p><b>等）： </?[aApPbB][^>]*>\n\n//5，过滤部分html标签的属性的正则表达式的排除式（比如排除alt属性，即不过滤alt属性）： \\s(?!alt)[a-zA-Z]+=[^\\s]*\n\n//6，过滤部分html标签的属性的正则表达式的枚举式（比如alt属性）： (\\s)alt=[^\\s]*\n\n正则表达式中排除不需要匹配的字符串或字符\n(1)排除不需要匹配的某个字符： 例： [^\\w] 排除匹配中的一个数字或字符串\n\n(2) 排除匹配中不需要的字符串：例：(?!元宝商城|游戏特权|图说新游|多玩策划|新游视频|娱乐视频|多玩演播室|多玩画报)\n\n加上|用于或选择。上面列出的字符串都不会参与匹配\n\n常用正则\n删除空行: `\\r\\n\\r\\n => \\r\\n`\n\n删除有空格的空行: `^ +$ =>`","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkh004zpgwi01keovjs"},{"layout":"post","title":"PSR规范","date":"2016-05-20T17:57:39.000Z","_content":"PSR是由PHP Framework Interoperability Group（PHP通用性框架小组）发布的一系列标准/规范，目前包括了PSR-0~PSR-4共4个，而PSR-0就是其中的自动加载标准（其后的PSR-4称为改进的自动加载的标准，是PSR-0的补充。PSR-0使用更广泛）。\n`https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md`\n\n## 强制要求\n下面描述了具体互操作性的自动加载所必须的条件：\n\n1. 一个完全合格的namespace和class必须符合这样的结构 \\<Vendor Name><Namespace>*<Class Name>\n2. 每个namespace必须有一个顶层的namespace（\"Vendor Name\"提供者名字）\n3. 每个namespace可以有多个子namespace\n4. 当从文件系统中加载时，每个namespace的分隔符要转换成 DIRECTORY_SEPARATOR(操作系统路径分隔符)\n5. 在CLASS NAME（类名）中，每个下划线(_)符号要转换成DIRECTORY_SEPARATOR。在namespace中，下划线(_)符号是没有（特殊）意义的。\n6. 当从文件系统中载入时，合格的namespace和class一定是以 .php 结尾的\n7. verdor name,namespaces,class名可以由大小写字母组合而成（大小写敏感的）\n8. 除此之外可能还会遵循这个规则：如果文件不存在则返回false。\n\n例子\n```\n\\Doctrine\\Common\\IsolatedClassLoader => /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php\n\\Symfony\\Core\\Request => /path/to/project/lib/vendor/Symfony/Core/Request.php\n\\Zend\\Acl => /path/to/project/lib/vendor/Zend/Acl.php\n\\Zend\\Mail\\Message => /path/to/project/lib/vendor/Zend/Mail/Message.php\nNameSpace和Class Name中的下划线\n\\namespace\\package\\Class_Name => /path/to/project/lib/vendor/namespace/package/Class/Name.php\n\\namespace\\package_name\\Class_Name => /path/to/project/lib/vendor/namespace/package_name/Class/Name.php\n```\n\n>将下划线转换成DIRECTORY_SEPARATOR实际上是出于兼容PHP5.3之前的版本的考虑\n\n```php\n<?php  \nfunction autoload($className)  \n{  \n    //这里的$className一般是用namespace的方式来引用的，文章开头已有介绍  \n    //去除$className左边的'\\' 这是PHP5.3的一个bug，详见https://bugs.php.net/50731  \n    $className = ltrim($className, '\\\\');  \n    $fileName  = '';  \n    $namespace = '';  \n    //找到最后一个namespace分隔符的位置  \n    if ($lastNsPos = strrpos($className, '\\\\')) {  \n        $namespace = substr($className, 0, $lastNsPos);  \n        $className = substr($className, $lastNsPos + 1);  \n        $fileName  = str_replace('\\\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;  \n    }  \n    $fileName .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php';  \n  \n    require $fileName;  \n} \n?>\n```\n\n## NameSpace（命名空间）\nnamespace是PHP5.3版本加入的新特性，用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：\n1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。\n2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。\n\n\nPHP 命名空间中的元素使用了类似文件系统的原理。例如，类名可以通过三种方式引用：\n\n1. 非限定名称，或不包含前缀的类名称，例如 $a=new foo(); 或 foo::staticmethod();。如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。 警告：如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称。详情参见 使用命名空间：后备全局函数名称/常量名称。\n2. 限定名称,或包含前缀的名称，例如 $a = new subnamespace\\foo(); 或 subnamespace\\foo::staticmethod();。如果当前的命名空间是 currentnamespace，则 foo 会被解析为 currentnamespace\\subnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\\foo。\n3. 完全限定名称，或包含了全局前缀操作符的名称，例如， $a = new \\currentnamespace\\foo(); 或 \\currentnamespace\\foo::staticmethod();。在这种情况下，foo 总是被解析为代码中的文字名(literal name)currentnamespace\\foo。\n另外注意访问任意全局类、函数或常量，都可以使用完全限定名称，例如 \\strlen() 或 \\Exception 或 \\INI_ALL。\n\n```\n<?php  \nuse My\\Full\\Classname as Another, My\\Full\\NSname;  \n  \n$obj = new Another; // 实例化一个 My\\Full\\Classname 对象  \n$obj = new \\Another; // 实例化一个Another对象  \n$obj = new Another\\thing; // 实例化一个My\\Full\\Classname\\thing对象  \n$obj = new \\Another\\thing; // 实例化一个Another\\thing对象  \n  \n$a = \\strlen('hi'); // 调用全局函数strlen  \n$b = \\INI_ALL; // 访问全局常量 INI_ALL  \n$c = new \\Exception('error'); // 实例化全局类 Exception  \n?> \n```\n\n## Autoload（自动加载）\n通过定义的一个或一系列autoload函数，它会在试图使用尚未被定义的类时自动调用。通过调用autoload函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。这个autoload函数可以是默认的__autoload()，如下：\n\n```\n<?php  \nfunction __autoload($class_name) {  \n    require_once $class_name . '.php';  \n}  \n  \n$obj  = new MyClass();  \n?>\n```\n\n也可以采用更灵活的方式，通过spl_autoload_register()来定义我们自己的__autoload()函数：\n```\n<?php  \nfunction my_autoload($class_name) {  \n    require_once $class_name . '.php';  \n}  \nspl_autoload_register(\"my_autoload\");  \n$obj  = new MyClass(); \n?>\n```\n\n>以上代码将my_autoload()函数注册到__autoload栈中，从而取到__autoload()函数（注意__autoload()函数将不再起作用，但可以显式的将其注册到__autoload栈）。注意到刚才提到了__autoload栈，意味着我们可以注册多个autoload函数，根据注册的顺序依次加载（通过spl_autoload_register的第三个参数可以改变这一顺序)。\n在这里我们展示了autoload函数最简单的例子，当然通过一些规则的设置，也可以胜任实际环境中许多复杂的情况。\n","source":"_posts/2016/201605/20160521-1.md","raw":"layout: post\ntitle: PSR规范\ndate: 2016-05-21 01:57:39\ntags:\n- 规范\n---\nPSR是由PHP Framework Interoperability Group（PHP通用性框架小组）发布的一系列标准/规范，目前包括了PSR-0~PSR-4共4个，而PSR-0就是其中的自动加载标准（其后的PSR-4称为改进的自动加载的标准，是PSR-0的补充。PSR-0使用更广泛）。\n`https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md`\n\n## 强制要求\n下面描述了具体互操作性的自动加载所必须的条件：\n\n1. 一个完全合格的namespace和class必须符合这样的结构 \\<Vendor Name><Namespace>*<Class Name>\n2. 每个namespace必须有一个顶层的namespace（\"Vendor Name\"提供者名字）\n3. 每个namespace可以有多个子namespace\n4. 当从文件系统中加载时，每个namespace的分隔符要转换成 DIRECTORY_SEPARATOR(操作系统路径分隔符)\n5. 在CLASS NAME（类名）中，每个下划线(_)符号要转换成DIRECTORY_SEPARATOR。在namespace中，下划线(_)符号是没有（特殊）意义的。\n6. 当从文件系统中载入时，合格的namespace和class一定是以 .php 结尾的\n7. verdor name,namespaces,class名可以由大小写字母组合而成（大小写敏感的）\n8. 除此之外可能还会遵循这个规则：如果文件不存在则返回false。\n\n例子\n```\n\\Doctrine\\Common\\IsolatedClassLoader => /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php\n\\Symfony\\Core\\Request => /path/to/project/lib/vendor/Symfony/Core/Request.php\n\\Zend\\Acl => /path/to/project/lib/vendor/Zend/Acl.php\n\\Zend\\Mail\\Message => /path/to/project/lib/vendor/Zend/Mail/Message.php\nNameSpace和Class Name中的下划线\n\\namespace\\package\\Class_Name => /path/to/project/lib/vendor/namespace/package/Class/Name.php\n\\namespace\\package_name\\Class_Name => /path/to/project/lib/vendor/namespace/package_name/Class/Name.php\n```\n\n>将下划线转换成DIRECTORY_SEPARATOR实际上是出于兼容PHP5.3之前的版本的考虑\n\n```php\n<?php  \nfunction autoload($className)  \n{  \n    //这里的$className一般是用namespace的方式来引用的，文章开头已有介绍  \n    //去除$className左边的'\\' 这是PHP5.3的一个bug，详见https://bugs.php.net/50731  \n    $className = ltrim($className, '\\\\');  \n    $fileName  = '';  \n    $namespace = '';  \n    //找到最后一个namespace分隔符的位置  \n    if ($lastNsPos = strrpos($className, '\\\\')) {  \n        $namespace = substr($className, 0, $lastNsPos);  \n        $className = substr($className, $lastNsPos + 1);  \n        $fileName  = str_replace('\\\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;  \n    }  \n    $fileName .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php';  \n  \n    require $fileName;  \n} \n?>\n```\n\n## NameSpace（命名空间）\nnamespace是PHP5.3版本加入的新特性，用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：\n1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。\n2. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。\n\n\nPHP 命名空间中的元素使用了类似文件系统的原理。例如，类名可以通过三种方式引用：\n\n1. 非限定名称，或不包含前缀的类名称，例如 $a=new foo(); 或 foo::staticmethod();。如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。 警告：如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称。详情参见 使用命名空间：后备全局函数名称/常量名称。\n2. 限定名称,或包含前缀的名称，例如 $a = new subnamespace\\foo(); 或 subnamespace\\foo::staticmethod();。如果当前的命名空间是 currentnamespace，则 foo 会被解析为 currentnamespace\\subnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\\foo。\n3. 完全限定名称，或包含了全局前缀操作符的名称，例如， $a = new \\currentnamespace\\foo(); 或 \\currentnamespace\\foo::staticmethod();。在这种情况下，foo 总是被解析为代码中的文字名(literal name)currentnamespace\\foo。\n另外注意访问任意全局类、函数或常量，都可以使用完全限定名称，例如 \\strlen() 或 \\Exception 或 \\INI_ALL。\n\n```\n<?php  \nuse My\\Full\\Classname as Another, My\\Full\\NSname;  \n  \n$obj = new Another; // 实例化一个 My\\Full\\Classname 对象  \n$obj = new \\Another; // 实例化一个Another对象  \n$obj = new Another\\thing; // 实例化一个My\\Full\\Classname\\thing对象  \n$obj = new \\Another\\thing; // 实例化一个Another\\thing对象  \n  \n$a = \\strlen('hi'); // 调用全局函数strlen  \n$b = \\INI_ALL; // 访问全局常量 INI_ALL  \n$c = new \\Exception('error'); // 实例化全局类 Exception  \n?> \n```\n\n## Autoload（自动加载）\n通过定义的一个或一系列autoload函数，它会在试图使用尚未被定义的类时自动调用。通过调用autoload函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。这个autoload函数可以是默认的__autoload()，如下：\n\n```\n<?php  \nfunction __autoload($class_name) {  \n    require_once $class_name . '.php';  \n}  \n  \n$obj  = new MyClass();  \n?>\n```\n\n也可以采用更灵活的方式，通过spl_autoload_register()来定义我们自己的__autoload()函数：\n```\n<?php  \nfunction my_autoload($class_name) {  \n    require_once $class_name . '.php';  \n}  \nspl_autoload_register(\"my_autoload\");  \n$obj  = new MyClass(); \n?>\n```\n\n>以上代码将my_autoload()函数注册到__autoload栈中，从而取到__autoload()函数（注意__autoload()函数将不再起作用，但可以显式的将其注册到__autoload栈）。注意到刚才提到了__autoload栈，意味着我们可以注册多个autoload函数，根据注册的顺序依次加载（通过spl_autoload_register的第三个参数可以改变这一顺序)。\n在这里我们展示了autoload函数最简单的例子，当然通过一些规则的设置，也可以胜任实际环境中许多复杂的情况。\n","slug":"1","published":1,"updated":"2019-04-02T04:55:38.242Z","comments":1,"photos":[],"link":"","_id":"ck39ugjki0051pgwidlx6itqz"},{"layout":"post","title":"服务器架构","date":"2016-05-21T17:57:39.000Z","_content":"![架构](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.59.35.png)\n","source":"_posts/2016/201605/20160522-1.md","raw":"layout: post\ntitle: 服务器架构\ndate: 2016-05-22 01:57:39\ntags:\n- 架构\n---\n![架构](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.59.35.png)\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkj0053pgwich1334gg"},{"layout":"post","title":"PHP网站常见安全漏洞及防御方法","date":"2016-05-22T17:32:50.000Z","_content":"## 常见PHP网站安全漏洞\n\n对于PHP的漏洞，目前常见的漏洞有五种。分别是Session文件漏洞、SQL注入漏洞、脚本命令执行漏洞、全局变量漏洞和文件漏洞。这里分别对这些漏洞进行简要的介绍。\n\n### session文件漏洞\n\nSession攻击是黑客最常用到的攻击手段之一。当一个用户访问某一个网站时，为了免客户每进人一个页面都要输人账号和密码，PHP设置了Session和Cookie用于方便用户的使用和访向。\n\n### SQL注入漏洞\n\n在进行网站开发的时候，程序员由于对用户输人数据缺乏全面判断或者过滤不严导致服务器执行一些恶意信息，比如用户信息查询等。黑客可以根据恶意程序返回的结果获取相应的信息。这就是月行胃的SQL注入漏洞。\n\n### 脚本执行漏洞\n\n脚本执行漏洞常见的原因是由于程序员在开发网站时对用户提交的URL参数过滤较少引起的，用户提交的URL可能包含恶意代码导致跨站脚本攻击。脚本执行漏洞在以前的PHP网站中经常存在，但是随着PHP版本的升级，这些间题已经减少或者不存在了。\n\n### 全局变量漏洞\n\nPHP中的变量在使用的时候不像其他开发语言那样需要事先声明，PHP中的变量可以不经声明就直接使用，使用的时候系统自动创建，而且也不需要对变量类型进行说明，系统会自动根据上下文环境自动确定变量类型。这种方式可以大大减少程序员编程中出错的概率，使用起来非常的方便。\n\n### 文件漏洞\n\n文件漏洞通常是由于网站开发者在进行网站设计时对外部提供的数据缺乏充分的过滤导致黑客利用其中的漏洞在Web进程上执行相应的命令。假如在lsm.php中包含这样一段代码:include($b.”/aaa.php”.)，这对黑客来说，可以通过变量$b来实现远程攻击，可以是黑客自已的代码，用来实现对网站的攻击。可以向服务器提交a.php include=http://lZ7.0.0. 1/b.php,然后执行b.php的指令。\n\n## PHP常见漏洞的防范措施\n\n### 对于Session漏洞的防范\n\n从前面的分析可以知道，Session攻击最常见的就是会话劫持，也就是黑客通过各种攻击手段获取用户的Session ID，然后利用被攻击用户的身份来登录相应网站。为此，这里可以用以下几种方法进行防范:一是定期更换Session ID，更换Session ID可以用PHP自带函数来实现;二是更换Session名称，通常情况下Session的默认名称是PHPSESSID，这个变量一般是在cookie中保存的，如果更改了它的名称，就可以阻档黑客的部分攻击;三是对透明化的Session ID进行关闭处理，所谓透明化也就是指在http请求没有使用cookies来制定Session id时，Sessioin id使用链接来传递.关闭透明化Session ID可以通过操作PHP.ini文件来实现;四是通过URL传递隐藏参数，这样可以确保即使黑客获取了session数据，但是由于相关参数是隐藏的，它也很难获得Session ID变量值。\n\n### 对SQL注入漏洞的防范\n\n黑客进行SQL注入手段很多，而且灵活多变，但是SQL注人的共同点就是利用输入过滤漏洞。因此，要想从根本上防止SQL注入，根本解决措施就是加强对请求命令尤其是查询请求命令的过滤。具体来说，包括以下几点:一是把过滤性语句进行参数化处理，也就是通过参数化语句实现用户信息的输入而不是直接把用户输入嵌入到语句中。二是在网站开发的时候尽可能少用解释性程序，黑客经常通过这种手段来执行非法命令;三是在网站开发时尽可能避免网站出现bug，否则黑客可能利用这些信息来攻击网站;仅仅通过防御SQL注入还是不够的，另外还要经常使用专业的漏洞扫描工具对网站进行漏洞扫描。\n\n### 对脚本执行漏洞的防范\n\n黑客利用脚本执行漏洞进行攻击的手段是多种多样的，而且是灵活多变的，对此，必须要采用多种防范方法综合的手段，才能有效防止黑客对脚本执行漏洞进行攻击。这里常用的方法方法有以下四种。一是对可执行文件的路径进行预先设定。可以通过safe_moade_exec_dir来实现;二是对命令参数进行处理，一般用escapeshellarg函数实现;三是用系统自带的函数库来代替外部命令;四是在操作的时候进可能减少使用外部命令。\n\n### 对全局变量漏洞防范\n\n对于PHP全局变量的漏洞问题，以前的PHP版本存在这样的问题，但是随着PHP版本升级到5.5以后，可以通过对php.ini的设置来实现，设置ruquest_order为GPC。另外在php.ini配置文件中，可以通过对Magic_quotes_runtime进行布尔值设置是否对外部引人的数据中的溢出字符加反斜线。为了确保网站程序在服务器的任何设置状态下都能运行。可以在整个程序开始的时候用get_magic_quotes_runtime检测设置状态决定是否要手工处理，或者在开始(或不需要自动转义的时候)用set_magic_quotes_runtime(0)关掉。\n\n### 对文件漏洞的防范\n\n对于PHP文件漏桐可以通过对服务器进行设置和配置来达到防范目的。这里具体的操作如下:一是把PHP代码中的错误提示关闭，这样可以避免黑客通过错误提示获取数据库信息和网页文件物理路径;二是对open_basedir尽心设置，也就是对目录外的文件操作进行禁止处理;这样可以对本地文件或者远程文件起到保护作用，防止它们被攻击，这里还要注意防范Session文件和上载文件的攻击;三是把safe-made设置为开启状态，从而对将要执行的命令进行规范，通过禁止文件上传，可以有效的提高PHP网站的安全系数。","source":"_posts/2016/201605/20160523-1.md","raw":"layout: post\ntitle: PHP网站常见安全漏洞及防御方法\ndate: 2016-05-23 01:32:50\ntags:\n- web安全\n---\n## 常见PHP网站安全漏洞\n\n对于PHP的漏洞，目前常见的漏洞有五种。分别是Session文件漏洞、SQL注入漏洞、脚本命令执行漏洞、全局变量漏洞和文件漏洞。这里分别对这些漏洞进行简要的介绍。\n\n### session文件漏洞\n\nSession攻击是黑客最常用到的攻击手段之一。当一个用户访问某一个网站时，为了免客户每进人一个页面都要输人账号和密码，PHP设置了Session和Cookie用于方便用户的使用和访向。\n\n### SQL注入漏洞\n\n在进行网站开发的时候，程序员由于对用户输人数据缺乏全面判断或者过滤不严导致服务器执行一些恶意信息，比如用户信息查询等。黑客可以根据恶意程序返回的结果获取相应的信息。这就是月行胃的SQL注入漏洞。\n\n### 脚本执行漏洞\n\n脚本执行漏洞常见的原因是由于程序员在开发网站时对用户提交的URL参数过滤较少引起的，用户提交的URL可能包含恶意代码导致跨站脚本攻击。脚本执行漏洞在以前的PHP网站中经常存在，但是随着PHP版本的升级，这些间题已经减少或者不存在了。\n\n### 全局变量漏洞\n\nPHP中的变量在使用的时候不像其他开发语言那样需要事先声明，PHP中的变量可以不经声明就直接使用，使用的时候系统自动创建，而且也不需要对变量类型进行说明，系统会自动根据上下文环境自动确定变量类型。这种方式可以大大减少程序员编程中出错的概率，使用起来非常的方便。\n\n### 文件漏洞\n\n文件漏洞通常是由于网站开发者在进行网站设计时对外部提供的数据缺乏充分的过滤导致黑客利用其中的漏洞在Web进程上执行相应的命令。假如在lsm.php中包含这样一段代码:include($b.”/aaa.php”.)，这对黑客来说，可以通过变量$b来实现远程攻击，可以是黑客自已的代码，用来实现对网站的攻击。可以向服务器提交a.php include=http://lZ7.0.0. 1/b.php,然后执行b.php的指令。\n\n## PHP常见漏洞的防范措施\n\n### 对于Session漏洞的防范\n\n从前面的分析可以知道，Session攻击最常见的就是会话劫持，也就是黑客通过各种攻击手段获取用户的Session ID，然后利用被攻击用户的身份来登录相应网站。为此，这里可以用以下几种方法进行防范:一是定期更换Session ID，更换Session ID可以用PHP自带函数来实现;二是更换Session名称，通常情况下Session的默认名称是PHPSESSID，这个变量一般是在cookie中保存的，如果更改了它的名称，就可以阻档黑客的部分攻击;三是对透明化的Session ID进行关闭处理，所谓透明化也就是指在http请求没有使用cookies来制定Session id时，Sessioin id使用链接来传递.关闭透明化Session ID可以通过操作PHP.ini文件来实现;四是通过URL传递隐藏参数，这样可以确保即使黑客获取了session数据，但是由于相关参数是隐藏的，它也很难获得Session ID变量值。\n\n### 对SQL注入漏洞的防范\n\n黑客进行SQL注入手段很多，而且灵活多变，但是SQL注人的共同点就是利用输入过滤漏洞。因此，要想从根本上防止SQL注入，根本解决措施就是加强对请求命令尤其是查询请求命令的过滤。具体来说，包括以下几点:一是把过滤性语句进行参数化处理，也就是通过参数化语句实现用户信息的输入而不是直接把用户输入嵌入到语句中。二是在网站开发的时候尽可能少用解释性程序，黑客经常通过这种手段来执行非法命令;三是在网站开发时尽可能避免网站出现bug，否则黑客可能利用这些信息来攻击网站;仅仅通过防御SQL注入还是不够的，另外还要经常使用专业的漏洞扫描工具对网站进行漏洞扫描。\n\n### 对脚本执行漏洞的防范\n\n黑客利用脚本执行漏洞进行攻击的手段是多种多样的，而且是灵活多变的，对此，必须要采用多种防范方法综合的手段，才能有效防止黑客对脚本执行漏洞进行攻击。这里常用的方法方法有以下四种。一是对可执行文件的路径进行预先设定。可以通过safe_moade_exec_dir来实现;二是对命令参数进行处理，一般用escapeshellarg函数实现;三是用系统自带的函数库来代替外部命令;四是在操作的时候进可能减少使用外部命令。\n\n### 对全局变量漏洞防范\n\n对于PHP全局变量的漏洞问题，以前的PHP版本存在这样的问题，但是随着PHP版本升级到5.5以后，可以通过对php.ini的设置来实现，设置ruquest_order为GPC。另外在php.ini配置文件中，可以通过对Magic_quotes_runtime进行布尔值设置是否对外部引人的数据中的溢出字符加反斜线。为了确保网站程序在服务器的任何设置状态下都能运行。可以在整个程序开始的时候用get_magic_quotes_runtime检测设置状态决定是否要手工处理，或者在开始(或不需要自动转义的时候)用set_magic_quotes_runtime(0)关掉。\n\n### 对文件漏洞的防范\n\n对于PHP文件漏桐可以通过对服务器进行设置和配置来达到防范目的。这里具体的操作如下:一是把PHP代码中的错误提示关闭，这样可以避免黑客通过错误提示获取数据库信息和网页文件物理路径;二是对open_basedir尽心设置，也就是对目录外的文件操作进行禁止处理;这样可以对本地文件或者远程文件起到保护作用，防止它们被攻击，这里还要注意防范Session文件和上载文件的攻击;三是把safe-made设置为开启状态，从而对将要执行的命令进行规范，通过禁止文件上传，可以有效的提高PHP网站的安全系数。","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkk0055pgwiy22rt8jh"},{"layout":"post","title":"连接SSH时出现UNPROTECTED PRIVATE KEY FILE","date":"2016-10-09T17:35:21.000Z","_content":"\n## 原因\n\n>使用密钥连接 SSH 时提示 WARNING: UNPROTECTED PRIVATE KEY FILE，找到原因是由于之前重新配置了 ~/.ssh 目录权限，导致密钥能够通过其他用户访问。所以将密钥或者 .ssh 目录权限设置为仅当前用户具有访问权限即可解决。若提示 Bad owner or permissions, 也可以通过下述方案解决。\n\n## 解决方案\n\n>sudo chown -R uiste:staff .ssh\nsudo chmod -R 700 .ssh","source":"_posts/2016/201610/20161010-1.md","raw":"layout: post\ntitle: 连接SSH时出现UNPROTECTED PRIVATE KEY FILE\ndate: 2016-10-10 01:35:21\ntags:\n---\n\n## 原因\n\n>使用密钥连接 SSH 时提示 WARNING: UNPROTECTED PRIVATE KEY FILE，找到原因是由于之前重新配置了 ~/.ssh 目录权限，导致密钥能够通过其他用户访问。所以将密钥或者 .ssh 目录权限设置为仅当前用户具有访问权限即可解决。若提示 Bad owner or permissions, 也可以通过下述方案解决。\n\n## 解决方案\n\n>sudo chown -R uiste:staff .ssh\nsudo chmod -R 700 .ssh","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkl0057pgwinywc0gt5"},{"layout":"post","title":"在 Group by 之内(前)实现 Order by 排序","date":"2016-10-14T17:35:21.000Z","_content":"## 发现问题\n\n统计功能需求时，比如统计某 APP 在一小时内最后一笔交易的时间点，测试后发现数据实为该小时内的第一笔交易。\n\nSQL 语句示例\n\n```\nSELECT appid, created_time\nFROM order\nWHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\nGROUP BY appid\nORDER BY created_time DESC;\n```\n\n>执行后发现实际 ORDER BY created_time DESC 仅是在 GROUP BY 外排序，而没有满足需求在 GROUP BY 内排序。\n\n## 解决问题\n方法一、使用 MAX 函数\n\nSQL 语句示例\n\n```\nSELECT appid, created_time, MAX(created_time) AS latest_created_time\nFROM order\nWHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\nGROUP BY appid;\n```\n\n其中 `created_time` 为该小时内第一笔交易，`latest_created_time` 为该小时内最后一笔交易\n\n>优点: 使用简单，逻辑清楚\n缺点: 全表排，效率低，大数据量慎用\n\n方法二、使用子查询\n\nSQL 语句示例\n\n```\nSELECT appid, created_time, latest_created_time \nFROM (\n  SELECT appid, created_time FROM order\n    WHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\n    ORDER BY created_time ASC\n    ) AS temp_table_a , (\n    SELECT created_time AS latest_created_time FROM order\n    WHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\n    ORDER BY created_time DESC\n  ) AS temp_table_b\nGROUP BY appid;\n```\n\n同上，其中 `created_time` 为该小时内第一笔交易，`latest_created_time` 为该小时内最后一笔交易\n\n>优点: 效率高，适用大数据量\n缺点: 语句较复杂，需要脱离框架，手动拼接实现\n\n总结\n\n不必纠结了，数据量小于200万就使用第一种方法吧，反之使用第二种。","source":"_posts/2016/201610/20161015-1.md","raw":"layout: post\ntitle: 在 Group by 之内(前)实现 Order by 排序\ndate: 2016-10-15 01:35:21\ntags:\n---\n## 发现问题\n\n统计功能需求时，比如统计某 APP 在一小时内最后一笔交易的时间点，测试后发现数据实为该小时内的第一笔交易。\n\nSQL 语句示例\n\n```\nSELECT appid, created_time\nFROM order\nWHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\nGROUP BY appid\nORDER BY created_time DESC;\n```\n\n>执行后发现实际 ORDER BY created_time DESC 仅是在 GROUP BY 外排序，而没有满足需求在 GROUP BY 内排序。\n\n## 解决问题\n方法一、使用 MAX 函数\n\nSQL 语句示例\n\n```\nSELECT appid, created_time, MAX(created_time) AS latest_created_time\nFROM order\nWHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\nGROUP BY appid;\n```\n\n其中 `created_time` 为该小时内第一笔交易，`latest_created_time` 为该小时内最后一笔交易\n\n>优点: 使用简单，逻辑清楚\n缺点: 全表排，效率低，大数据量慎用\n\n方法二、使用子查询\n\nSQL 语句示例\n\n```\nSELECT appid, created_time, latest_created_time \nFROM (\n  SELECT appid, created_time FROM order\n    WHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\n    ORDER BY created_time ASC\n    ) AS temp_table_a , (\n    SELECT created_time AS latest_created_time FROM order\n    WHERE paid = 1\n      AND created_time >= '2016-01-26 17:00:00'\n      AND created_time < '2016-01-26 18:00:00'\n    ORDER BY created_time DESC\n  ) AS temp_table_b\nGROUP BY appid;\n```\n\n同上，其中 `created_time` 为该小时内第一笔交易，`latest_created_time` 为该小时内最后一笔交易\n\n>优点: 效率高，适用大数据量\n缺点: 语句较复杂，需要脱离框架，手动拼接实现\n\n总结\n\n不必纠结了，数据量小于200万就使用第一种方法吧，反之使用第二种。","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkm0058pgwiupj2qj78"},{"layout":"post","title":"Html Body 莫名加上'MacOSX ATTRV'原因及解决","date":"2016-11-12T17:35:21.000Z","_content":"前言\n\n今天上传项目时是由Mac tar打包上传到Linux服务器解包的，部署完成后访问页面发现页面的Body之前都被加入了\n\n一行奇怪的字符。\n\nMac环境解决方案\n\nGoogle后发现Mac解决方案\n\n`xattr -r -d com.apple.quarantine file-path`\n原文地址`http://entropytc.com/got-com-apple-quarantine-problems/`\n\n>不过在Linux下没有xattr命令，就去Linux目录下ls -a发现每个文件都被克隆了一个._开头的文件，由于检查过原始文件并未遭到改动，果然删除这些._开头文件即解决了问题\n\nLinux解决方案 - 批量删除._开头文件\n\n`find ./ -name \"._*\" -exec rm -f {} \\;`\n","source":"_posts/2016/201611/20161113-1.md","raw":"layout: post\ntitle: Html Body 莫名加上'MacOSX ATTRV'原因及解决\ndate: 2016-11-13 01:35:21\ntags:\n---\n前言\n\n今天上传项目时是由Mac tar打包上传到Linux服务器解包的，部署完成后访问页面发现页面的Body之前都被加入了\n\n一行奇怪的字符。\n\nMac环境解决方案\n\nGoogle后发现Mac解决方案\n\n`xattr -r -d com.apple.quarantine file-path`\n原文地址`http://entropytc.com/got-com-apple-quarantine-problems/`\n\n>不过在Linux下没有xattr命令，就去Linux目录下ls -a发现每个文件都被克隆了一个._开头的文件，由于检查过原始文件并未遭到改动，果然删除这些._开头文件即解决了问题\n\nLinux解决方案 - 批量删除._开头文件\n\n`find ./ -name \"._*\" -exec rm -f {} \\;`\n","slug":"1","published":1,"updated":"2019-03-29T03:54:09.074Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkm0059pgwie5ict8si"},{"layout":"post","title":"阶段性搬砖总结","date":"2017-02-25T12:09:53.000Z","_content":"## 原因\n因为最近工作的原因,断了学习成长的一个节奏，想着还是做个记录。虽然暂更博客内容的时间不长，却在这短暂的时间有所迷失了自己的方向，麻木的生活，重复的工作，好像一把机械性的操手。沉浸与思考之后，又自我感觉忧虑。\n\n也许一辈子都不能做成什么大事，还是希望能做好这一件小事。\n\n## 以后\n静心学习，慢一点，稳一点，走好脚下的路...","source":"_posts/2017/201702/20170225-1.md","raw":"layout: post\ntitle: 阶段性搬砖总结\ndate: 2017-02-25 20:09:53\ntags:\n---\n## 原因\n因为最近工作的原因,断了学习成长的一个节奏，想着还是做个记录。虽然暂更博客内容的时间不长，却在这短暂的时间有所迷失了自己的方向，麻木的生活，重复的工作，好像一把机械性的操手。沉浸与思考之后，又自我感觉忧虑。\n\n也许一辈子都不能做成什么大事，还是希望能做好这一件小事。\n\n## 以后\n静心学习，慢一点，稳一点，走好脚下的路...","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkn005cpgwijd91yi9s"},{"layout":"post","title":"Yii2.0 对数据库 查询的一些简单的操作","date":"2017-02-26T12:06:41.000Z","_content":"1： 此方法返回 `['name' => 'daxia']` 的所有数据；\n\n`User::find()->where(['name' => 'daxia'])->all();`\n2： 此方法返回 `['name' => 'daxia']`的一条数据\n\n`User::find()->where(['name' => 'daxia'])->one();`\n3： 在条件name的基础上，额外添加另一个条件sex\n\n`User::find()->where(['name' => 'daxia'])->andWhere(['sex' => '女'])->one();`\n\n或者：\n\n`User::find()->where(['name' => 'daxia', 'sex' => '女'])->one();`\n\n说明： 这两种方法都是可以的\n4： andFilterWhere/andWhere应用： 在[1427925600-1427968800]之间查询\n\n`User::find()->andFilterWhere(['between', 'regtime', '1427925600', '1427968800’])`\n说到andFilterWhere，下面我把用到的各种的情况示例列出：\n\n1) : sql:   id=1 AND id=2\n     条件:  `['and', 'id=1', 'id=2'] `\n\n2) : sql:   id=1 OR id=2\n     条件:  `['or', 'id=1', 'id=2'] `\n\n3) : sql:   id BETWEEN 1 AND 10\n     条件:   `['between', 'id', 1, 10] `\n\n4) : sql:   id IN (1, 2, 3)\n     条件:  `['in', 'id', [1, 2, 3]] `\n\n5) : sql:   name LIKE '%tester%'     模糊查询\n     条件:  `['like', 'name', 'tester']`\n\n6) : sql:   age>10\n     条件:  `['>', 'age', 10]`\n\n5： orderBy() 应用\n\nsql： ORDER BY `id` ASC, `name` DESC\n\nYii对应的model书写如下：\n```\n    $query->orderBy([\n       'id' => SORT_ASC,  升序  默认\n       'name' => SORT_DESC,  降序\n    ]); \n```\n\n6： groupBy() 应用：\n\nsql:  ... GROUP BY `id`, `status`\n\nYii对应的model书写如下：\n\n`$query->groupBy(['id', 'status']);`\n7： having()应用：\n\nsql:  ... HAVING `status` = 1\n\nYii对应的model书写如下：\n\n`$query->having(['status' => 1]);`\n8： limit() offset() 应用：\n\nsql:  ... LIMIT 10 OFFSET 20\n\nYii对应的model书写如下\n\n`$query->limit(10)->offset(20);`\n9： 用自己书写的sql语句，去查询符合的数据\n\n`User::findBySql('SELECT * FROM user')->one(); ` 此方法是用 sql  语句查询 user 表里面的一条数据；\n\n`User::findBySql('SELECT * FROM user')->all(); ` 此方法是用 sql  语句查询 user 表里面的所有数据；\n说明： 测试 - 你也许想要测试或者使用一个由 yii\\db\\Query 对象创建的 SQL 语句。 你可以使用以下的代码来达到目的：\n\n`$query->createCommand()->getRawSql();`\n下面就是官网上面展示的，一些比较常见的查询方法：\n```\nyii\\db\\Query 提供了一整套的用于不同查询目的的方法。\n  ● yii\\db\\Query::all(): 将返回一个由行组成的数组，每一行是一个由名称和值构成的关联数组（译者注：省略键的数组称为索引数组）。\n  ● yii\\db\\Query::one(): 返回结果集的第一行。\n  ● yii\\db\\Query::column(): 返回结果集的第一列。\n  ● yii\\db\\Query::scalar(): 返回结果集的第一行第一列的标量值。\n  ● yii\\db\\Query::exists(): 返回一个表示该查询是否包结果集的值。\n  ● yii\\db\\Query::count(): 返回 COUNT 查询的结果。\n  ● 其它集合查询方法: 包括 yii\\db\\Query::sum(), yii\\db\\Query::average(), yii\\db\\Query::max(), yii\\db\\Query::min() 等. $q 是一个必选参数， 既可以是一个字段名称，又可以是一个 DB 表达式。\n```","source":"_posts/2017/201702/20170226-1.md","raw":"layout: post\ntitle: Yii2.0 对数据库 查询的一些简单的操作\ndate: 2017-02-26 20:06:41\ntags:\n- yii\n---\n1： 此方法返回 `['name' => 'daxia']` 的所有数据；\n\n`User::find()->where(['name' => 'daxia'])->all();`\n2： 此方法返回 `['name' => 'daxia']`的一条数据\n\n`User::find()->where(['name' => 'daxia'])->one();`\n3： 在条件name的基础上，额外添加另一个条件sex\n\n`User::find()->where(['name' => 'daxia'])->andWhere(['sex' => '女'])->one();`\n\n或者：\n\n`User::find()->where(['name' => 'daxia', 'sex' => '女'])->one();`\n\n说明： 这两种方法都是可以的\n4： andFilterWhere/andWhere应用： 在[1427925600-1427968800]之间查询\n\n`User::find()->andFilterWhere(['between', 'regtime', '1427925600', '1427968800’])`\n说到andFilterWhere，下面我把用到的各种的情况示例列出：\n\n1) : sql:   id=1 AND id=2\n     条件:  `['and', 'id=1', 'id=2'] `\n\n2) : sql:   id=1 OR id=2\n     条件:  `['or', 'id=1', 'id=2'] `\n\n3) : sql:   id BETWEEN 1 AND 10\n     条件:   `['between', 'id', 1, 10] `\n\n4) : sql:   id IN (1, 2, 3)\n     条件:  `['in', 'id', [1, 2, 3]] `\n\n5) : sql:   name LIKE '%tester%'     模糊查询\n     条件:  `['like', 'name', 'tester']`\n\n6) : sql:   age>10\n     条件:  `['>', 'age', 10]`\n\n5： orderBy() 应用\n\nsql： ORDER BY `id` ASC, `name` DESC\n\nYii对应的model书写如下：\n```\n    $query->orderBy([\n       'id' => SORT_ASC,  升序  默认\n       'name' => SORT_DESC,  降序\n    ]); \n```\n\n6： groupBy() 应用：\n\nsql:  ... GROUP BY `id`, `status`\n\nYii对应的model书写如下：\n\n`$query->groupBy(['id', 'status']);`\n7： having()应用：\n\nsql:  ... HAVING `status` = 1\n\nYii对应的model书写如下：\n\n`$query->having(['status' => 1]);`\n8： limit() offset() 应用：\n\nsql:  ... LIMIT 10 OFFSET 20\n\nYii对应的model书写如下\n\n`$query->limit(10)->offset(20);`\n9： 用自己书写的sql语句，去查询符合的数据\n\n`User::findBySql('SELECT * FROM user')->one(); ` 此方法是用 sql  语句查询 user 表里面的一条数据；\n\n`User::findBySql('SELECT * FROM user')->all(); ` 此方法是用 sql  语句查询 user 表里面的所有数据；\n说明： 测试 - 你也许想要测试或者使用一个由 yii\\db\\Query 对象创建的 SQL 语句。 你可以使用以下的代码来达到目的：\n\n`$query->createCommand()->getRawSql();`\n下面就是官网上面展示的，一些比较常见的查询方法：\n```\nyii\\db\\Query 提供了一整套的用于不同查询目的的方法。\n  ● yii\\db\\Query::all(): 将返回一个由行组成的数组，每一行是一个由名称和值构成的关联数组（译者注：省略键的数组称为索引数组）。\n  ● yii\\db\\Query::one(): 返回结果集的第一行。\n  ● yii\\db\\Query::column(): 返回结果集的第一列。\n  ● yii\\db\\Query::scalar(): 返回结果集的第一行第一列的标量值。\n  ● yii\\db\\Query::exists(): 返回一个表示该查询是否包结果集的值。\n  ● yii\\db\\Query::count(): 返回 COUNT 查询的结果。\n  ● 其它集合查询方法: 包括 yii\\db\\Query::sum(), yii\\db\\Query::average(), yii\\db\\Query::max(), yii\\db\\Query::min() 等. $q 是一个必选参数， 既可以是一个字段名称，又可以是一个 DB 表达式。\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjko005epgwifnzmwcv1"},{"layout":"post","title":"mac如何查看隐藏文件夹？苹果mac显示隐藏文件夹方法和命令介绍","date":"2017-03-19T04:11:58.000Z","_content":"很多时候，无论是Windows还是Mac OS系统一些重要的文件夹和文件都是要被隐藏起来的，以防止用户因为误操作修改或者删除而导致系统或者软件的损坏。但是很多时候我们Mac用户，也需要修改隐藏的文件，才能实现一些操作。所以这个时候我们就需要将隐藏的文件或者文件夹显示出来。\n那么Mac系统怎么显示隐藏的文件夹和文件呢？或者说Mac显示隐藏文件好文件夹的命令是什么呢？\n命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。这个时候肯定会有童鞋问：“在哪里敲命令呢？”，Launchpad——其他——终端，打开之后就可以键入命令了。\n显示：`defaults write com.apple.finder AppleShowAllFiles -bool true`\n隐藏：`defaults write com.apple.finder AppleShowAllFiles -bool false`","source":"_posts/2017/201703/20170319-1.md","raw":"layout: post\ntitle: mac如何查看隐藏文件夹？苹果mac显示隐藏文件夹方法和命令介绍\ndate: 2017-03-19 12:11:58\ntags:\n- mac\n---\n很多时候，无论是Windows还是Mac OS系统一些重要的文件夹和文件都是要被隐藏起来的，以防止用户因为误操作修改或者删除而导致系统或者软件的损坏。但是很多时候我们Mac用户，也需要修改隐藏的文件，才能实现一些操作。所以这个时候我们就需要将隐藏的文件或者文件夹显示出来。\n那么Mac系统怎么显示隐藏的文件夹和文件呢？或者说Mac显示隐藏文件好文件夹的命令是什么呢？\n命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。这个时候肯定会有童鞋问：“在哪里敲命令呢？”，Launchpad——其他——终端，打开之后就可以键入命令了。\n显示：`defaults write com.apple.finder AppleShowAllFiles -bool true`\n隐藏：`defaults write com.apple.finder AppleShowAllFiles -bool false`","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkp005gpgwi65tftg4l"},{"layout":"post","title":"7个高级技巧帮助你释放大量Mac OS X硬盘空间","date":"2017-03-19T04:12:04.000Z","_content":"硬盘空间用尽是一件很让人头疼的事情，尤其是MacBook Air等设备上的固态硬盘可用的储存空间很少。下面为大家介绍7个高级技巧来释放大量的硬盘空间，当然这些高级技巧更改了系统功能和文件，必须通过使用命令行实现，还需要使用rm或rf这样的危险命令，所以Mac OS X新手还是要谨慎尝试。\n\n1：禁用SafeSleep休眠模式——能节省出4GB-16GB空间\n\n`Screen Shot 2013-05-11 at 3.57.34 AM.jpg`\n\n下面的命令可以关闭OS X原生的休眠功能，也就是SafeSleep。这种休眠模式当Mac休眠或者没电池时会将内存中的内容储存在硬盘上的sleepimage文件上。sleepimage文件与Mac电脑的内存一样大，这意味着如果你的内存是4GB，该文件就有4GB，如果是16GB，该文件就有16GB。关闭SafeSleep可以不让系统自动创建该文件，缺点就是当Mac电脑没电池时，你不能恢复到之前的状态。不过我们可以使用OS X的自动保存功能在电池将要耗尽的时候保存自己的工作。\n\n如果想要禁用SafeSleep功能，我们需要在终端中输入下面的命令：\n\n`sudo pmset -a hibernatemode 0`\n\n复制代码\n然后定位到`/private/var/vm/`删除已经存在的sleepimage文件\n\n`cd /private/var/vm/`\n\n复制代码\n使用下面的命令删除该文件\n\n`sudo rm sleepimage`\n\n复制代码\n最后我们要防止OS X继续创建该文件，所以我们需要下面的命令生成一个无法被替换的空文件\n\n`touch sleepimage`\n`chmod 000 /private/var/vm/sleepimage`\n\n复制代码\n当然，如果你想要重新开启SafeSleep功能，只需下面的命令即可。\n\n`sudo pmset -a hibernatemode 3`\n`sudo rm /private/var/vm/sleepimage`\n\n复制代码\n\n2：移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间\n\n`Screen Shot 2013-05-11 at 3.56.52 AM.jpg`\n\n如果你不适用文字转语音功能，那么你肯定不会使用到OS X内置的嗓音文件。你可以删除这些文件重新获得硬盘空间。在终端应用中，使用下面的命令即可，首先定位到文件所在文件夹：\n\n`cd /System/Library/Speech/`\n\n复制代码\n然后执行删除命令，将所有嗓音文件删除\n\n`sudo rm -rf Voices/*`\n\n复制代码\n\n如果你执行了命令，那么你将无法使用系统的文字转语音功能。\n\n3：删除所有系统日志——可以节省出100MB-2GB硬盘空间\n\n随着你使用Mac的时间越来越长，系统日志文件也会越来越多，根据电脑的用量、错误和服务，这些文件会越来越多。这些系统日志文件是用来调试和排除故障的，如果你感觉没有用，可以使用下面的命令删除：\n\n`sudo rm -rf /private/var/log/*`\n\n复制代码\n\n系统日志文件会不断的产生，所以你可以定时执行这条命令。\n\n4：删除快速查看生成的缓存文件——可以节省出100MB-300MB硬盘空间\n\n`Screen Shot 2013-05-11 at 3.58.21 AM.jpg`\n\n快速查看功能是OS X系统内置的文件预览功能，在Finder中选择任何文件后都可以点击空格来查看文件的详情。不过快速查看功能依靠缓存功能才能更流畅，而且这些缓存文件会一直增加，通过下面的命令移除缓存：\n\n`sudo rm -rf /private/var/folders/`\n\n复制代码\n\n5：删除Emacs——可以节省出60MB+的硬盘空间\n\n如果你都不知道什么是Emacs，那么你可以放心的将其移除。Emacs是终端中的文本编辑器，如果你使用的固态硬盘空间实在太小，那么删除它就是不错的选择，况且你还可以使用vi和nano在终端中编辑文本。下面是删除Emacs的命令：\n\n`sudo rm -rf /usr/share/emacs/`\n\n复制代码\n\n6：删除临时文件——可以节省500MB-5GB硬盘空间\n\n/private/var/tmp/是存放系统缓存的文件夹，通常情况下会在系统重启时清楚，不过有时确不会。而且如果你长时间不关闭Mac，也不重启的话，缓存文件会越来越多。使用下面的命令清楚这些临时文件：\n\n`cd /private/var/tmp/`\n`rm -rf TM*`\n\n复制代码\n\n7：清除缓存文件——可以节省1GB-10GB硬盘空间\n\n缓存文件有很多种，比如网页浏览记录，应用meta数据等等。这些缓存文件的容量究竟多大跟用户使用的应用有关，也与Mac重启的频率有关。此外，很多在线音乐播放app也会产生大量的缓存文件，我们可以通过下面的命令删除这些缓存文件：\n\n`cd ~/Library/Caches/`\n`rm -rf ~/Library/Caches/*`\n\n复制代码\n\n这里介绍的7个高级方法都需要使用终端才能实现，而且有的方法有些风险，所以请大家使用时注意！","source":"_posts/2017/201703/20170319-2.md","raw":"layout: post\ntitle: 7个高级技巧帮助你释放大量Mac OS X硬盘空间\ndate: 2017-03-19 12:12:04\ntags:\n- mac\n---\n硬盘空间用尽是一件很让人头疼的事情，尤其是MacBook Air等设备上的固态硬盘可用的储存空间很少。下面为大家介绍7个高级技巧来释放大量的硬盘空间，当然这些高级技巧更改了系统功能和文件，必须通过使用命令行实现，还需要使用rm或rf这样的危险命令，所以Mac OS X新手还是要谨慎尝试。\n\n1：禁用SafeSleep休眠模式——能节省出4GB-16GB空间\n\n`Screen Shot 2013-05-11 at 3.57.34 AM.jpg`\n\n下面的命令可以关闭OS X原生的休眠功能，也就是SafeSleep。这种休眠模式当Mac休眠或者没电池时会将内存中的内容储存在硬盘上的sleepimage文件上。sleepimage文件与Mac电脑的内存一样大，这意味着如果你的内存是4GB，该文件就有4GB，如果是16GB，该文件就有16GB。关闭SafeSleep可以不让系统自动创建该文件，缺点就是当Mac电脑没电池时，你不能恢复到之前的状态。不过我们可以使用OS X的自动保存功能在电池将要耗尽的时候保存自己的工作。\n\n如果想要禁用SafeSleep功能，我们需要在终端中输入下面的命令：\n\n`sudo pmset -a hibernatemode 0`\n\n复制代码\n然后定位到`/private/var/vm/`删除已经存在的sleepimage文件\n\n`cd /private/var/vm/`\n\n复制代码\n使用下面的命令删除该文件\n\n`sudo rm sleepimage`\n\n复制代码\n最后我们要防止OS X继续创建该文件，所以我们需要下面的命令生成一个无法被替换的空文件\n\n`touch sleepimage`\n`chmod 000 /private/var/vm/sleepimage`\n\n复制代码\n当然，如果你想要重新开启SafeSleep功能，只需下面的命令即可。\n\n`sudo pmset -a hibernatemode 3`\n`sudo rm /private/var/vm/sleepimage`\n\n复制代码\n\n2：移除系统嗓音文件——可以节省出500MB-3GB+硬盘空间\n\n`Screen Shot 2013-05-11 at 3.56.52 AM.jpg`\n\n如果你不适用文字转语音功能，那么你肯定不会使用到OS X内置的嗓音文件。你可以删除这些文件重新获得硬盘空间。在终端应用中，使用下面的命令即可，首先定位到文件所在文件夹：\n\n`cd /System/Library/Speech/`\n\n复制代码\n然后执行删除命令，将所有嗓音文件删除\n\n`sudo rm -rf Voices/*`\n\n复制代码\n\n如果你执行了命令，那么你将无法使用系统的文字转语音功能。\n\n3：删除所有系统日志——可以节省出100MB-2GB硬盘空间\n\n随着你使用Mac的时间越来越长，系统日志文件也会越来越多，根据电脑的用量、错误和服务，这些文件会越来越多。这些系统日志文件是用来调试和排除故障的，如果你感觉没有用，可以使用下面的命令删除：\n\n`sudo rm -rf /private/var/log/*`\n\n复制代码\n\n系统日志文件会不断的产生，所以你可以定时执行这条命令。\n\n4：删除快速查看生成的缓存文件——可以节省出100MB-300MB硬盘空间\n\n`Screen Shot 2013-05-11 at 3.58.21 AM.jpg`\n\n快速查看功能是OS X系统内置的文件预览功能，在Finder中选择任何文件后都可以点击空格来查看文件的详情。不过快速查看功能依靠缓存功能才能更流畅，而且这些缓存文件会一直增加，通过下面的命令移除缓存：\n\n`sudo rm -rf /private/var/folders/`\n\n复制代码\n\n5：删除Emacs——可以节省出60MB+的硬盘空间\n\n如果你都不知道什么是Emacs，那么你可以放心的将其移除。Emacs是终端中的文本编辑器，如果你使用的固态硬盘空间实在太小，那么删除它就是不错的选择，况且你还可以使用vi和nano在终端中编辑文本。下面是删除Emacs的命令：\n\n`sudo rm -rf /usr/share/emacs/`\n\n复制代码\n\n6：删除临时文件——可以节省500MB-5GB硬盘空间\n\n/private/var/tmp/是存放系统缓存的文件夹，通常情况下会在系统重启时清楚，不过有时确不会。而且如果你长时间不关闭Mac，也不重启的话，缓存文件会越来越多。使用下面的命令清楚这些临时文件：\n\n`cd /private/var/tmp/`\n`rm -rf TM*`\n\n复制代码\n\n7：清除缓存文件——可以节省1GB-10GB硬盘空间\n\n缓存文件有很多种，比如网页浏览记录，应用meta数据等等。这些缓存文件的容量究竟多大跟用户使用的应用有关，也与Mac重启的频率有关。此外，很多在线音乐播放app也会产生大量的缓存文件，我们可以通过下面的命令删除这些缓存文件：\n\n`cd ~/Library/Caches/`\n`rm -rf ~/Library/Caches/*`\n\n复制代码\n\n这里介绍的7个高级方法都需要使用终端才能实现，而且有的方法有些风险，所以请大家使用时注意！","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkq005ipgwiuan0qn34"},{"layout":"post","title":"Thinkphp5中使用PHPExcel","date":"2017-04-04T06:29:16.000Z","_content":"\n## 安装\n\n* 项目所在目录：\n`uiste:tp5.0 uiste$ composer require phpexcel/phpexcel`\n\n## 简单上手\n1. 实例化对象\n`$objPHPExcel = new \\PHPExcel(); `\n\n2. 获取活动sheet，设置sheet名字\n```\n$objSheet = $objPHPExcel->getActiveSheet(); \n$objSheet ->setTitle(\"demo\");//可以给sheet设置名称为\"demo\"  \n```\n\n3. 然后就是在表格中写入数据\n```\n//数据量大的时候使用第一种方法\n$objSheet->setCellValue(\"A1\",\"姓名\")->setCellValue(\"B1\",\"分数\");  \n$objSheet->setCellValue(\"A2\",\"张三\")->setCellValue(\"B2\",\"100\");  \n//数据量小的时候使用第二种方法\n$array = array(  \n    array(),  \n    array('姓名','分数'),  \n    array('张三','60'),  \n    array('李四','61'),  \n    array('王五','62'),  \n);  \n$objSheet -> fromArray($array);//数据较大时，不建议使用此方法，建议使用setCellValue()  \n```\n\n4. 保存写入的数据\n```\n$objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');//生成一个Excel2007文件  \n\t\t$objWriter->save('/Users/uiste/www/tp5.0/public/test.xlsx');//保存文件 \n```\n\n## 在浏览器上输出Excel\n```\n$filename = 'student.xls';\n$type = 'Excel2007';\n$objPHPExcel = new \\PHPExcel();\nfor ($i=0; $i <= 1; $i++) {\n\t// 如果sheet大于0  则创建一个新的sheet\n\tif ($i>0) {  \n\t\t$objPHPExcel->createSheet();\n\t}\n\t$objPHPExcel->setActiveSheetIndex($i);//把当前创建的sheet设置为活动sheet\n\t$objSheet = $objPHPExcel->getActiveSheet();//获得当前活动Sheet\n\t$objSheet->setTitle(\"student\" . $i);\n\tif($i==0){\n\t$student = Db::name('student')->where(['sex'=>10])->select();  \n\t}else{  \n\t$student = DB::name('student')->where('sex != 10')->select();  \n\t}\n\t$objSheet->setCellValue('A1','序号')\n\t\t\t ->setCellValue('B1','姓名')\n\t\t\t ->setCellValue('C1','年龄')\n\t\t\t ->setCellValue('D1','性别')\n\t\t\t ->setCellValue('E1','创建时间')\n\t\t\t ->setCellValue('F1','更新时间');  \n\t$j = 2; // 从第二行开始写入\n\tforeach ($student as $key => $value) {\n\t\t$objSheet->setCellValue('A'.$j,$value['id'])\n\t\t\t\t ->setCellValue('B'.$j,$value['name'])\n\t\t\t\t ->setCellValue('C'.$j,$value['age'])\n\t\t\t\t ->setCellValue('D'.$j,$value['sex'])  \n\t\t\t\t ->setCellValue('E'.$j,$value['created_at'])\n\t\t\t\t ->setCellValue('F'.$j,$value['updated_at']);  \n\t\t$j++;\n\t}  \n}\n$objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel,'Excel5');//生成excel文件\n//$objWriter->save($dir.\"/export_1.xls\");//保存文件\nif($type==\"Excel5\"){\n\theader('Content-Type: application/vnd.ms-excel');//告诉浏览器将要输出excel03文件\n}else{\n\theader('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');//告诉浏览器数据excel07文件\n}\nheader('Content-Disposition: attachment;filename=\"'.$filename.'\"');//告诉浏览器将输出文件的名称\nheader('Cache-Control: max-age=0');//禁止缓存\n$objWriter->save(\"php://output\");\n```\n\n## 读取指定Excel文件中的数据\n```\nheader(\"Content-Type:text/html;charset=utf-8\");\n$filename=ROOT_PATH . 'public' . DS . \"test.xlsx\"; // 读取文件\n$sheetName=array(\"demo\"); //只加载指定的sheet\n$rowStart = 1; //指定开始读取的行数\n\n$fileType=\\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用\n$objReader=\\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象\n\n$objReader->setLoadSheetsOnly($sheetName);//只加载指定的sheet\n$objPHPExcel=$objReader->load($filename);//加载文件\n/* 数据量小的时候使用 */\n/**$sheetCount=$objPHPExcel->getSheetCount();//获取excel文件里有多少个sheet\nfor($i=0;$i<$sheetCount;$i++){\n\t$data=$objPHPExcel->getSheet($i)->toArray();//读取每个sheet里的数据 全部放入到数组中\n\tprint_r($data);\n}**/\n\n/* 数据量大的时候使用 */\nforeach($objPHPExcel->getWorksheetIterator() as $sheet){//循环取sheet\n\t\tforeach($sheet->getRowIterator() as $row){//逐行处理\n\t\t\t\tif($row->getRowIndex()<$rowStart){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tforeach($row->getCellIterator() as $cell){//逐列读取\n\t\t\t\t\t\t$data=$cell->getValue();//获取单元格数据\n\t\t\t\t\t\techo $data.\" \";\n\t\t\t\t}\n\t\t\t\techo '<br/>';\n\t\t}\n\t\techo '<br/>';\n}\nexit;\n```\n\n## 小案例-POST发送读取文件数据发送到服务器\n\n```\npublic function operate()\n{\n\t$filename=ROOT_PATH . 'public' . DS . \"test.xlsx\"; // 读取文件\n\t$sheetName=array('工作表2'); //只加载指定的sheet\n\t$rowStart = 1; //指定开始读取的行数\n\t$url = 'http://www.test.com/history/study4/MVC_1/index.php?c=products&a=add';\n\t$receive = ['proname','proguige','proprice','proamount','proimages','proweb']; // 定义接收方的数据下标\n\t// 第一步读取文件\n\tif (!$data = $this->_fileRead($filename, $sheetName, $rowStart)) {\n\t\techo '无法读取文件中的数据！！！';\n\t}\n\t// dump($data);die;\n\t// 第二步发送数据请求\n\tforeach ($data as $sheet) { // 工作表\n\t\tforeach ($sheet as $key1 => $rows) { // 工作表行\n\t\t\tif (count($rows) != count($receive)) {\n\t\t\t\techo '表中数据列数与要发送的字段数不一致请核实！！！';die;\n\t\t\t}\n\t\t\t$row = array();\n\t\t\tforeach ($rows as $key => $cell) { //单元格\n\t\t\t\t$row[$receive[$key]] = $cell;\n\t\t\t}\n\t\t\tif (!empty($row)) {\n\t\t\t\t// $url = \"http://localhost/web_services.php\";\n\t\t\t\t// $post_data = array (\"username\" => \"bob\",\"key\" => \"12345\");\n\t\t\t\t$post_data = $row;\n\t\t\t\t$ch = curl_init();\n\t\t\t\tcurl_setopt($ch, CURLOPT_URL, $url);\n\t\t\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);// post数据\n\t\t\t\tcurl_setopt($ch, CURLOPT_POST, 1);// post的变量\n\t\t\t\tcurl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n\t\t\t\t$output = curl_exec($ch);\n\t\t\t\tcurl_close($ch);\n\n\t\t\t\t//打印获得的数据\n\t\t\t\tif ($output) {\n\t\t\t\t\techo '第 ' . $key1+1 . ' 行录入成功！！！' . '<br/>';\n\t\t\t\t}else{\n\t\t\t\t\techo '第 ' . $key1+1 . ' 行录入失败！！！' . '<br/>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\techo '录入完成 ， 哈哈哈<br>';\n}\n\npublic function _fileRead($filename, $sheetName = ['sheet1'], $rowStart = 1)\n{\n\theader(\"Content-Type:text/html;charset=utf-8\");\n\n\t$fileType=\\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用\n\t$objReader=\\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象\n\n\t$objReader->setLoadSheetsOnly($sheetName);//只加载指定的sheet\n\t$objPHPExcel=$objReader->load($filename);//加载文件\n\t/* 数据量小的时候使用 */\n\t$sheetCount=$objPHPExcel->getSheetCount();//获取excel文件里有多少个sheet\n\t$data = array();\n\tfor($i=0;$i<$sheetCount;$i++){\n\t\t$data[$sheetName[$i]]=$objPHPExcel->getSheet($i)->toArray();//读取每个sheet里的数据 全部放入到数组中\n\t}\n\treturn $data;\n\t\n\t/* 数据量大的时候使用 */\n\t// $data = array();\n\t// foreach($objPHPExcel->getWorksheetIterator() as $sheet){//循环取sheet\n\t// \t\tforeach($sheet->getRowIterator() as $row){//逐行处理\n\t// \t\t\t\tif($row->getRowIndex()<$rowStart){\n\t// \t\t\t\t\tcontinue;\n\t// \t\t\t\t}\n\t// \t\t\t\tforeach($row->getCellIterator() as $cell){//逐列读取\n\t// \t\t\t\t\t\t$data=$cell->getValue();//获取单元格数据\n\t// \t\t\t\t\t\techo $data.\" \";\n\t// \t\t\t\t}\n\t// \t\t\t\techo '<br/>';\n\t// \t\t}\n\t// \t\techo '<br/>';\n\t// }\n\texit;\n}\n```\n\n>相关文章\n[PHPExcel的使用](http://www.cnblogs.com/sweet521/p/5868672.html)","source":"_posts/2017/201704/20170404-1.md","raw":"layout: post\ntitle: Thinkphp5中使用PHPExcel\ndate: 2017-04-04 14:29:16\ntags:\n- PHPExcel\n---\n\n## 安装\n\n* 项目所在目录：\n`uiste:tp5.0 uiste$ composer require phpexcel/phpexcel`\n\n## 简单上手\n1. 实例化对象\n`$objPHPExcel = new \\PHPExcel(); `\n\n2. 获取活动sheet，设置sheet名字\n```\n$objSheet = $objPHPExcel->getActiveSheet(); \n$objSheet ->setTitle(\"demo\");//可以给sheet设置名称为\"demo\"  \n```\n\n3. 然后就是在表格中写入数据\n```\n//数据量大的时候使用第一种方法\n$objSheet->setCellValue(\"A1\",\"姓名\")->setCellValue(\"B1\",\"分数\");  \n$objSheet->setCellValue(\"A2\",\"张三\")->setCellValue(\"B2\",\"100\");  \n//数据量小的时候使用第二种方法\n$array = array(  \n    array(),  \n    array('姓名','分数'),  \n    array('张三','60'),  \n    array('李四','61'),  \n    array('王五','62'),  \n);  \n$objSheet -> fromArray($array);//数据较大时，不建议使用此方法，建议使用setCellValue()  \n```\n\n4. 保存写入的数据\n```\n$objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');//生成一个Excel2007文件  \n\t\t$objWriter->save('/Users/uiste/www/tp5.0/public/test.xlsx');//保存文件 \n```\n\n## 在浏览器上输出Excel\n```\n$filename = 'student.xls';\n$type = 'Excel2007';\n$objPHPExcel = new \\PHPExcel();\nfor ($i=0; $i <= 1; $i++) {\n\t// 如果sheet大于0  则创建一个新的sheet\n\tif ($i>0) {  \n\t\t$objPHPExcel->createSheet();\n\t}\n\t$objPHPExcel->setActiveSheetIndex($i);//把当前创建的sheet设置为活动sheet\n\t$objSheet = $objPHPExcel->getActiveSheet();//获得当前活动Sheet\n\t$objSheet->setTitle(\"student\" . $i);\n\tif($i==0){\n\t$student = Db::name('student')->where(['sex'=>10])->select();  \n\t}else{  \n\t$student = DB::name('student')->where('sex != 10')->select();  \n\t}\n\t$objSheet->setCellValue('A1','序号')\n\t\t\t ->setCellValue('B1','姓名')\n\t\t\t ->setCellValue('C1','年龄')\n\t\t\t ->setCellValue('D1','性别')\n\t\t\t ->setCellValue('E1','创建时间')\n\t\t\t ->setCellValue('F1','更新时间');  \n\t$j = 2; // 从第二行开始写入\n\tforeach ($student as $key => $value) {\n\t\t$objSheet->setCellValue('A'.$j,$value['id'])\n\t\t\t\t ->setCellValue('B'.$j,$value['name'])\n\t\t\t\t ->setCellValue('C'.$j,$value['age'])\n\t\t\t\t ->setCellValue('D'.$j,$value['sex'])  \n\t\t\t\t ->setCellValue('E'.$j,$value['created_at'])\n\t\t\t\t ->setCellValue('F'.$j,$value['updated_at']);  \n\t\t$j++;\n\t}  \n}\n$objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel,'Excel5');//生成excel文件\n//$objWriter->save($dir.\"/export_1.xls\");//保存文件\nif($type==\"Excel5\"){\n\theader('Content-Type: application/vnd.ms-excel');//告诉浏览器将要输出excel03文件\n}else{\n\theader('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');//告诉浏览器数据excel07文件\n}\nheader('Content-Disposition: attachment;filename=\"'.$filename.'\"');//告诉浏览器将输出文件的名称\nheader('Cache-Control: max-age=0');//禁止缓存\n$objWriter->save(\"php://output\");\n```\n\n## 读取指定Excel文件中的数据\n```\nheader(\"Content-Type:text/html;charset=utf-8\");\n$filename=ROOT_PATH . 'public' . DS . \"test.xlsx\"; // 读取文件\n$sheetName=array(\"demo\"); //只加载指定的sheet\n$rowStart = 1; //指定开始读取的行数\n\n$fileType=\\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用\n$objReader=\\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象\n\n$objReader->setLoadSheetsOnly($sheetName);//只加载指定的sheet\n$objPHPExcel=$objReader->load($filename);//加载文件\n/* 数据量小的时候使用 */\n/**$sheetCount=$objPHPExcel->getSheetCount();//获取excel文件里有多少个sheet\nfor($i=0;$i<$sheetCount;$i++){\n\t$data=$objPHPExcel->getSheet($i)->toArray();//读取每个sheet里的数据 全部放入到数组中\n\tprint_r($data);\n}**/\n\n/* 数据量大的时候使用 */\nforeach($objPHPExcel->getWorksheetIterator() as $sheet){//循环取sheet\n\t\tforeach($sheet->getRowIterator() as $row){//逐行处理\n\t\t\t\tif($row->getRowIndex()<$rowStart){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tforeach($row->getCellIterator() as $cell){//逐列读取\n\t\t\t\t\t\t$data=$cell->getValue();//获取单元格数据\n\t\t\t\t\t\techo $data.\" \";\n\t\t\t\t}\n\t\t\t\techo '<br/>';\n\t\t}\n\t\techo '<br/>';\n}\nexit;\n```\n\n## 小案例-POST发送读取文件数据发送到服务器\n\n```\npublic function operate()\n{\n\t$filename=ROOT_PATH . 'public' . DS . \"test.xlsx\"; // 读取文件\n\t$sheetName=array('工作表2'); //只加载指定的sheet\n\t$rowStart = 1; //指定开始读取的行数\n\t$url = 'http://www.test.com/history/study4/MVC_1/index.php?c=products&a=add';\n\t$receive = ['proname','proguige','proprice','proamount','proimages','proweb']; // 定义接收方的数据下标\n\t// 第一步读取文件\n\tif (!$data = $this->_fileRead($filename, $sheetName, $rowStart)) {\n\t\techo '无法读取文件中的数据！！！';\n\t}\n\t// dump($data);die;\n\t// 第二步发送数据请求\n\tforeach ($data as $sheet) { // 工作表\n\t\tforeach ($sheet as $key1 => $rows) { // 工作表行\n\t\t\tif (count($rows) != count($receive)) {\n\t\t\t\techo '表中数据列数与要发送的字段数不一致请核实！！！';die;\n\t\t\t}\n\t\t\t$row = array();\n\t\t\tforeach ($rows as $key => $cell) { //单元格\n\t\t\t\t$row[$receive[$key]] = $cell;\n\t\t\t}\n\t\t\tif (!empty($row)) {\n\t\t\t\t// $url = \"http://localhost/web_services.php\";\n\t\t\t\t// $post_data = array (\"username\" => \"bob\",\"key\" => \"12345\");\n\t\t\t\t$post_data = $row;\n\t\t\t\t$ch = curl_init();\n\t\t\t\tcurl_setopt($ch, CURLOPT_URL, $url);\n\t\t\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);// post数据\n\t\t\t\tcurl_setopt($ch, CURLOPT_POST, 1);// post的变量\n\t\t\t\tcurl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n\t\t\t\t$output = curl_exec($ch);\n\t\t\t\tcurl_close($ch);\n\n\t\t\t\t//打印获得的数据\n\t\t\t\tif ($output) {\n\t\t\t\t\techo '第 ' . $key1+1 . ' 行录入成功！！！' . '<br/>';\n\t\t\t\t}else{\n\t\t\t\t\techo '第 ' . $key1+1 . ' 行录入失败！！！' . '<br/>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\techo '录入完成 ， 哈哈哈<br>';\n}\n\npublic function _fileRead($filename, $sheetName = ['sheet1'], $rowStart = 1)\n{\n\theader(\"Content-Type:text/html;charset=utf-8\");\n\n\t$fileType=\\PHPExcel_IOFactory::identify($filename);//自动获取文件的类型提供给phpexcel用\n\t$objReader=\\PHPExcel_IOFactory::createReader($fileType);//获取文件读取操作对象\n\n\t$objReader->setLoadSheetsOnly($sheetName);//只加载指定的sheet\n\t$objPHPExcel=$objReader->load($filename);//加载文件\n\t/* 数据量小的时候使用 */\n\t$sheetCount=$objPHPExcel->getSheetCount();//获取excel文件里有多少个sheet\n\t$data = array();\n\tfor($i=0;$i<$sheetCount;$i++){\n\t\t$data[$sheetName[$i]]=$objPHPExcel->getSheet($i)->toArray();//读取每个sheet里的数据 全部放入到数组中\n\t}\n\treturn $data;\n\t\n\t/* 数据量大的时候使用 */\n\t// $data = array();\n\t// foreach($objPHPExcel->getWorksheetIterator() as $sheet){//循环取sheet\n\t// \t\tforeach($sheet->getRowIterator() as $row){//逐行处理\n\t// \t\t\t\tif($row->getRowIndex()<$rowStart){\n\t// \t\t\t\t\tcontinue;\n\t// \t\t\t\t}\n\t// \t\t\t\tforeach($row->getCellIterator() as $cell){//逐列读取\n\t// \t\t\t\t\t\t$data=$cell->getValue();//获取单元格数据\n\t// \t\t\t\t\t\techo $data.\" \";\n\t// \t\t\t\t}\n\t// \t\t\t\techo '<br/>';\n\t// \t\t}\n\t// \t\techo '<br/>';\n\t// }\n\texit;\n}\n```\n\n>相关文章\n[PHPExcel的使用](http://www.cnblogs.com/sweet521/p/5868672.html)","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjks005kpgwidt39b5x3"},{"layout":"post","title":"绊脚石","date":"2017-04-09T16:22:02.000Z","_content":"今天发布了这样一条朋友圈：\n\n>有时候，一些不是特别良好的状态产生时，都会有一种体验特别不舒服的忧虑感。大多数这种情况的产生最终还是会产生正面的结果。因为在敢于承担的过程，在问题解决以后会觉得某些地方有些提升。所以今天的忧虑都是靠这个说服自己。\n\n![基本上是这样一个情况  ](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%9F%BA%E6%9C%AC%E4%B8%8A%E6%98%AF%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E6%83%85%E5%86%B5.png)\n这段话引起了朋友进一步追问的兴趣，我凯凯而回，说只是装X的东西。自己又想表达的一个观点是，老罗说他创业五年很多失败的经历是成长过程宝贵的财富。自己有意去挖掘一些这样的失败案例。到不为自己所为的成功，但却有成长的必要。\n\n想到这里，突然想到，学生时代看过的一些求职面试宝典，说面试官可能会问你之前的工作生活中，遇到的最大的空难是什么，你是如何解决的。虽然，以后可能找工作的次数不会太多。但好像此刻对这个问题，有了比较豁然的想法：又要重复那段话了。战胜的最大困难，就是心理斗争的过程，多数的时候由于不好的状态产生时，这种心理上的阴影是最大困难的产生，我有及其良好的态度能说服自己承担下来，战胜它。最后会凯凯而笑，自己又成长了。\n\n这样的素材，希望能够不断的积累，可能有这些，会让自己的人生道路变得充实一些吧。\n\n说了好多也都在总结一些空话。素材只做点录：渠道产品逻辑调整，解决终极问题，虽有风险顾虑，却有勇气坚持自己的观点。\n","source":"_posts/2017/201704/20170410-1.md","raw":"layout: post\ntitle: 绊脚石\ndate: 2017-04-10 00:22:02\ntags:\n---\n今天发布了这样一条朋友圈：\n\n>有时候，一些不是特别良好的状态产生时，都会有一种体验特别不舒服的忧虑感。大多数这种情况的产生最终还是会产生正面的结果。因为在敢于承担的过程，在问题解决以后会觉得某些地方有些提升。所以今天的忧虑都是靠这个说服自己。\n\n![基本上是这样一个情况  ](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%9F%BA%E6%9C%AC%E4%B8%8A%E6%98%AF%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E6%83%85%E5%86%B5.png)\n这段话引起了朋友进一步追问的兴趣，我凯凯而回，说只是装X的东西。自己又想表达的一个观点是，老罗说他创业五年很多失败的经历是成长过程宝贵的财富。自己有意去挖掘一些这样的失败案例。到不为自己所为的成功，但却有成长的必要。\n\n想到这里，突然想到，学生时代看过的一些求职面试宝典，说面试官可能会问你之前的工作生活中，遇到的最大的空难是什么，你是如何解决的。虽然，以后可能找工作的次数不会太多。但好像此刻对这个问题，有了比较豁然的想法：又要重复那段话了。战胜的最大困难，就是心理斗争的过程，多数的时候由于不好的状态产生时，这种心理上的阴影是最大困难的产生，我有及其良好的态度能说服自己承担下来，战胜它。最后会凯凯而笑，自己又成长了。\n\n这样的素材，希望能够不断的积累，可能有这些，会让自己的人生道路变得充实一些吧。\n\n说了好多也都在总结一些空话。素材只做点录：渠道产品逻辑调整，解决终极问题，虽有风险顾虑，却有勇气坚持自己的观点。\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjks005lpgwi8o7raapd"},{"layout":"post","title":"gitbook安装与使用","date":"2017-07-18T16:02:05.000Z","_content":"## gitbook安装\n\n1. 安装npm \n从网站 https://nodejs.org/#download 下载node.js源代码（点击绿色的INSTALL），\n解压\n./configure\nmake\nmake install \n成功执行后，npm就被安装好了。\n\n\n2. gitbook 安装\n`npm install -g gitbook-cli`\n`gitbook -V`\n查看gitbook是否安装成功。\n\n\n## gitbook使用\n\n1. 根据目录生成图书结构 \n\n\n1.1 README.md 与 SUMMARY编写\nREADME.md\n这个文件相当于一本Gitbook的简介。\n```\n$ mkdir test_gitbook\n$ touch README.md\n```\n\nSUMMARY.md\n这个文件是一本书的目录结构，使用Markdown语法，\n如我们这本书的SUMMARY.md：\n```\n$ touch SUMMARY.md\n$ vim SUMMARY.md\n```\n\n输入\n\n```\n* [简介](README.md)\n* [第一章](chapter1/README.md)\n - [第一节](chapter1/section1.md)\n - [第二节](chapter1/section2.md)\n* [第二章](chapter2/README.md)\n - [第一节](chapter2/section1.md)\n - [第二节](chapter2/section2.md)\n* [结束](end/README.md)\n```\n\n1.2 生成图书结构\n当这个目录文件创建好之后，我们可以使用Gitbook\n的命令行工具将这个目录结构生成相应的目录及文件：\n$ gitbook init\n$ tree . #查看建立的目录和文件\n.\n├── chapter1\n│   ├── README.md\n│   ├── section1.md\n│   └── section2.md\n├── chapter2\n│   ├── README.md\n│   ├── section1.md\n│   └── section2.md\n├── end\n│   └── README.md\n├── README.md\n└── SUMMARY.md\n\n\n我们可以看到，gitbook给我们生成了与SUMMARY.md所\n对应的目录及文件。\n\n\n每个目录中，都有一个README.md文件，相当于一章的说明。\n\n\n\n\n2. 生成图书\n\n\n2.1 输出为静态网站\n你有两种方式输出一个静态网站：\n2.1.1 本地预览时自动生成\n当你在自己的电脑上编辑好图书之后，你可以使用Gitbook\n的命令行进行本地预览：\n\n\n`$ gitbook serve`\n\n\n然后浏览器中输入 http://localhost:4000 就可以预览生\n成的以网页形式组织的书籍。\n这里你会发现，你在你的图书项目的目录中多了一个名为\n_book的文件目录，而这个目录中的文件，即是生成的静态\n网站内容。\n使用build参数生成到指定目录\n与直接预览生成的静态网站文件不一样的是，使用这个命令，\n你可以将内容输入到你所想要的目录中去：\n```\n$ mkdir /tmp/gitbook\n$ gitbook build --output=/tmp/gitbook\n```\n\n2.2 输出PDF\n输入为PDF文件，需要先使用NPM安装上gitbook pdf：\n`$ sudo npm install gitbook-pdf -g`\n我在执行上面这条命令的时候出现了下面的错误：\n```\n***************************************************\nDownloading http://cdn.bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-i686.tar.bz2\nSaving to /usr/local/lib/node_modules/gitbook-pdf/node_modules/phantomjs/phantomjs/phantomjs-1.9.7-linux-i686.tar.bz2\nError: connect ETIMEDOUT\n    at exports._errnoException (util.js:746:11)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1010:19)\nnpm ERR! Linux 3.2.0-4-686-pae\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\" \"gitbook-pdf\" \"-g\"\nnpm ERR! node v0.12.7\nnpm ERR! npm  v2.11.3\nnpm ERR! code ELIFECYCLE\n\n\nnpm ERR! phantomjs@1.9.7-5 install: `node install.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the phantomjs@1.9.7-5 install script 'node install.js'.\nnpm ERR! This is most likely a problem with the phantomjs package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node install.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls phantomjs\nnpm ERR! There is likely additional logging output above.\n\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/wangxq/repository/phantomjs/npm-debug.log\n\n\n***************************************************\n```\n\n由错误报告内容的第一行可以知道，发生错误的原因是下载\nphantomjs发生了错误，因此我们需要手动下载和安装。\n\n\n解决方法：[1]\n```\n$ git clone git://github.com/ariya/phantomjs.git\n$ sudo apt-get install build-essential g++ flex bison gperf ruby perl \\\n  libsqlite3-dev libfontconfig1-dev libicu-dev libfreetype6 libssl-dev \\\n  libpng-dev libjpeg-dev python libx11-dev libxext-dev       #安装编译需要的工具和依赖\n$ cd phantomjs\n$ git checkout 1.9.7  #注意：这里的1.9.7是phantom的版本号，可以由错误报告的第一行找出 \n$ ./build.sh --jobs 4\n$ sudo cp bin/phantomjs /bin/\n$ sudo npm install gitbook-pdf -g  #重新进行安装\n```\n\n然后，使用下面的命令，要PDF文件，首先安装依赖库：\n\n```\n$ sudo apt-get install calibre  \n$ gitbook -v 2.1.0 pdf\n```\n\n发生错误：\n```\n*****************************************************\ninfo: start conversion to pdf ....ERROR\n\n\nError: Command failed: /bin/sh -c ebook-convert /tmp/tmp-29384ctltwbk/SUMMARY.html /tmp/tmp-29384ctltwbk/index.pdf --title=\"\" --comments=\"这本书是gitbook的一个例子\" --language=\"en\" --book-producer=\"GitBook\" --publisher=\"GitBook\" --chapter=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter ')]\" --chapter-mark=\"pagebreak\" --page-breaks-before=\"/\" --level1-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-1 ')]\" --level2-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-2 ')]\" --level3-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-3 ')]\" --no-chapters-in-toc --max-levels=\"1\" --breadth-first --margin-left=\"62\" --margin-right=\"62\" --margin-top=\"56\" --margin-bottom=\"56\" --pdf-default-font-size=\"12\" --pdf-mono-font-size=\"12\" --paper-size=\"a4\" --pdf-header-template=\"<p class='header'><span></span></p>\" --pdf-footer-template=\"<p class='footer'><span>_SECTION_</span> <span style='float:right;'>_PAGENUM_</span></p>\"\nUsage: ebook-convert input_file output_file [options]\n\n\nConvert an ebook from one format to another.\n\n\ninput_file is the input and output_file is the output. Both must be specified as the first two arguments to the command.\n\n\nThe output ebook format is guessed from the file extension of output_file. output_file can also be of the special format .EXT where EXT is the output file extension. In this case, the name of the output file is derived the name of the input file. Note that the filenames must not start with a hyphen. Finally, if output_file has no extension, then it is treated as a directory and an \"open ebook\" (OEB) consisting of HTML files is written to that directory. These files are the files that would normally have been passed to the output plugin.\n\n\nAfter specifying the input and output file you can customize the conversion by specifying various options. The available options depend on the input and output file types. To get help on them specify the input and output file and then use the -h option.\n\n\nFor full documentation of the conversion system see\nhttp://manual.calibre-ebook.com/conversion.html\n\n\nWhenever you pass arguments to ebook-convert that have spaces in them, enclose the arguments in quotation marks.\n\n\nebook-convert: error: no such option: --pdf-default-font-size\n\n\n*****************************************************\n```\n\n解决方法[2]\n```\n$ sudo -v && wget -nv -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py | sudo python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main()\"\n\n\n$ gitbook -v 2.1.0 pdf .  # 重新执行命令生成pdf，目标文件为book.pdf\n\n```\n\n>`https://github.com/zhangjikai/gitbook-use/`","source":"_posts/2017/201707/20170719-1.md","raw":"layout: post\ntitle: gitbook安装与使用\ndate: 2017-07-19 00:02:05\ntags:\n---\n## gitbook安装\n\n1. 安装npm \n从网站 https://nodejs.org/#download 下载node.js源代码（点击绿色的INSTALL），\n解压\n./configure\nmake\nmake install \n成功执行后，npm就被安装好了。\n\n\n2. gitbook 安装\n`npm install -g gitbook-cli`\n`gitbook -V`\n查看gitbook是否安装成功。\n\n\n## gitbook使用\n\n1. 根据目录生成图书结构 \n\n\n1.1 README.md 与 SUMMARY编写\nREADME.md\n这个文件相当于一本Gitbook的简介。\n```\n$ mkdir test_gitbook\n$ touch README.md\n```\n\nSUMMARY.md\n这个文件是一本书的目录结构，使用Markdown语法，\n如我们这本书的SUMMARY.md：\n```\n$ touch SUMMARY.md\n$ vim SUMMARY.md\n```\n\n输入\n\n```\n* [简介](README.md)\n* [第一章](chapter1/README.md)\n - [第一节](chapter1/section1.md)\n - [第二节](chapter1/section2.md)\n* [第二章](chapter2/README.md)\n - [第一节](chapter2/section1.md)\n - [第二节](chapter2/section2.md)\n* [结束](end/README.md)\n```\n\n1.2 生成图书结构\n当这个目录文件创建好之后，我们可以使用Gitbook\n的命令行工具将这个目录结构生成相应的目录及文件：\n$ gitbook init\n$ tree . #查看建立的目录和文件\n.\n├── chapter1\n│   ├── README.md\n│   ├── section1.md\n│   └── section2.md\n├── chapter2\n│   ├── README.md\n│   ├── section1.md\n│   └── section2.md\n├── end\n│   └── README.md\n├── README.md\n└── SUMMARY.md\n\n\n我们可以看到，gitbook给我们生成了与SUMMARY.md所\n对应的目录及文件。\n\n\n每个目录中，都有一个README.md文件，相当于一章的说明。\n\n\n\n\n2. 生成图书\n\n\n2.1 输出为静态网站\n你有两种方式输出一个静态网站：\n2.1.1 本地预览时自动生成\n当你在自己的电脑上编辑好图书之后，你可以使用Gitbook\n的命令行进行本地预览：\n\n\n`$ gitbook serve`\n\n\n然后浏览器中输入 http://localhost:4000 就可以预览生\n成的以网页形式组织的书籍。\n这里你会发现，你在你的图书项目的目录中多了一个名为\n_book的文件目录，而这个目录中的文件，即是生成的静态\n网站内容。\n使用build参数生成到指定目录\n与直接预览生成的静态网站文件不一样的是，使用这个命令，\n你可以将内容输入到你所想要的目录中去：\n```\n$ mkdir /tmp/gitbook\n$ gitbook build --output=/tmp/gitbook\n```\n\n2.2 输出PDF\n输入为PDF文件，需要先使用NPM安装上gitbook pdf：\n`$ sudo npm install gitbook-pdf -g`\n我在执行上面这条命令的时候出现了下面的错误：\n```\n***************************************************\nDownloading http://cdn.bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-i686.tar.bz2\nSaving to /usr/local/lib/node_modules/gitbook-pdf/node_modules/phantomjs/phantomjs/phantomjs-1.9.7-linux-i686.tar.bz2\nError: connect ETIMEDOUT\n    at exports._errnoException (util.js:746:11)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1010:19)\nnpm ERR! Linux 3.2.0-4-686-pae\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\" \"gitbook-pdf\" \"-g\"\nnpm ERR! node v0.12.7\nnpm ERR! npm  v2.11.3\nnpm ERR! code ELIFECYCLE\n\n\nnpm ERR! phantomjs@1.9.7-5 install: `node install.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the phantomjs@1.9.7-5 install script 'node install.js'.\nnpm ERR! This is most likely a problem with the phantomjs package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node install.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls phantomjs\nnpm ERR! There is likely additional logging output above.\n\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/wangxq/repository/phantomjs/npm-debug.log\n\n\n***************************************************\n```\n\n由错误报告内容的第一行可以知道，发生错误的原因是下载\nphantomjs发生了错误，因此我们需要手动下载和安装。\n\n\n解决方法：[1]\n```\n$ git clone git://github.com/ariya/phantomjs.git\n$ sudo apt-get install build-essential g++ flex bison gperf ruby perl \\\n  libsqlite3-dev libfontconfig1-dev libicu-dev libfreetype6 libssl-dev \\\n  libpng-dev libjpeg-dev python libx11-dev libxext-dev       #安装编译需要的工具和依赖\n$ cd phantomjs\n$ git checkout 1.9.7  #注意：这里的1.9.7是phantom的版本号，可以由错误报告的第一行找出 \n$ ./build.sh --jobs 4\n$ sudo cp bin/phantomjs /bin/\n$ sudo npm install gitbook-pdf -g  #重新进行安装\n```\n\n然后，使用下面的命令，要PDF文件，首先安装依赖库：\n\n```\n$ sudo apt-get install calibre  \n$ gitbook -v 2.1.0 pdf\n```\n\n发生错误：\n```\n*****************************************************\ninfo: start conversion to pdf ....ERROR\n\n\nError: Command failed: /bin/sh -c ebook-convert /tmp/tmp-29384ctltwbk/SUMMARY.html /tmp/tmp-29384ctltwbk/index.pdf --title=\"\" --comments=\"这本书是gitbook的一个例子\" --language=\"en\" --book-producer=\"GitBook\" --publisher=\"GitBook\" --chapter=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter ')]\" --chapter-mark=\"pagebreak\" --page-breaks-before=\"/\" --level1-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-1 ')]\" --level2-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-2 ')]\" --level3-toc=\"descendant-or-self::*[contains(concat(' ', normalize-space(@class), ' '), ' book-chapter-3 ')]\" --no-chapters-in-toc --max-levels=\"1\" --breadth-first --margin-left=\"62\" --margin-right=\"62\" --margin-top=\"56\" --margin-bottom=\"56\" --pdf-default-font-size=\"12\" --pdf-mono-font-size=\"12\" --paper-size=\"a4\" --pdf-header-template=\"<p class='header'><span></span></p>\" --pdf-footer-template=\"<p class='footer'><span>_SECTION_</span> <span style='float:right;'>_PAGENUM_</span></p>\"\nUsage: ebook-convert input_file output_file [options]\n\n\nConvert an ebook from one format to another.\n\n\ninput_file is the input and output_file is the output. Both must be specified as the first two arguments to the command.\n\n\nThe output ebook format is guessed from the file extension of output_file. output_file can also be of the special format .EXT where EXT is the output file extension. In this case, the name of the output file is derived the name of the input file. Note that the filenames must not start with a hyphen. Finally, if output_file has no extension, then it is treated as a directory and an \"open ebook\" (OEB) consisting of HTML files is written to that directory. These files are the files that would normally have been passed to the output plugin.\n\n\nAfter specifying the input and output file you can customize the conversion by specifying various options. The available options depend on the input and output file types. To get help on them specify the input and output file and then use the -h option.\n\n\nFor full documentation of the conversion system see\nhttp://manual.calibre-ebook.com/conversion.html\n\n\nWhenever you pass arguments to ebook-convert that have spaces in them, enclose the arguments in quotation marks.\n\n\nebook-convert: error: no such option: --pdf-default-font-size\n\n\n*****************************************************\n```\n\n解决方法[2]\n```\n$ sudo -v && wget -nv -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py | sudo python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main()\"\n\n\n$ gitbook -v 2.1.0 pdf .  # 重新执行命令生成pdf，目标文件为book.pdf\n\n```\n\n>`https://github.com/zhangjikai/gitbook-use/`","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjku005npgwiw3n68e8u"},{"layout":"post","title":"关于file_get_contents(\"php://input\")","date":"2017-07-21T15:13:13.000Z","_content":"\n>“php://input allows you to read raw POST data. It is a less memory intensive alternative to $HTTP_RAW_POST_DATA and does not need any special php.ini directives. php://input is not available with enctype=”multipart/form-data”. \n\n翻译过来，是这样： \n“php://input可以读取没有处理过的POST数据。相较于$HTTP_RAW_POST_DATA而言，它给内存带来的压力较小，并且不需要特殊的php.ini设置。php://input不能用于enctype=multipart/form-data” \n找了一通资料，原来是这么回事：\n\n1，Coentent-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下，\n\nPHP才会将http请求数据包中相应的数据填入全局变量$_POST \n\n2，PHP不能识别的Content-Type类型的时候，会将http请求包中相应的数据填入变量$HTTP_RAW_POST_DATA \n\n3, 只有Coentent-Type不为multipart/form-data的时候，PHP不会将http请求数据包中的相应数据填入php://input，\n\n否则其它情况都会。填入的长度，由Coentent-Length指定。 \n\n4，只有Content-Type为application/x-www-data-urlencoded时，php://input数据才跟$_POST数据相一致。 \n\n5，php://input数据总是跟$HTTP_RAW_POST_DATA相同，但是php://input比$HTTP_RAW_POST_DATA更凑效，\n\n且不需要特殊设置php.ini \n\n6，PHP会将PATH字段的query_path部分，填入全局变量$_GET。通常情况下，GET方法提交的http请求，body为空。\n\n\n从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。\n\n看一个简单的例子。\n\n客户端就是一个表单，非常简单。\n\n```html\n<form action=\"\" method=\"POST\">\n\n    name: <input type=\"text\" name=\"name\" value=\"tom\" /><br />\n\n    age:<input type=\"text\" name=\"age\" value=\"22\" /><br />\n\n    <input type=\"submit\" value=\"Submit\" />\n\n</form>\n```\n\n将表单提交到服务端，服务端使用file_get_contents获取php://input内容\n\n```php\n$content = file_get_contents(\"php://input\");\n\necho $content; //输出name=tom&amp;age=22\n```\n\n官网关于php://input的说明中，反复有提到$HTTP_RAW_POST_DATA这个变量，这个变量其实和file_get_contents(php://input)的内容是一样的。如果要开启这个变量，需要修改配置文件，找到always_populate_raw_post_data这个选项，设置为On，然后重新启动web服务器，就可以了。而使用php://input不需要修改php配置文件。\n\n在项目应用中，如摄像头拍照，上传保存，就可以用到php://input。客户端拍照后，把图片流传送到服务端，服务端使用file_get_getcontents(‘php://input’)就能获取到图片流，然后把图片流保存到一个文件，这个文件就是图片了\n","source":"_posts/2017/201707/20170721-1.md","raw":"layout: post\ntitle: 关于file_get_contents(\"php://input\")\ndate: 2017-07-21 23:13:13\ntags:\n---\n\n>“php://input allows you to read raw POST data. It is a less memory intensive alternative to $HTTP_RAW_POST_DATA and does not need any special php.ini directives. php://input is not available with enctype=”multipart/form-data”. \n\n翻译过来，是这样： \n“php://input可以读取没有处理过的POST数据。相较于$HTTP_RAW_POST_DATA而言，它给内存带来的压力较小，并且不需要特殊的php.ini设置。php://input不能用于enctype=multipart/form-data” \n找了一通资料，原来是这么回事：\n\n1，Coentent-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下，\n\nPHP才会将http请求数据包中相应的数据填入全局变量$_POST \n\n2，PHP不能识别的Content-Type类型的时候，会将http请求包中相应的数据填入变量$HTTP_RAW_POST_DATA \n\n3, 只有Coentent-Type不为multipart/form-data的时候，PHP不会将http请求数据包中的相应数据填入php://input，\n\n否则其它情况都会。填入的长度，由Coentent-Length指定。 \n\n4，只有Content-Type为application/x-www-data-urlencoded时，php://input数据才跟$_POST数据相一致。 \n\n5，php://input数据总是跟$HTTP_RAW_POST_DATA相同，但是php://input比$HTTP_RAW_POST_DATA更凑效，\n\n且不需要特殊设置php.ini \n\n6，PHP会将PATH字段的query_path部分，填入全局变量$_GET。通常情况下，GET方法提交的http请求，body为空。\n\n\n从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。\n\n看一个简单的例子。\n\n客户端就是一个表单，非常简单。\n\n```html\n<form action=\"\" method=\"POST\">\n\n    name: <input type=\"text\" name=\"name\" value=\"tom\" /><br />\n\n    age:<input type=\"text\" name=\"age\" value=\"22\" /><br />\n\n    <input type=\"submit\" value=\"Submit\" />\n\n</form>\n```\n\n将表单提交到服务端，服务端使用file_get_contents获取php://input内容\n\n```php\n$content = file_get_contents(\"php://input\");\n\necho $content; //输出name=tom&amp;age=22\n```\n\n官网关于php://input的说明中，反复有提到$HTTP_RAW_POST_DATA这个变量，这个变量其实和file_get_contents(php://input)的内容是一样的。如果要开启这个变量，需要修改配置文件，找到always_populate_raw_post_data这个选项，设置为On，然后重新启动web服务器，就可以了。而使用php://input不需要修改php配置文件。\n\n在项目应用中，如摄像头拍照，上传保存，就可以用到php://input。客户端拍照后，把图片流传送到服务端，服务端使用file_get_getcontents(‘php://input’)就能获取到图片流，然后把图片流保存到一个文件，这个文件就是图片了\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkv005ppgwi3mw2vo5z"},{"layout":"post","title":"字符串的gzip压缩与解压的整理","date":"2017-07-21T16:29:24.000Z","_content":"背景介绍\n因为一直在处理restful API，给移动端提供的数据需要考虑流量问题，优先考虑就是压缩现有的字符串，然后再考虑业务逻辑方面的减少流量。鉴于找这些资料也花了不少时间，所以整理了这篇文章，留作纪念。\n参考网址\nPHP与C#的压缩与解压\nhttp://www.oschina.net/question/2265205_181108\nhttp://my.oschina.net/linland/blog/217769?fromerr=Kf9b6ElQ\nhttp://www.yiibai.com/sql/function.gzencode.html\n\nhttps://forums.xamarin.com/discussion/33607/using-system-io-compression-in-pcl\n\n=====================\npython的压缩与解压\n\nhttp://outofmemory.cn/code-snippet/2030/Python-usage-gzip-pack-shujubao\nhttp://www.cnblogs.com/mmix2009/p/3221371.html\nhttp://blog.csdn.net/lxdcyh/article/details/4021476\n=====================\njavascript的压缩与解压\nhttp://stackoverflow.com/questions/14620769/decompress-gzip-and-zlib-string-in-javascript\nhttp://nodeca.github.io/pako/\n\n\n\n代码具体实现\nPHP (>=5.4)\n\n[php] view plain copy\n```php\n$srcString=\"1\";  \n$srcCompress=base64_encode(gzencode($srcString,9));  \necho strlen($srcCompress).'---压缩后字符串长度<br/>';  \n$newString=base64_decode($srcCompress);  \n$newString=gzdecode($newString);  \necho $newString.'----解压后原字符串<br/>';  \n```\n\nc#\n(建议还是考虑各个平台的，PCL版本下的见前面的网址，但是没调试通过)\n\n[csharp] view plain copy\n```c#\nusing System.IO.Compression;  \nusing System.Text;  \npublic  string Compress (string text)  \n{  \nbyte[] buffer = Encoding.UTF8.GetBytes (text);  \nusing (MemoryStream ms = new MemoryStream ()) {  \nGZipStream Compress = new GZipStream (ms, CompressionMode.Compress);  \n  \nCompress.Write (buffer, 0, buffer.Length);  \n  \nCompress.Close ();  \n  \nreturn Convert.ToBase64String (ms.ToArray ());  \n  \n}  \n}  \n  \npublic string Decompress (string text)  \n{  \nbyte[] buffer = Convert.FromBase64String (text);  \nusing (MemoryStream tempMs = new MemoryStream ()) {  \nusing (MemoryStream ms = new MemoryStream (buffer)) {  \nGZipStream Decompress = new GZipStream (ms, CompressionMode.Decompress);  \n  \nDecompress.CopyTo (tempMs);  \n  \nDecompress.Close ();  \n  \nreturn Encoding.UTF8.GetString (tempMs.ToArray ());  \n}  \n}  \n}  \n```\n\npython\n[python] view plain copy\n```python\n#coding=utf-8  \nimport base64  \nimport StringIO,gzip  \ndef zipData( content):  \n    zbuf = StringIO.StringIO()  \n    zfile = gzip.GzipFile(mode='wb', compresslevel=9, fileobj=zbuf)  \n    zfile.write(content)  \n    zfile.close()  \n    return base64.b64encode(zbuf.getvalue())  \ndef unzipData(content):  \n    compresseddata=base64.b64decode(content)  \n    compressedstream = StringIO.StringIO(compresseddata)  \n    gzipper = gzip.GzipFile(fileobj=compressedstream)  \n    data = gzipper.read()  \n    return data  \ns=zipData(\"1\")  \nprint s  \ns1=unzipData(s)  \nprint s1  \n```\n\njavascript\n[html] view plain copy\n```javascript\n<html>  \n<head>  \n<meta charset=\"UTF-8\">  \n<script src=\"http://code.jquery.com/jquery-2.1.4.min.js\"></script>  \n<script src=\"https://raw.githubusercontent.com/nodeca/pako/master/dist/pako.js\"></script>  \n<script type=\"text/javascript\">  \nfunction gzip(string) {  \nvar charData    = string.split('').map(function(x){return x.charCodeAt(0);});  \nvar binData     = new Uint8Array(charData);  \nvar data= pako.gzip(binData);  \nvar strData= String.fromCharCode.apply(null, new Uint16Array(data));  \nreturn btoa(strData);  \n}  \nfunction ungzip(string)  \n{  \nvar strData     = atob(string);  \nvar charData    = strData.split('').map(function(x){return x.charCodeAt(0);});  \nvar binData     = new Uint8Array(charData);  \nvar data= pako.ungzip(binData);  \nvar strData= String.fromCharCode.apply(null, new Uint16Array(data));  \nreturn strData;  \n}  \ntest=\"1\";  \nvar s=gzip(test);  \nalert(s);  \nalert(ungzip(s));  \n</script>  \n</head>  \n</html> \n```\n","source":"_posts/2017/201707/20170722-1.md","raw":"layout: post\ntitle: 字符串的gzip压缩与解压的整理\ndate: 2017-07-22 00:29:24\ntags:\n---\n背景介绍\n因为一直在处理restful API，给移动端提供的数据需要考虑流量问题，优先考虑就是压缩现有的字符串，然后再考虑业务逻辑方面的减少流量。鉴于找这些资料也花了不少时间，所以整理了这篇文章，留作纪念。\n参考网址\nPHP与C#的压缩与解压\nhttp://www.oschina.net/question/2265205_181108\nhttp://my.oschina.net/linland/blog/217769?fromerr=Kf9b6ElQ\nhttp://www.yiibai.com/sql/function.gzencode.html\n\nhttps://forums.xamarin.com/discussion/33607/using-system-io-compression-in-pcl\n\n=====================\npython的压缩与解压\n\nhttp://outofmemory.cn/code-snippet/2030/Python-usage-gzip-pack-shujubao\nhttp://www.cnblogs.com/mmix2009/p/3221371.html\nhttp://blog.csdn.net/lxdcyh/article/details/4021476\n=====================\njavascript的压缩与解压\nhttp://stackoverflow.com/questions/14620769/decompress-gzip-and-zlib-string-in-javascript\nhttp://nodeca.github.io/pako/\n\n\n\n代码具体实现\nPHP (>=5.4)\n\n[php] view plain copy\n```php\n$srcString=\"1\";  \n$srcCompress=base64_encode(gzencode($srcString,9));  \necho strlen($srcCompress).'---压缩后字符串长度<br/>';  \n$newString=base64_decode($srcCompress);  \n$newString=gzdecode($newString);  \necho $newString.'----解压后原字符串<br/>';  \n```\n\nc#\n(建议还是考虑各个平台的，PCL版本下的见前面的网址，但是没调试通过)\n\n[csharp] view plain copy\n```c#\nusing System.IO.Compression;  \nusing System.Text;  \npublic  string Compress (string text)  \n{  \nbyte[] buffer = Encoding.UTF8.GetBytes (text);  \nusing (MemoryStream ms = new MemoryStream ()) {  \nGZipStream Compress = new GZipStream (ms, CompressionMode.Compress);  \n  \nCompress.Write (buffer, 0, buffer.Length);  \n  \nCompress.Close ();  \n  \nreturn Convert.ToBase64String (ms.ToArray ());  \n  \n}  \n}  \n  \npublic string Decompress (string text)  \n{  \nbyte[] buffer = Convert.FromBase64String (text);  \nusing (MemoryStream tempMs = new MemoryStream ()) {  \nusing (MemoryStream ms = new MemoryStream (buffer)) {  \nGZipStream Decompress = new GZipStream (ms, CompressionMode.Decompress);  \n  \nDecompress.CopyTo (tempMs);  \n  \nDecompress.Close ();  \n  \nreturn Encoding.UTF8.GetString (tempMs.ToArray ());  \n}  \n}  \n}  \n```\n\npython\n[python] view plain copy\n```python\n#coding=utf-8  \nimport base64  \nimport StringIO,gzip  \ndef zipData( content):  \n    zbuf = StringIO.StringIO()  \n    zfile = gzip.GzipFile(mode='wb', compresslevel=9, fileobj=zbuf)  \n    zfile.write(content)  \n    zfile.close()  \n    return base64.b64encode(zbuf.getvalue())  \ndef unzipData(content):  \n    compresseddata=base64.b64decode(content)  \n    compressedstream = StringIO.StringIO(compresseddata)  \n    gzipper = gzip.GzipFile(fileobj=compressedstream)  \n    data = gzipper.read()  \n    return data  \ns=zipData(\"1\")  \nprint s  \ns1=unzipData(s)  \nprint s1  \n```\n\njavascript\n[html] view plain copy\n```javascript\n<html>  \n<head>  \n<meta charset=\"UTF-8\">  \n<script src=\"http://code.jquery.com/jquery-2.1.4.min.js\"></script>  \n<script src=\"https://raw.githubusercontent.com/nodeca/pako/master/dist/pako.js\"></script>  \n<script type=\"text/javascript\">  \nfunction gzip(string) {  \nvar charData    = string.split('').map(function(x){return x.charCodeAt(0);});  \nvar binData     = new Uint8Array(charData);  \nvar data= pako.gzip(binData);  \nvar strData= String.fromCharCode.apply(null, new Uint16Array(data));  \nreturn btoa(strData);  \n}  \nfunction ungzip(string)  \n{  \nvar strData     = atob(string);  \nvar charData    = strData.split('').map(function(x){return x.charCodeAt(0);});  \nvar binData     = new Uint8Array(charData);  \nvar data= pako.ungzip(binData);  \nvar strData= String.fromCharCode.apply(null, new Uint16Array(data));  \nreturn strData;  \n}  \ntest=\"1\";  \nvar s=gzip(test);  \nalert(s);  \nalert(ungzip(s));  \n</script>  \n</head>  \n</html> \n```\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkw005rpgwiq2lu0w77"},{"layout":"post","title":"Mac OS X下配置远程Linux 服务器SSH密钥认证自动登录","date":"2017-12-23T04:19:17.000Z","_content":"## 在本地机器创建公钥\n打开万能的终端，执行如下命令，无视一切输出，一路欢快地回车即可。\n\nssh-keygen -t rsa -C  'your email@domain.com'\n-t 指定密钥类型，默认即 rsa ，可以省略\n-C 设置注释文字，比如你的邮箱\n\n## 将公钥复制到ssh服务器\n将前一步骤生成的公钥~/id_rsa.pub文件，复制到ssh服务器对应用户下的~/.ssh/authorized_keys文件,可以有多种方式，这里只介绍常用的三种。\n\n[适用于osx系统]使用ssh-copy-id-for-OSX工具将公钥复制至ssh服务器\n\n```\nbrew install ssh-copy-id\nssh-copy-id username@hostname  #将username和hostname替换为你的ssh服务器用户名和IP\n当ssh服务器username用户目录下尚未有.ssh目录时使用此方式\ncat ~/.ssh/id_rsa.pub | ssh username@hostname \"mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys\"\n```\n\n通用方式\n\n```\nscp ~/.ssh/id_rsa.pub username@hostname:~/ #将公钥文件复制至ssh服务器\nssh username@hostname #使用用户名和密码方式登录至ssh服务器\nmkdir .ssh  #若.ssh目录已存在，可省略此步\ncat id_rsa.pub >> .ssh/authorized_keys  #将公钥文件id_rsa.pub文件内容追加到authorized_keys文件\n```\n\n## 快捷登录\n完成以上步骤后，即可使用以下命令直接登录ssh服务器，妈妈再也不用担心你记不住密码了\n\nssh username@hostname #将username替换为你的ssh服务器用户名，hostname替换为服务器的ip\n但是，每次仍然需要输入ssh username@hostname，仍算不上最优的解决方案，要是能实现一键登录或一条命令登录最好不过了，下面来看看都有那些解决方法\n\nssh本身也提供了一种快捷的方式来解决这个问题，往~/.ssh/config配置文件添加你的ssh服务器信息即可\nvim ~/.ssh/config   #若没有该文件，直接新建即可\n添加文件内容格式如下：\n\n```\nHost        alias #自定义别名\n    HostName        hostname  #替换为你的ssh服务器ip或domain\n    Port            port #ssh服务器端口，默认为22\n    User            user #ssh服务器用户名\n    IdentityFile    ~/.ssh/id_rsa #第一个步骤生成的公钥文件对应的私钥文件\n```\n\n保存文件退出后，即可使用别名登录ssh服务器\n\nssh alias #alias是你在~/.ssh/config文件配置的别名\n若有多个ssh账号需要配置，只要在~/.ssh/config空行再写即可，如下:\n\n```\nHost        foo\n    HostName        192.168.2.222\n    Port            22\n    User            test\n    IdentityFile    ~/.ssh/id_rsa\n\nHost        alias\n    HostName    hostname\n    Port        port\n    User        user\n```\n\n如果你本地终端使用的是zsh，那就太简单不过了，直接给zsh添加一条别名\n\n```\necho \"alias ssh-to-username='ssh username@hostname'\" >> ~/.zshrc #将username和hostname替换为你的服务器信息\nsource ~/.zshrc   #重新加载更改后的zshrc文件\nssh-to-username   #使用别名，一条命令即可登录你的ssh服务器\n```\n\n如果你本地终端使用的是iterm2还可以添加Profile实现一键登录，具体步骤此处略过\n","source":"_posts/2017/201712/20171223-1.md","raw":"layout: post\ntitle: Mac OS X下配置远程Linux 服务器SSH密钥认证自动登录\ndate: 2017-12-23 12:19:17\ntags:\n---\n## 在本地机器创建公钥\n打开万能的终端，执行如下命令，无视一切输出，一路欢快地回车即可。\n\nssh-keygen -t rsa -C  'your email@domain.com'\n-t 指定密钥类型，默认即 rsa ，可以省略\n-C 设置注释文字，比如你的邮箱\n\n## 将公钥复制到ssh服务器\n将前一步骤生成的公钥~/id_rsa.pub文件，复制到ssh服务器对应用户下的~/.ssh/authorized_keys文件,可以有多种方式，这里只介绍常用的三种。\n\n[适用于osx系统]使用ssh-copy-id-for-OSX工具将公钥复制至ssh服务器\n\n```\nbrew install ssh-copy-id\nssh-copy-id username@hostname  #将username和hostname替换为你的ssh服务器用户名和IP\n当ssh服务器username用户目录下尚未有.ssh目录时使用此方式\ncat ~/.ssh/id_rsa.pub | ssh username@hostname \"mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys\"\n```\n\n通用方式\n\n```\nscp ~/.ssh/id_rsa.pub username@hostname:~/ #将公钥文件复制至ssh服务器\nssh username@hostname #使用用户名和密码方式登录至ssh服务器\nmkdir .ssh  #若.ssh目录已存在，可省略此步\ncat id_rsa.pub >> .ssh/authorized_keys  #将公钥文件id_rsa.pub文件内容追加到authorized_keys文件\n```\n\n## 快捷登录\n完成以上步骤后，即可使用以下命令直接登录ssh服务器，妈妈再也不用担心你记不住密码了\n\nssh username@hostname #将username替换为你的ssh服务器用户名，hostname替换为服务器的ip\n但是，每次仍然需要输入ssh username@hostname，仍算不上最优的解决方案，要是能实现一键登录或一条命令登录最好不过了，下面来看看都有那些解决方法\n\nssh本身也提供了一种快捷的方式来解决这个问题，往~/.ssh/config配置文件添加你的ssh服务器信息即可\nvim ~/.ssh/config   #若没有该文件，直接新建即可\n添加文件内容格式如下：\n\n```\nHost        alias #自定义别名\n    HostName        hostname  #替换为你的ssh服务器ip或domain\n    Port            port #ssh服务器端口，默认为22\n    User            user #ssh服务器用户名\n    IdentityFile    ~/.ssh/id_rsa #第一个步骤生成的公钥文件对应的私钥文件\n```\n\n保存文件退出后，即可使用别名登录ssh服务器\n\nssh alias #alias是你在~/.ssh/config文件配置的别名\n若有多个ssh账号需要配置，只要在~/.ssh/config空行再写即可，如下:\n\n```\nHost        foo\n    HostName        192.168.2.222\n    Port            22\n    User            test\n    IdentityFile    ~/.ssh/id_rsa\n\nHost        alias\n    HostName    hostname\n    Port        port\n    User        user\n```\n\n如果你本地终端使用的是zsh，那就太简单不过了，直接给zsh添加一条别名\n\n```\necho \"alias ssh-to-username='ssh username@hostname'\" >> ~/.zshrc #将username和hostname替换为你的服务器信息\nsource ~/.zshrc   #重新加载更改后的zshrc文件\nssh-to-username   #使用别名，一条命令即可登录你的ssh服务器\n```\n\n如果你本地终端使用的是iterm2还可以添加Profile实现一键登录，具体步骤此处略过\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkx005upgwi7c4nsptg"},{"layout":"post","title":"Linux 配置，命令","date":"2018-02-19T07:58:26.000Z","_content":"## 服务器配置\n### 添加管理员用户\n```\n# useradd test\n# passwd test\n# mkdir -p /home/test/.ssh\n# chown 600 /home/test/.ssh/\n# vim /etc/sudoers\n# cd /home/test/.ssh/\n# rz\n# # Received /Users/uiste/.ssh/id_rsa.pub\n# ls\n# mv id_rsa.pub authorized_keys\n# ls -al\n# chown test:test authorized_keys \n# chmod 700 authorized_keys \n# ls -al\n# chmod 600 authorized_keys \n# ls\n# pwd\n# chown test:test /home/test/.ssh\n# ls -al /home/test/\n\n# 自定义生成ssh key\nroot@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www\n上一次登录：二 1月  1 22:49:16 CST 2019pts/1 上\n[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ sudo su -\nLast login: Tue Jan  1 22:49:46 CST 2019 from 223.167.32.98 on pts/2\n[root@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www\nLast login: Tue Jan  1 22:50:58 CST 2019 on pts/2\n[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ ssh-keygen -t rsa\n\n\n# useradd test\n\n修改管理员配置\n# vim /etc/sudoers\n\n## Allow root to run any commands anywhere \nroot    ALL=(ALL)       ALL\ntest     ALL=(ALL)       NOPASSWD: ALL\n```\n\n### 切换用户\n```\n# 切换自定用户\n# su - test\n\n# 切换root用户\n# sudo su -\n```\n\n### 配置SSH\n```\nchown test:test /home/test/\nchmod 755 /home/test/.ssh/\n\n[test@izbp14s0hny0qt9wghm6lcz .ssh]$ ls -al\ntotal 12\ndrwxr-xr-x 2 test test 4096 Sep 26 10:54 .\ndrwx------ 3 test test 4096 Sep 26 10:44 ..\n-rw------- 1 test test  411 Sep 26 10:36 authorized_keys\n\n[test@izbp14s0hny0qt9wghm6lcz .ssh]$ cat authorized_keys \nssh-rsa AAAAB3Nza...E27svfEF6qsVb9B5dooFFFS5hNjyJJma8dyCLzmpAKXH......8XDB+ofAZYkF/7NyU9ON0OwkKWJL4jL570kfazGgJQQwrjWh5x5.....nLsLvQB2rnjbeyV+RXnNemMutokrjIgrT Administrator@PC-20180613WOHL\n```  \n\n## 常用命令\n* 递归创建文件夹\n`mkdir -p /data/yiilogs/`\n\n* 修改文件夹用户\n`chown test:test /data/yiilogs/`\n\n* 修改文件读写权限\n`chmod 777 /data/yiilogs/`\n\n* 查看端口占用情况\n`netstat -tunlp | grep 3306`\n\n* 匹配log中自定内容信息\n```\ntail -f /data/yiilog/xxx/access_app_nginx.log |grep 'interface-loan/xxx'\n```\n","source":"_posts/2018/201802/20180219-2.md","raw":"---\nlayout: post\ntitle: Linux 配置，命令\ndate: 2018-02-19 15:58:26\ntags:\n---\n## 服务器配置\n### 添加管理员用户\n```\n# useradd test\n# passwd test\n# mkdir -p /home/test/.ssh\n# chown 600 /home/test/.ssh/\n# vim /etc/sudoers\n# cd /home/test/.ssh/\n# rz\n# # Received /Users/uiste/.ssh/id_rsa.pub\n# ls\n# mv id_rsa.pub authorized_keys\n# ls -al\n# chown test:test authorized_keys \n# chmod 700 authorized_keys \n# ls -al\n# chmod 600 authorized_keys \n# ls\n# pwd\n# chown test:test /home/test/.ssh\n# ls -al /home/test/\n\n# 自定义生成ssh key\nroot@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www\n上一次登录：二 1月  1 22:49:16 CST 2019pts/1 上\n[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ sudo su -\nLast login: Tue Jan  1 22:49:46 CST 2019 from 223.167.32.98 on pts/2\n[root@iZbp1bb2egi7vzn29c1dhvZ ~]# su - www\nLast login: Tue Jan  1 22:50:58 CST 2019 on pts/2\n[www@iZbp1bb2egi7vzn29c1dhvZ ~]$ ssh-keygen -t rsa\n\n\n# useradd test\n\n修改管理员配置\n# vim /etc/sudoers\n\n## Allow root to run any commands anywhere \nroot    ALL=(ALL)       ALL\ntest     ALL=(ALL)       NOPASSWD: ALL\n```\n\n### 切换用户\n```\n# 切换自定用户\n# su - test\n\n# 切换root用户\n# sudo su -\n```\n\n### 配置SSH\n```\nchown test:test /home/test/\nchmod 755 /home/test/.ssh/\n\n[test@izbp14s0hny0qt9wghm6lcz .ssh]$ ls -al\ntotal 12\ndrwxr-xr-x 2 test test 4096 Sep 26 10:54 .\ndrwx------ 3 test test 4096 Sep 26 10:44 ..\n-rw------- 1 test test  411 Sep 26 10:36 authorized_keys\n\n[test@izbp14s0hny0qt9wghm6lcz .ssh]$ cat authorized_keys \nssh-rsa AAAAB3Nza...E27svfEF6qsVb9B5dooFFFS5hNjyJJma8dyCLzmpAKXH......8XDB+ofAZYkF/7NyU9ON0OwkKWJL4jL570kfazGgJQQwrjWh5x5.....nLsLvQB2rnjbeyV+RXnNemMutokrjIgrT Administrator@PC-20180613WOHL\n```  \n\n## 常用命令\n* 递归创建文件夹\n`mkdir -p /data/yiilogs/`\n\n* 修改文件夹用户\n`chown test:test /data/yiilogs/`\n\n* 修改文件读写权限\n`chmod 777 /data/yiilogs/`\n\n* 查看端口占用情况\n`netstat -tunlp | grep 3306`\n\n* 匹配log中自定内容信息\n```\ntail -f /data/yiilog/xxx/access_app_nginx.log |grep 'interface-loan/xxx'\n```\n","slug":"2","published":1,"updated":"2019-04-02T04:21:28.885Z","comments":1,"photos":[],"link":"","_id":"ck39ugjky005vpgwi53tw7jo9"},{"layout":"post","title":"此项目将被立刻删除，您不能撤销此操作","date":"2018-02-21T08:36:14.000Z","_content":"\nmac 删除文件不经过废纸篓，提示“此项目将被立刻删除，您不能撤销此操作。”，解决办法。\n\n终端机运行两个命令：\n```\nrm -R ~/.Trash\nkillall Finder\n```\n\n退出终端机。\n\n\n如果它说你没有权限删除，那么就这样：\n```\nsudo rm -R ~/.Trash\nkillall Finder\n```\n\n删除废纸篓，finder会自动生成。","source":"_posts/2018/201802/20180221-1.md","raw":"---\nlayout: post\ntitle: 此项目将被立刻删除，您不能撤销此操作\ndate: 2018-02-21 16:36:14\ntags:\n---\n\nmac 删除文件不经过废纸篓，提示“此项目将被立刻删除，您不能撤销此操作。”，解决办法。\n\n终端机运行两个命令：\n```\nrm -R ~/.Trash\nkillall Finder\n```\n\n退出终端机。\n\n\n如果它说你没有权限删除，那么就这样：\n```\nsudo rm -R ~/.Trash\nkillall Finder\n```\n\n删除废纸篓，finder会自动生成。","slug":"1","published":1,"updated":"2019-04-02T04:22:09.457Z","comments":1,"photos":[],"link":"","_id":"ck39ugjkz005ypgwij5huu6lu"},{"layout":"post","title":"Mysql 相关命令","date":"2018-02-22T02:56:08.000Z","_content":"# Mysql 添加阿里RDS远程登陆用户\n```\nmysql> use mysql;\nmysql> select user,host from user;\nmysql> grant all privileges on *.* to 'dms'@'121.43.18.67' identified by 'mypassword';\nmysql> flush privileges; \nmysql> quit;\n\n```","source":"_posts/2018/201802/20180222-1.md","raw":"---\nlayout: post\ntitle: Mysql 相关命令\ndate: 2018-02-22 10:56:08\ntags:\n---\n# Mysql 添加阿里RDS远程登陆用户\n```\nmysql> use mysql;\nmysql> select user,host from user;\nmysql> grant all privileges on *.* to 'dms'@'121.43.18.67' identified by 'mypassword';\nmysql> flush privileges; \nmysql> quit;\n\n```","slug":"1","published":1,"updated":"2019-04-02T04:22:23.254Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl1005zpgwig6bnsa1z"},{"layout":"post","title":"安装walle后进行检测错误总出现的问题解决","date":"2018-02-23T01:05:48.000Z","_content":"\n# 安装walle后进行检测错误总出现的问题解决\n\n安装好 walle后，进行项目配置，但是检测总是出现错误，错误如下：\n\n\n宿主机代码检出检测出错，请确认把php进程用户www的ssh-key加入git的deploy-keys列表。\n\n目标机器检测出错，请确认php进程www用户ssh-key加入目标机器的www用户ssh-key信任列表。\n\n目标机 ansible ping 出错，请检查 ~/.ssh/config 及 ssh 证书配置\n目标机器检测出错，请确认www有目标机器发布版本库/data/www/publish写入权限。\n\n解决方法：\n  1，在宿主机安装了ansible后，就消灭了一个关于ansible未安装的问题\n\n  2，其实我们是把宿主机器php进程用户www加入了目标机器www用户的信任authired_keys表的，但是任然报未加入，此处，主要的错误就是因为我们在目标机器中对于\n\n    www用户的.ssh文件夹和authorized_keys的权限和所属者；\n    \n    chmod -R 755 /home/www/\n    \n    chmod -R 700 /home/www/.ssh/\n    \n    chmod -R 644 /home/www/.ssh/authorized_keys \n\n 必须满足以上三个条件才能免密码登录，同时也是解决总报没有加入目标机器信任列表的问题关键\n\n `chown  www.www -R /home/www`      将所属者为www用户\n\n> 需要记住的宿主机和目标机器的  .ssh   authorized_keys      /home/www/   都需要注意权限问题  ","source":"_posts/2018/201802/20180223-1.md","raw":"---\nlayout: post\ntitle: 安装walle后进行检测错误总出现的问题解决\ndate: 2018-02-23 09:05:48\ntags:\n---\n\n# 安装walle后进行检测错误总出现的问题解决\n\n安装好 walle后，进行项目配置，但是检测总是出现错误，错误如下：\n\n\n宿主机代码检出检测出错，请确认把php进程用户www的ssh-key加入git的deploy-keys列表。\n\n目标机器检测出错，请确认php进程www用户ssh-key加入目标机器的www用户ssh-key信任列表。\n\n目标机 ansible ping 出错，请检查 ~/.ssh/config 及 ssh 证书配置\n目标机器检测出错，请确认www有目标机器发布版本库/data/www/publish写入权限。\n\n解决方法：\n  1，在宿主机安装了ansible后，就消灭了一个关于ansible未安装的问题\n\n  2，其实我们是把宿主机器php进程用户www加入了目标机器www用户的信任authired_keys表的，但是任然报未加入，此处，主要的错误就是因为我们在目标机器中对于\n\n    www用户的.ssh文件夹和authorized_keys的权限和所属者；\n    \n    chmod -R 755 /home/www/\n    \n    chmod -R 700 /home/www/.ssh/\n    \n    chmod -R 644 /home/www/.ssh/authorized_keys \n\n 必须满足以上三个条件才能免密码登录，同时也是解决总报没有加入目标机器信任列表的问题关键\n\n `chown  www.www -R /home/www`      将所属者为www用户\n\n> 需要记住的宿主机和目标机器的  .ssh   authorized_keys      /home/www/   都需要注意权限问题  ","slug":"1","published":1,"updated":"2019-04-02T04:22:35.350Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl20061pgwia6swmxfc"},{"layout":"post","title":"PHP 7.2 升级后 Yii2 升级","date":"2018-03-25T07:03:44.000Z","_content":"## 问题\n>PHP升级7.2后，Yii 2.0.12 版本由于类命名约束问题会产生如下问题：\n\n```\nFatal error: Cannot use 'Object' as class name as it is reserved in /Users/uiste/www/my_project/mike-app/vendor/yiisoft/yii2/base/Object.php on line 77\n```\n\n## 升级方法\n\n```\n➜  mike-app git:(version-update) composer install\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nNothing to install or update\nGenerating autoload files\n➜  mike-app git:(version-update) composer global require \"fxp/composer-asset-plugin:^1.4.1\"\nChanged current directory to /Users/uiste/.composer\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 1 update, 0 removals\n  - Updating fxp/composer-asset-plugin (v1.2.2 => v1.4.4): Downloading (100%)         \nWriting lock file\nGenerating autoload files\n➜  mike-app git:(version-update) composer update yiisoft/yii2 yiisoft/yii2-composer bower-asset/jquery.inputmask\nThe \"extra.asset-installer-paths\" option is deprecated, use the \"config.fxp-asset.installer-paths\" option\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)                                                                                                                     GitHub API limit (60 calls/hr) is exhausted, could not fetch https://api.github.com/repos/RobinHerbots/Inputmask/contents/bower.json?ref=4.x. Create a GitHub OAuth token to go over the API rate limit. You can also wait until 2018-03-25 07:52:25 for the rate limit to reset.\n\nHead to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+uiste+2018-03-25+0657\nto retrieve a token. It will be stored in \"/Users/uiste/.composer/auth.json\" for future use by Composer.\nToken (hidden): \n```\n\n>浏览器打开：\n`https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+localhost.localdomain+2018-03-25+1945`\n登录github账号 生成token ，在命令行输入即可 token\n\n继续\n```\ncomposer updated\n```\n\n","source":"_posts/2018/201803/20180325-1.md","raw":"---\nlayout: post\ntitle: PHP 7.2 升级后 Yii2 升级\ndate: 2018-03-25 15:03:44\ntags:\n---\n## 问题\n>PHP升级7.2后，Yii 2.0.12 版本由于类命名约束问题会产生如下问题：\n\n```\nFatal error: Cannot use 'Object' as class name as it is reserved in /Users/uiste/www/my_project/mike-app/vendor/yiisoft/yii2/base/Object.php on line 77\n```\n\n## 升级方法\n\n```\n➜  mike-app git:(version-update) composer install\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nNothing to install or update\nGenerating autoload files\n➜  mike-app git:(version-update) composer global require \"fxp/composer-asset-plugin:^1.4.1\"\nChanged current directory to /Users/uiste/.composer\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 1 update, 0 removals\n  - Updating fxp/composer-asset-plugin (v1.2.2 => v1.4.4): Downloading (100%)         \nWriting lock file\nGenerating autoload files\n➜  mike-app git:(version-update) composer update yiisoft/yii2 yiisoft/yii2-composer bower-asset/jquery.inputmask\nThe \"extra.asset-installer-paths\" option is deprecated, use the \"config.fxp-asset.installer-paths\" option\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)                                                                                                                     GitHub API limit (60 calls/hr) is exhausted, could not fetch https://api.github.com/repos/RobinHerbots/Inputmask/contents/bower.json?ref=4.x. Create a GitHub OAuth token to go over the API rate limit. You can also wait until 2018-03-25 07:52:25 for the rate limit to reset.\n\nHead to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+uiste+2018-03-25+0657\nto retrieve a token. It will be stored in \"/Users/uiste/.composer/auth.json\" for future use by Composer.\nToken (hidden): \n```\n\n>浏览器打开：\n`https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+localhost.localdomain+2018-03-25+1945`\n登录github账号 生成token ，在命令行输入即可 token\n\n继续\n```\ncomposer updated\n```\n\n","slug":"1","published":1,"updated":"2019-04-02T04:16:13.255Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl30063pgwiahunxgy8"},{"layout":"post","title":"php-ini 文件","date":"2018-03-25T08:54:44.000Z","_content":"\n# 多个版本改哪个文件下的php.ini 配置才有效？\n```\n➜  package php -i | grep php.ini\nConfiguration File (php.ini) Path => /usr/local/etc/php/7.2\nLoaded Configuration File => /usr/local/etc/php/7.2/php.ini\n```\n\n# 别名设置\n```\n➜  package vim ~/.bash_profile\n\n\talias php72=/Users/uiste/Downloads/package/soft/php/bin/php\n\n➜  package source ~/.bash_profile\n```\n\n# 编译时指定PHP配置信息\n```\n# ./configure \\\n--prefix=/usr/local/php \\ # 安装路径\n--with-config-file-path=/etc # 配置路径\n```","source":"_posts/2018/201803/20180325-2.md","raw":"---\nlayout: post\ntitle: php-ini 文件\ndate: 2018-03-25 16:54:44\ntags:\n---\n\n# 多个版本改哪个文件下的php.ini 配置才有效？\n```\n➜  package php -i | grep php.ini\nConfiguration File (php.ini) Path => /usr/local/etc/php/7.2\nLoaded Configuration File => /usr/local/etc/php/7.2/php.ini\n```\n\n# 别名设置\n```\n➜  package vim ~/.bash_profile\n\n\talias php72=/Users/uiste/Downloads/package/soft/php/bin/php\n\n➜  package source ~/.bash_profile\n```\n\n# 编译时指定PHP配置信息\n```\n# ./configure \\\n--prefix=/usr/local/php \\ # 安装路径\n--with-config-file-path=/etc # 配置路径\n```","slug":"2","published":1,"updated":"2019-04-02T04:19:27.093Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl40065pgwi7sxkfhj5"},{"layout":"post","title":"swoole","date":"2018-03-25T09:10:47.000Z","_content":"\n## 安装PHP \n\n## 安装sowoole 扩展\n```\n➜  package cd swoole\n➜  swoole git:(master) phpize\nConfiguring for:\nPHP Api Version:         20170718\nZend Module Api No:      20170718\nZend Extension Api No:   320170718\n➜  swoole git:(master) ./configure\n➜  swoole git:(master) make && make installs\n\n···\nBuild complete.\nDon't forget to run 'make test'.\n\nInstalling shared extensions:     /usr/local/Cellar/php@7.2/7.2.16/pecl/20170718/\nInstalling header files:          /usr/local/Cellar/php@7.2/7.2.16/include/php/\n```\n\n## ws_server\n```php\n<?php\nclass Ws {\n    CONST HOST = \"0.0.0.0\";\n    CONST PORT = 8811;\n    CONST CHART_PORT = 8812;\n\n    public $ws = null;\n    public function __construct() {\n        // 获取 key 有值 del\n        $this->ws = new swoole_websocket_server(self::HOST, self::PORT);\n        $this->ws->listen(self::HOST, self::CHART_PORT, SWOOLE_SOCK_TCP);\n\n        $this->ws->set(\n            [\n                'enable_static_handler' => true,\n                'document_root' => \"/home/work/hdtocs/swoole_mooc/thinkphp/public/static\",\n                'worker_num' => 4,\n                'task_worker_num' => 4,\n            ]\n        );\n\n        $this->ws->on(\"start\", [$this, 'onStart']);\n        $this->ws->on(\"open\", [$this, 'onOpen']);\n        $this->ws->on(\"message\", [$this, 'onMessage']);\n        $this->ws->on(\"workerstart\", [$this, 'onWorkerStart']);\n        $this->ws->on(\"request\", [$this, 'onRequest']);\n        $this->ws->on(\"task\", [$this, 'onTask']);\n        $this->ws->on(\"finish\", [$this, 'onFinish']);\n        $this->ws->on(\"close\", [$this, 'onClose']);\n\n        $this->ws->start();\n    }\n\n    /**\n     * @param $server\n     */\n    public function onStart($server) {\n        swoole_set_process_name(\"live_master\");\n    }\n    /**\n     * @param $server\n     * @param $worker_id\n     */\n    public function onWorkerStart($server,  $worker_id) {\n        // 定义应用目录\n        define('APP_PATH', __DIR__ . '/../../../application/');\n        // 加载框架里面的文件\n        //require __DIR__ . '/../thinkphp/base.php';\n        require __DIR__ . '/../../../thinkphp/start.php';\n    }\n\n    /**\n     * request回调\n     * @param $request\n     * @param $response\n     */\n    public function onRequest($request, $response) {\n        if($request->server['request_uri'] == '/favicon.ico') {\n            $response->status(404);\n            $response->end();\n            return ;\n        }\n        $_SERVER  =  [];\n        if(isset($request->server)) {\n            foreach($request->server as $k => $v) {\n                $_SERVER[strtoupper($k)] = $v;\n            }\n        }\n        if(isset($request->header)) {\n            foreach($request->header as $k => $v) {\n                $_SERVER[strtoupper($k)] = $v;\n            }\n        }\n\n        $_GET = [];\n        if(isset($request->get)) {\n            foreach($request->get as $k => $v) {\n                $_GET[$k] = $v;\n            }\n        }\n        $_FILES = [];\n        if(isset($request->files)) {\n            foreach($request->files as $k => $v) {\n                $_FILES[$k] = $v;\n            }\n        }\n        $_POST = [];\n        if(isset($request->post)) {\n            foreach($request->post as $k => $v) {\n                $_POST[$k] = $v;\n            }\n        }\n\n        $this->writeLog();\n        $_POST['http_server'] = $this->ws;\n\n\n        ob_start();\n        // 执行应用并响应\n        try {\n            think\\Container::get('app', [APP_PATH])\n                ->run()\n                ->send();\n        }catch (\\Exception $e) {\n            // todo\n        }\n\n        $res = ob_get_contents();\n        ob_end_clean();\n        $response->end($res);\n    }\n\n    /**\n     * @param $serv\n     * @param $taskId\n     * @param $workerId\n     * @param $data\n     */\n    public function onTask($serv, $taskId, $workerId, $data) {\n\n        // 分发 task 任务机制，让不同的任务 走不同的逻辑\n        $obj = new app\\common\\lib\\task\\Task;\n\n        $method = $data['method'];\n        $flag = $obj->$method($data['data'], $serv);\n        /*$obj = new app\\common\\lib\\ali\\Sms();\n        try {\n            $response = $obj::sendSms($data['phone'], $data['code']);\n        }catch (\\Exception $e) {\n            // todo\n            echo $e->getMessage();\n        }*/\n\n        return $flag; // 告诉worker\n    }\n\n    /**\n     * @param $serv\n     * @param $taskId\n     * @param $data\n     */\n    public function onFinish($serv, $taskId, $data) {\n        echo \"taskId:{$taskId}\\n\";\n        echo \"finish-data-sucess:{$data}\\n\";\n    }\n\n    /**\n     * 监听ws连接事件\n     * @param $ws\n     * @param $request\n     */\n    public function onOpen($ws, $request) {\n        // fd redis [1]\n        \\app\\common\\lib\\redis\\Predis::getInstance()->sAdd(config('redis.live_game_key'), $request->fd);\n        var_dump($request->fd);\n    }\n\n    /**\n     * 监听ws消息事件\n     * @param $ws\n     * @param $frame\n     */\n    public function onMessage($ws, $frame) {\n        echo \"ser-push-message:{$frame->data}\\n\";\n        $ws->push($frame->fd, \"server-push:\".date(\"Y-m-d H:i:s\"));\n    }\n\n    /**\n     * close\n     * @param $ws\n     * @param $fd\n     */\n    public function onClose($ws, $fd) {\n        // fd del\n        \\app\\common\\lib\\redis\\Predis::getInstance()->sRem(config('redis.live_game_key'), $fd);\n        echo \"clientid:{$fd}\\n\";\n    }\n\n    /**\n     * 记录日志\n     */\n    public function writeLog() {\n        $datas = array_merge(['date' => date(\"Ymd H:i:s\")],$_GET, $_POST, $_SERVER);\n\n        $logs = \"\";\n        foreach($datas as $key => $value) {\n            $logs .= $key . \":\" . $value . \" \";\n        }\n\n        swoole_async_writefile(APP_PATH.'../runtime/log/'.date(\"Ym\").\"/\".date(\"d\").\"_access.log\", $logs.PHP_EOL, function($filename){\n            // todo\n        }, FILE_APPEND);\n\n    }\n}\n\nnew Ws();\n```\n\n## ws_client\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n<h1>singwa-swoole-ws测试<h1>\n  <script>\n    var wsUrl = \"ws://swoole.demo.com:8812\";\n\n    var websocket = new WebSocket(wsUrl);\n\n    //实例对象的onopen属性\n    websocket.onopen = function(evt) {\n      websocket.send(\"hello-sinwa\");\n      console.log(\"conected-swoole-success\");\n    }\n\n    // 实例化 onmessage\n    websocket.onmessage = function(evt) {\n      console.log(\"ws-server-return-data:\" + evt.data);\n    }\n\n    //onclose\n    websocket.onclose = function(evt) {\n      console.log(\"close\");\n    }\n    //onerror\n\n    websocket.onerror = function(evt, e) {\n      console.log(\"error:\" + evt.data);\n    }\n\n </script>\n</body>\n</html>\n```\n\n## 定时器\n```\n<?php\nclass Server {\n    const PORT = 8811;\n\n    public function port() {\n        $shell  =  \"netstat -anp 2>/dev/null | grep \". self::PORT . \" | grep LISTEN | wc -l\";\n\n        $result = shell_exec($shell);\n        if($result != 1) {\n            // 发送报警服务 邮件 短信\n            /// todo\n            echo date(\"Ymd H:i:s\").\"error\".PHP_EOL;\n        } else {\n            echo date(\"Ymd H:i:s\").\"succss\".PHP_EOL;\n        }\n    }\n}\n\n// nohup\nswoole_timer_tick(2000, function($timer_id) {\n    (new Server())->port();\n    echo \"time-start\".PHP_EOL;\n});\n```","source":"_posts/2018/201803/20180325-3.md","raw":"---\nlayout: post\ntitle: swoole\ndate: 2018-03-25 17:10:47\ntags:\n---\n\n## 安装PHP \n\n## 安装sowoole 扩展\n```\n➜  package cd swoole\n➜  swoole git:(master) phpize\nConfiguring for:\nPHP Api Version:         20170718\nZend Module Api No:      20170718\nZend Extension Api No:   320170718\n➜  swoole git:(master) ./configure\n➜  swoole git:(master) make && make installs\n\n···\nBuild complete.\nDon't forget to run 'make test'.\n\nInstalling shared extensions:     /usr/local/Cellar/php@7.2/7.2.16/pecl/20170718/\nInstalling header files:          /usr/local/Cellar/php@7.2/7.2.16/include/php/\n```\n\n## ws_server\n```php\n<?php\nclass Ws {\n    CONST HOST = \"0.0.0.0\";\n    CONST PORT = 8811;\n    CONST CHART_PORT = 8812;\n\n    public $ws = null;\n    public function __construct() {\n        // 获取 key 有值 del\n        $this->ws = new swoole_websocket_server(self::HOST, self::PORT);\n        $this->ws->listen(self::HOST, self::CHART_PORT, SWOOLE_SOCK_TCP);\n\n        $this->ws->set(\n            [\n                'enable_static_handler' => true,\n                'document_root' => \"/home/work/hdtocs/swoole_mooc/thinkphp/public/static\",\n                'worker_num' => 4,\n                'task_worker_num' => 4,\n            ]\n        );\n\n        $this->ws->on(\"start\", [$this, 'onStart']);\n        $this->ws->on(\"open\", [$this, 'onOpen']);\n        $this->ws->on(\"message\", [$this, 'onMessage']);\n        $this->ws->on(\"workerstart\", [$this, 'onWorkerStart']);\n        $this->ws->on(\"request\", [$this, 'onRequest']);\n        $this->ws->on(\"task\", [$this, 'onTask']);\n        $this->ws->on(\"finish\", [$this, 'onFinish']);\n        $this->ws->on(\"close\", [$this, 'onClose']);\n\n        $this->ws->start();\n    }\n\n    /**\n     * @param $server\n     */\n    public function onStart($server) {\n        swoole_set_process_name(\"live_master\");\n    }\n    /**\n     * @param $server\n     * @param $worker_id\n     */\n    public function onWorkerStart($server,  $worker_id) {\n        // 定义应用目录\n        define('APP_PATH', __DIR__ . '/../../../application/');\n        // 加载框架里面的文件\n        //require __DIR__ . '/../thinkphp/base.php';\n        require __DIR__ . '/../../../thinkphp/start.php';\n    }\n\n    /**\n     * request回调\n     * @param $request\n     * @param $response\n     */\n    public function onRequest($request, $response) {\n        if($request->server['request_uri'] == '/favicon.ico') {\n            $response->status(404);\n            $response->end();\n            return ;\n        }\n        $_SERVER  =  [];\n        if(isset($request->server)) {\n            foreach($request->server as $k => $v) {\n                $_SERVER[strtoupper($k)] = $v;\n            }\n        }\n        if(isset($request->header)) {\n            foreach($request->header as $k => $v) {\n                $_SERVER[strtoupper($k)] = $v;\n            }\n        }\n\n        $_GET = [];\n        if(isset($request->get)) {\n            foreach($request->get as $k => $v) {\n                $_GET[$k] = $v;\n            }\n        }\n        $_FILES = [];\n        if(isset($request->files)) {\n            foreach($request->files as $k => $v) {\n                $_FILES[$k] = $v;\n            }\n        }\n        $_POST = [];\n        if(isset($request->post)) {\n            foreach($request->post as $k => $v) {\n                $_POST[$k] = $v;\n            }\n        }\n\n        $this->writeLog();\n        $_POST['http_server'] = $this->ws;\n\n\n        ob_start();\n        // 执行应用并响应\n        try {\n            think\\Container::get('app', [APP_PATH])\n                ->run()\n                ->send();\n        }catch (\\Exception $e) {\n            // todo\n        }\n\n        $res = ob_get_contents();\n        ob_end_clean();\n        $response->end($res);\n    }\n\n    /**\n     * @param $serv\n     * @param $taskId\n     * @param $workerId\n     * @param $data\n     */\n    public function onTask($serv, $taskId, $workerId, $data) {\n\n        // 分发 task 任务机制，让不同的任务 走不同的逻辑\n        $obj = new app\\common\\lib\\task\\Task;\n\n        $method = $data['method'];\n        $flag = $obj->$method($data['data'], $serv);\n        /*$obj = new app\\common\\lib\\ali\\Sms();\n        try {\n            $response = $obj::sendSms($data['phone'], $data['code']);\n        }catch (\\Exception $e) {\n            // todo\n            echo $e->getMessage();\n        }*/\n\n        return $flag; // 告诉worker\n    }\n\n    /**\n     * @param $serv\n     * @param $taskId\n     * @param $data\n     */\n    public function onFinish($serv, $taskId, $data) {\n        echo \"taskId:{$taskId}\\n\";\n        echo \"finish-data-sucess:{$data}\\n\";\n    }\n\n    /**\n     * 监听ws连接事件\n     * @param $ws\n     * @param $request\n     */\n    public function onOpen($ws, $request) {\n        // fd redis [1]\n        \\app\\common\\lib\\redis\\Predis::getInstance()->sAdd(config('redis.live_game_key'), $request->fd);\n        var_dump($request->fd);\n    }\n\n    /**\n     * 监听ws消息事件\n     * @param $ws\n     * @param $frame\n     */\n    public function onMessage($ws, $frame) {\n        echo \"ser-push-message:{$frame->data}\\n\";\n        $ws->push($frame->fd, \"server-push:\".date(\"Y-m-d H:i:s\"));\n    }\n\n    /**\n     * close\n     * @param $ws\n     * @param $fd\n     */\n    public function onClose($ws, $fd) {\n        // fd del\n        \\app\\common\\lib\\redis\\Predis::getInstance()->sRem(config('redis.live_game_key'), $fd);\n        echo \"clientid:{$fd}\\n\";\n    }\n\n    /**\n     * 记录日志\n     */\n    public function writeLog() {\n        $datas = array_merge(['date' => date(\"Ymd H:i:s\")],$_GET, $_POST, $_SERVER);\n\n        $logs = \"\";\n        foreach($datas as $key => $value) {\n            $logs .= $key . \":\" . $value . \" \";\n        }\n\n        swoole_async_writefile(APP_PATH.'../runtime/log/'.date(\"Ym\").\"/\".date(\"d\").\"_access.log\", $logs.PHP_EOL, function($filename){\n            // todo\n        }, FILE_APPEND);\n\n    }\n}\n\nnew Ws();\n```\n\n## ws_client\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n<h1>singwa-swoole-ws测试<h1>\n  <script>\n    var wsUrl = \"ws://swoole.demo.com:8812\";\n\n    var websocket = new WebSocket(wsUrl);\n\n    //实例对象的onopen属性\n    websocket.onopen = function(evt) {\n      websocket.send(\"hello-sinwa\");\n      console.log(\"conected-swoole-success\");\n    }\n\n    // 实例化 onmessage\n    websocket.onmessage = function(evt) {\n      console.log(\"ws-server-return-data:\" + evt.data);\n    }\n\n    //onclose\n    websocket.onclose = function(evt) {\n      console.log(\"close\");\n    }\n    //onerror\n\n    websocket.onerror = function(evt, e) {\n      console.log(\"error:\" + evt.data);\n    }\n\n </script>\n</body>\n</html>\n```\n\n## 定时器\n```\n<?php\nclass Server {\n    const PORT = 8811;\n\n    public function port() {\n        $shell  =  \"netstat -anp 2>/dev/null | grep \". self::PORT . \" | grep LISTEN | wc -l\";\n\n        $result = shell_exec($shell);\n        if($result != 1) {\n            // 发送报警服务 邮件 短信\n            /// todo\n            echo date(\"Ymd H:i:s\").\"error\".PHP_EOL;\n        } else {\n            echo date(\"Ymd H:i:s\").\"succss\".PHP_EOL;\n        }\n    }\n}\n\n// nohup\nswoole_timer_tick(2000, function($timer_id) {\n    (new Server())->port();\n    echo \"time-start\".PHP_EOL;\n});\n```","slug":"3","published":1,"updated":"2019-04-02T04:19:25.947Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl50067pgwibm0h1xrg"},{"layout":"post","title":"mysql 常见问题","date":"2018-03-28T03:12:26.000Z","_content":"\n## mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| validate_password.check_user_name    | ON     |\n| validate_password.dictionary_file    |        |\n| validate_password.length             | 8      |\n| validate_password.mixed_case_count   | 1      |\n| validate_password.number_count       | 1      |\n| validate_password.policy             | MEDIUM |\n| validate_password.special_char_count | 1      |\n+--------------------------------------+--------+\n7 rows in set (0.01 sec)\n\nmysql> set global validate_password.policy=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> set global validate_password.length=4;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> exit;\nBye\n\n➜  ~ mysql_secure_installation\n\nSecuring the MySQL server deployment.\n\nEnter password for user root:\nError: Access denied for user 'root'@'localhost' (using password: YES)\n```\n\n## Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'XXX.Y.ZZZZ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n\n>原因：\nMySQL 5.7.5和up实现了对功能依赖的检测。如果启用了only_full_group_by SQL模式(在默认情况下是这样)，那么MySQL就会拒绝选择列表、条件或顺序列表引用的查询，这些查询将引用组中未命名的非聚合列，而不是在功能上依赖于它们。(在5.7.5之前，MySQL没有检测到功能依赖项，only_full_group_by在默认情况下是不启用的。关于前5.7.5行为的描述，请参阅MySQL 5.6参考手册。)\n\n执行以下个命令，可以查看 sql_mode 的内容。\n```\n　　mysql> SHOW SESSION VARIABLES;\n\n　　\n　　mysql> SHOW GLOBAL VARIABLES;\n\n　　mysql> select @@sql_mode;\n```\n\n可见session和global 的sql_mode的值都为： \n\n`ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION`\n\nonly_full_group_by说明： \nonly_full_group_by ：使用这个就是使用和oracle一样的group 规则, select的列都要在group中,或者本身是聚合列(SUM,AVG,MAX,MIN) 才行，其实这个配置目前个人感觉和distinct差不多的，所以去掉就好 \n官网摘抄： \n官网：ONLY_FULL_GROUP_BY \nReject queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on (uniquely determined by) GROUP BY columns.\n\nAs of MySQL 5.7.5, the default SQL mode includes ONLY_FULL_GROUP_BY. (Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL 5.6 Reference Manual.)\n\nA MySQL extension to standard SQL permits references in the HAVING clause to aliased expressions in the select list. Before MySQL 5.7.5, enabling ONLY_FULL_GROUP_BY disables this extension, thus requiring the HAVING clause to be written using unaliased expressions. As of MySQL 5.7.5, this restriction is lifted so that the HAVING clause can refer to aliases regardless of whether ONLY_FULL_GROUP_BY is enabled.\n\n解决：\n执行以下两个命令：\n```\nmysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n\nmysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n这两个命令，去掉 sql_mode 的 ONLY_FULL_GROUP_BY\n\n## Mac OS X 完全卸载MySQL\n```\n执行下列命令\nservie.mysql stop\nbrew uninstall mysql\nsudo rm /usr/local/mysql\nsudo rm -rf /usr/local/mysql*\nsudo rm -rf /Library/StartupItems/MySQLCOM\nsudo rm -rf /Library/PreferencePanes/My*\nrm -rf ~/Library/PreferencePanes/My*\nsudo rm -rf /Library/Receipts/mysql*\nsudo rm -rf /Library/Receipts/MySQL*\nsudo rm -rf /var/db/receipts/com.mysql.*\n其实不同的安装方式有些东西的存储位置不一样，删除完检查一下下面这些文件是否删除了，没有的话则删除掉：\n\n/usr/local/Cellar 里的mysql文件\n/usr/local/var 里的mysql文件\n/tmp 里的mysql.sock, mysql.sock.lock, my.cnf文件\npid文件和err文件都在/usr/local/var/mysql里确保删除了\nbrew安装的安装包存储在/usr/local/Library/Cache/Homebrew也可以一并删除\n执行brew cleanup\n```","source":"_posts/2018/201803/20180328-1.md","raw":"---\nlayout: post\ntitle: mysql 常见问题\ndate: 2018-03-28 11:12:26\ntags:\n---\n\n## mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| validate_password.check_user_name    | ON     |\n| validate_password.dictionary_file    |        |\n| validate_password.length             | 8      |\n| validate_password.mixed_case_count   | 1      |\n| validate_password.number_count       | 1      |\n| validate_password.policy             | MEDIUM |\n| validate_password.special_char_count | 1      |\n+--------------------------------------+--------+\n7 rows in set (0.01 sec)\n\nmysql> set global validate_password.policy=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> set global validate_password.length=4;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> exit;\nBye\n\n➜  ~ mysql_secure_installation\n\nSecuring the MySQL server deployment.\n\nEnter password for user root:\nError: Access denied for user 'root'@'localhost' (using password: YES)\n```\n\n## Syntax error or access violation: 1055 Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'XXX.Y.ZZZZ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n\n>原因：\nMySQL 5.7.5和up实现了对功能依赖的检测。如果启用了only_full_group_by SQL模式(在默认情况下是这样)，那么MySQL就会拒绝选择列表、条件或顺序列表引用的查询，这些查询将引用组中未命名的非聚合列，而不是在功能上依赖于它们。(在5.7.5之前，MySQL没有检测到功能依赖项，only_full_group_by在默认情况下是不启用的。关于前5.7.5行为的描述，请参阅MySQL 5.6参考手册。)\n\n执行以下个命令，可以查看 sql_mode 的内容。\n```\n　　mysql> SHOW SESSION VARIABLES;\n\n　　\n　　mysql> SHOW GLOBAL VARIABLES;\n\n　　mysql> select @@sql_mode;\n```\n\n可见session和global 的sql_mode的值都为： \n\n`ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION`\n\nonly_full_group_by说明： \nonly_full_group_by ：使用这个就是使用和oracle一样的group 规则, select的列都要在group中,或者本身是聚合列(SUM,AVG,MAX,MIN) 才行，其实这个配置目前个人感觉和distinct差不多的，所以去掉就好 \n官网摘抄： \n官网：ONLY_FULL_GROUP_BY \nReject queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on (uniquely determined by) GROUP BY columns.\n\nAs of MySQL 5.7.5, the default SQL mode includes ONLY_FULL_GROUP_BY. (Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL 5.6 Reference Manual.)\n\nA MySQL extension to standard SQL permits references in the HAVING clause to aliased expressions in the select list. Before MySQL 5.7.5, enabling ONLY_FULL_GROUP_BY disables this extension, thus requiring the HAVING clause to be written using unaliased expressions. As of MySQL 5.7.5, this restriction is lifted so that the HAVING clause can refer to aliases regardless of whether ONLY_FULL_GROUP_BY is enabled.\n\n解决：\n执行以下两个命令：\n```\nmysql> set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n\nmysql> set session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n这两个命令，去掉 sql_mode 的 ONLY_FULL_GROUP_BY\n\n## Mac OS X 完全卸载MySQL\n```\n执行下列命令\nservie.mysql stop\nbrew uninstall mysql\nsudo rm /usr/local/mysql\nsudo rm -rf /usr/local/mysql*\nsudo rm -rf /Library/StartupItems/MySQLCOM\nsudo rm -rf /Library/PreferencePanes/My*\nrm -rf ~/Library/PreferencePanes/My*\nsudo rm -rf /Library/Receipts/mysql*\nsudo rm -rf /Library/Receipts/MySQL*\nsudo rm -rf /var/db/receipts/com.mysql.*\n其实不同的安装方式有些东西的存储位置不一样，删除完检查一下下面这些文件是否删除了，没有的话则删除掉：\n\n/usr/local/Cellar 里的mysql文件\n/usr/local/var 里的mysql文件\n/tmp 里的mysql.sock, mysql.sock.lock, my.cnf文件\npid文件和err文件都在/usr/local/var/mysql里确保删除了\nbrew安装的安装包存储在/usr/local/Library/Cache/Homebrew也可以一并删除\n执行brew cleanup\n```","slug":"1","published":1,"updated":"2019-04-02T04:19:25.053Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl60069pgwinejztabm"},{"layout":"post","title":"sheel 脚本","date":"2018-03-29T01:53:51.000Z","_content":"\n# reload.sh  平滑重启\n```\necho \"loading...\"\npid = `pidof live_master`\necho $pid\nkill -USR1 $pid\necho '\"loading success'\n```","source":"_posts/2018/201803/20180329-1.md","raw":"---\nlayout: post\ntitle: sheel 脚本\ndate: 2018-03-29 09:53:51\ntags:\n---\n\n# reload.sh  平滑重启\n```\necho \"loading...\"\npid = `pidof live_master`\necho $pid\nkill -USR1 $pid\necho '\"loading success'\n```","slug":"1","published":1,"updated":"2019-04-02T04:19:23.881Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl8006bpgwilk25w0um"},{"layout":"post","title":"nginx 配置","date":"2018-03-29T02:32:49.000Z","_content":"\n# 负载均衡\n```\nhttp {\n\tupstream http_server {\n\t\tserver x.x.x.x weight=10; # 权重\n\t\tserver x.x.x.x weight=20; # 权重\n\t}\n\n\tupstream backend {\n    \tserver 127.0.0.1:8080;\n    \tserver 127.0.0.1:9090;\n    \tip_hash; # ip_hash\n\t}\n\n\n\tserver {\n\t\t...\n\t}\n}\n```\n\n> nginx 转发比较消耗CPU\n\n# nginx 转发\n```\nserver {\n\tlisten 8888;\n\tserver name localhost;\n\n\t#access_log logs/host.access.log main;\n\n\tlocation / {\n\t\troot /home/...;\n\t\tindex index.html index.htm\n\t\t\n\t\tif (!-e $request_filename) { # 找不到请求地址\n\t\t\tproxy_pass http://127.0.0.1:8811; # 单机转发 外网IP\n\t\t\t#proxy_pass http://http_server; # 负载均衡名称\n\t\t}\n\t}\n}\n```\n\n## nginx 的 upstream权重配置 \n```\n权重配置：\n\nweight和请求数量成正比，主要用于上游服务器配置不均衡的情况。下面的配置中，192.168.10.2机器的请求量是192.168.10.1机器请求量的2倍。\n\nupstream nodes {\n\nserver 192.168.10.1:8668 weight=5;\n\nserver 192.168.10.2:8668 weight=10;\n\n}\n\n\nip_hash配置：\n\n每一个请求按照请求的ip的hash结果分配。这样每一个请求固定落在一个上游服务器，能够解决ip会话在同一台服务器的问题。\n\nupstream nodes {\n\nip_hash;\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\n}\n\n\nfair配置：\n\n按上游服务器的响应时间来分配请求。响应时间短的优先分配。\n\nupstream nodes {\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\nfair;\n\n}\n\n\nurl_hash配置：\n\n按照访问的url的hash结果来分配请求，使每一个url定向到同一个上游服务器。注意：在upstream中加入hash语句。server语句中不能写入weight等其他的參数，hash_method是使用的hash算法。\n\nupstream nodes {\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\nhash $request_uri;\n\nhash_method crc32;\n\n}\n\n\n\n下面再说下在upstream中常用的配置项：\n\ndown：表示当前的server不參与负载均衡。\n\nweight：默觉得1，weight越大，负载的权重就越大。\n\nmax_fails ：请求失败的次数默觉得1。\n\nfail_timeout : max_fails次失败后，暂停请求此台服务器的时间。\n\nbackup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\nupstream nodes {\n\nip_hash;\n\nserver 192.168.10.1:8668 down;\n\nserver 192.168.10.2:8668 weight=2;\n\nserver 192.168.10.3:8668;\n\nserver 192.168.10.4:8668 backup;\n\n}\n```\n\n\n# Linux命令\n## 机器名\n`hostname -i`\n\n## 端口\n`netstat -anp | grep 8888`","source":"_posts/2018/201803/20180329-2.md","raw":"---\nlayout: post\ntitle: nginx 配置\ndate: 2018-03-29 10:32:49\ntags:\n---\n\n# 负载均衡\n```\nhttp {\n\tupstream http_server {\n\t\tserver x.x.x.x weight=10; # 权重\n\t\tserver x.x.x.x weight=20; # 权重\n\t}\n\n\tupstream backend {\n    \tserver 127.0.0.1:8080;\n    \tserver 127.0.0.1:9090;\n    \tip_hash; # ip_hash\n\t}\n\n\n\tserver {\n\t\t...\n\t}\n}\n```\n\n> nginx 转发比较消耗CPU\n\n# nginx 转发\n```\nserver {\n\tlisten 8888;\n\tserver name localhost;\n\n\t#access_log logs/host.access.log main;\n\n\tlocation / {\n\t\troot /home/...;\n\t\tindex index.html index.htm\n\t\t\n\t\tif (!-e $request_filename) { # 找不到请求地址\n\t\t\tproxy_pass http://127.0.0.1:8811; # 单机转发 外网IP\n\t\t\t#proxy_pass http://http_server; # 负载均衡名称\n\t\t}\n\t}\n}\n```\n\n## nginx 的 upstream权重配置 \n```\n权重配置：\n\nweight和请求数量成正比，主要用于上游服务器配置不均衡的情况。下面的配置中，192.168.10.2机器的请求量是192.168.10.1机器请求量的2倍。\n\nupstream nodes {\n\nserver 192.168.10.1:8668 weight=5;\n\nserver 192.168.10.2:8668 weight=10;\n\n}\n\n\nip_hash配置：\n\n每一个请求按照请求的ip的hash结果分配。这样每一个请求固定落在一个上游服务器，能够解决ip会话在同一台服务器的问题。\n\nupstream nodes {\n\nip_hash;\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\n}\n\n\nfair配置：\n\n按上游服务器的响应时间来分配请求。响应时间短的优先分配。\n\nupstream nodes {\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\nfair;\n\n}\n\n\nurl_hash配置：\n\n按照访问的url的hash结果来分配请求，使每一个url定向到同一个上游服务器。注意：在upstream中加入hash语句。server语句中不能写入weight等其他的參数，hash_method是使用的hash算法。\n\nupstream nodes {\n\nserver 192.168.10.1:8668;\n\nserver 192.168.10.2:8668;\n\nhash $request_uri;\n\nhash_method crc32;\n\n}\n\n\n\n下面再说下在upstream中常用的配置项：\n\ndown：表示当前的server不參与负载均衡。\n\nweight：默觉得1，weight越大，负载的权重就越大。\n\nmax_fails ：请求失败的次数默觉得1。\n\nfail_timeout : max_fails次失败后，暂停请求此台服务器的时间。\n\nbackup： 其他全部的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\nupstream nodes {\n\nip_hash;\n\nserver 192.168.10.1:8668 down;\n\nserver 192.168.10.2:8668 weight=2;\n\nserver 192.168.10.3:8668;\n\nserver 192.168.10.4:8668 backup;\n\n}\n```\n\n\n# Linux命令\n## 机器名\n`hostname -i`\n\n## 端口\n`netstat -anp | grep 8888`","slug":"2","published":1,"updated":"2019-04-02T04:19:22.884Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl9006dpgwifo9dd13u"},{"layout":"post","title":"立个flag","date":"2018-03-29T03:25:31.000Z","_content":"\n好久都没有在这里写笔记了。记录的地方比较零散，有道云、OneNote、web博客(域名迁移备案失效，服务器也关闭了)。有时候突然想要查找一些内容都忘记放在哪里了。也就只能是一个记录过程却少了一些查找的过程。立个flag以后继续记录在这里了。","source":"_posts/2018/201803/20180329-3.md","raw":"---\nlayout: post\ntitle: 立个flag\ndate: 2018-03-29 11:25:31\ntags:\n---\n\n好久都没有在这里写笔记了。记录的地方比较零散，有道云、OneNote、web博客(域名迁移备案失效，服务器也关闭了)。有时候突然想要查找一些内容都忘记放在哪里了。也就只能是一个记录过程却少了一些查找的过程。立个flag以后继续记录在这里了。","slug":"3","published":1,"updated":"2019-04-02T04:19:21.587Z","comments":1,"photos":[],"link":"","_id":"ck39ugjl9006fpgwid8a71y43"},{"layout":"post","title":"网络协议","date":"2018-03-29T04:32:20.000Z","_content":"网络协议为计算机网络中进行数据交换而建立的规则,标准或约定的集合,所有的计算机/手机等网络设备通信都得遵循网络协议.\n网络协议根据通信的步骤,层级划分为7个层级,从上往下为:\n\n* 应用层\n* 表示层\n* 会话层\n* 传输层\n* 网络层\n* 数据链路层\n* 物理层\n\n![TCP/IP模型与OSI模型对比](https://www.easyswoole.com/Manual/3.x/Cn/_book/noobCourse/NetworkrPotocol/networkPotocol.png)\n\n>内容来源： [easyswoole](https://www.easyswoole.com)","source":"_posts/2018/201803/20180329-4.md","raw":"---\nlayout: post\ntitle: 网络协议\ndate: 2018-03-29 12:32:20\ntags:\n---\n网络协议为计算机网络中进行数据交换而建立的规则,标准或约定的集合,所有的计算机/手机等网络设备通信都得遵循网络协议.\n网络协议根据通信的步骤,层级划分为7个层级,从上往下为:\n\n* 应用层\n* 表示层\n* 会话层\n* 传输层\n* 网络层\n* 数据链路层\n* 物理层\n\n![TCP/IP模型与OSI模型对比](https://www.easyswoole.com/Manual/3.x/Cn/_book/noobCourse/NetworkrPotocol/networkPotocol.png)\n\n>内容来源： [easyswoole](https://www.easyswoole.com)","slug":"4","published":1,"updated":"2019-04-07T07:52:03.015Z","comments":1,"photos":[],"link":"","_id":"ck39ugjla006hpgwiqmed6xlq"},{"layout":"post","title":"brew更换国内镜像源","date":"2018-03-29T11:21:44.000Z","_content":"\nhomebrew主要分两部分：git repo（位于GitHub）和二进制bottle（位于binary），这两者在国内访问不太顺畅。其实可以替换成国内的镜像，git repo国内镜像就比较多了，可以自行查找，如：中科大镜像…\n\n## 替换homebrew默认源\n```\n替换brew.git:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n\n替换homebrew-core.git:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n如果替换源之后brew update 没反应\n```\ncd \"$(brew --repo)\"\ngit pull origin master\n```\n\n## 切回官方源\n```\n重置brew.git:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n\n重置homebrew-core.git:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。\nHomebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库：\n\n对于bash用户\n```\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n对于zsh用户\n```\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n```\n","source":"_posts/2018/201803/20180329-5.md","raw":"---\nlayout: post\ntitle: brew更换国内镜像源\ndate: 2018-03-29 19:21:44\ntags:\n---\n\nhomebrew主要分两部分：git repo（位于GitHub）和二进制bottle（位于binary），这两者在国内访问不太顺畅。其实可以替换成国内的镜像，git repo国内镜像就比较多了，可以自行查找，如：中科大镜像…\n\n## 替换homebrew默认源\n```\n替换brew.git:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n\n替换homebrew-core.git:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n```\n\n如果替换源之后brew update 没反应\n```\ncd \"$(brew --repo)\"\ngit pull origin master\n```\n\n## 切回官方源\n```\n重置brew.git:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n\n重置homebrew-core.git:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。\nHomebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库：\n\n对于bash用户\n```\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n对于zsh用户\n```\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n```\n","slug":"5","published":1,"updated":"2019-04-02T04:21:49.412Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlf006ipgwik0ikjg38"},{"layout":"post","title":"PHP细节-01","date":"2018-03-31T03:56:35.000Z","_content":"# 字符串\n* 双引号或者heredoc其中的变量 以及 `\\` 开始的符合8进制16进制和特殊符号\n* 字符串底层是C语言的结构体，所以可以用`[]` 或 `{}` 来访问某个字符\n* 字符串最大长度可以达到2G内存\n* C语言字符串`\\0`代表字符串结束，但PHP结构体是有个长度字段，可以让二进制字符串安全\n* 用超出字符串长度的下标写入将会拉长字符串并以空格填充\n* UTF-8 编码\n>16进制 Unicode 编码范围 0800 - FFFF\n>2进制 1110xxxx 10xxxxxx 10xxxxxx \n为了通用优先选择UTF-8 3个字节,为了节省空间用GBK 2个字节\n\n\n# 数组\n* key 可以是integer 或者 string (包含合法整形的字符串，浮点数和布尔值都会被转化为整形)\n* unset() 后，不会重建索引\n* 遍历中的引用分析\n```php\n<?php\n$arr = [1,2,3];\nforeach ($arr as $key => &$value) {\n}\necho $value; // 3 是 &$arr[2] = 3;\n\nforeach ($arr as $key => $value) {\n}\n\nvar_dump($arr); // [1,2,2]\n\n// 循环1 $value = &$arr[2] = $arr[0] = 1;\n// 循环2 $value = &$arr[2] = $arr[1] = 2;\n// 循环3 $value = &$arr[2] = $arr[2] = 2;\n```\n\n* 位运算：`$a&1 == 0 偶数 反之奇数`\n\n# 正则表达式\n## 定义\n组成 = 元字符 + 普通字符\n常见元字符\n```\n^ \t\t匹配字符串的开始\n$       匹配字符串的结束\n.\t\t匹配除换行以外的任意字符\n\\w \t\t匹配字母或者数字或者下划线\n\\W \t\t不匹配字母数字下划线\n\\s \t\t匹配任意的空字符 相当于[\\f\\r\\n\\t\\v]\n\\d \t\t匹配任意的数字\n\\b \t\t匹配单词的开始或者结束\n\\xxx\t查找以八进制xxx规定的字符\n\\xdd\t查找以十六进制dd对顶的字符\n\\uxxx \t查找以十六进制 xxxx 规定的 Unicode 字符\n[abcd]  匹配任意一个字符\n[a-d]   匹配任意一个字符\n[^abcd] 不匹配任意一个字符\n[\\u4e00-\\u9fa5] 匹配任意单个汉字\n```\n\n常见限定符 （限定的是前面一个单元）\n```\n|\t\t或关系\n*\t\t匹配0到多个，相当于{0,}\n?\t\t匹配0到1个，相当于{0,1}\n+\t\t匹配至少1个字符，相当于{1,}\n{n}\t\t匹配n个字符\n{n,}    匹配至少n个字符\n{n,m}\t匹配n到m个字符\n```\n\n环视\n```\n(?=exp) \t位置后面能匹配exp\n(?!=exp)\t位置后面不能匹配exp\n(?<=exp)\t位置前面能匹配exp\n(?<!exp)\t位置前面不能匹配exp\n```\n\n贪婪与懒惰\n>通常的行为是尽可能匹配多的字符（回溯）\n只要在它后面加一个问号，匹配成功的前提是使用最少的重复\n\n```\n<?php\n$string = 'aaabaab';\n$pattern1 = '/a.{1,10}b/';\n$pattern2 = '/a.{1,10}?b/';\npreg_match_all($pattern1,$string,$matchs1);\npreg_match_all($pattern2,$string,$matchs2);\n\nvar_dump($matchs1);\nvar_dump($matchs2);\n\narray(1) {\n  [0]=>\n  array(1) {\n    [0]=>\n    string(7) \"aaabaab\"\n  }\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(4) \"aaab\"\n    [1]=>\n    string(3) \"aab\"\n  }\n}\n```\n\n回溯\n>贪婪模式的回溯是影响性能\n\n# 习惯\n* 优先使用单引号\n* 内置函数：\n```\n1. 邮件过滤：$email = filter_var('hi@uiste.com', FILTER_VALIDATE_EMAIL);\n2. 获取文件扩展名：pathinfo($filename, PATHINFO_EXTENSION);\n```\n\n* strtr 与 str_replace 函数前者优先级更高\n* yield 实现协程 生成器\n```\nfunction createRange($number){\n    for($i=0;$i<$number;$i++){\n        yield time();\n    }\n}\n\n$result = createRange(10); // 这里调用上面我们创建的函数\nforeach($result as $value){\n    sleep(1);\n    echo $value , PHP_EOL;\n}\n\n1554027375\n1554027376\n1554027377\n1554027378\n1554027379\n1554027380\n1554027381\n1554027382\n1554027383\n1554027384\n[Finished in 10.2s]\n\n我们来还原一下代码执行过程。\n\n首先调用 createRange 函数，传入参数10，但是 for 值执行了一次然后停止了，并且告诉 foreach 第一次循环可以用的值。\n foreach 开始对 $result 循环，进来首先 sleep(1) ，然后开始使用 for 给的一个值执行输出。\n foreach 准备第二次循环，开始第二次循环之前，它向 for 循环又请求了一次。\n for 循环于是又执行了一次，将生成的时间戳告诉 foreach .\n foreach 拿到第二个值，并且输出。由于 foreach 中 sleep(1) ，所以， for 循环延迟了1秒生成当前时间\n所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。\n\n无论开始传入的 $number 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。\n\n读取超大文件\nPHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。\n\n<?php\nheader(\"content-type:text/html;charset=utf-8\");\nfunction readTxt()\n{\n    # code...\n    $handle = fopen(\"./test.txt\", 'rb');\n\n    while (feof($handle)===false) {\n        # code...\n        yield fgets($handle);\n    }\n\n    fclose($handle);\n}\n\nforeach (readTxt() as $key => $value) {\n    # code...\n    echo $value , PHP_EOL;\n}\n```\n\n* 语法支持带来更高效率 用 ** 更快\n```\necho 2**3 , PHP_EOL;\necho pow(2,3) , PHP_EOL;\n```\n\n* 用 ... 定义变成参数\n* <=> 大于为1，等于为0，小于为-1\n* if 使用技巧给定初始值，比增加else效率更高\n* if 使用技巧 三元运算符替换\n* 去掉多此一举的写法 直接return 出去，尽量精简代码\n* 根据二维数组中的某个键值排序：\n```\n// 根据uv_price排序\narray_multisort(array_column($productData, 'uv_price'), SORT_DESC, $productData);\n```\n\n\n## php坑人题\n```php\n<?php\n$a = 3;\n$b = 6;\nif($a = 5 || $b = 7){\n\t$a++;\n\t++$b;\n}\n\necho $a . '-' . $b;  //1-7\n```\n\n```php\n<?php\n$count = 5;\nfunction getCount()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n\necho ++$count . PHP_EOL; //6\necho getCount() . PHP_EOL; //0\necho getCount() . PHP_EOL; //1\n```\n\n```php\n<?php\necho count('1234') + count(null) + count(false) . PHP_EOL; // 1+0+1 = 2\n```\n\n\n```php\n<?php\n$a = 0.2+0.7;\n$b = 0.9;\necho $a . PHP_EOL; // 0.9\necho $b . PHP_EOL; // 0.9\nvar_dump($a == $b); // bool(false)\n// php在比较浮点数大小时，需要把浮点数转为字符串进行比较。\n\n要使用 BC 这个函数库，要在编译 PHP 程序时加入 --enable-bcmath 的选项。\n\nbcadd: 将二个高精确度数字相加。\nbccomp: 比较二个高精确度数字。\nbcdiv: 将二个高精确度数字相除。\nbcmod: 取得高精确度数字的余数。\nbcmul: 将二个高精确度数字相乘。\nbcpow: 求一高精确度数字次方值。\nbcscale: 配置程序中所有 BC 函数库的默认小数点位数。\nbcsqrt: 求一高精确度数字的平方根。\nbcsub: 将二个高精确度数字相减。\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201803/20180331-1.md","raw":"---\nlayout: post\ntitle: PHP细节-01\ndate: 2018-03-31 11:56:35\ntags:\n---\n# 字符串\n* 双引号或者heredoc其中的变量 以及 `\\` 开始的符合8进制16进制和特殊符号\n* 字符串底层是C语言的结构体，所以可以用`[]` 或 `{}` 来访问某个字符\n* 字符串最大长度可以达到2G内存\n* C语言字符串`\\0`代表字符串结束，但PHP结构体是有个长度字段，可以让二进制字符串安全\n* 用超出字符串长度的下标写入将会拉长字符串并以空格填充\n* UTF-8 编码\n>16进制 Unicode 编码范围 0800 - FFFF\n>2进制 1110xxxx 10xxxxxx 10xxxxxx \n为了通用优先选择UTF-8 3个字节,为了节省空间用GBK 2个字节\n\n\n# 数组\n* key 可以是integer 或者 string (包含合法整形的字符串，浮点数和布尔值都会被转化为整形)\n* unset() 后，不会重建索引\n* 遍历中的引用分析\n```php\n<?php\n$arr = [1,2,3];\nforeach ($arr as $key => &$value) {\n}\necho $value; // 3 是 &$arr[2] = 3;\n\nforeach ($arr as $key => $value) {\n}\n\nvar_dump($arr); // [1,2,2]\n\n// 循环1 $value = &$arr[2] = $arr[0] = 1;\n// 循环2 $value = &$arr[2] = $arr[1] = 2;\n// 循环3 $value = &$arr[2] = $arr[2] = 2;\n```\n\n* 位运算：`$a&1 == 0 偶数 反之奇数`\n\n# 正则表达式\n## 定义\n组成 = 元字符 + 普通字符\n常见元字符\n```\n^ \t\t匹配字符串的开始\n$       匹配字符串的结束\n.\t\t匹配除换行以外的任意字符\n\\w \t\t匹配字母或者数字或者下划线\n\\W \t\t不匹配字母数字下划线\n\\s \t\t匹配任意的空字符 相当于[\\f\\r\\n\\t\\v]\n\\d \t\t匹配任意的数字\n\\b \t\t匹配单词的开始或者结束\n\\xxx\t查找以八进制xxx规定的字符\n\\xdd\t查找以十六进制dd对顶的字符\n\\uxxx \t查找以十六进制 xxxx 规定的 Unicode 字符\n[abcd]  匹配任意一个字符\n[a-d]   匹配任意一个字符\n[^abcd] 不匹配任意一个字符\n[\\u4e00-\\u9fa5] 匹配任意单个汉字\n```\n\n常见限定符 （限定的是前面一个单元）\n```\n|\t\t或关系\n*\t\t匹配0到多个，相当于{0,}\n?\t\t匹配0到1个，相当于{0,1}\n+\t\t匹配至少1个字符，相当于{1,}\n{n}\t\t匹配n个字符\n{n,}    匹配至少n个字符\n{n,m}\t匹配n到m个字符\n```\n\n环视\n```\n(?=exp) \t位置后面能匹配exp\n(?!=exp)\t位置后面不能匹配exp\n(?<=exp)\t位置前面能匹配exp\n(?<!exp)\t位置前面不能匹配exp\n```\n\n贪婪与懒惰\n>通常的行为是尽可能匹配多的字符（回溯）\n只要在它后面加一个问号，匹配成功的前提是使用最少的重复\n\n```\n<?php\n$string = 'aaabaab';\n$pattern1 = '/a.{1,10}b/';\n$pattern2 = '/a.{1,10}?b/';\npreg_match_all($pattern1,$string,$matchs1);\npreg_match_all($pattern2,$string,$matchs2);\n\nvar_dump($matchs1);\nvar_dump($matchs2);\n\narray(1) {\n  [0]=>\n  array(1) {\n    [0]=>\n    string(7) \"aaabaab\"\n  }\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(4) \"aaab\"\n    [1]=>\n    string(3) \"aab\"\n  }\n}\n```\n\n回溯\n>贪婪模式的回溯是影响性能\n\n# 习惯\n* 优先使用单引号\n* 内置函数：\n```\n1. 邮件过滤：$email = filter_var('hi@uiste.com', FILTER_VALIDATE_EMAIL);\n2. 获取文件扩展名：pathinfo($filename, PATHINFO_EXTENSION);\n```\n\n* strtr 与 str_replace 函数前者优先级更高\n* yield 实现协程 生成器\n```\nfunction createRange($number){\n    for($i=0;$i<$number;$i++){\n        yield time();\n    }\n}\n\n$result = createRange(10); // 这里调用上面我们创建的函数\nforeach($result as $value){\n    sleep(1);\n    echo $value , PHP_EOL;\n}\n\n1554027375\n1554027376\n1554027377\n1554027378\n1554027379\n1554027380\n1554027381\n1554027382\n1554027383\n1554027384\n[Finished in 10.2s]\n\n我们来还原一下代码执行过程。\n\n首先调用 createRange 函数，传入参数10，但是 for 值执行了一次然后停止了，并且告诉 foreach 第一次循环可以用的值。\n foreach 开始对 $result 循环，进来首先 sleep(1) ，然后开始使用 for 给的一个值执行输出。\n foreach 准备第二次循环，开始第二次循环之前，它向 for 循环又请求了一次。\n for 循环于是又执行了一次，将生成的时间戳告诉 foreach .\n foreach 拿到第二个值，并且输出。由于 foreach 中 sleep(1) ，所以， for 循环延迟了1秒生成当前时间\n所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。\n\n无论开始传入的 $number 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。\n\n读取超大文件\nPHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。\n\n<?php\nheader(\"content-type:text/html;charset=utf-8\");\nfunction readTxt()\n{\n    # code...\n    $handle = fopen(\"./test.txt\", 'rb');\n\n    while (feof($handle)===false) {\n        # code...\n        yield fgets($handle);\n    }\n\n    fclose($handle);\n}\n\nforeach (readTxt() as $key => $value) {\n    # code...\n    echo $value , PHP_EOL;\n}\n```\n\n* 语法支持带来更高效率 用 ** 更快\n```\necho 2**3 , PHP_EOL;\necho pow(2,3) , PHP_EOL;\n```\n\n* 用 ... 定义变成参数\n* <=> 大于为1，等于为0，小于为-1\n* if 使用技巧给定初始值，比增加else效率更高\n* if 使用技巧 三元运算符替换\n* 去掉多此一举的写法 直接return 出去，尽量精简代码\n* 根据二维数组中的某个键值排序：\n```\n// 根据uv_price排序\narray_multisort(array_column($productData, 'uv_price'), SORT_DESC, $productData);\n```\n\n\n## php坑人题\n```php\n<?php\n$a = 3;\n$b = 6;\nif($a = 5 || $b = 7){\n\t$a++;\n\t++$b;\n}\n\necho $a . '-' . $b;  //1-7\n```\n\n```php\n<?php\n$count = 5;\nfunction getCount()\n{\n\tstatic $count = 0;\n\treturn $count++;\n}\n\necho ++$count . PHP_EOL; //6\necho getCount() . PHP_EOL; //0\necho getCount() . PHP_EOL; //1\n```\n\n```php\n<?php\necho count('1234') + count(null) + count(false) . PHP_EOL; // 1+0+1 = 2\n```\n\n\n```php\n<?php\n$a = 0.2+0.7;\n$b = 0.9;\necho $a . PHP_EOL; // 0.9\necho $b . PHP_EOL; // 0.9\nvar_dump($a == $b); // bool(false)\n// php在比较浮点数大小时，需要把浮点数转为字符串进行比较。\n\n要使用 BC 这个函数库，要在编译 PHP 程序时加入 --enable-bcmath 的选项。\n\nbcadd: 将二个高精确度数字相加。\nbccomp: 比较二个高精确度数字。\nbcdiv: 将二个高精确度数字相除。\nbcmod: 取得高精确度数字的余数。\nbcmul: 将二个高精确度数字相乘。\nbcpow: 求一高精确度数字次方值。\nbcscale: 配置程序中所有 BC 函数库的默认小数点位数。\nbcsqrt: 求一高精确度数字的平方根。\nbcsub: 将二个高精确度数字相减。\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-02T04:19:16.829Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlh006kpgwioh6cfxr0"},{"layout":"post","title":"PHP细节-02","date":"2018-03-31T14:44:26.000Z","_content":"\n# 文件\n* 二进制文件读写 pack() unpack()\n* 系统函数判断图像类型：exif_imagetype()\n* 文件指针\n```\nfseek() 在文件指针中定位\nftell() 返回文件指针读写的位置\nrewind() 倒回文件指针的位置\nfeof() 测试文件指针是否到了文件结束的位置\n```\n\n* 超大文件上传\n```\nswfUpload、uploadify 等flash组件\nXMLHTTPRequest 大文件断点续传+分段上传 ajax2.0\n```\n\n# PHP运行原理\n>UA -> apache -> SAPI -> zend engine -> php script\n\n# PHP运行模式\n* CLI模式 命令行接口\n```\n定时任务\nshell脚本中使用\n桌面应用程序\nPHP server 服务\n```\n\n* CGI 通用网关接口\n```\n就像桥梁一样，把网页和web服务器中的执行程序连接起来，它把http服务器接收的指令传递给执行程序，再把执行程序的结果返回http服务器。CGI跨平台性及佳，几乎可以在任何操作系统实现\n\n提供http服务\n性能比较差，一个请求fork一个进程\n```\n\n* FastCGI 快速通用网关接口\n```\n也是交互程序与web服务器通信协议。致力于介绍服务器与程序之前互动的开销\nweb服务器启动时，载入FastCGI进程管理器 对于PHP来讲就是php-fpm\nFastCGI 会启动多个CGI进程等待web服务器的连接\n收到请求时由FastCGI子进程处理。子进程关闭连接时，请求处理完成。子进程接着等待并处理FastCGI进程管理器的下一个连接\n\n提供http服务\n支持大并发\n多进程消耗较多内存\n```\n\n* 模块模式 apache 和 ISS\n\n\n# 进程、线程、协程\n* 单进程：单个CPU一次只能运行一个任务\n* 一个进程可以包括多个线程（防止多个线程同时读写某一块区域加锁机制）\n* 协程避免了无意义的调度，由此提高了性能。但因此要程序员自己承担调度的责任，同时也失去了标准线程使用多CPU的能力\n\n> 多进程形式，允许多个任务同时运行\n> 多线程形式，允许单个任务分成不同部分运行\n\n* ts Thread safe 线程安全，执行时会进程线程安全检查，防止有新要求就启动新线程的执行方式而耗尽系统资源\n* nts Non Thread Safe 非线程安全，在执行时不进行线程安全检查\n\n> 由于ISAPI是线程执行的，所以选择PHP版本时要选择TS版本的。其它选择NTS版本就行了。\n\n* Apache 的 prefork 模块\n> prefork 采用预派生子进程模式，用单独的子进程来处理不同的请求，进程之间彼此独立。httpd-mpm.conf 配置包括：\n``` \nStartServers 5 #  初始化进程数量\nMinSpareServers 5 # 空闲进程总数最小值\nMaxApareServers 10 # 空闲进程总数最大值\nMaxClients 150 # 最大客户端连接数量限制\nMaxRequestsPerChild 0 # 子进程减能处理的请求数量\n```\n\n* Apache 的 worker 模块\n> worker 全新的支持多线程和多进程混合模型的MPM，由于使用线程来处理，所以可以处理相对海量的数据请求。而系统资源的开销要小于基于进程的服务器\n\n* Apache 的 event 模式\n\n\n为什么大访问量下NGINX性能更高？\n> Apache 所采用的select 网络 I/O 模型非常低效\n> Nginx 使用了最新的epoll 和 kqueue(freebsd) 网络 I/O 模型\n> PHP是 Apache 的一个扩展模块，所以Apache 进程 干的事情也比较多，执行PHP、输出HTML 都得干，占用的资源也多（CPU，内存）\n\n# PHP运行机制与原理\n* PHP 底层原理\n> PHP通过 SAPI 和 Apache相连\nPHP总共有三个模块：内核、Zend引擎、以及扩展层\nPHP内核用来处理请求、文件流、错误处理等相关操作\nZend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；\n扩展层是一株函数、类库和流，PHP使用它们来执行一些特定的操作，如：MySQL扩展来连接MySQL数据库\nZE引擎执行程序是可能需要连接若干扩展，这是ZE将控制权交给扩展，等待处理完任务和再返还\n最后ZE将程序运行结果反回给PHP内核，它再将结果传送给SAPI传给Apache\n\n* PHP运行机制\n>1. 扫描\n2. 解析\n3. 编译\n4. 执行\n5. 输出\n\n# PHP垃圾回收机制\n没有引用的内存变量就垃圾，PHP开启了很多内存空间，如果不销毁内存会一点点的被吃掉，最终导致内存溢出。\n1. 找到所有已定义的变量：get_defined_vars\n2. refcount_gc 是否为0 就知道是不是垃圾 无引用的变量 (清除为0的5.2版本以前   5.3以后 采用了引用计数系统中的同步周期回收算法来清除)\n3. 当我们存储的疑似垃圾区域满了的时候，就会被执行清除垃圾的操作。前提是开启了 php.ini 中的 zend.enable_gc 配置 也可以调用 gc_enable() 和 gc_disable() 打开和关闭垃圾回收机制  也可以通过 gc_collect_cycles() 强制执行周期回收 \n\n# PHP常用选项\n* display_errors 是否显示错误信息 辅助开发使用，不要在生产环境使用\n* error_reporting 设置错误报告的级别\n* variables_order 设置EGPCS超全局变量的解析顺序\n* request_order 确定 `$_GET` 和 `$_POST` 等超全局变量的顺序，后面的会把前面的数据重写覆盖   “GP”\n* disable_classes 、 disable_functions 禁用某些类和某些函数\n\n\n# HTTP 协议\n```\nGET /index.html HTTP/1.1\nHOST: www.example.com\nRange: bytcs-500-999\nConnection:keep-alive\n```\n\n* HTTP 工作流程\n访问一个网址时，发生了什么？\n>1. 通过DNS解析域名对应的服务器IP地址\n>2. 建立TCP连接\n>3. 向服务器发送请求\n>4. 返回内容\n\n# javascript\n* 闭包\n>闭包使用不当可能会导致内存泄露。\n>闭包是指有权访问另一个函数作用域中的变量的函数\n>一个外部函数执行完毕后，由于其内部函数被外部引用，导致其作用域中的变量存活，而不能在函数执行完毕后被销毁，包含这些变量的那个对象就被称为闭包\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201803/20180331-2.md","raw":"---\nlayout: post\ntitle: PHP细节-02\ndate: 2018-03-31 22:44:26\ntags:\n---\n\n# 文件\n* 二进制文件读写 pack() unpack()\n* 系统函数判断图像类型：exif_imagetype()\n* 文件指针\n```\nfseek() 在文件指针中定位\nftell() 返回文件指针读写的位置\nrewind() 倒回文件指针的位置\nfeof() 测试文件指针是否到了文件结束的位置\n```\n\n* 超大文件上传\n```\nswfUpload、uploadify 等flash组件\nXMLHTTPRequest 大文件断点续传+分段上传 ajax2.0\n```\n\n# PHP运行原理\n>UA -> apache -> SAPI -> zend engine -> php script\n\n# PHP运行模式\n* CLI模式 命令行接口\n```\n定时任务\nshell脚本中使用\n桌面应用程序\nPHP server 服务\n```\n\n* CGI 通用网关接口\n```\n就像桥梁一样，把网页和web服务器中的执行程序连接起来，它把http服务器接收的指令传递给执行程序，再把执行程序的结果返回http服务器。CGI跨平台性及佳，几乎可以在任何操作系统实现\n\n提供http服务\n性能比较差，一个请求fork一个进程\n```\n\n* FastCGI 快速通用网关接口\n```\n也是交互程序与web服务器通信协议。致力于介绍服务器与程序之前互动的开销\nweb服务器启动时，载入FastCGI进程管理器 对于PHP来讲就是php-fpm\nFastCGI 会启动多个CGI进程等待web服务器的连接\n收到请求时由FastCGI子进程处理。子进程关闭连接时，请求处理完成。子进程接着等待并处理FastCGI进程管理器的下一个连接\n\n提供http服务\n支持大并发\n多进程消耗较多内存\n```\n\n* 模块模式 apache 和 ISS\n\n\n# 进程、线程、协程\n* 单进程：单个CPU一次只能运行一个任务\n* 一个进程可以包括多个线程（防止多个线程同时读写某一块区域加锁机制）\n* 协程避免了无意义的调度，由此提高了性能。但因此要程序员自己承担调度的责任，同时也失去了标准线程使用多CPU的能力\n\n> 多进程形式，允许多个任务同时运行\n> 多线程形式，允许单个任务分成不同部分运行\n\n* ts Thread safe 线程安全，执行时会进程线程安全检查，防止有新要求就启动新线程的执行方式而耗尽系统资源\n* nts Non Thread Safe 非线程安全，在执行时不进行线程安全检查\n\n> 由于ISAPI是线程执行的，所以选择PHP版本时要选择TS版本的。其它选择NTS版本就行了。\n\n* Apache 的 prefork 模块\n> prefork 采用预派生子进程模式，用单独的子进程来处理不同的请求，进程之间彼此独立。httpd-mpm.conf 配置包括：\n``` \nStartServers 5 #  初始化进程数量\nMinSpareServers 5 # 空闲进程总数最小值\nMaxApareServers 10 # 空闲进程总数最大值\nMaxClients 150 # 最大客户端连接数量限制\nMaxRequestsPerChild 0 # 子进程减能处理的请求数量\n```\n\n* Apache 的 worker 模块\n> worker 全新的支持多线程和多进程混合模型的MPM，由于使用线程来处理，所以可以处理相对海量的数据请求。而系统资源的开销要小于基于进程的服务器\n\n* Apache 的 event 模式\n\n\n为什么大访问量下NGINX性能更高？\n> Apache 所采用的select 网络 I/O 模型非常低效\n> Nginx 使用了最新的epoll 和 kqueue(freebsd) 网络 I/O 模型\n> PHP是 Apache 的一个扩展模块，所以Apache 进程 干的事情也比较多，执行PHP、输出HTML 都得干，占用的资源也多（CPU，内存）\n\n# PHP运行机制与原理\n* PHP 底层原理\n> PHP通过 SAPI 和 Apache相连\nPHP总共有三个模块：内核、Zend引擎、以及扩展层\nPHP内核用来处理请求、文件流、错误处理等相关操作\nZend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；\n扩展层是一株函数、类库和流，PHP使用它们来执行一些特定的操作，如：MySQL扩展来连接MySQL数据库\nZE引擎执行程序是可能需要连接若干扩展，这是ZE将控制权交给扩展，等待处理完任务和再返还\n最后ZE将程序运行结果反回给PHP内核，它再将结果传送给SAPI传给Apache\n\n* PHP运行机制\n>1. 扫描\n2. 解析\n3. 编译\n4. 执行\n5. 输出\n\n# PHP垃圾回收机制\n没有引用的内存变量就垃圾，PHP开启了很多内存空间，如果不销毁内存会一点点的被吃掉，最终导致内存溢出。\n1. 找到所有已定义的变量：get_defined_vars\n2. refcount_gc 是否为0 就知道是不是垃圾 无引用的变量 (清除为0的5.2版本以前   5.3以后 采用了引用计数系统中的同步周期回收算法来清除)\n3. 当我们存储的疑似垃圾区域满了的时候，就会被执行清除垃圾的操作。前提是开启了 php.ini 中的 zend.enable_gc 配置 也可以调用 gc_enable() 和 gc_disable() 打开和关闭垃圾回收机制  也可以通过 gc_collect_cycles() 强制执行周期回收 \n\n# PHP常用选项\n* display_errors 是否显示错误信息 辅助开发使用，不要在生产环境使用\n* error_reporting 设置错误报告的级别\n* variables_order 设置EGPCS超全局变量的解析顺序\n* request_order 确定 `$_GET` 和 `$_POST` 等超全局变量的顺序，后面的会把前面的数据重写覆盖   “GP”\n* disable_classes 、 disable_functions 禁用某些类和某些函数\n\n\n# HTTP 协议\n```\nGET /index.html HTTP/1.1\nHOST: www.example.com\nRange: bytcs-500-999\nConnection:keep-alive\n```\n\n* HTTP 工作流程\n访问一个网址时，发生了什么？\n>1. 通过DNS解析域名对应的服务器IP地址\n>2. 建立TCP连接\n>3. 向服务器发送请求\n>4. 返回内容\n\n# javascript\n* 闭包\n>闭包使用不当可能会导致内存泄露。\n>闭包是指有权访问另一个函数作用域中的变量的函数\n>一个外部函数执行完毕后，由于其内部函数被外部引用，导致其作用域中的变量存活，而不能在函数执行完毕后被销毁，包含这些变量的那个对象就被称为闭包\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2","published":1,"updated":"2019-04-02T04:19:15.094Z","comments":1,"photos":[],"link":"","_id":"ck39ugjli006mpgwi01of7w5t"},{"layout":"post","title":"Linux 基础","date":"2018-04-01T11:16:33.000Z","_content":"## 权限\n* 普通用户只能追加无法删除\n`chattr +a /var/log/access.log`\n\n* r w x 4 2 1\n\n## 磁盘文件统计\n* df 查看磁盘占用\n* du 统计文件占用\n* fdisk 分区管理\n* mount 磁盘挂载\n* umount 磁盘卸载\n* mkfs.ext4 磁盘格式化\n\n## 查找find\n```\nfind . -mmin -60 \t\t修改时间为最近60分钟内的\nfind . -mmin +5  \t\t修改时间为5分钟之前的\nfind /tmp -atime -1 \t查找/tmp目录最近1天(24小时)内被访问过的文件\nfind . -type f \t\t\t查找本目录下的所有文件\nfind . -type d \t\t\t查找本目录下的所有目录\nfind . -user root \t\t查找本目录下所有root用户的文件\nfind . -perm 600 \t\t查找本目录下所有权限为600的文件\nfind . \\( -name \"_*\" -or -user root \\) -type f 查找本目录下（以_开头或root用户的） 文件\n\n逻辑运算符\n-not\n-or\n-and\n```\n\n>分析文章访问日志文件，找出访问量最大的前10个IP地址，降序排序\n1. 找出IP，每行一个 -f 表示需要取得哪个字段\n`cut -d \" \" -f1 /var/log/access.log`\n2. 去重并计数\n`uniq -c`\n3. 排序\n`sort -n -r`\n4. 取前10行\n`head -10`\n\n`$ cut -d \" \" -f1 /var/log/access.log | sort | uniq -c | sort -n -r | head -10`\n\nlinux 中有三个系统文件描述符：0.标准输入，1.标准输出，2.标准错误输出\n\n\n## 系统管理\n* ps 命令，显示当前进程\n```\nps -ef 显示带启动命令行的进程信息\nps -u root 显示某用户的进程\nps -A 显示全部进程\nps -ejH 显示进程树\n```\n\n* kill 命令：终止进程\n```\nkill -s PID\n-s 指定信号\n-l 所有信号标识列表\nkill -9 PID  强制结束\nkillall 进程名称\n```\n\n* fg 命令 将后台任务调到前台\n> 命令后加 `&` 或者 `ctrl + z` 可将任务转到后台执行\n> 后台执行中的任务，可以通过 `fg &任务序号` 调到前台执行\n> jobs -l 查看后台任务\n`fg %1 恢复后台进程中的1工作号到前台执行，不写1表示恢复最后一个工作号（+）到前台执行，也可以不写%，fg 1`\n\n\n* 开放端口：\n```\niptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\nservice iptables save #保存iptables规则\n```\n\n## shell\n* 变量\n```\n区分大小写\n等号两边无空格\n所有变量都是字符串\n```\n\n* 流程控制\n* 命令列表\n* 函数\n\n","source":"_posts/2018/201804/20180401-2.md","raw":"---\nlayout: post\ntitle: Linux 基础\ndate: 2018-04-01 19:16:33\ntags:\n---\n## 权限\n* 普通用户只能追加无法删除\n`chattr +a /var/log/access.log`\n\n* r w x 4 2 1\n\n## 磁盘文件统计\n* df 查看磁盘占用\n* du 统计文件占用\n* fdisk 分区管理\n* mount 磁盘挂载\n* umount 磁盘卸载\n* mkfs.ext4 磁盘格式化\n\n## 查找find\n```\nfind . -mmin -60 \t\t修改时间为最近60分钟内的\nfind . -mmin +5  \t\t修改时间为5分钟之前的\nfind /tmp -atime -1 \t查找/tmp目录最近1天(24小时)内被访问过的文件\nfind . -type f \t\t\t查找本目录下的所有文件\nfind . -type d \t\t\t查找本目录下的所有目录\nfind . -user root \t\t查找本目录下所有root用户的文件\nfind . -perm 600 \t\t查找本目录下所有权限为600的文件\nfind . \\( -name \"_*\" -or -user root \\) -type f 查找本目录下（以_开头或root用户的） 文件\n\n逻辑运算符\n-not\n-or\n-and\n```\n\n>分析文章访问日志文件，找出访问量最大的前10个IP地址，降序排序\n1. 找出IP，每行一个 -f 表示需要取得哪个字段\n`cut -d \" \" -f1 /var/log/access.log`\n2. 去重并计数\n`uniq -c`\n3. 排序\n`sort -n -r`\n4. 取前10行\n`head -10`\n\n`$ cut -d \" \" -f1 /var/log/access.log | sort | uniq -c | sort -n -r | head -10`\n\nlinux 中有三个系统文件描述符：0.标准输入，1.标准输出，2.标准错误输出\n\n\n## 系统管理\n* ps 命令，显示当前进程\n```\nps -ef 显示带启动命令行的进程信息\nps -u root 显示某用户的进程\nps -A 显示全部进程\nps -ejH 显示进程树\n```\n\n* kill 命令：终止进程\n```\nkill -s PID\n-s 指定信号\n-l 所有信号标识列表\nkill -9 PID  强制结束\nkillall 进程名称\n```\n\n* fg 命令 将后台任务调到前台\n> 命令后加 `&` 或者 `ctrl + z` 可将任务转到后台执行\n> 后台执行中的任务，可以通过 `fg &任务序号` 调到前台执行\n> jobs -l 查看后台任务\n`fg %1 恢复后台进程中的1工作号到前台执行，不写1表示恢复最后一个工作号（+）到前台执行，也可以不写%，fg 1`\n\n\n* 开放端口：\n```\niptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\nservice iptables save #保存iptables规则\n```\n\n## shell\n* 变量\n```\n区分大小写\n等号两边无空格\n所有变量都是字符串\n```\n\n* 流程控制\n* 命令列表\n* 函数\n\n","slug":"2","published":1,"updated":"2019-04-02T04:19:10.562Z","comments":1,"photos":[],"link":"","_id":"ck39ugjli006opgwim28bhgsv"},{"layout":"post","title":"NoSql","date":"2018-04-02T01:43:44.000Z","_content":"# memcache\n* Page为内存分配的最小单位。\n>Memcached 的内存分配以page为单位，默认情况下一个page是1M，可以通过-I参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。page一旦被分配在重启前不会被回收或者重新分配\n\n* Slabs划分数据空间。\n>Memcached 并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。每个slab只存储大于其上一个slab的size并小于或者等于自己最大size的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的最大值为前一个的1.25倍，这个可以通过修 改-f参数来修改增长比例。\n\n* Chunk才是存放缓存数据的单位。\n>Chunk 是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的所有chunk都是104byte，而slab 4的所有chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。 \n\n* Slab的内存分配。\n>Memcached在启动时通过-m指定最大使用内存，但是这个不会一启动就占用，是随着需要逐步分配给各slab的。\n如果一个新的缓存数据要被存放，memcached首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如 果没有则要进行申请。slab申请内存时以page为单位，所以在放入第一个数据，无论大小为多少，都会有1M大小的page被分配给该slab。申请到 page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，在从这个chunk数组中选择一个用于存储 数据。如下图，slab 1和slab 2都分配了一个page，并按各自的大小切分成chunk数组。 \n\n* Memcached内存分配策略\n>按slab需求分配page，各slab按需使用chunk存储。\n>Memcached分配出去的page不会被回收或者重新分配Memcached申请的内存不会被释放slab空闲的chunk不会借给任何其他slab使用，如果所有page都已经存满了。并且memcache已不能再分配新的内存空间。将根据LRU算法（最近最少使用）,清除某个item并将新项存储在该位置\n\n* 分布式解决方案\n1. 取模算法方式\n>将key转换为32位的数字，并与memcached服务器的总数进行相除取得余数。而这个余数就是memcached服务器的节点node。有了这个node我们就可以确定memcached服务器，就可以发送命令给memcached执行了。 缺点是不方便扩展和机器宕机后不能自动调整集群\n`$node sprintf('%u', crc32($key)) % $total`\n\n2. 一致哈希算法方式\n>通过虚拟节点的方式实现，可以使不可控的存储节点能够尽可能的均匀分布在圆环上，从而达到数据均匀缓存在各个主机里。其次增加与删除虚拟节点对于之前缓存的整体数据影响非常小。\n\n# Redis\n高性能key-value 存储系统，它通常被称为数据结构服务器。因为值可以是：字符串、哈希、列表、集合、有序集合\n\n* 特点：单线程、快（每秒10万次SET操作）、拥有很多原子操作方法，保证数据一致性、将具有临时性和数据持久化\n\n* 二进制安全、一个字符串类型的值最多能保存512M内容。\n\n* 集合（set）\n>集合是一个无需字符串集合。元素不能重复。一个集合最多可以包含2^32-1个元素。方便计算不同集合的交集、并集、差集。常用应用：关注列表、粉丝列表、共同关注或者粉丝等\n\n* 有序集合（zSet）\n>每个有序集合成员都关联着一个评分，这个评分的用语把有序集合中的成员按最低分到最高分排列。（应用于各种有排序条件的列表：访问足迹最近访问的时间戳作为排序分）\n\n* watch\n```php\n<?php\nheader(\"content-type:text/html;charset=utf-8\");  \n$redis = new redis();  \n$result = $redis->connect('127.0.0.1', 6379);\n$watchkey = $redis->get(\"watchkey\");  \n$rob_total = 10;\nif($watchkey<$rob_total){  \n    $redis->watch(\"watchkey\");  // 监视某个key\n    $redis->multi();   // 开启事物\n    $redis->hSet(\"watchlist\",\"user_id_\".mt_rand(1, 9999),time());   // 业务操作\n    $redis->incr(\"watchkey\");\n    $rob_result = $redis->exec(); // 如果执行操作期间，被监视的KEY被其它客户端修改了，则exec失败  \n    if($rob_result){  \n        $watchlist = $redis->hGetAll(\"watchlist\");  \n        echo \"抢购成功！<br/>\";  \n        echo \"剩余数量：\".($rob_total-$watchkey-1).\"<br/>\";  \n        echo \"用户列表：<pre>\";  \n        var_dump($watchlist);  \n    }else{  \n        echo \"手气不好，再抢购！\";\n    }  \n}else{\necho \"已被抢购完!\";\n}\n```\n\n* 数据持久化：RDB 和 AOF\n>RDB：就是快照存储，是默认的持久化方式，按照一定的策略周期性的将数据保存到磁盘。对应产生的数据文件为dump.rdb,通过配置文件中的save参数来定义快照的周期.通过修改配置文件的dbfilename 来修改\n```\nsave 900 \t1\nsave 300 \t10\nsave 60 \t10000\n```\n\n>AOF:修改配置appendonly yes 来开启，开启后写命令会依次记录到此文件。AOF 大！即使通过bgrewriteaof 命令移除冗余记录也大。恢复慢\n```\n# appendfsync \talways\t\t每次命令都写，最安全，性能最差\nappendfsync\t\teverysec\t每秒同步一次（默认）\n# appendfsync\tno \t\t\t不主动同步，由操作系统负责鞋服，约30秒一次\n```\n\n# mongoDB\n介于关系数据库和非关系型数据之间的文档数据库，支持的数据结构非常松散，类似json的bson格式，因此可以存储比较复杂的数据类型。支持对数据字段奖励索引\n\n* 模式自由，通过数据分片实现高伸缩性\n* 处理地理信息\n* 高可用，内置故障迁移\n* 高性能低延时实时数据（查询QPS接近MySQL的两倍左右， 插入QPS接近MySQL的五倍左右）\n* 局部索引，TTL索引，固定集合\n* 不适合高度事务性系统，不适合需要复杂SQL处理的查询\n* 与关系型数据库结构对比：文档≈行，集合≈表，数据库≈数据库\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201804/20180402-1.md","raw":"---\nlayout: post\ntitle: NoSql\ndate: 2018-04-02 09:43:44\ntags:\n---\n# memcache\n* Page为内存分配的最小单位。\n>Memcached 的内存分配以page为单位，默认情况下一个page是1M，可以通过-I参数在启动时指定。如果需要申请内存 时，memcached会划分出一个新的page并分配给需要的slab区域。page一旦被分配在重启前不会被回收或者重新分配\n\n* Slabs划分数据空间。\n>Memcached 并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，每个slab只负责一定范围内的数据存储。每个slab只存储大于其上一个slab的size并小于或者等于自己最大size的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的最大值为前一个的1.25倍，这个可以通过修 改-f参数来修改增长比例。\n\n* Chunk才是存放缓存数据的单位。\n>Chunk 是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的所有chunk都是104byte，而slab 4的所有chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值， 所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设 计的。例如，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。 \n\n* Slab的内存分配。\n>Memcached在启动时通过-m指定最大使用内存，但是这个不会一启动就占用，是随着需要逐步分配给各slab的。\n如果一个新的缓存数据要被存放，memcached首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如 果没有则要进行申请。slab申请内存时以page为单位，所以在放入第一个数据，无论大小为多少，都会有1M大小的page被分配给该slab。申请到 page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，在从这个chunk数组中选择一个用于存储 数据。如下图，slab 1和slab 2都分配了一个page，并按各自的大小切分成chunk数组。 \n\n* Memcached内存分配策略\n>按slab需求分配page，各slab按需使用chunk存储。\n>Memcached分配出去的page不会被回收或者重新分配Memcached申请的内存不会被释放slab空闲的chunk不会借给任何其他slab使用，如果所有page都已经存满了。并且memcache已不能再分配新的内存空间。将根据LRU算法（最近最少使用）,清除某个item并将新项存储在该位置\n\n* 分布式解决方案\n1. 取模算法方式\n>将key转换为32位的数字，并与memcached服务器的总数进行相除取得余数。而这个余数就是memcached服务器的节点node。有了这个node我们就可以确定memcached服务器，就可以发送命令给memcached执行了。 缺点是不方便扩展和机器宕机后不能自动调整集群\n`$node sprintf('%u', crc32($key)) % $total`\n\n2. 一致哈希算法方式\n>通过虚拟节点的方式实现，可以使不可控的存储节点能够尽可能的均匀分布在圆环上，从而达到数据均匀缓存在各个主机里。其次增加与删除虚拟节点对于之前缓存的整体数据影响非常小。\n\n# Redis\n高性能key-value 存储系统，它通常被称为数据结构服务器。因为值可以是：字符串、哈希、列表、集合、有序集合\n\n* 特点：单线程、快（每秒10万次SET操作）、拥有很多原子操作方法，保证数据一致性、将具有临时性和数据持久化\n\n* 二进制安全、一个字符串类型的值最多能保存512M内容。\n\n* 集合（set）\n>集合是一个无需字符串集合。元素不能重复。一个集合最多可以包含2^32-1个元素。方便计算不同集合的交集、并集、差集。常用应用：关注列表、粉丝列表、共同关注或者粉丝等\n\n* 有序集合（zSet）\n>每个有序集合成员都关联着一个评分，这个评分的用语把有序集合中的成员按最低分到最高分排列。（应用于各种有排序条件的列表：访问足迹最近访问的时间戳作为排序分）\n\n* watch\n```php\n<?php\nheader(\"content-type:text/html;charset=utf-8\");  \n$redis = new redis();  \n$result = $redis->connect('127.0.0.1', 6379);\n$watchkey = $redis->get(\"watchkey\");  \n$rob_total = 10;\nif($watchkey<$rob_total){  \n    $redis->watch(\"watchkey\");  // 监视某个key\n    $redis->multi();   // 开启事物\n    $redis->hSet(\"watchlist\",\"user_id_\".mt_rand(1, 9999),time());   // 业务操作\n    $redis->incr(\"watchkey\");\n    $rob_result = $redis->exec(); // 如果执行操作期间，被监视的KEY被其它客户端修改了，则exec失败  \n    if($rob_result){  \n        $watchlist = $redis->hGetAll(\"watchlist\");  \n        echo \"抢购成功！<br/>\";  \n        echo \"剩余数量：\".($rob_total-$watchkey-1).\"<br/>\";  \n        echo \"用户列表：<pre>\";  \n        var_dump($watchlist);  \n    }else{  \n        echo \"手气不好，再抢购！\";\n    }  \n}else{\necho \"已被抢购完!\";\n}\n```\n\n* 数据持久化：RDB 和 AOF\n>RDB：就是快照存储，是默认的持久化方式，按照一定的策略周期性的将数据保存到磁盘。对应产生的数据文件为dump.rdb,通过配置文件中的save参数来定义快照的周期.通过修改配置文件的dbfilename 来修改\n```\nsave 900 \t1\nsave 300 \t10\nsave 60 \t10000\n```\n\n>AOF:修改配置appendonly yes 来开启，开启后写命令会依次记录到此文件。AOF 大！即使通过bgrewriteaof 命令移除冗余记录也大。恢复慢\n```\n# appendfsync \talways\t\t每次命令都写，最安全，性能最差\nappendfsync\t\teverysec\t每秒同步一次（默认）\n# appendfsync\tno \t\t\t不主动同步，由操作系统负责鞋服，约30秒一次\n```\n\n# mongoDB\n介于关系数据库和非关系型数据之间的文档数据库，支持的数据结构非常松散，类似json的bson格式，因此可以存储比较复杂的数据类型。支持对数据字段奖励索引\n\n* 模式自由，通过数据分片实现高伸缩性\n* 处理地理信息\n* 高可用，内置故障迁移\n* 高性能低延时实时数据（查询QPS接近MySQL的两倍左右， 插入QPS接近MySQL的五倍左右）\n* 局部索引，TTL索引，固定集合\n* 不适合高度事务性系统，不适合需要复杂SQL处理的查询\n* 与关系型数据库结构对比：文档≈行，集合≈表，数据库≈数据库\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-02T04:19:06.641Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlj006qpgwiyngijv3y"},{"layout":"post","title":"Mysql高级-体系结构","date":"2018-04-02T04:12:29.000Z","_content":"Mysql是由SQL接口，解析器，优化器，缓存，存储引擎组成的。\n\n![MySQL体系结构](http://resoure.uiste.com/phcntech_dev190402124853_mysql体系结构.png)\n\nConnectors\n\n指的是不同语言中与SQL的交互\n\nManagement Serveices & Utilities\n\n系统管理和控制工具\n\nConnection Pool\n\n连接池\n\n管理缓冲用户连接，线程处理等需要缓存的需求。\n\nSQL Interface: SQL接口\n\n接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface。\n\nParser: 解析器。\n\nSQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。\n\n主要功能：\n\na . 将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的 。\n\nb. 如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的。\n\nOptimizer: 查询优化器\n\nSQL语句在查询之前会使用查询优化器对查询进行优化。他使用的是“选取-投影-联接”策略进行查询。\n\n用一个例子就可以理解： select uid,name from user where gender = 1;这个select 查询先根据where语句进行选取，而不是先将表全部查询出来以后再进行gender过滤。 \n这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤。 \n将这两个查询条件联接起来生成最终查询结果。\n\nCache和Buffer： 查询缓存\n\n如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。\n\n这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。\n\nEngine ：存储引擎\n\n存储引擎是MySql中具体的与文件打交道的子系统。也是Mysql最具有特色的一个地方。\n\nMysql的存储引擎是插件式的。它根据MySql AB公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）。\n\n现在有很多种存储引擎，各个存储引擎的优势各不一样，最常用的MyISAM,InnoDB,BDB。\n\n默认下MySql5.6是使用MyISAM引擎，它查询速度快，有较好的索引优化和数据压缩技术。但是它不支持事务。\n\nInnoDB支持事务，并且提供行级的锁定，应用也相当广泛。\n\nMysql也支持自己定制存储引擎，甚至一个库中不同的表使用不同的存储引擎，这些都是允许的。\n\n物理文件 \n物理文件包括：redolog、undolog、binlog（复制时还有relaylog）、errorlog、querylog、slowlog、data、index","source":"_posts/2018/201804/20180402-2.md","raw":"---\nlayout: post\ntitle: Mysql高级-体系结构\ndate: 2018-04-02 12:12:29\ntags:\n---\nMysql是由SQL接口，解析器，优化器，缓存，存储引擎组成的。\n\n![MySQL体系结构](http://resoure.uiste.com/phcntech_dev190402124853_mysql体系结构.png)\n\nConnectors\n\n指的是不同语言中与SQL的交互\n\nManagement Serveices & Utilities\n\n系统管理和控制工具\n\nConnection Pool\n\n连接池\n\n管理缓冲用户连接，线程处理等需要缓存的需求。\n\nSQL Interface: SQL接口\n\n接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface。\n\nParser: 解析器。\n\nSQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。\n\n主要功能：\n\na . 将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的 。\n\nb. 如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的。\n\nOptimizer: 查询优化器\n\nSQL语句在查询之前会使用查询优化器对查询进行优化。他使用的是“选取-投影-联接”策略进行查询。\n\n用一个例子就可以理解： select uid,name from user where gender = 1;这个select 查询先根据where语句进行选取，而不是先将表全部查询出来以后再进行gender过滤。 \n这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤。 \n将这两个查询条件联接起来生成最终查询结果。\n\nCache和Buffer： 查询缓存\n\n如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。\n\n这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。\n\nEngine ：存储引擎\n\n存储引擎是MySql中具体的与文件打交道的子系统。也是Mysql最具有特色的一个地方。\n\nMysql的存储引擎是插件式的。它根据MySql AB公司提供的文件访问层的一个抽象接口来定制一种文件访问机制（这种访问机制就叫存储引擎）。\n\n现在有很多种存储引擎，各个存储引擎的优势各不一样，最常用的MyISAM,InnoDB,BDB。\n\n默认下MySql5.6是使用MyISAM引擎，它查询速度快，有较好的索引优化和数据压缩技术。但是它不支持事务。\n\nInnoDB支持事务，并且提供行级的锁定，应用也相当广泛。\n\nMysql也支持自己定制存储引擎，甚至一个库中不同的表使用不同的存储引擎，这些都是允许的。\n\n物理文件 \n物理文件包括：redolog、undolog、binlog（复制时还有relaylog）、errorlog、querylog、slowlog、data、index","slug":"2","published":1,"updated":"2019-04-02T04:50:12.367Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlk006rpgwidvl978ol"},{"layout":"post","title":"Mysql高级-存储引擎、驱动、索引、优化","date":"2018-04-02T04:13:29.000Z","_content":"MySQL5.1版本前默认存储引擎是myisam\nMySQL5.5版本开始默认存储引擎是innodb\n\n# 字段类型\n\n# 锁\n* myisam 和 memory 存储引擎采用的是表级锁\n* BDB存储引擎采用的是页面锁，但也支持表级锁\n* innodb 存储引擎既支持行锁也支持表锁，默认采用行锁\n\n* 表级锁：开销小，加锁快，不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低\n* 行级锁：开销大，加锁慢，会出现死锁，锁定粒度小，发生锁冲突的概率最低，并发度也最高\n* 页面锁：介于上述二者之间\n\n```\nmyisam 表锁争用情况\n> show status like 'table_lock%';\ntable_lock_waited  值高有着叫严重的表锁争用情况\ntable_lock_immediate\n\ntable_lock_immediate/table_lock_waited > 5000 争用情况正常\n```\n\n## myisam 锁机制\n表共享读锁（不会阻塞其它进程对同一表的读请求，但会阻塞同一表的写请求）\n表独占写锁（会阻塞其它进程对同一表的读写操作）\n\n>并发插入\n>concurrent_instert\n>0:不允许并发插入\n>1:有空洞不允许并发插入，无空洞允许\n>2:都允许\n\n## innodb \n```\n> show status like 'innodb_row_lock%';\ninnodb_row_lock_current_waits:\ninnodb_row_lock_time\ninnodb_row_lock_time_avg\ninnodb_row_lock_time_max\ninnodb_row_lock_waits\n```\n\n* 行锁不影响读操作，只影响写操作。同时如果更新语句条件没有加索引，会锁定整个表，但还是不影响读操作\n\n# 事务\n## innodb 事务隔离级别\n```\n* read uncommitted \t非提交读（会带来涨读）\n* read committed \t提交读 \n* repeatable read \t可重复读 （会出现幻读）\n* serializable \t\t序列化 （会加锁，让数据不可变）\n\n查看隔离级别\nselect @@tx_isolation\t\t\t查看当前会话隔离级别\nselect @@global.tx_isolation \t查看系统隔离级别\n\n设置隔离级别\nset session transaction isolation level xxx 设置档期会话隔离级别\nset global transaction isolation level xxx  设置系统全局隔离级别\n```\n\n# 驱动\n\n## php5.3之前定的渠道是libmysql.dll或so 之后是mysqlnd\n\n## 驱动API\n* msyql （mysql_real_escape_string($name)）转移特深字符，用于msyql_queue() 安全查询\n* mysqli 新增：面向对象接口、绑定语句支持（prepare、bind_param）、多语句支持、事务支持等\n* pdo_mysql 特点：多数据库统一支持\n\n# 索引和全文检索技术\n1. 普通索引\n>如果没有唯一性要求，可以选择普通索引\n\n2. 唯一索引\n>如果列上有唯一性要求，可以选择唯一索引\n\n3. 全文索引\n>如果需要模糊搜索，可以选择全文索引\n\n4. 组合索引\n>如果有多个条件一起查询，可以选择组合索引\n>注意最左原则\n\n* 索引的实现方式\n>B+ 树 、聚簇索引 、 非聚簇索引 对中文支持不友好\n\n# sql优化\n## 执行顺序\n```\n1. from 子句对其后面的多个表进行笛卡尔积，产生的虚拟表VT1\n2. on 对VT1 数据过滤 得到 VT2\n3. 将未符合调价的保留表中数据添加到 VT2 中 得到 VT3\n4. where 子句对 VT3 过滤 得到 VT4\n5. group 对 VT4 得到 VT5\n6. cube|roolup 子句进行操作得到 VT6\n7. having 对VT6数据进行Having 得到VT7\n8. select 从 VT7 中选择要获取的字段 得到 VT8\n9. distinct 去重 得到 VT9\n10. order by 对VT9 结果进行排序后，形成 VT10\n11. limit 从 VT10 中取出指定的数据，形成 VT11 返回给用户\n```\n\n## explain\n```\nEXPLAIN 输出格式\nEXPLAIN 命令的输出内容大致如下:\n\nmysql> explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n各列的含义如下:\n\nid: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n\nselect_type: SELECT 查询的类型.\n\ntable: 查询的是哪个表\n\npartitions: 匹配的分区\n\ntype: join 类型\n\npossible_keys: 此次查询中可能选用的索引\n\nkey: 此次查询中确切使用到的索引.\n\nref: 哪个字段或常数与 key 一起被使用\n\nrows: 显示此查询一共扫描了多少行. 这个是一个估计值.\n\nfiltered: 表示此查询条件所过滤的数据的百分比\n\nextra: 额外的信息\n\n```\n\n## 分表\n\n## 读写分离\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201804/20180402-3.md","raw":"---\nlayout: post\ntitle: Mysql高级-存储引擎、驱动、索引、优化\ndate: 2018-04-02 12:13:29\ntags:\n---\nMySQL5.1版本前默认存储引擎是myisam\nMySQL5.5版本开始默认存储引擎是innodb\n\n# 字段类型\n\n# 锁\n* myisam 和 memory 存储引擎采用的是表级锁\n* BDB存储引擎采用的是页面锁，但也支持表级锁\n* innodb 存储引擎既支持行锁也支持表锁，默认采用行锁\n\n* 表级锁：开销小，加锁快，不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低\n* 行级锁：开销大，加锁慢，会出现死锁，锁定粒度小，发生锁冲突的概率最低，并发度也最高\n* 页面锁：介于上述二者之间\n\n```\nmyisam 表锁争用情况\n> show status like 'table_lock%';\ntable_lock_waited  值高有着叫严重的表锁争用情况\ntable_lock_immediate\n\ntable_lock_immediate/table_lock_waited > 5000 争用情况正常\n```\n\n## myisam 锁机制\n表共享读锁（不会阻塞其它进程对同一表的读请求，但会阻塞同一表的写请求）\n表独占写锁（会阻塞其它进程对同一表的读写操作）\n\n>并发插入\n>concurrent_instert\n>0:不允许并发插入\n>1:有空洞不允许并发插入，无空洞允许\n>2:都允许\n\n## innodb \n```\n> show status like 'innodb_row_lock%';\ninnodb_row_lock_current_waits:\ninnodb_row_lock_time\ninnodb_row_lock_time_avg\ninnodb_row_lock_time_max\ninnodb_row_lock_waits\n```\n\n* 行锁不影响读操作，只影响写操作。同时如果更新语句条件没有加索引，会锁定整个表，但还是不影响读操作\n\n# 事务\n## innodb 事务隔离级别\n```\n* read uncommitted \t非提交读（会带来涨读）\n* read committed \t提交读 \n* repeatable read \t可重复读 （会出现幻读）\n* serializable \t\t序列化 （会加锁，让数据不可变）\n\n查看隔离级别\nselect @@tx_isolation\t\t\t查看当前会话隔离级别\nselect @@global.tx_isolation \t查看系统隔离级别\n\n设置隔离级别\nset session transaction isolation level xxx 设置档期会话隔离级别\nset global transaction isolation level xxx  设置系统全局隔离级别\n```\n\n# 驱动\n\n## php5.3之前定的渠道是libmysql.dll或so 之后是mysqlnd\n\n## 驱动API\n* msyql （mysql_real_escape_string($name)）转移特深字符，用于msyql_queue() 安全查询\n* mysqli 新增：面向对象接口、绑定语句支持（prepare、bind_param）、多语句支持、事务支持等\n* pdo_mysql 特点：多数据库统一支持\n\n# 索引和全文检索技术\n1. 普通索引\n>如果没有唯一性要求，可以选择普通索引\n\n2. 唯一索引\n>如果列上有唯一性要求，可以选择唯一索引\n\n3. 全文索引\n>如果需要模糊搜索，可以选择全文索引\n\n4. 组合索引\n>如果有多个条件一起查询，可以选择组合索引\n>注意最左原则\n\n* 索引的实现方式\n>B+ 树 、聚簇索引 、 非聚簇索引 对中文支持不友好\n\n# sql优化\n## 执行顺序\n```\n1. from 子句对其后面的多个表进行笛卡尔积，产生的虚拟表VT1\n2. on 对VT1 数据过滤 得到 VT2\n3. 将未符合调价的保留表中数据添加到 VT2 中 得到 VT3\n4. where 子句对 VT3 过滤 得到 VT4\n5. group 对 VT4 得到 VT5\n6. cube|roolup 子句进行操作得到 VT6\n7. having 对VT6数据进行Having 得到VT7\n8. select 从 VT7 中选择要获取的字段 得到 VT8\n9. distinct 去重 得到 VT9\n10. order by 对VT9 结果进行排序后，形成 VT10\n11. limit 从 VT10 中取出指定的数据，形成 VT11 返回给用户\n```\n\n## explain\n```\nEXPLAIN 输出格式\nEXPLAIN 命令的输出内容大致如下:\n\nmysql> explain select * from user_info where id = 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user_info\n   partitions: NULL\n         type: const\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 8\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n各列的含义如下:\n\nid: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.\n\nselect_type: SELECT 查询的类型.\n\ntable: 查询的是哪个表\n\npartitions: 匹配的分区\n\ntype: join 类型\n\npossible_keys: 此次查询中可能选用的索引\n\nkey: 此次查询中确切使用到的索引.\n\nref: 哪个字段或常数与 key 一起被使用\n\nrows: 显示此查询一共扫描了多少行. 这个是一个估计值.\n\nfiltered: 表示此查询条件所过滤的数据的百分比\n\nextra: 额外的信息\n\n```\n\n## 分表\n\n## 读写分离\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"3","published":1,"updated":"2019-04-02T09:35:30.579Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlm006tpgwig9t8ak5e"},{"layout":"post","title":"设计模式","date":"2018-04-03T04:13:29.000Z","_content":"精神指南：找到容易变化的地方，独立出来\n\n# 策略模式\n用不同的类 + 相同的方法 实现不同的策略行为\n\n# 观察者模式\n被观察者绑定多个观察者的类 指定事件完成时，循环触发不同观察者的相同方法\nPHP SPL 中 SplObserveer SplSubject SplObjectStorage\n\n# 装饰模式\n\n# 单例模式\n\n# 适配器模式\n\n# 工厂模式","source":"_posts/2018/201804/20180403-1.md","raw":"---\nlayout: post\ntitle: 设计模式\ndate: 2018-04-03 12:13:29\ntags:\n---\n精神指南：找到容易变化的地方，独立出来\n\n# 策略模式\n用不同的类 + 相同的方法 实现不同的策略行为\n\n# 观察者模式\n被观察者绑定多个观察者的类 指定事件完成时，循环触发不同观察者的相同方法\nPHP SPL 中 SplObserveer SplSubject SplObjectStorage\n\n# 装饰模式\n\n# 单例模式\n\n# 适配器模式\n\n# 工厂模式","slug":"1","published":1,"updated":"2019-04-02T10:11:05.881Z","comments":1,"photos":[],"link":"","_id":"ck39ugjln006vpgwi1t3s3mda"},{"layout":"post","title":"Mysql存储过程","date":"2018-04-04T04:13:29.000Z","_content":"# 存储过程自动分表\n```\n# 参照表\nCREATE TABLE `pc_pay_result_20170420` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `order_id` varchar(32) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='支付结果';\n\n# 存储过程\nDROP PROCEDURE IF EXISTS `proc_month_daily_create_tables`;\nDELIMITER $$\nCREATE PROCEDURE `proc_month_daily_create_tables`() \nbegin  \nset @current_20_tablesql=(select concat('es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20'));\nset @create_tablesql_00=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'00 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\nset @create_tablesql_10=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'10 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\nset @create_tablesql_20=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'20 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\n\nPREPARE create_tablesql_00 FROM @create_tablesql_00;     \nEXECUTE create_tablesql_00;  \nPREPARE create_tablesql_10 FROM @create_tablesql_10;     \nEXECUTE create_tablesql_10;  \nPREPARE create_tablesql_20 FROM @create_tablesql_20;     \nEXECUTE create_tablesql_20;  \n\n END \n$$\nDELIMITER ;\n\n# 自动创建事件\nCREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY '0:1' MINUTE_SECOND STARTS '2019-04-07 15:38:29' ON COMPLETION NOT PRESERVE ENABLE COMMENT '存储过程建表' DO begin\n/**event body**/\nCALL proc_month_daily_create_tables();\nend\n\nCREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY '0 1' DAY_HOUR STARTS '2019-04-08 15:38:29' ON COMPLETION NOT PRESERVE ENABLE COMMENT '存储过程建表' DO begin\n/**event body**/\nCALL proc_month_daily_create_tables();\nend \n```\n\n![存储过程事件](http://resoure.uiste.com/phcntech_dev190407154844_mysql.png)\n\n\n# 创建自定义函数\n![funciton](http://resoure.uiste.com/phcntech_dev190407162402_funcion.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201804/20180404-1.md","raw":"---\nlayout: post\ntitle: Mysql存储过程\ndate: 2018-04-04 12:13:29\ntags:\n---\n# 存储过程自动分表\n```\n# 参照表\nCREATE TABLE `pc_pay_result_20170420` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `order_id` varchar(32) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='支付结果';\n\n# 存储过程\nDROP PROCEDURE IF EXISTS `proc_month_daily_create_tables`;\nDELIMITER $$\nCREATE PROCEDURE `proc_month_daily_create_tables`() \nbegin  \nset @current_20_tablesql=(select concat('es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20'));\nset @create_tablesql_00=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'00 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\nset @create_tablesql_10=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'10 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\nset @create_tablesql_20=(select concat('CREATE TABLE IF NOT EXISTS es.pc_pay_result_',date_format(date_add(curdate(),interval 1 month),'%Y%m'),'20 like ','es.pc_pay_result_',date_format(curdate(),'%Y%m'),'20;'));\n\nPREPARE create_tablesql_00 FROM @create_tablesql_00;     \nEXECUTE create_tablesql_00;  \nPREPARE create_tablesql_10 FROM @create_tablesql_10;     \nEXECUTE create_tablesql_10;  \nPREPARE create_tablesql_20 FROM @create_tablesql_20;     \nEXECUTE create_tablesql_20;  \n\n END \n$$\nDELIMITER ;\n\n# 自动创建事件\nCREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY '0:1' MINUTE_SECOND STARTS '2019-04-07 15:38:29' ON COMPLETION NOT PRESERVE ENABLE COMMENT '存储过程建表' DO begin\n/**event body**/\nCALL proc_month_daily_create_tables();\nend\n\nCREATE DEFINER=`root`@`localhost` EVENT `存储过程建表事件` ON SCHEDULE EVERY '0 1' DAY_HOUR STARTS '2019-04-08 15:38:29' ON COMPLETION NOT PRESERVE ENABLE COMMENT '存储过程建表' DO begin\n/**event body**/\nCALL proc_month_daily_create_tables();\nend \n```\n\n![存储过程事件](http://resoure.uiste.com/phcntech_dev190407154844_mysql.png)\n\n\n# 创建自定义函数\n![funciton](http://resoure.uiste.com/phcntech_dev190407162402_funcion.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-13T05:08:01.302Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlo006ypgwignxbrvwc"},{"layout":"post","title":"大型网站架构设计","date":"2018-04-05T04:13:29.000Z","_content":"# 大型网站的特点\n* 海量数据： 淘宝有几十亿商品\n* 高并发：\t日均PV几十亿\n* 高可用：\t系统`7*24`不间断\n* 功能多、需求多、更新快\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201804/20180405-1.md","raw":"---\nlayout: post\ntitle: 大型网站架构设计\ndate: 2018-04-05 12:13:29\ntags:\n---\n# 大型网站的特点\n* 海量数据： 淘宝有几十亿商品\n* 高并发：\t日均PV几十亿\n* 高可用：\t系统`7*24`不间断\n* 功能多、需求多、更新快\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-13T05:08:22.401Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlp0070pgwialb1g3ic"},{"layout":"post","title":"【1】区块链-以太坊搭建私有网络","date":"2018-05-11T04:12:29.000Z","_content":"# 以太坊搭建私有网络实战\n## 基本环境安装\n```\n1. 安装nodejs\n2. brew tap ethereum/ethereum\n3. brew install ethereum\n4. Ethereum Wallet and Mist Beta 0.10.0\nhttps://github.com/ethereum/mist/releases/\n```\n\n## 配置创世区块文件\n1. 文件名：CustomGenesis.json\n```\n{\n    \"nonce\": \"0x0000000000000042\",     \n    \"timestamp\": \"0x00\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"extraData\": \"0x00\",     \n    \"gasLimit\": \"0x8000000\",     \n    \"difficulty\": \"0x400\",\n    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0x3333333333333333333333333333333333333333\",     \n    \"alloc\": {\n     },\n     \"config\": {\n        \"chainId\": 15,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    }\n}\n```\n\n![图片描述][1]\n## 初始化创世区块\n`geth --identity \"mydev\" --rpc --rpccorsdomain \"*\" --datadir \"./Mychains/dev\" --rpcapi \"db,eth,net,web3\" init \"./CustomGenesis.json\"`\n\n\n![图片描述][2]\n## 开启私有网络\n1. 只开启rpc\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpccorsdomain \"*\" --networkid 99 console`\n![图片描述][3]\n2. 开启rpc和http\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console`\n![图片描述][4]\n\n# 创建账户\n\n\n![图片描述][5]\n## IPC连接连接，并开启挖矿（新开一个客户端）\n`geth attach /Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc`\n\n![图片描述][6]\n\n> 如果是Web应用的时候，就使用http://127.0.0.8545 地址就是连接\n\n## 开启mist浏览器\nMac遇到启动mist失败\n\n![图片描述][7]\n解决方案：\n1. 通过命令行方式启动让Ethereum Wallet，添加参数让他和刚起的私有链同用一个ipc。\n```\nuiste@uiste:~/www/blockchain/test-geth/Mychains/dev$     cd /Applications/\nuiste@uiste:/Applications$     ./Ethereum\\ Wallet.app/Contents/MacOS/Ethereum\\ Wallet --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n```\n\n2. 通过命令行方式启动Mist，添加参数让他和刚起的私有链同用一个ipc。\n![图片描述][8]\n```\nuiste@uiste:/Applications$      Mist.app/Contents/MacOS/Mist --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n```\n\n启动Mist后的界面如下：\n\n![图片描述][9]\n停止挖矿，命令行查看账户余额\n![图片描述][10]\n\n\n  [1]: //img.mukewang.com/5ac4846e000136c013360350.png\n  [2]: //img.mukewang.com/5ac4848a000100b316940468.png\n  [3]: //img.mukewang.com/5ac484b00001926c22840746.png\n  [4]: //img.mukewang.com/5ac484bb0001f09a15440802.png\n  [5]: //img.mukewang.com/5ac484d10001e0a816580202.png\n  [6]: //img.mukewang.com/5ac4851500013f7016480820.png\n  [7]: //img.mukewang.com/5ac4852f000122ee09300898.png\n  [8]: //img.mukewang.com/5ac4855b0001651f14140316.png\n  [9]: //img.mukewang.com/5ac4856400013fe024441426.png\n  [10]: //img.mukewang.com/5ac4857f0001cda615500390.png","source":"_posts/2018/201805/20180511-1.md","raw":"---\nlayout: post\ntitle: 【1】区块链-以太坊搭建私有网络\ndate: 2018-05-11 12:12:29\ntags:\n---\n# 以太坊搭建私有网络实战\n## 基本环境安装\n```\n1. 安装nodejs\n2. brew tap ethereum/ethereum\n3. brew install ethereum\n4. Ethereum Wallet and Mist Beta 0.10.0\nhttps://github.com/ethereum/mist/releases/\n```\n\n## 配置创世区块文件\n1. 文件名：CustomGenesis.json\n```\n{\n    \"nonce\": \"0x0000000000000042\",     \n    \"timestamp\": \"0x00\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"extraData\": \"0x00\",     \n    \"gasLimit\": \"0x8000000\",     \n    \"difficulty\": \"0x400\",\n    \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0x3333333333333333333333333333333333333333\",     \n    \"alloc\": {\n     },\n     \"config\": {\n        \"chainId\": 15,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    }\n}\n```\n\n![图片描述][1]\n## 初始化创世区块\n`geth --identity \"mydev\" --rpc --rpccorsdomain \"*\" --datadir \"./Mychains/dev\" --rpcapi \"db,eth,net,web3\" init \"./CustomGenesis.json\"`\n\n\n![图片描述][2]\n## 开启私有网络\n1. 只开启rpc\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpccorsdomain \"*\" --networkid 99 console`\n![图片描述][3]\n2. 开启rpc和http\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console`\n![图片描述][4]\n\n# 创建账户\n\n\n![图片描述][5]\n## IPC连接连接，并开启挖矿（新开一个客户端）\n`geth attach /Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc`\n\n![图片描述][6]\n\n> 如果是Web应用的时候，就使用http://127.0.0.8545 地址就是连接\n\n## 开启mist浏览器\nMac遇到启动mist失败\n\n![图片描述][7]\n解决方案：\n1. 通过命令行方式启动让Ethereum Wallet，添加参数让他和刚起的私有链同用一个ipc。\n```\nuiste@uiste:~/www/blockchain/test-geth/Mychains/dev$     cd /Applications/\nuiste@uiste:/Applications$     ./Ethereum\\ Wallet.app/Contents/MacOS/Ethereum\\ Wallet --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n```\n\n2. 通过命令行方式启动Mist，添加参数让他和刚起的私有链同用一个ipc。\n![图片描述][8]\n```\nuiste@uiste:/Applications$      Mist.app/Contents/MacOS/Mist --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n```\n\n启动Mist后的界面如下：\n\n![图片描述][9]\n停止挖矿，命令行查看账户余额\n![图片描述][10]\n\n\n  [1]: //img.mukewang.com/5ac4846e000136c013360350.png\n  [2]: //img.mukewang.com/5ac4848a000100b316940468.png\n  [3]: //img.mukewang.com/5ac484b00001926c22840746.png\n  [4]: //img.mukewang.com/5ac484bb0001f09a15440802.png\n  [5]: //img.mukewang.com/5ac484d10001e0a816580202.png\n  [6]: //img.mukewang.com/5ac4851500013f7016480820.png\n  [7]: //img.mukewang.com/5ac4852f000122ee09300898.png\n  [8]: //img.mukewang.com/5ac4855b0001651f14140316.png\n  [9]: //img.mukewang.com/5ac4856400013fe024441426.png\n  [10]: //img.mukewang.com/5ac4857f0001cda615500390.png","slug":"1","published":1,"updated":"2019-04-02T04:29:04.291Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlq0072pgwivru3ulnh"},{"layout":"post","title":"【2】区块链-以太坊智能合约","date":"2018-05-11T04:13:29.000Z","_content":"# 以太坊智能合约实战\n## 启动Remix IDE工具\n![图片描述][1]\n\n## 设置IDE本地文件共享\n![图片描述][2]\n![图片描述][3]\n![图片描述][4]\n\n> 参考连接\n1. https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html\n2. https://github.com/ethereum/remixd\n\n## 以太坊智能合约demo\n### 新建账户的两种方案\n![图片描述][5]\n\n### 新建合约\n![图片描述][6]\n### 编写合约代码 \n![图片描述][7]\n### 合约部署\n![图片描述][8]\n\n![图片描述][9]\n### 开启挖矿\n![图片描述][10]\n### 合约打包成功\n![图片描述][11]\n![图片描述][12]\n\n\n### 查看部署好的合约\n![图片描述][13]\n\n### 执行合约\n1. 给主账户设置100000块钱\n![图片描述][14]\n![图片描述][15]\n\n2. 查看合约执行状态\n![图片描述][16]\n![图片描述][17]\n\n** 这里本来是100000多执行了一次1000000导致有1100000 **\n\n3. 合约执行\n![图片描述][18]\n\n## 文档\n###  solidity 文档\nhttp://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html\n\nhttp://www.tryblockchain.org/\n\n### Web3 js 文档\nhttp://web3.tryblockchain.org/\n\n### Truffle 文档\nhttp://truffle.tryblockchain.org/\n\n\n  [1]: //img.mukewang.com/5ac488130001914c25261476.png\n  [2]: //img.mukewang.com/5ac4883300013f9920320678.png\n  [3]: //img.mukewang.com/5ac4883b00015ee317440998.png\n  [4]: //img.mukewang.com/5ac48847000183f712380512.png\n  [5]: //img.mukewang.com/5ac488790001560a19400618.png\n  [6]: //img.mukewang.com/5ac488870001c5ea20100656.png\n  [7]: //img.mukewang.com/5ac488a500016b1020721012.png\n  [8]: //img.mukewang.com/5ac488b3000105f620400848.png\n  [9]: //img.mukewang.com/5ac488c3000133bc16941388.png\n  [10]: //img.mukewang.com/5ac488cc0001dc3c15440492.png\n  [11]: //img.mukewang.com/5ac488d8000140b019701052.png\n  [12]: //img.mukewang.com/5ac488f200011c8520500486.png\n  [13]: //img.mukewang.com/5ac489010001b91422461240.png\n  [14]: //img.mukewang.com/5ac489170001f40622521270.png\n  [15]: //img.mukewang.com/5ac4891f0001489e11321364.png\n  [16]: //img.mukewang.com/5ac4892800014e1c20480618.png\n  [17]: //img.mukewang.com/5ac489370001278513640844.png\n  [18]: //img.mukewang.com/5ac4895700016b1121161130.png","source":"_posts/2018/201805/20180511-2.md","raw":"---\nlayout: post\ntitle: 【2】区块链-以太坊智能合约\ndate: 2018-05-11 12:13:29\ntags:\n---\n# 以太坊智能合约实战\n## 启动Remix IDE工具\n![图片描述][1]\n\n## 设置IDE本地文件共享\n![图片描述][2]\n![图片描述][3]\n![图片描述][4]\n\n> 参考连接\n1. https://remix.readthedocs.io/en/latest/tutorial_remixd_filesystem.html\n2. https://github.com/ethereum/remixd\n\n## 以太坊智能合约demo\n### 新建账户的两种方案\n![图片描述][5]\n\n### 新建合约\n![图片描述][6]\n### 编写合约代码 \n![图片描述][7]\n### 合约部署\n![图片描述][8]\n\n![图片描述][9]\n### 开启挖矿\n![图片描述][10]\n### 合约打包成功\n![图片描述][11]\n![图片描述][12]\n\n\n### 查看部署好的合约\n![图片描述][13]\n\n### 执行合约\n1. 给主账户设置100000块钱\n![图片描述][14]\n![图片描述][15]\n\n2. 查看合约执行状态\n![图片描述][16]\n![图片描述][17]\n\n** 这里本来是100000多执行了一次1000000导致有1100000 **\n\n3. 合约执行\n![图片描述][18]\n\n## 文档\n###  solidity 文档\nhttp://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html\n\nhttp://www.tryblockchain.org/\n\n### Web3 js 文档\nhttp://web3.tryblockchain.org/\n\n### Truffle 文档\nhttp://truffle.tryblockchain.org/\n\n\n  [1]: //img.mukewang.com/5ac488130001914c25261476.png\n  [2]: //img.mukewang.com/5ac4883300013f9920320678.png\n  [3]: //img.mukewang.com/5ac4883b00015ee317440998.png\n  [4]: //img.mukewang.com/5ac48847000183f712380512.png\n  [5]: //img.mukewang.com/5ac488790001560a19400618.png\n  [6]: //img.mukewang.com/5ac488870001c5ea20100656.png\n  [7]: //img.mukewang.com/5ac488a500016b1020721012.png\n  [8]: //img.mukewang.com/5ac488b3000105f620400848.png\n  [9]: //img.mukewang.com/5ac488c3000133bc16941388.png\n  [10]: //img.mukewang.com/5ac488cc0001dc3c15440492.png\n  [11]: //img.mukewang.com/5ac488d8000140b019701052.png\n  [12]: //img.mukewang.com/5ac488f200011c8520500486.png\n  [13]: //img.mukewang.com/5ac489010001b91422461240.png\n  [14]: //img.mukewang.com/5ac489170001f40622521270.png\n  [15]: //img.mukewang.com/5ac4891f0001489e11321364.png\n  [16]: //img.mukewang.com/5ac4892800014e1c20480618.png\n  [17]: //img.mukewang.com/5ac489370001278513640844.png\n  [18]: //img.mukewang.com/5ac4895700016b1121161130.png","slug":"2","published":1,"updated":"2019-04-02T04:35:54.821Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlt0074pgwinb369q3p"},{"layout":"post","title":"【3】区块链-以太坊代币合约","date":"2018-05-11T04:14:29.000Z","_content":"## 编写智能合约\n```\npragma solidity ^0.4.0;\n\n//创建一个基础合约，有些操作只能是当前合约的创建者才能操作\ncontract owned{\n    //声明一个用来接收合约创建者的状态变量\n    address public owner;\n    //构造函数，把当前交易的发送者（也就是合约的创建者）赋予owner变量\n    function owned() public {\n        owner = msg.sender;\n    }\n    \n    //声明一个修改器，用于有些方法只有合约的创建者才能操作\n    modifier onlyOwner{\n        if(msg.sender != owner){\n            revert();\n        }else{\n            _;\n        }\n    }\n    //把该合约的拥有者转给其他人\n    function transferOwner(address newOwner) public onlyOwner{\n        owner = newOwner;\n    }\n}\n\ncontract tokenCpc1 is owned {\n    string public name ;//代币名字\n    string public symbol; //代币符号\n    uint8 public decimals = 0; //代币小数位\n    uint public totalSupply; //代币总量\n    \n    uint public sellPrice = 1 ether ; //设置代币的卖的价格等于一个以太币\n    uint public buyPrice = 1 ether ;//设置代币的买的价格等于一个以太币\n    \n    //用一个映射类型的变量，来记录所有账户的代币的余额\n    mapping(address => uint) public balanceOf;\n    //用一个映射类型的变量，来记录被冻结的账户\n    mapping(address=>bool) public frozenAccount;\n    \n    \n    event e(string _str);\n    //构造函数，初始化代币的变量和初始代币总量\n    function tokenCpc1(uint initialSupply,string _name , string _symbol, uint8 _decimals,address centralMinter) public payable{\n        //手动指定代币的拥有者，如果不填，则默认为合约的部署者\n        if(centralMinter !=0){\n            owner = centralMinter;\n        }\n        \n        balanceOf[owner] = initialSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = initialSupply;\n    }\n    \n    //发行代币，向指定的目标账户添加代币\n    function mintToken(address target,uint mintedAmount) public onlyOwner{\n        //判断目标账户是否存在\n        if(target != 0){\n            //设置目标账户相应的代币余额\n            balanceOf[target] = mintedAmount;\n            //增加总量\n            totalSupply +=mintedAmount;\n        }else{\n            revert();\n        }\n    }\n    //实现账户的冻结和解冻\n    function freezeAccount(address target,bool _bool) public onlyOwner{\n        if(target != 0){\n            frozenAccount[target] = _bool;\n        }\n    }\n    //实现账户间，代币的转移\n    function transfer(address _to, uint _value) public {\n        //检测交易的发起者的账户是不是被冻结了\n        if(frozenAccount[msg.sender]){\n            revert();\n        }\n        //检测交易发起者的账户的代币余额是否足够\n        if(balanceOf[msg.sender] < _value){\n                revert();\n        }\n        //检测溢出\n        if((balanceOf[_to] + _value) <balanceOf[_to] ){\n                    revert();\n        }\n        \n        //实现代币转移\n        balanceOf[msg.sender] -=_value;\n        balanceOf[_to] +=_value;\n    }\n    \n    //设置代币的买卖价格\n    function setPrice(uint newSellPrice,uint newBuyPrice) public onlyOwner{\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    //实现代币的卖操作\n    function sell(uint amount) public returns(uint revenue){\n        //检测交易的发起者的账户是不是被冻结了\n        if(frozenAccount[msg.sender]){\n            revert();\n        }\n        //检测交易发起者的账户的代币余额是否足够\n        if(balanceOf[msg.sender] < amount){\n            revert();\n        }\n        //把相应数量的代币给合约的拥有者\n        balanceOf[owner] +=amount ;\n        //卖家的账户减去相应的余额\n        balanceOf[msg.sender] -=amount;\n        //计算对应的以太币的价值\n        revenue = amount * sellPrice;\n        //向卖家的账户发送对应数量的以太币\n        if(msg.sender.send(revenue)){\n            return revenue;\n        }else{\n            //如果以太币发送失败，则终止程序，并且恢复状态变量\n            revert();\n        }\n    }\n    \n    //实现买操作\n    function buy() public payable returns(uint amount) {\n        //检测买家是不是大于0 \n        if(buyPrice <= 0){\n            //如果不是，则终止\n            revert();\n        }\n        //根据用户发送的以太币的数量和代币的买价，计算出代币的数量\n        amount = msg.value / buyPrice;\n        //检测合约的拥有者是否有足够多的代币\n        if(balanceOf[owner] < amount){\n            revert();\n        }\n        //向合约的拥有者转移以太币\n        if(!owner.send(msg.value)){\n            //如果失败，则终止\n            revert();\n        }\n        //从拥有者的账户上减去相应的代币\n        balanceOf[owner] -=amount ;\n        //买家的账户增加相应的余额\n        balanceOf[msg.sender] +=amount;\n        \n        return amount;\n    }\n}\n```\n\n## 部署合约\n![图片描述][1]\n![图片描述][2]\n\n\n## 开启挖矿\n![图片描述][3]\n\n## 添加代币\n![图片描述][4]\n![图片描述][5]\n\n\n## 操作\n![图片描述][6]\n![图片描述][7]\n\n\n  [1]: //img.mukewang.com/5ac48a8600015feb21181220.png\n  [2]: //img.mukewang.com/5ac48a9400018a6b22201294.png\n  [3]: //img.mukewang.com/5ac48aa400018ec415500486.png\n  [4]: //img.mukewang.com/5ac48ab50001c01c23061122.png\n  [5]: //img.mukewang.com/5ac48ac80001da2c22581274.png\n  [6]: //img.mukewang.com/5ac48ad60001bbf322461104.png\n  [7]: //img.mukewang.com/5ac48adf00012d0422780956.png","source":"_posts/2018/201805/20180511-3.md","raw":"---\nlayout: post\ntitle: 【3】区块链-以太坊代币合约\ndate: 2018-05-11 12:14:29\ntags:\n---\n## 编写智能合约\n```\npragma solidity ^0.4.0;\n\n//创建一个基础合约，有些操作只能是当前合约的创建者才能操作\ncontract owned{\n    //声明一个用来接收合约创建者的状态变量\n    address public owner;\n    //构造函数，把当前交易的发送者（也就是合约的创建者）赋予owner变量\n    function owned() public {\n        owner = msg.sender;\n    }\n    \n    //声明一个修改器，用于有些方法只有合约的创建者才能操作\n    modifier onlyOwner{\n        if(msg.sender != owner){\n            revert();\n        }else{\n            _;\n        }\n    }\n    //把该合约的拥有者转给其他人\n    function transferOwner(address newOwner) public onlyOwner{\n        owner = newOwner;\n    }\n}\n\ncontract tokenCpc1 is owned {\n    string public name ;//代币名字\n    string public symbol; //代币符号\n    uint8 public decimals = 0; //代币小数位\n    uint public totalSupply; //代币总量\n    \n    uint public sellPrice = 1 ether ; //设置代币的卖的价格等于一个以太币\n    uint public buyPrice = 1 ether ;//设置代币的买的价格等于一个以太币\n    \n    //用一个映射类型的变量，来记录所有账户的代币的余额\n    mapping(address => uint) public balanceOf;\n    //用一个映射类型的变量，来记录被冻结的账户\n    mapping(address=>bool) public frozenAccount;\n    \n    \n    event e(string _str);\n    //构造函数，初始化代币的变量和初始代币总量\n    function tokenCpc1(uint initialSupply,string _name , string _symbol, uint8 _decimals,address centralMinter) public payable{\n        //手动指定代币的拥有者，如果不填，则默认为合约的部署者\n        if(centralMinter !=0){\n            owner = centralMinter;\n        }\n        \n        balanceOf[owner] = initialSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = initialSupply;\n    }\n    \n    //发行代币，向指定的目标账户添加代币\n    function mintToken(address target,uint mintedAmount) public onlyOwner{\n        //判断目标账户是否存在\n        if(target != 0){\n            //设置目标账户相应的代币余额\n            balanceOf[target] = mintedAmount;\n            //增加总量\n            totalSupply +=mintedAmount;\n        }else{\n            revert();\n        }\n    }\n    //实现账户的冻结和解冻\n    function freezeAccount(address target,bool _bool) public onlyOwner{\n        if(target != 0){\n            frozenAccount[target] = _bool;\n        }\n    }\n    //实现账户间，代币的转移\n    function transfer(address _to, uint _value) public {\n        //检测交易的发起者的账户是不是被冻结了\n        if(frozenAccount[msg.sender]){\n            revert();\n        }\n        //检测交易发起者的账户的代币余额是否足够\n        if(balanceOf[msg.sender] < _value){\n                revert();\n        }\n        //检测溢出\n        if((balanceOf[_to] + _value) <balanceOf[_to] ){\n                    revert();\n        }\n        \n        //实现代币转移\n        balanceOf[msg.sender] -=_value;\n        balanceOf[_to] +=_value;\n    }\n    \n    //设置代币的买卖价格\n    function setPrice(uint newSellPrice,uint newBuyPrice) public onlyOwner{\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    //实现代币的卖操作\n    function sell(uint amount) public returns(uint revenue){\n        //检测交易的发起者的账户是不是被冻结了\n        if(frozenAccount[msg.sender]){\n            revert();\n        }\n        //检测交易发起者的账户的代币余额是否足够\n        if(balanceOf[msg.sender] < amount){\n            revert();\n        }\n        //把相应数量的代币给合约的拥有者\n        balanceOf[owner] +=amount ;\n        //卖家的账户减去相应的余额\n        balanceOf[msg.sender] -=amount;\n        //计算对应的以太币的价值\n        revenue = amount * sellPrice;\n        //向卖家的账户发送对应数量的以太币\n        if(msg.sender.send(revenue)){\n            return revenue;\n        }else{\n            //如果以太币发送失败，则终止程序，并且恢复状态变量\n            revert();\n        }\n    }\n    \n    //实现买操作\n    function buy() public payable returns(uint amount) {\n        //检测买家是不是大于0 \n        if(buyPrice <= 0){\n            //如果不是，则终止\n            revert();\n        }\n        //根据用户发送的以太币的数量和代币的买价，计算出代币的数量\n        amount = msg.value / buyPrice;\n        //检测合约的拥有者是否有足够多的代币\n        if(balanceOf[owner] < amount){\n            revert();\n        }\n        //向合约的拥有者转移以太币\n        if(!owner.send(msg.value)){\n            //如果失败，则终止\n            revert();\n        }\n        //从拥有者的账户上减去相应的代币\n        balanceOf[owner] -=amount ;\n        //买家的账户增加相应的余额\n        balanceOf[msg.sender] +=amount;\n        \n        return amount;\n    }\n}\n```\n\n## 部署合约\n![图片描述][1]\n![图片描述][2]\n\n\n## 开启挖矿\n![图片描述][3]\n\n## 添加代币\n![图片描述][4]\n![图片描述][5]\n\n\n## 操作\n![图片描述][6]\n![图片描述][7]\n\n\n  [1]: //img.mukewang.com/5ac48a8600015feb21181220.png\n  [2]: //img.mukewang.com/5ac48a9400018a6b22201294.png\n  [3]: //img.mukewang.com/5ac48aa400018ec415500486.png\n  [4]: //img.mukewang.com/5ac48ab50001c01c23061122.png\n  [5]: //img.mukewang.com/5ac48ac80001da2c22581274.png\n  [6]: //img.mukewang.com/5ac48ad60001bbf322461104.png\n  [7]: //img.mukewang.com/5ac48adf00012d0422780956.png","slug":"3","published":1,"updated":"2019-04-02T04:36:01.709Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlu0076pgwiybh2rv60"},{"layout":"post","title":"【4】区块链-以太坊web3.js","date":"2018-05-11T04:15:29.000Z","_content":"## 下载\n`uiste@uiste:~/www/blockchain/test_web3js$     git clone https://github.com/ethereum/web3.js.git`\n\n \n![图片描述][1]\n\n## 运行node-app.js\n\n![图片描述][2]\n获取主账号地址，与账户余额\n![图片描述][3]\n\n## 下载轻钱包\n```\ngit clone https://github.com/ConsenSys/eth-lightwallet.git\ncd eth-lightwallet\nnpm install\n```\n\n![图片描述][4]\n\n  [1]: //img.mukewang.com/5ac48b790001e22212920416.png\n  [2]: //img.mukewang.com/5ac48b970001028312480162.png\n  [3]: //img.mukewang.com/5ac48ba50001f44a19700496.png\n  [4]: //img.mukewang.com/5ac48bb5000185f814721386.png","source":"_posts/2018/201805/20180511-4.md","raw":"---\nlayout: post\ntitle: 【4】区块链-以太坊web3.js\ndate: 2018-05-11 12:15:29\ntags:\n---\n## 下载\n`uiste@uiste:~/www/blockchain/test_web3js$     git clone https://github.com/ethereum/web3.js.git`\n\n \n![图片描述][1]\n\n## 运行node-app.js\n\n![图片描述][2]\n获取主账号地址，与账户余额\n![图片描述][3]\n\n## 下载轻钱包\n```\ngit clone https://github.com/ConsenSys/eth-lightwallet.git\ncd eth-lightwallet\nnpm install\n```\n\n![图片描述][4]\n\n  [1]: //img.mukewang.com/5ac48b790001e22212920416.png\n  [2]: //img.mukewang.com/5ac48b970001028312480162.png\n  [3]: //img.mukewang.com/5ac48ba50001f44a19700496.png\n  [4]: //img.mukewang.com/5ac48bb5000185f814721386.png","slug":"4","published":1,"updated":"2019-04-02T04:36:52.374Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlv0078pgwihlrotku6"},{"layout":"post","title":"【5】区块链-以太坊truffle 框架","date":"2018-05-11T04:16:29.000Z","_content":"## TestRPC安装\n安装Ethereum客户端来支持JSON RPC API调用开发环境，推荐使用EthereumJS。 \n安装命令：\n\n`sudo npm install -g ethereumjs-testrpc`\n\n这里的安装如果无法下载，请参考上一篇博客中安装truffle中使用淘宝镜像的方法。此步安装遇到很多问题，也尝试了各种方法，比如gcc依赖的安装升级，Python的安装，npm的升级，git的配置，还有node版本是否影响。虽然最终把问题给解决了，但修改的地方太多具体什么原因导致安装过程中出现那么多问题，还有待大家去尝试分析。\n\n在执行以上命令之后，只是把ethereumjs-testrpc安装在nodejs的以下路径：\n\n`/home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc`\n\n还行进行软连接的配置：\n\n`ln -s /home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc/bin/testrpc /usr/local/bin/testrpc`\n\n## truffle 安装\n`npm install -g truffle`\n\n## truffle 使用\n### 常用命令\n```\ntruffle init 初始化\ntruffle  compile 编译\ntruffle migrate 部署\ntruffle serve 启动服务\n```\n\n### 操作\n1. 启动TestRPC\n![图片描述][1]\n\n2. 初始化项目\n![图片描述][2]\n\n3. 修改配置文件,编写简单的智能合约\n![图片描述][3]\n\n> mac 默认读取的truffle.js\n```\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```\n![图片描述][4]\nSimpleStorage.sol\n```\npragma solidity ^0.4.0;  \ncontract SimpleStorage {  \n  \n   uint storedData;  \n  \n   function set(uint x) public {   \n    storedData = x;  \n   }  \n  \n   function get() constant public returns (uint) {   \n      return storedData;  \n   }   \n} \n```\n\n2_deploy_contracts.js\n```\nconst SimpleStorage = artifacts.require(\"./SimpleStorage.sol\")\n\nmodule.exports = function(deployer) {\n    deployer.deploy(SimpleStorage);\n};\n```\n\n4. 编译(保证编译不报错)\n![图片描述][5]\ntruffle migrate --reset  使用这个命令便可解决以上问题\n5. 部署\n![图片描述][6]\n> 报错问题无法解决\n\n## 换一种方案实现\n```\nmkdir test   //重新建一个项目目录test\ntruffle unbox webpack\ntruffle develop   // 启动一个控制台\n> compile       //编译\n>migrate        //迁移合约    当然这两部也可以不在控制台下完成   可以用 truffle compile  和 truffle migrate 完成。\nnpm run dev  //运行webpack服务器进行前端热重新加载（在开发控制台之外）。\n```\n\n![图片描述][7]\n![图片描述][8]\n![图片描述][9]\n![图片描述][10]\n![图片描述][11]\n\n\n  [1]: //img.mukewang.com/5ac48d1e0001805713800986.png\n  [2]: //img.mukewang.com/5ac48d470001c60b12040374.png\n  [3]: //img.mukewang.com/5ac48d52000118d719160480.png\n  [4]: //img.mukewang.com/5ac48d630001615723740600.png\n  [5]: //img.mukewang.com/5ac48d780001e92110340482.png\n  [6]: //img.mukewang.com/5ac48d81000127fc20080396.png\n  [7]: //img.mukewang.com/5ac48da80001814512440476.png\n  [8]: //img.mukewang.com/5ac48db100013cb813840938.png\n  [9]: //img.mukewang.com/5ac48db80001e13e11660652.png\n  [10]: //img.mukewang.com/5ac48dc00001639914141032.png\n  [11]: //img.mukewang.com/5ac48dc800019ef024601256.png","source":"_posts/2018/201805/20180511-5.md","raw":"---\nlayout: post\ntitle: 【5】区块链-以太坊truffle 框架\ndate: 2018-05-11 12:16:29\ntags:\n---\n## TestRPC安装\n安装Ethereum客户端来支持JSON RPC API调用开发环境，推荐使用EthereumJS。 \n安装命令：\n\n`sudo npm install -g ethereumjs-testrpc`\n\n这里的安装如果无法下载，请参考上一篇博客中安装truffle中使用淘宝镜像的方法。此步安装遇到很多问题，也尝试了各种方法，比如gcc依赖的安装升级，Python的安装，npm的升级，git的配置，还有node版本是否影响。虽然最终把问题给解决了，但修改的地方太多具体什么原因导致安装过程中出现那么多问题，还有待大家去尝试分析。\n\n在执行以上命令之后，只是把ethereumjs-testrpc安装在nodejs的以下路径：\n\n`/home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc`\n\n还行进行软连接的配置：\n\n`ln -s /home/zhuzs/app/nodejs/node-v6.9.1/lib/node_modules/ethereumjs-testrpc/bin/testrpc /usr/local/bin/testrpc`\n\n## truffle 安装\n`npm install -g truffle`\n\n## truffle 使用\n### 常用命令\n```\ntruffle init 初始化\ntruffle  compile 编译\ntruffle migrate 部署\ntruffle serve 启动服务\n```\n\n### 操作\n1. 启动TestRPC\n![图片描述][1]\n\n2. 初始化项目\n![图片描述][2]\n\n3. 修改配置文件,编写简单的智能合约\n![图片描述][3]\n\n> mac 默认读取的truffle.js\n```\nmodule.exports = {\n  // See <http://truffleframework.com/docs/advanced/configuration>\n  // to customize your Truffle configuration!\n  networks: {\n    development: {\n      host: \"127.0.0.1\",\n      port: 8545,\n      network_id: \"*\" // Match any network id\n    }\n  }\n};\n```\n![图片描述][4]\nSimpleStorage.sol\n```\npragma solidity ^0.4.0;  \ncontract SimpleStorage {  \n  \n   uint storedData;  \n  \n   function set(uint x) public {   \n    storedData = x;  \n   }  \n  \n   function get() constant public returns (uint) {   \n      return storedData;  \n   }   \n} \n```\n\n2_deploy_contracts.js\n```\nconst SimpleStorage = artifacts.require(\"./SimpleStorage.sol\")\n\nmodule.exports = function(deployer) {\n    deployer.deploy(SimpleStorage);\n};\n```\n\n4. 编译(保证编译不报错)\n![图片描述][5]\ntruffle migrate --reset  使用这个命令便可解决以上问题\n5. 部署\n![图片描述][6]\n> 报错问题无法解决\n\n## 换一种方案实现\n```\nmkdir test   //重新建一个项目目录test\ntruffle unbox webpack\ntruffle develop   // 启动一个控制台\n> compile       //编译\n>migrate        //迁移合约    当然这两部也可以不在控制台下完成   可以用 truffle compile  和 truffle migrate 完成。\nnpm run dev  //运行webpack服务器进行前端热重新加载（在开发控制台之外）。\n```\n\n![图片描述][7]\n![图片描述][8]\n![图片描述][9]\n![图片描述][10]\n![图片描述][11]\n\n\n  [1]: //img.mukewang.com/5ac48d1e0001805713800986.png\n  [2]: //img.mukewang.com/5ac48d470001c60b12040374.png\n  [3]: //img.mukewang.com/5ac48d52000118d719160480.png\n  [4]: //img.mukewang.com/5ac48d630001615723740600.png\n  [5]: //img.mukewang.com/5ac48d780001e92110340482.png\n  [6]: //img.mukewang.com/5ac48d81000127fc20080396.png\n  [7]: //img.mukewang.com/5ac48da80001814512440476.png\n  [8]: //img.mukewang.com/5ac48db100013cb813840938.png\n  [9]: //img.mukewang.com/5ac48db80001e13e11660652.png\n  [10]: //img.mukewang.com/5ac48dc00001639914141032.png\n  [11]: //img.mukewang.com/5ac48dc800019ef024601256.png","slug":"5","published":1,"updated":"2019-04-02T04:36:45.010Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlw0079pgwiunuaizx7"},{"layout":"post","title":"truffle geth 启动Ethereum测试节点","date":"2018-11-02T07:42:14.000Z","_content":"\n# truffle 框架使用\n\n** uiste@uiste:~$     testrpc ** \n```\nuiste@uiste:~/www/blockchain/test_truffle_2$     truffle unbox webpack\nuiste@uiste:~/www/blockchain/test_truffle_2$     truffle develop\n\n\nLast login: Mon Apr  2 20:07:27 on ttys008\nuiste@uiste:~$     cd www/blockchain/test_truffle_2/\nuiste@uiste:~/www/blockchain/test_truffle_2$     npm run dev\n```\n\n\n# geth 方式\n```\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpccorsdomain \"*\" --networkid 99 console`\n\nuiste@uiste:~$     cd www/blockchain/test-geth\nuiste@uiste:~/www/blockchain/test-geth$     geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console\n\nuiste@uiste:/Applications$      /Applications/Mist.app/Contents/MacOS/Mist --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n\n```\n\n\n\n\n\n```\ngeth --datadir \"./chain\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console 2>>eth_output.log\n\ngeth --dev --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\" --mine --rpcapi \"eth,txpool,web3\"\n\ngeth --testnet --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\"\n\n```","source":"_posts/2018/201811/20181102-1.md","raw":"---\nlayout: post\ntitle: truffle geth 启动Ethereum测试节点\ndate: 2018-11-02 15:42:14\ntags:\n---\n\n# truffle 框架使用\n\n** uiste@uiste:~$     testrpc ** \n```\nuiste@uiste:~/www/blockchain/test_truffle_2$     truffle unbox webpack\nuiste@uiste:~/www/blockchain/test_truffle_2$     truffle develop\n\n\nLast login: Mon Apr  2 20:07:27 on ttys008\nuiste@uiste:~$     cd www/blockchain/test_truffle_2/\nuiste@uiste:~/www/blockchain/test_truffle_2$     npm run dev\n```\n\n\n# geth 方式\n```\n`geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpccorsdomain \"*\" --networkid 99 console`\n\nuiste@uiste:~$     cd www/blockchain/test-geth\nuiste@uiste:~/www/blockchain/test-geth$     geth --datadir \"./Mychains/dev\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console\n\nuiste@uiste:/Applications$      /Applications/Mist.app/Contents/MacOS/Mist --rpc \"/Users/uiste/www/blockchain/test-geth/Mychains/dev/geth.ipc\"\n\n```\n\n\n\n\n\n```\ngeth --datadir \"./chain\" --identity \"mydev\" --rpc --rpcapi \"db,eth,net,web3,personal,web3\" --nodiscover --rpccorsdomain \"*\" --networkid 100 console 2>>eth_output.log\n\ngeth --dev --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\" --mine --rpcapi \"eth,txpool,web3\"\n\ngeth --testnet --rpc --rpccorsdomain \"*\" --rpcaddr \"0.0.0.0\" --rpcport \"8545\"\n\n```","slug":"1","published":1,"updated":"2018-11-02T07:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlx007cpgwi8m1uko6q"},{"layout":"post","title":"Mac配置远程服务器隧道代理","date":"2018-11-02T07:44:54.000Z","_content":"> 因为安全原因远程服务器的数据库不允许本地直接访问，又没有开启访问IP白名单时，可以通过隧道代理访问。Windows系统通过xsheel可以设置隧道代理。Mac只需要运行如下命令\n\n```\nssh -p 22  -i ~/.ssh/id_rsa -fNL 代理端口:代理IP:转发原端口 用户名@远程服务器IP\n\nssh -p 22  -i ~/.ssh/id_rsa -fNL 3308:127.0.0.1:3306 root@118.xx.xxx.xx\n```\n\n```\nssh -p {ssh_port} -i {rsa_file} -fNL {local_port}:{mysql_ip}:{mysql_port} \n{ssh_user}@{ssh_ip}\nssh -p 22  -i ./id_rsa_jump -fNL 33060:mysql_ip:3306 jump@jump_ip   # 实例\n```\n\n>-p {ssh_port}: 指定跳板机器的ssh服务的端口\n-i {rsa_file}:指定连接跳板机的ssh公钥，由跳板机的ssh服务端生成，如果不指定公钥或者公钥验证失败则会弹出密码进行登录。\n-f:需进行ssh认证\n-N:只进行端口转发，不执行命令\n-L:指定连接服务的格式 [bind_address:]port:host:hostport\n{local_port}：本地监听的端口\n{mysql_ip}：转发到的mysql的ip或域名\n{mysql_port}：转发到的mysql的端口\n{ssh_port}：跳板机的\n{ssh_user}：跳板机的ssh用户名(如果为rsa登录，则ras对应的用户名和ssh_user一致)\n{ssh_ip}：跳板机的ip或域名\n检查是否启动成功\nnetstat  -aon|findstr  \"33060\"  #存在对应的监听则启动成功 如果要关闭则kill\n连接mysql\nip:127.0.0.1\nport:33060","source":"_posts/2018/201811/20181102-2.md","raw":"---\nlayout: post\ntitle: Mac配置远程服务器隧道代理\ndate: 2018-11-02 15:44:54\ntags:\n---\n> 因为安全原因远程服务器的数据库不允许本地直接访问，又没有开启访问IP白名单时，可以通过隧道代理访问。Windows系统通过xsheel可以设置隧道代理。Mac只需要运行如下命令\n\n```\nssh -p 22  -i ~/.ssh/id_rsa -fNL 代理端口:代理IP:转发原端口 用户名@远程服务器IP\n\nssh -p 22  -i ~/.ssh/id_rsa -fNL 3308:127.0.0.1:3306 root@118.xx.xxx.xx\n```\n\n```\nssh -p {ssh_port} -i {rsa_file} -fNL {local_port}:{mysql_ip}:{mysql_port} \n{ssh_user}@{ssh_ip}\nssh -p 22  -i ./id_rsa_jump -fNL 33060:mysql_ip:3306 jump@jump_ip   # 实例\n```\n\n>-p {ssh_port}: 指定跳板机器的ssh服务的端口\n-i {rsa_file}:指定连接跳板机的ssh公钥，由跳板机的ssh服务端生成，如果不指定公钥或者公钥验证失败则会弹出密码进行登录。\n-f:需进行ssh认证\n-N:只进行端口转发，不执行命令\n-L:指定连接服务的格式 [bind_address:]port:host:hostport\n{local_port}：本地监听的端口\n{mysql_ip}：转发到的mysql的ip或域名\n{mysql_port}：转发到的mysql的端口\n{ssh_port}：跳板机的\n{ssh_user}：跳板机的ssh用户名(如果为rsa登录，则ras对应的用户名和ssh_user一致)\n{ssh_ip}：跳板机的ip或域名\n检查是否启动成功\nnetstat  -aon|findstr  \"33060\"  #存在对应的监听则启动成功 如果要关闭则kill\n连接mysql\nip:127.0.0.1\nport:33060","slug":"2","published":1,"updated":"2018-11-03T00:13:03.743Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlx007dpgwi3i1fb6aj"},{"layout":"post","title":"Mac 配置ssh 免密登录","date":"2018-11-02T07:49:00.000Z","_content":"\n```\n# 配置ssh\n~ vim ~/.ssh/config\n\nHost *\n    ServerAliveInterval 10\n\nHost Mweb1\n    HostName        服务器IP地址\n    Port            端口\n    User            用户名\n    IdentityFile    私钥地址\n\nHost Mweb2\n    HostName        服务器IP地址\n    Port            22\n    User            uiste\n    IdentityFile    ~/.ssh/id_rsa\n\n# 登录方式\n➜  ~ ssh Mweb1\nLast login: Fri Nov  2 08:15:51 2018 from 180.173.83.33\n[root@VM_0_6_centos ~]#\n\n```\n\n\n","source":"_posts/2018/201811/20181102-3.md","raw":"---\nlayout: post\ntitle: Mac 配置ssh 免密登录\ndate: 2018-11-02 15:49:00\ntags:\n---\n\n```\n# 配置ssh\n~ vim ~/.ssh/config\n\nHost *\n    ServerAliveInterval 10\n\nHost Mweb1\n    HostName        服务器IP地址\n    Port            端口\n    User            用户名\n    IdentityFile    私钥地址\n\nHost Mweb2\n    HostName        服务器IP地址\n    Port            22\n    User            uiste\n    IdentityFile    ~/.ssh/id_rsa\n\n# 登录方式\n➜  ~ ssh Mweb1\nLast login: Fri Nov  2 08:15:51 2018 from 180.173.83.33\n[root@VM_0_6_centos ~]#\n\n```\n\n\n","slug":"3","published":1,"updated":"2018-11-02T07:58:06.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlz007fpgwiceak6njw"},{"layout":"post","title":"放松等待","date":"2019-06-30T02:18:56.000Z","_content":"\n纽约时间比加州时间早三个小时，\n\nNew York is 3 hours ahead of California,\n\n但加州时间并没有变慢。\n\nbut it does not make California slow.\n\n有人22岁就毕业了，\n\nSomeone graduated at the age of 22,\n\n但等了五年才找到好的工作！\n\nbut waited 5 years before securing a good job!\n\n有人25岁就当上CEO，\n\nSomeone became a CEO at 25,\n\n却在50岁去世。\n\nand died at 50.\n\n也有人迟到50岁才当上CEO，\n\nWhile another became a CEO at 50,\n\n然后活到90岁。\n\nand lived to 90 years.\n\n有人依然单身，\n\nSomeone is still single,\n\n同时也有人已婚。\n\nwhile someone else got married.\n\n奥巴马55岁就退休，\n\nObama retires at 55,\n\n川普70岁才开始当总统。\n\nbut Trump starts at 70.\n\n世上每个人本来就有自己的发展时区。\n\nAbsolutely everyone in this world works based on their Time Zone.\n\n身边有些人看似走在你前面，\n\nPeople around you might seem to go ahead of you,\n\n也有人看似走在你后面。\n\nsome might seem to be behind you.\n\n但其实每个人在自己的时区有自己的步程。\n\nBut everyone is running their own RACE, in their own TIME.\n\n不用嫉妒或嘲笑他们。\n\nDon’t envy them or mock them.\n\n他们都在自己的时区里，你也是！\n\nThey are in their TIME ZONE, and you are in yours!\n\n生命就是等待正确的行动时机。\n\nLife is about waiting for the right moment to act.\n\n所以，放轻松。\n\nSo, RELAX.\n\n你没有落后。\n\nYou’re not LATE.\n\n你没有领先。\n\nYou’re not EARLY.\n\n在命运为你安排的属于自己的时区里，一切都准时。\n\nYou are very much ON TIME, and in your TIME ZONE Destiny set up for you.","source":"_posts/2019/201906/20190630-1.md","raw":"---\nlayout: post\ntitle: 放松等待\ndate: 2019-06-30 10:18:56\ntags:\n---\n\n纽约时间比加州时间早三个小时，\n\nNew York is 3 hours ahead of California,\n\n但加州时间并没有变慢。\n\nbut it does not make California slow.\n\n有人22岁就毕业了，\n\nSomeone graduated at the age of 22,\n\n但等了五年才找到好的工作！\n\nbut waited 5 years before securing a good job!\n\n有人25岁就当上CEO，\n\nSomeone became a CEO at 25,\n\n却在50岁去世。\n\nand died at 50.\n\n也有人迟到50岁才当上CEO，\n\nWhile another became a CEO at 50,\n\n然后活到90岁。\n\nand lived to 90 years.\n\n有人依然单身，\n\nSomeone is still single,\n\n同时也有人已婚。\n\nwhile someone else got married.\n\n奥巴马55岁就退休，\n\nObama retires at 55,\n\n川普70岁才开始当总统。\n\nbut Trump starts at 70.\n\n世上每个人本来就有自己的发展时区。\n\nAbsolutely everyone in this world works based on their Time Zone.\n\n身边有些人看似走在你前面，\n\nPeople around you might seem to go ahead of you,\n\n也有人看似走在你后面。\n\nsome might seem to be behind you.\n\n但其实每个人在自己的时区有自己的步程。\n\nBut everyone is running their own RACE, in their own TIME.\n\n不用嫉妒或嘲笑他们。\n\nDon’t envy them or mock them.\n\n他们都在自己的时区里，你也是！\n\nThey are in their TIME ZONE, and you are in yours!\n\n生命就是等待正确的行动时机。\n\nLife is about waiting for the right moment to act.\n\n所以，放轻松。\n\nSo, RELAX.\n\n你没有落后。\n\nYou’re not LATE.\n\n你没有领先。\n\nYou’re not EARLY.\n\n在命运为你安排的属于自己的时区里，一切都准时。\n\nYou are very much ON TIME, and in your TIME ZONE Destiny set up for you.","slug":"1","published":1,"updated":"2019-07-25T03:28:37.500Z","comments":1,"photos":[],"link":"","_id":"ck39ugjlz007hpgwilknnb17r"},{"layout":"post","title":"nginx","date":"2019-08-01T08:44:44.000Z","_content":"\n## 默认安装\n```\nyum update\n\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n\nyum -y install wget httpd-tools vim\n\ncd /opt;mkdir app download logs work backup\n```\n\n## 特点\n>IO多路复用epoll\n>模块化轻量化\n>CPU亲和（CPU核心worker进程绑定分配）\n```\n# 几个物理CPU\ncat /proc/cpuinfo|grep \"physical id\" | sort | uniq | wc | -l\n\n# 几个核心\ncat /proc/cpuinfo|grep \"cpu cores\" | uniq \n```\n\n## 中间件架构\n1. 静态资源web服务\n2. 代理服务\n3. 负载均衡调度器\n4. 动态缓存\n>proxy_cache\n\n\nswitchysharp\n\n\n\n\n","source":"_posts/2019/201908/20190801-1.md","raw":"---\nlayout: post\ntitle: nginx\ndate: 2019-08-01 16:44:44\ntags:\n---\n\n## 默认安装\n```\nyum update\n\nyum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake\n\nyum -y install wget httpd-tools vim\n\ncd /opt;mkdir app download logs work backup\n```\n\n## 特点\n>IO多路复用epoll\n>模块化轻量化\n>CPU亲和（CPU核心worker进程绑定分配）\n```\n# 几个物理CPU\ncat /proc/cpuinfo|grep \"physical id\" | sort | uniq | wc | -l\n\n# 几个核心\ncat /proc/cpuinfo|grep \"cpu cores\" | uniq \n```\n\n## 中间件架构\n1. 静态资源web服务\n2. 代理服务\n3. 负载均衡调度器\n4. 动态缓存\n>proxy_cache\n\n\nswitchysharp\n\n\n\n\n","slug":"1","published":1,"updated":"2019-08-06T04:25:36.228Z","comments":1,"photos":[],"link":"","_id":"ck39ugjm1007jpgwibqrvxx2f"},{"layout":"post","title":"shell","date":"2019-08-06T04:25:54.000Z","_content":"1. 基本监控系统脚本（CPU，内存，IO等）\n2. 后台服务监控、启动、停止脚本、数据备份脚本\n3. 利用grep、sed和awk的复杂用法处理文本\n4. 功能函数编写、主流程设计\n5. 具备复杂功能的大型脚本工具编写\n\n# 变量替换\n| 语法    \t | 说明 \t\t|\n| :--------  | :-----   |\n| ${变量名#匹配规则}     \t | 从变量开头进行规则匹配，将符合最短的数据删除 \t\t|\n| ${变量名##匹配规则}        | 从变量开头进行规则匹配，将符合最长的数据删除  \t\t|\n| ${变量名%匹配规则}        | 从变量尾部进行规则匹配，将符合最短的数据删除 \t\t|\n| ${变量名%%匹配规则}     \t | 从变量尾部进行规则匹配，将符合最长的数据删除 \t\t|\n| ${变量名/匹配规则}        | 变量内容符合旧字符串，则第一个旧字符串会被新字符串取代  \t\t|\n| ${变量名//匹配规则}        | 变量内容符合旧字符串，则全部旧字符串会被新字符串取代 \t\t|\n\n\n# 字符串处理\n## 计算字符串长度\n方法一：`${#string}`\n方法二：`expr length $string`\n\n## 获取字符索引位置\n方法：`expr index \"$string\" substr`\n\n## 获取子串长度\n方法：`expr match \"$string\" substr`\n\n## 抽取字符串中的子串\n方法一：\n```\n1. ${string:position}\n2. ${string:position:length}\n3. ${string: -postion} 或者 ${string:(position)}\n```\n\n方法二：\n`expr substr $string $position $length`\n\n>使用expr，索引计数从1开始计算；使用`${string:positon:length}`，索引计数从0开始\n\n\n## 练习\n```bash\n#!/bin/bash\n#\n\nstring=\"Bigdata process framework is Hadoop,Hadoop is an open source project\"\n\nfunction print_tips\n{\n\techo \"*********************************\"\n\techo \"(1) 打印string长度\"\n\techo \"(2) 删除字符串中所有的Hadoop\"\n\techo \"(3) 替换第一个Hadoop为Mapreduce\"\n\techo \"(4) 替换全部的Hadoop为Mapreduce\"\n\techo \"*********************************\"\n}\n\nfunction len_of_string\n{\n\techo \"${#string}\"\n}\n\nfunction del_hadoop\n{\n\techo \"${string//Hadoop/}\"\n}\n\nfunction rep_hadoop_mapreduce_first\n{\n\techo \"${string/Hadoop/Mapreduce}\"\n}\n\nfunction rep_hadoop_mapreduce_all\n{\n\techo \"${string//Hadoop/Mapreduce}\"\n}\n\nwhile true\ndo \n\techo \"【string=$string]\"\n\tprint_tips\n\tread -p \"please input your choice(1|2|3|4|q|Q): \" choice\n\n\tcase $choice in \n\t\t1)\n\t\t\tlen_of_string\n\t\t\t;;\n\t\t2)\n\t\t\tdel_hadoop\n\t\t\t;;\n\t\t3)\n\t\t\trep_hadoop_mapreduce_first\n\t\t\t;;\n\t\t4)\n\t\t\trep_hadoop_mapreduce_all\n\t\t\t;;\n\t\tq|Q)\n\t\t\texit\n\t\t\t;;\n\t\t*)\n\t\t\techo \"Error, Input only in (1|2|3|4|q|Q)\"\n\t\t\t;;\n\tesac\n\n\techo \ndone\n```\n\n# 命令替换\n## 方法\n方法一：`command`\n方法二：`$(command)`\n\n* 例子1：\n获取系统的所有用户并输出\n```bash\n#!/bin/bash\n#\n\nindex=1\nfor user in `cat /etc/passwd | cut -d \":\" -f 1`\ndo\n\techo \"This is $index user : $user\"\n\tindex=$(($index+1))\ndone\n```\n\n* 例子2：\n根据系统时间计算今年或明年\n```bash\necho \"This is $(date +%Y) year\"\necho \"This is $(($(date +%Y) + 1)) year \"\n```\n\n* 例子3：\n根据系统时间获取今年还剩下多少星期，已经过了多少星期\n```bash\necho \"This year have passed $(date +%j) days\"\necho \"This year have passed $(($(date +%j)/7)) weeks\"\n\n```\n\n* 例子4：\n判定nginx进程是否存在，若不存在则自动拉起该进程\n```bash\n#!/bin/bash\n#\n\nnginx_process_num=$(ps -ef | grep nginx | grep -v grep | wc -l)\nif [ $nginx_process_num -eq 0 ];then\n\t\t#systemctl start nginx\n\t\tbrew services start nginx\nfi\n```\n\n\n>\\`\\` 和 $() 两者是等价的，但推荐使用 $() ，易于掌握；缺点是极少数Unix可能不支持\n>$(()) 主要用来进行整数运算，包括加减乘除，引用变量前面可以加$，也可以不加$\n\n# 变量类型\n## 声明变量类型为只读类型\n`declare -r var=\"hello\"`\n\n## 声明变量类型为整形\n`declare -i`\n\n## 在脚本中显示定义的函数和内容\n`declare -f`\n\n## 在脚本中显示定义的函数\n`declare -F`\n\n## 声明数组\n```\ndeclare -a array\narray=(\"jones\" \"mike\" \"kobe\" 'jordan')\n\n输出数组内容：\n\techo ${array[@]} \t输出全部内容\n\techo ${array[1]} \t输出下标索引为1的内容\n\n获取数组长度\n\techo ${#array[@]} \t输出数组内元素的个数\n\techo ${#array[2]} \t输出数组下标索引为2的元素的长度\n\n给数组某个下标赋值\n\tarray[0] = 'lily'\n\n删除元素\n\tunset array[2] 清空元素\n```\n\n# 数学运算之expr\n```\n|\n&\n>\n>=\n<\n<=\n=\n!=\n+\n-\n*\n/\n%\n```\n\n# Nginx 监控脚本\n```bash\n#!/bin/bash\n#\n\nthis_pid=$$\nstatus=`ps -ef | grep nginx | grep -v nginx | grep -v $this_pid &> /dev/null`\n\nif [ $status -eq 0 ];then\n\techo \"Nginx is running well\"\nelse\n\tsystemctl start nginx\n\techo \"Nginx is down, Start it ...\"\nfi\n```\n\n","source":"_posts/2019/201908/20190806-1.md","raw":"---\nlayout: post\ntitle: shell\ndate: 2019-08-06 12:25:54\ntags:\n---\n1. 基本监控系统脚本（CPU，内存，IO等）\n2. 后台服务监控、启动、停止脚本、数据备份脚本\n3. 利用grep、sed和awk的复杂用法处理文本\n4. 功能函数编写、主流程设计\n5. 具备复杂功能的大型脚本工具编写\n\n# 变量替换\n| 语法    \t | 说明 \t\t|\n| :--------  | :-----   |\n| ${变量名#匹配规则}     \t | 从变量开头进行规则匹配，将符合最短的数据删除 \t\t|\n| ${变量名##匹配规则}        | 从变量开头进行规则匹配，将符合最长的数据删除  \t\t|\n| ${变量名%匹配规则}        | 从变量尾部进行规则匹配，将符合最短的数据删除 \t\t|\n| ${变量名%%匹配规则}     \t | 从变量尾部进行规则匹配，将符合最长的数据删除 \t\t|\n| ${变量名/匹配规则}        | 变量内容符合旧字符串，则第一个旧字符串会被新字符串取代  \t\t|\n| ${变量名//匹配规则}        | 变量内容符合旧字符串，则全部旧字符串会被新字符串取代 \t\t|\n\n\n# 字符串处理\n## 计算字符串长度\n方法一：`${#string}`\n方法二：`expr length $string`\n\n## 获取字符索引位置\n方法：`expr index \"$string\" substr`\n\n## 获取子串长度\n方法：`expr match \"$string\" substr`\n\n## 抽取字符串中的子串\n方法一：\n```\n1. ${string:position}\n2. ${string:position:length}\n3. ${string: -postion} 或者 ${string:(position)}\n```\n\n方法二：\n`expr substr $string $position $length`\n\n>使用expr，索引计数从1开始计算；使用`${string:positon:length}`，索引计数从0开始\n\n\n## 练习\n```bash\n#!/bin/bash\n#\n\nstring=\"Bigdata process framework is Hadoop,Hadoop is an open source project\"\n\nfunction print_tips\n{\n\techo \"*********************************\"\n\techo \"(1) 打印string长度\"\n\techo \"(2) 删除字符串中所有的Hadoop\"\n\techo \"(3) 替换第一个Hadoop为Mapreduce\"\n\techo \"(4) 替换全部的Hadoop为Mapreduce\"\n\techo \"*********************************\"\n}\n\nfunction len_of_string\n{\n\techo \"${#string}\"\n}\n\nfunction del_hadoop\n{\n\techo \"${string//Hadoop/}\"\n}\n\nfunction rep_hadoop_mapreduce_first\n{\n\techo \"${string/Hadoop/Mapreduce}\"\n}\n\nfunction rep_hadoop_mapreduce_all\n{\n\techo \"${string//Hadoop/Mapreduce}\"\n}\n\nwhile true\ndo \n\techo \"【string=$string]\"\n\tprint_tips\n\tread -p \"please input your choice(1|2|3|4|q|Q): \" choice\n\n\tcase $choice in \n\t\t1)\n\t\t\tlen_of_string\n\t\t\t;;\n\t\t2)\n\t\t\tdel_hadoop\n\t\t\t;;\n\t\t3)\n\t\t\trep_hadoop_mapreduce_first\n\t\t\t;;\n\t\t4)\n\t\t\trep_hadoop_mapreduce_all\n\t\t\t;;\n\t\tq|Q)\n\t\t\texit\n\t\t\t;;\n\t\t*)\n\t\t\techo \"Error, Input only in (1|2|3|4|q|Q)\"\n\t\t\t;;\n\tesac\n\n\techo \ndone\n```\n\n# 命令替换\n## 方法\n方法一：`command`\n方法二：`$(command)`\n\n* 例子1：\n获取系统的所有用户并输出\n```bash\n#!/bin/bash\n#\n\nindex=1\nfor user in `cat /etc/passwd | cut -d \":\" -f 1`\ndo\n\techo \"This is $index user : $user\"\n\tindex=$(($index+1))\ndone\n```\n\n* 例子2：\n根据系统时间计算今年或明年\n```bash\necho \"This is $(date +%Y) year\"\necho \"This is $(($(date +%Y) + 1)) year \"\n```\n\n* 例子3：\n根据系统时间获取今年还剩下多少星期，已经过了多少星期\n```bash\necho \"This year have passed $(date +%j) days\"\necho \"This year have passed $(($(date +%j)/7)) weeks\"\n\n```\n\n* 例子4：\n判定nginx进程是否存在，若不存在则自动拉起该进程\n```bash\n#!/bin/bash\n#\n\nnginx_process_num=$(ps -ef | grep nginx | grep -v grep | wc -l)\nif [ $nginx_process_num -eq 0 ];then\n\t\t#systemctl start nginx\n\t\tbrew services start nginx\nfi\n```\n\n\n>\\`\\` 和 $() 两者是等价的，但推荐使用 $() ，易于掌握；缺点是极少数Unix可能不支持\n>$(()) 主要用来进行整数运算，包括加减乘除，引用变量前面可以加$，也可以不加$\n\n# 变量类型\n## 声明变量类型为只读类型\n`declare -r var=\"hello\"`\n\n## 声明变量类型为整形\n`declare -i`\n\n## 在脚本中显示定义的函数和内容\n`declare -f`\n\n## 在脚本中显示定义的函数\n`declare -F`\n\n## 声明数组\n```\ndeclare -a array\narray=(\"jones\" \"mike\" \"kobe\" 'jordan')\n\n输出数组内容：\n\techo ${array[@]} \t输出全部内容\n\techo ${array[1]} \t输出下标索引为1的内容\n\n获取数组长度\n\techo ${#array[@]} \t输出数组内元素的个数\n\techo ${#array[2]} \t输出数组下标索引为2的元素的长度\n\n给数组某个下标赋值\n\tarray[0] = 'lily'\n\n删除元素\n\tunset array[2] 清空元素\n```\n\n# 数学运算之expr\n```\n|\n&\n>\n>=\n<\n<=\n=\n!=\n+\n-\n*\n/\n%\n```\n\n# Nginx 监控脚本\n```bash\n#!/bin/bash\n#\n\nthis_pid=$$\nstatus=`ps -ef | grep nginx | grep -v nginx | grep -v $this_pid &> /dev/null`\n\nif [ $status -eq 0 ];then\n\techo \"Nginx is running well\"\nelse\n\tsystemctl start nginx\n\techo \"Nginx is down, Start it ...\"\nfi\n```\n\n","slug":"1","published":1,"updated":"2019-08-14T06:10:10.539Z","comments":1,"photos":[],"link":"","_id":"ck39ugjm1007lpgwi9p2i8xz9"},{"layout":"post","title":"git commit 提交的时候报错husky > pre-commit","date":"2019-08-30T05:53:36.000Z","_content":"\n这个问题是因为当你在终端输入git commit -m \"XXX\",提交代码的时候,pre-commit(客户端)钩子，它会在Git键入提交信息前运行做代码风格检查。如果代码不符合相应规则，则报错，而它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义。查询了网上的解决办法，总结为以下三种解决方案，个人喜欢第三种：\n\n>卸载husky。只要把项目的package.json文件中devDependencies节点下的husky库删掉，然后重新npm i 一次即可。或者直接在项目根目录下执行npm uninstall husky --save也可以，再次提交，自动化测试功能就屏蔽掉\n\n>进入项目的.git文件夹(文件夹默认隐藏,可先设置显示或者命令ls查找),再进入hooks文件夹,删除pre-commit文件,重新git commit -m 'xxx' git push即可。\n\n>将git commit -m \"XXX\" 改为 git commit --no-verify -m \"XXX\"\n\n\n\n注册页\nhttps://res.mimeicy.cn/lsprod/loan/35d217e7b39284.png\n\nIOS\nhttps://res.mimeicy.cn/lsprod/loan/75d217e4503fb4.png\n\n安卓\nhttps://res.mimeicy.cn/lsprod/loan/85d217e6a2a086.png","source":"_posts/2019/201908/20190830-1.md","raw":"---\nlayout: post\ntitle: git commit 提交的时候报错husky > pre-commit\ndate: 2019-08-30 13:53:36\ntags:\n---\n\n这个问题是因为当你在终端输入git commit -m \"XXX\",提交代码的时候,pre-commit(客户端)钩子，它会在Git键入提交信息前运行做代码风格检查。如果代码不符合相应规则，则报错，而它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义。查询了网上的解决办法，总结为以下三种解决方案，个人喜欢第三种：\n\n>卸载husky。只要把项目的package.json文件中devDependencies节点下的husky库删掉，然后重新npm i 一次即可。或者直接在项目根目录下执行npm uninstall husky --save也可以，再次提交，自动化测试功能就屏蔽掉\n\n>进入项目的.git文件夹(文件夹默认隐藏,可先设置显示或者命令ls查找),再进入hooks文件夹,删除pre-commit文件,重新git commit -m 'xxx' git push即可。\n\n>将git commit -m \"XXX\" 改为 git commit --no-verify -m \"XXX\"\n\n\n\n注册页\nhttps://res.mimeicy.cn/lsprod/loan/35d217e7b39284.png\n\nIOS\nhttps://res.mimeicy.cn/lsprod/loan/75d217e4503fb4.png\n\n安卓\nhttps://res.mimeicy.cn/lsprod/loan/85d217e6a2a086.png","slug":"1","published":1,"updated":"2019-08-30T09:02:07.040Z","comments":1,"photos":[],"link":"","_id":"ck39ugjm2007npgwikclng6ef"},{"layout":"post","title":"redis docker 主从集群","date":"2019-11-22T06:01:58.000Z","_content":"\n# 环境相关\n## docker 安装参考\n参考: [Docker 安装](https://yeasy.gitbooks.io/docker_practice/install/)\n\n## docker-lnmp 集成环境\n参考：[Docker-lnmp](https://github.com/uiste/docker-lnmp)\n\n# Redis 主从集群\n\n## 指定自定义网络\n```\n[root@VM_0_6_centos redis]# pwd\n/data/web/redis\n\n[root@VM_0_6_centos redis]# docker network create --subnet=172.10.0.0/16 mynetwork\n1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9\n```\n\n## 创建 Dockerfile\n```\nFROM centos:latest\nRUN groupadd -r redis && useradd  -r -g redis redis\nRUN yum -y update &&  yum -y install epel-release && yum -y install redis && yum -y install net-tools\nEXPOSE 6379\n```\n\n## 在 Dockerfile 目录 执行下面的代码，注意后面上下文点号\n`docker build -t redis .`\n\n## 使用此docker 镜像 创建容器\n代码如下：\n```\ndocker run -itd --name redis-master --net mynetwork -p 6380:6379 --ip 172.10.0.2 redis\ndocker run -itd --name redis-slave --net mynetwork -p 6381:6379 --ip 172.10.0.3 redis\n```\n\n参数说明：\n参考: [菜鸟教程文档](https://www.runoob.com/docker/docker-command-manual.html)\n\n\n### 查看网络\n```\n[root@VM_0_6_centos redis]# docker network inspect mynetwork\n[\n    {\n        \"Name\": \"mynetwork\",\n        \"Id\": \"1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9\",\n        \"Created\": \"2019-11-22T14:01:10.470838603+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.10.0.0/16\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"3391a5251e6324274a6f431b0346fabb9010cbcc0fe156c988ffb6bd20148a72\": {\n                \"Name\": \"redis-master\",\n                \"EndpointID\": \"6e6505d09e0b2a58d80a8b3e306f506dd2da8a7c77f345a051d05cce4618a6a4\",\n                \"MacAddress\": \"02:42:ac:0a:00:02\",\n                \"IPv4Address\": \"172.10.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"ff01a57b5de5d54a387d5945fe8b7d5d12b2cf3476b6f93ed6dc4a0f82fa0aef\": {\n                \"Name\": \"redis-slave\",\n                \"EndpointID\": \"5a5d3ea726d9b7b9fc7555138e209ad3ec04fa758713c210c1cd8269806f2b05\",\n                \"MacAddress\": \"02:42:ac:0a:00:03\",\n                \"IPv4Address\": \"172.10.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n\n### 进入容器\n```\n[root@VM_0_6_centos redis]# docker exec -it ff01a57b5de5 /bin/bash\n[root@ff01a57b5de5 /]#\n```\n\n## 主从复制\n### 主从复制说明\n为了解决单一节点 机器故障、容量瓶颈等问题，会把数据复制多个副本部署到其它节点上进行冗余备份。实现Redis的高可用。\n\n>主从复制->哨兵->集群\n\n### 配置\nredis服务器启动后，直接通过客户端执行命令：slaveof <masterip> <masterport> 则该redis实例成为从节点\n\n修改redis保护模式 配置从节点依赖的主节点IP\n\n主节点调整\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash\n[root@ff01a57b5de5 /]# vi /etc/redis.conf\n...\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#bind 127.0.0.1\nbind 0.0.0.0\n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    \"bind\" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the \"bind\" directive.\n#protected-mode yes\nprotected-mode no\n\n...\n\n```\n\n从节点调整\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-slave /bin/bash\n[root@ff01a57b5de5 /]# vi /etc/redis.conf\n...\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#bind 127.0.0.1\nbind 0.0.0.0\n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    \"bind\" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the \"bind\" directive.\n#protected-mode yes\nprotected-mode no\n\n...\n\n# replicaof <masterip> <masterport>\nreplicaof 172.10.0.2 6379\n# If the master is password protected (using the \"requirepass\" configuration\n# directive below) it is possible to tell the replica to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the replica request.\n#\n# masterauth <master-password>\n\n...\n\n```\n\n### 数据测试\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash\n[root@3391a5251e63 /]# vi /etc/redis.conf\n[root@3391a5251e63 /]# redis-server /etc/redis.conf &\n[1] 28\n[root@3391a5251e63 /]# redis-cli\n127.0.0.1:6379> set name uiste\nOK\n127.0.0.1:6379> get name\n\"uiste\"\n127.0.0.1:6379>\n\n\n[root@VM_0_6_centos ~]# docker exec -it redis-slave /bin/bash\n[root@ff01a57b5de5 /]# redis-server /etc/redis.conf &\n[1] 73\n[root@ff01a57b5de5 /]# redis-cli\n127.0.0.1:6379> get name\n\"uiste\"\n127.0.0.1:6379>\n```\n\n> 多个从节点的时候，避免主节点同步压力的增加，可以将其它从节点依赖于从节点同步\n\n\n","source":"_posts/2019/201911/20191122-1.md","raw":"---\nlayout: post\ntitle: redis docker 主从集群\ndate: 2019-11-22 14:01:58\ntags:\n---\n\n# 环境相关\n## docker 安装参考\n参考: [Docker 安装](https://yeasy.gitbooks.io/docker_practice/install/)\n\n## docker-lnmp 集成环境\n参考：[Docker-lnmp](https://github.com/uiste/docker-lnmp)\n\n# Redis 主从集群\n\n## 指定自定义网络\n```\n[root@VM_0_6_centos redis]# pwd\n/data/web/redis\n\n[root@VM_0_6_centos redis]# docker network create --subnet=172.10.0.0/16 mynetwork\n1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9\n```\n\n## 创建 Dockerfile\n```\nFROM centos:latest\nRUN groupadd -r redis && useradd  -r -g redis redis\nRUN yum -y update &&  yum -y install epel-release && yum -y install redis && yum -y install net-tools\nEXPOSE 6379\n```\n\n## 在 Dockerfile 目录 执行下面的代码，注意后面上下文点号\n`docker build -t redis .`\n\n## 使用此docker 镜像 创建容器\n代码如下：\n```\ndocker run -itd --name redis-master --net mynetwork -p 6380:6379 --ip 172.10.0.2 redis\ndocker run -itd --name redis-slave --net mynetwork -p 6381:6379 --ip 172.10.0.3 redis\n```\n\n参数说明：\n参考: [菜鸟教程文档](https://www.runoob.com/docker/docker-command-manual.html)\n\n\n### 查看网络\n```\n[root@VM_0_6_centos redis]# docker network inspect mynetwork\n[\n    {\n        \"Name\": \"mynetwork\",\n        \"Id\": \"1e74de7cbd62306d0f1785e83ef5426cafb021cccd6e1bdfaa316cd7017911d9\",\n        \"Created\": \"2019-11-22T14:01:10.470838603+08:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.10.0.0/16\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"3391a5251e6324274a6f431b0346fabb9010cbcc0fe156c988ffb6bd20148a72\": {\n                \"Name\": \"redis-master\",\n                \"EndpointID\": \"6e6505d09e0b2a58d80a8b3e306f506dd2da8a7c77f345a051d05cce4618a6a4\",\n                \"MacAddress\": \"02:42:ac:0a:00:02\",\n                \"IPv4Address\": \"172.10.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"ff01a57b5de5d54a387d5945fe8b7d5d12b2cf3476b6f93ed6dc4a0f82fa0aef\": {\n                \"Name\": \"redis-slave\",\n                \"EndpointID\": \"5a5d3ea726d9b7b9fc7555138e209ad3ec04fa758713c210c1cd8269806f2b05\",\n                \"MacAddress\": \"02:42:ac:0a:00:03\",\n                \"IPv4Address\": \"172.10.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n\n### 进入容器\n```\n[root@VM_0_6_centos redis]# docker exec -it ff01a57b5de5 /bin/bash\n[root@ff01a57b5de5 /]#\n```\n\n## 主从复制\n### 主从复制说明\n为了解决单一节点 机器故障、容量瓶颈等问题，会把数据复制多个副本部署到其它节点上进行冗余备份。实现Redis的高可用。\n\n>主从复制->哨兵->集群\n\n### 配置\nredis服务器启动后，直接通过客户端执行命令：slaveof <masterip> <masterport> 则该redis实例成为从节点\n\n修改redis保护模式 配置从节点依赖的主节点IP\n\n主节点调整\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash\n[root@ff01a57b5de5 /]# vi /etc/redis.conf\n...\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#bind 127.0.0.1\nbind 0.0.0.0\n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    \"bind\" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the \"bind\" directive.\n#protected-mode yes\nprotected-mode no\n\n...\n\n```\n\n从节点调整\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-slave /bin/bash\n[root@ff01a57b5de5 /]# vi /etc/redis.conf\n...\n# JUST COMMENT THE FOLLOWING LINE.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#bind 127.0.0.1\nbind 0.0.0.0\n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    \"bind\" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the \"bind\" directive.\n#protected-mode yes\nprotected-mode no\n\n...\n\n# replicaof <masterip> <masterport>\nreplicaof 172.10.0.2 6379\n# If the master is password protected (using the \"requirepass\" configuration\n# directive below) it is possible to tell the replica to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the replica request.\n#\n# masterauth <master-password>\n\n...\n\n```\n\n### 数据测试\n```\n[root@VM_0_6_centos redis]# docker exec -it redis-master /bin/bash\n[root@3391a5251e63 /]# vi /etc/redis.conf\n[root@3391a5251e63 /]# redis-server /etc/redis.conf &\n[1] 28\n[root@3391a5251e63 /]# redis-cli\n127.0.0.1:6379> set name uiste\nOK\n127.0.0.1:6379> get name\n\"uiste\"\n127.0.0.1:6379>\n\n\n[root@VM_0_6_centos ~]# docker exec -it redis-slave /bin/bash\n[root@ff01a57b5de5 /]# redis-server /etc/redis.conf &\n[1] 73\n[root@ff01a57b5de5 /]# redis-cli\n127.0.0.1:6379> get name\n\"uiste\"\n127.0.0.1:6379>\n```\n\n> 多个从节点的时候，避免主节点同步压力的增加，可以将其它从节点依赖于从节点同步\n\n\n","slug":"1","published":1,"updated":"2019-11-22T07:45:32.958Z","comments":1,"photos":[],"link":"","_id":"ck39ugjm4007ppgwi2a0rsv55"},{"layout":"post","title":"得与失","date":"2015-08-05T15:04:13.000Z","_content":"\n#### 说服自己\n\n最近一直在思考，放弃是会得到更多，还是失去的更少\n\n其实，内心坚定的我已经将第一句扭曲了\n\n不论结果如何，自己认定的，自己去承担\n\n认定不是盲目的跟随，是分析过现有状态的优势\n\n亦分析过新决策的弊端，究竟优有多优，弊有多弊\n\n心里清晰，，，\n\n不装B了，记录这段话只是为了说服自己，\n\n很感谢，今日领导的挽留，即成为我将来没事儿吹牛炫耀的话题了\n\n#### 喝碗鸡汤\n\n---\n\n人生一世，草木一秋， 努力去做一个不计较得失的人吧！淡然于心，从容于表，优雅自在地生活。 咀嚼平淡如水的日子，领略四季起伏的风景，走着属于自己的人生之路 。学会在得失中找回自我，舍得下，放得开，便自然是春风得意，月明清高。\n\n<!-- more -->\n\n---\n\n#### 简单总结一下策划工作体会\n\n`个人感悟，职场鸡汤，没有逻辑亦没有案例，信则有，不信则无`\n\n##### 最牛策划人小组竞选通过\n\n本来不爱吹牛的我，开头这里还是要提一下；天性对于做事的方法就有思想，加之执行力强（效率有待提升），在做了充足的准备；充分洞悉老板的内心，因而通过了老板的法眼，成功从竞选小组脱颖而出。\n> 自以为老板的内心如下：\n第一：喜欢以团队为核心的员工，所以你不要试图在老板面前争风头，即使内容全是你做的，亦要将成果分享队友，因为真正谁承担了多少，老板心里清楚\n第二：有想法就去行动，因为空想者太多了，竞技项目领导打分的唯一标准是可实现度，及项目所做的深度\n第三：最好做事能有逻辑，能有几个点是独特的，能打动到老板的内心，这就要洞悉他真正的需求，及你与他人的差异化的点\n第四：做好充分的准备，再不擅长演讲的人，就像我，有自己的想法后，将讲稿改几十遍背几百遍，能将思想讲述清楚，剩下的就是听天由命了\n第五：补充一点，如果可以事先准备几个问题的答案，或者能故意预留几个点准备好答案，等待提问。那样可能效果更佳，因为既然你这样做了，起码自己认定是正确，这里不是玩心计，是通过方法去说服别人，认定你的想法\n\n\n##### 策划工作-概念、设计、优化、量产\n\n`没有收集资料，想到什么就先记录什么了，以后有补充，另行记录`\n\n**定位**\n\n为什么要做这个产品，是为了通过产品本身盈利，还是通过产品周边盈利，亦或者做高端占位，提升品牌形象？\n\n纯创新性的产品也没有做过，常规性的产品一般都是看行业动态，在结合品牌与产品匹配，分析竞争对手：价格段分析，品牌分析，品项属性配置分析，这些分析都是后续进一步工作的基数，不得结果；\n\n目标受众人群：按场景使用需求划分，比按财富值划分重合度更低，可有效避免重复数据对定位人群的结果影响\n\n**概念**\n\n初次概念：概念只做0-1，不做1-N，因为1-N基本不用看这里的内容，那是有了0-1的过程后的扩展\n\n趋势分析：好产品为什么好，价格原因、品牌原因、功能配置？不好的产品又为什么不好，一定要清楚不好的产品，只看好产品，会导致，决策的武断做了类似于本来就不好的产品，那样结果可想而知\n趋势分析，应该是用户想要的，而不是需要的，其实这个道理也很简单，需要的可以买亦可以不买，不买通过其他方案解决需求；而想要的，是用感性战胜了理智，所以可能你在某个点打动了他，他会不经过大脑而买了这个产品，似乎有点阴险，但客户买了，就是因为其喜欢，他甚至不会去使用，将其作为收藏品，但就是想要，所以两全其美\n\n使用地图：原则，不要考虑技术实现，不要考虑制造成本，一定要发散思维，且需要有想法的小团体去完成这个事；从使用场景的第一步入手，你发现了生活中的一个痛点，你想到通过一个东西去解决这个问题，可能想到自己创造什么样的解决方案，当然这个基本不用考虑，因为你做个思考是要通过一个产品，一个东西去解决这个痛点；所以你需要买一个东西，你会想到从什么样的渠道购买，这个可能就是未来的重点销售渠道；你会想到我买到这个产品，产品到我手里是什么样子的，这里可能涉及配送，搬用的方式；你会想到我开封后希望有个什么样的面貌，这里涉及到产品的包装形态；你会想到第一次安装使用，你会想到产品使用的一切的一切，尽量全面，记录这些想法，这才能深入挖掘到产品使用场景的痛点，产品的体验，甚至于产品的售后，当然这里是产品的概念定义，重点是产品的概念，千万不要由于全面，反而没有重点，跑偏了。\n\n技术突破：依托技术储备，积木式的拼接，可能这将带来颠覆性的体验，在这里不是重点，梦想太大了，需要承载的更多，看这里可能会跑偏，回归正题，技术突破，是用来补充产品概念的\n\n补充一个九宫格： 横轴：过去、现在、将来， 纵轴：父类、本体、子类；这里面有点深奥，有机会再详细研究下\n\n**研究计划**\n\n分析：成本，性价比 QFD工具 \n观察：痛点，概念\n\n访谈：一般都是田野工作不建议，访谈四段式：情景，过去，现在，将来；这里面的一个核心思想就是验证问题的错误，只有验证不了问题的错误，才能说明问题的正确，如果本来你是认为，你的问题正确存在，带有这样的倾向性，基本不会发现准确真实的用户需求。借按钮增加与否的调研，现在回想起来，就不应该给用户看产品，再去介绍产品的定义，可以和他们聊未来，似乎可以这样做；\n录音，转意；拍视频、照片；样本展示；\n\n目标用户：\n发烧友：提出问题甚至有解决方案，亦能提供发展趋势的建议\n重度用户：提痛点需求\n极端用户：特殊产品的需求\n早期用户：\n\n以上，鉴定概念真伪，筛选概念；以敏锐的眼光与定位，抓取核心概念\n\n确定最佳概念\n扩大访谈，（定量阶段）\n调研核心思想：`定性调研找问题，定量调研找共性`。不管是哪个过程，千万别引到用户去选你想要的答案，尽可能开放性，另外一定要做好充足的准备，调研的核心问题，问题的具体描述，调研过程的录音、拍照取证。转意最好能在调研结束的当日内完成。\n\n（行业趋势、市场容量、品牌占比、TOP品项）\n\n累了，困了，没思绪了先睡了\ndate: 2015-08-06 01:05:20\n\n---\n\n##### 策划工作-项目管理\n**全面思考的思想**\n本人最不喜欢，也最不擅长的，同时也是未来可提升的最大一块；即使他是一个很努力的工程师，也不可能和你的思想一致，所以沟通协调中，难免出现分歧，矛盾可能不知不觉中产生了。这是沟通的艺术，需要加紧强化了；粗浅的认为，讲话的时候尽量不要有盛气凌人的态度，好好说话（可以听听马东的好好说话了）。不扯了，进入正题\n\n先从产品变更开始吧，收到产品变更需求，站在产品策划的角度，可不是单纯的将任务需求下发出去。还是之前那句话，多部门协调工作，必然出现扯后腿的人。所以你要尽可能的将问题考虑全面。不管有没有启动会，你都要考虑以下问题：\n>项目里程碑：要考虑设计师、研发工程师的项目时间安排，确认项目里程碑的合理性\n切换时间周期：要考虑变更过程涉及到老物料的库存及供应商库存的切换，去除公有物料的专用物料可能是老产品自然切换的最多生产量（当然成本太少的可综合评估报废处理），依据常规消耗量，规定切换的时间周期，再定期去检讨；\n关键人员安排：变更过程一定要和采购、生管、订单、市场、沟通好；市场认定你的变更是第一步，当然一般情况下，这些需要本身就是来源于市场，然后市场要根据新规格的变更产品做出来至少一个季度的需求量，到订单中心；这样由订单中心到生管的客户需求量就是正确的，生管排计划时，会根据切换的产品将新产品排进去，物控到采购的物料也是最新的。\n规范产前流程：产品规格调整会涉及品质入库检核，所以变更项目需有试产安排，当然这个本来应该是必须的，但本企业还没有固化下来，所以只能去推动了，试产做相关的品质验证，通过后要交由领导对产品进行封样确认，避免入库前的忙乱\n\n没什么技术含量，就是多动脑，勤思考，所以不浪费时间记这些东东了\ndate: 2015-08-06 10:15:53\n\n\n##### 策划工作-产品管理\n改善产品，功能迭代\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201508/20150805-1.md","raw":"layout: post\ntitle: 得与失\ndate: 2015-08-05 23:04:13\ntags:\n- 产品经理\n---\n\n#### 说服自己\n\n最近一直在思考，放弃是会得到更多，还是失去的更少\n\n其实，内心坚定的我已经将第一句扭曲了\n\n不论结果如何，自己认定的，自己去承担\n\n认定不是盲目的跟随，是分析过现有状态的优势\n\n亦分析过新决策的弊端，究竟优有多优，弊有多弊\n\n心里清晰，，，\n\n不装B了，记录这段话只是为了说服自己，\n\n很感谢，今日领导的挽留，即成为我将来没事儿吹牛炫耀的话题了\n\n#### 喝碗鸡汤\n\n---\n\n人生一世，草木一秋， 努力去做一个不计较得失的人吧！淡然于心，从容于表，优雅自在地生活。 咀嚼平淡如水的日子，领略四季起伏的风景，走着属于自己的人生之路 。学会在得失中找回自我，舍得下，放得开，便自然是春风得意，月明清高。\n\n<!-- more -->\n\n---\n\n#### 简单总结一下策划工作体会\n\n`个人感悟，职场鸡汤，没有逻辑亦没有案例，信则有，不信则无`\n\n##### 最牛策划人小组竞选通过\n\n本来不爱吹牛的我，开头这里还是要提一下；天性对于做事的方法就有思想，加之执行力强（效率有待提升），在做了充足的准备；充分洞悉老板的内心，因而通过了老板的法眼，成功从竞选小组脱颖而出。\n> 自以为老板的内心如下：\n第一：喜欢以团队为核心的员工，所以你不要试图在老板面前争风头，即使内容全是你做的，亦要将成果分享队友，因为真正谁承担了多少，老板心里清楚\n第二：有想法就去行动，因为空想者太多了，竞技项目领导打分的唯一标准是可实现度，及项目所做的深度\n第三：最好做事能有逻辑，能有几个点是独特的，能打动到老板的内心，这就要洞悉他真正的需求，及你与他人的差异化的点\n第四：做好充分的准备，再不擅长演讲的人，就像我，有自己的想法后，将讲稿改几十遍背几百遍，能将思想讲述清楚，剩下的就是听天由命了\n第五：补充一点，如果可以事先准备几个问题的答案，或者能故意预留几个点准备好答案，等待提问。那样可能效果更佳，因为既然你这样做了，起码自己认定是正确，这里不是玩心计，是通过方法去说服别人，认定你的想法\n\n\n##### 策划工作-概念、设计、优化、量产\n\n`没有收集资料，想到什么就先记录什么了，以后有补充，另行记录`\n\n**定位**\n\n为什么要做这个产品，是为了通过产品本身盈利，还是通过产品周边盈利，亦或者做高端占位，提升品牌形象？\n\n纯创新性的产品也没有做过，常规性的产品一般都是看行业动态，在结合品牌与产品匹配，分析竞争对手：价格段分析，品牌分析，品项属性配置分析，这些分析都是后续进一步工作的基数，不得结果；\n\n目标受众人群：按场景使用需求划分，比按财富值划分重合度更低，可有效避免重复数据对定位人群的结果影响\n\n**概念**\n\n初次概念：概念只做0-1，不做1-N，因为1-N基本不用看这里的内容，那是有了0-1的过程后的扩展\n\n趋势分析：好产品为什么好，价格原因、品牌原因、功能配置？不好的产品又为什么不好，一定要清楚不好的产品，只看好产品，会导致，决策的武断做了类似于本来就不好的产品，那样结果可想而知\n趋势分析，应该是用户想要的，而不是需要的，其实这个道理也很简单，需要的可以买亦可以不买，不买通过其他方案解决需求；而想要的，是用感性战胜了理智，所以可能你在某个点打动了他，他会不经过大脑而买了这个产品，似乎有点阴险，但客户买了，就是因为其喜欢，他甚至不会去使用，将其作为收藏品，但就是想要，所以两全其美\n\n使用地图：原则，不要考虑技术实现，不要考虑制造成本，一定要发散思维，且需要有想法的小团体去完成这个事；从使用场景的第一步入手，你发现了生活中的一个痛点，你想到通过一个东西去解决这个问题，可能想到自己创造什么样的解决方案，当然这个基本不用考虑，因为你做个思考是要通过一个产品，一个东西去解决这个痛点；所以你需要买一个东西，你会想到从什么样的渠道购买，这个可能就是未来的重点销售渠道；你会想到我买到这个产品，产品到我手里是什么样子的，这里可能涉及配送，搬用的方式；你会想到我开封后希望有个什么样的面貌，这里涉及到产品的包装形态；你会想到第一次安装使用，你会想到产品使用的一切的一切，尽量全面，记录这些想法，这才能深入挖掘到产品使用场景的痛点，产品的体验，甚至于产品的售后，当然这里是产品的概念定义，重点是产品的概念，千万不要由于全面，反而没有重点，跑偏了。\n\n技术突破：依托技术储备，积木式的拼接，可能这将带来颠覆性的体验，在这里不是重点，梦想太大了，需要承载的更多，看这里可能会跑偏，回归正题，技术突破，是用来补充产品概念的\n\n补充一个九宫格： 横轴：过去、现在、将来， 纵轴：父类、本体、子类；这里面有点深奥，有机会再详细研究下\n\n**研究计划**\n\n分析：成本，性价比 QFD工具 \n观察：痛点，概念\n\n访谈：一般都是田野工作不建议，访谈四段式：情景，过去，现在，将来；这里面的一个核心思想就是验证问题的错误，只有验证不了问题的错误，才能说明问题的正确，如果本来你是认为，你的问题正确存在，带有这样的倾向性，基本不会发现准确真实的用户需求。借按钮增加与否的调研，现在回想起来，就不应该给用户看产品，再去介绍产品的定义，可以和他们聊未来，似乎可以这样做；\n录音，转意；拍视频、照片；样本展示；\n\n目标用户：\n发烧友：提出问题甚至有解决方案，亦能提供发展趋势的建议\n重度用户：提痛点需求\n极端用户：特殊产品的需求\n早期用户：\n\n以上，鉴定概念真伪，筛选概念；以敏锐的眼光与定位，抓取核心概念\n\n确定最佳概念\n扩大访谈，（定量阶段）\n调研核心思想：`定性调研找问题，定量调研找共性`。不管是哪个过程，千万别引到用户去选你想要的答案，尽可能开放性，另外一定要做好充足的准备，调研的核心问题，问题的具体描述，调研过程的录音、拍照取证。转意最好能在调研结束的当日内完成。\n\n（行业趋势、市场容量、品牌占比、TOP品项）\n\n累了，困了，没思绪了先睡了\ndate: 2015-08-06 01:05:20\n\n---\n\n##### 策划工作-项目管理\n**全面思考的思想**\n本人最不喜欢，也最不擅长的，同时也是未来可提升的最大一块；即使他是一个很努力的工程师，也不可能和你的思想一致，所以沟通协调中，难免出现分歧，矛盾可能不知不觉中产生了。这是沟通的艺术，需要加紧强化了；粗浅的认为，讲话的时候尽量不要有盛气凌人的态度，好好说话（可以听听马东的好好说话了）。不扯了，进入正题\n\n先从产品变更开始吧，收到产品变更需求，站在产品策划的角度，可不是单纯的将任务需求下发出去。还是之前那句话，多部门协调工作，必然出现扯后腿的人。所以你要尽可能的将问题考虑全面。不管有没有启动会，你都要考虑以下问题：\n>项目里程碑：要考虑设计师、研发工程师的项目时间安排，确认项目里程碑的合理性\n切换时间周期：要考虑变更过程涉及到老物料的库存及供应商库存的切换，去除公有物料的专用物料可能是老产品自然切换的最多生产量（当然成本太少的可综合评估报废处理），依据常规消耗量，规定切换的时间周期，再定期去检讨；\n关键人员安排：变更过程一定要和采购、生管、订单、市场、沟通好；市场认定你的变更是第一步，当然一般情况下，这些需要本身就是来源于市场，然后市场要根据新规格的变更产品做出来至少一个季度的需求量，到订单中心；这样由订单中心到生管的客户需求量就是正确的，生管排计划时，会根据切换的产品将新产品排进去，物控到采购的物料也是最新的。\n规范产前流程：产品规格调整会涉及品质入库检核，所以变更项目需有试产安排，当然这个本来应该是必须的，但本企业还没有固化下来，所以只能去推动了，试产做相关的品质验证，通过后要交由领导对产品进行封样确认，避免入库前的忙乱\n\n没什么技术含量，就是多动脑，勤思考，所以不浪费时间记这些东东了\ndate: 2015-08-06 10:15:53\n\n\n##### 策划工作-产品管理\n改善产品，功能迭代\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjoy0095pgwirstl19th"},{"layout":"post","title":"php函数基础","date":"2015-08-24T09:18:51.000Z","_content":"### return\n1. 中断文件的功能：终止的仅仅是当前return所在的文件，而不是终止整个程序。\n2. 返回值\n3. return返回结果，可以是一个变量，所以，同样支持值传递和引用传递两种方法，如果使用引用传递，则在函数名的前面加上一个&\n\n### exit()/die()\nexit()和die()的功能一模一样，他们就是一个功能的两种叫法。作用是终止程序。\n\n### sleep()\nsleep后面有一个参数，代表程序延迟多少秒后继续执行。\n\n### 函数调用时间\n代码是先进行解析再执行里面的语句，解析阶段已经预先给function开辟了空间，所以执行阶段调用函数时，可以将调用函数放在函数声明之前。\n\n### 可变函数\n可以用一个变量来存放函数名，需要调用函数的时候，直接调用这个变量\n>作用:将一堆复杂的函数放在一个可变的数组集合中。\n\n```\nimagecreatefromjpg();\nimagecreatefromjpeg();\nimagecreatefrombmp();\nimagecreatefromgif();\n$file = 'chihuo.jpg';\n$type = 'jpg';\n$arr = array(\n\t'jpg' => 'imagecreatefromjpg',\n\t'jpeg'=> 'imagecreatefromjpeg',\n\t'bmp' => 'imagecreatefrombmp',\n\t'gif' => 'imagecreatefromgif'\n)\n$arr[$type]();\n\n```\n\n### 匿名函数\n没有函数名的函数，称之为匿名函数，匿名函数一般是将他赋值给一个变量，需要加载的时候，直接加载这个变量\n>作用：调用完成后使用unset快速销毁\n\n```\n$fn = function($name){\n\techo $name;\n}\nvar_dump($fn);\n``\n>在匿名函数中，要先声明函数，在定义函数\n\n### create_function()\t创建一个函数\n>作用：网站多国语言创建有需求的语言函数，节约空间\n\n语法\n：`create_function(‘参数列表’,’函数体’)；`\n>create_function括号内的参数和函数体，必须要被单引号包裹起来，不能使用双引号\n如果要传递多个参数，在参数列表的单引号内，用,进行分割\n在一些大型的项目中，使用create_function模式去创建函数，可以极大的节省项目所占用的内存空间\n\n**`create_function`创建函数以后，默认的函数名是（隐藏字节+lambda_1），每当调用一次函数，后面的数字加1，重启apache以后，数字清零**\n\n### function_exists()  判断一个函数是否已经被定义\n>一般项目中代码量很大，去寻找一个函数会比较复杂，所以会用function_exists（‘函数名’）去判断一个一个函数是否已经被定义\n\n### 参数\n形参： 声名函数时所使用的参数\n实参： 调用函数时所使用的参数\n\n**直接传递参数的模式，就是一个值传递的过程，改变一个变量的值，不影响另一个变量**\n\n>如果一个参数，有默认值的话，如果实参没有传递，形参以默认值的数据存在，而如果实参传递了一个数据。则形参以实参传递的数据为主\n\n**参数的默认值不能是一个变量，因为function关键词在代码的解析阶段就会去运行，但是这个时候并没有变量的赋值，变量的赋值操作是在代码的运行阶段才会被复制。**\n\n**参数的默认值，可以是一个常量，如果在调用函数之前定义了这个常量，则默认值会以常量的值进行计算。如果在调用函数之前还没有定义这个常量，则函数会将常量名当成一个普通的字符串去解析。**\n\n我们会把带默认值的形参统一放在参数列表的最右边，这样，在实参传递的时候，就不会出现问题\n\n**参数个数带来的问题**\n>实参的个数少于形参的个数---报错--代码还会继续运行下去\n形参的个数少于实参的个数--不报错，代码正常运行--超出部分不被接收\n\n###\t极限情况\n\n在一个函数不知道会传递多少个实参的时候，一般形参一个不写。代码不会报错。\n\n**func_get_args()**\n会将传递的实参以一个数组的形式去进行保存。\n**func_get_arg(num)**\n获取传递的第num+1个实参的值。\n**func_num_args()**\n获取传递实参的个数。\n\n```\n// 计算不确定个数数字的和。\n//方法一\n\tfunction hs(){\n\t\t$num=func_num_args();\n\t\t$sum=0;\n\t\tfor($i=0;$i<$num;$i++){\n\t\t\t$sum+=func_get_arg($i);\n\t\t}\n\t\techo $sum;\n\t}\n\ths(1,3,5,6,7,8,9);\n\n//方法二\n\tfunction hs2(){\n\t\t$arr=func_get_args();\n\t\t$sum=0;\n\t\tfor($i=0,$n=count($arr);$i<$n;$i++){\n\t\t\t$sum+=$arr[$i];\n\t\t}\n\t\techo $sum;\n\t}\n\ths2(1,3,5,6,7,8,9);\n\n```\n>我们可以用func_get_args去同时替代func_get_arg,func_num_args两个函数\n\n>如果我需要返回的值是一个非常非常大的数组或者其他数据类型，如果使用值传递，则需要花费时间去重新复制一个值，而如果使用引用传递，直接复制地址就可以了，可以节省很多的时间\n\n### 变量的作用域\n#### 全局变量\n在函数外部定义的变量称之为全局变量\n\n#### 局部变量\n在函数体内部定义的变量称之为局部变量\n\n>在JS中全局变量可以在局部使用，局部变量不能在全局中使用。\n在PHP中，全局变量不能再局部使用，局部变量也不能在全局中使用。\nPHP中全局变量只能在函数的外面使用，局部变量只能在函数的内部使用\n\n**如果一个变量的作用域同时包含函数内和函数外，那么他就是一个超全局的变量**\n九大超全局变量的作用域都是函数内+函数外\n\n##### $GLOBALS\n\n用$GLOBALS去定义一个变量，$变量名和$GLOBAL[‘变量名’]存在一定的关系。\n>$变量名和$GLOBALS变量名两者是一个一体的关系，修改一个另一个也会发生变化，删除一个另一个就不存在了\n\n**关键词global**\n语法 global 变量名 \n作用，将一个全局变量引用传值到局部变量中，两者是两个独立的变量\n```\nfunction hs(){\n\tglobal $age;\n\t$age++;\n\tunset($age);\n}\n$age = 27;\nhs();\necho $age;\n\n结果：28;\n```\n>虽然global被php大力推广，但是效果很差，程序员还是习惯使用$GLOBALS用法\n\n### 变量的生命周期\n\n全局变量的生命周期，是从**被定义的时候开始，到文件运行完毕**以后，当前文件的全局变量生命周期就会结束。\n\n局部变量的生命周期，是从**函数内部被定义开始，到函数执行完毕**以后，当前函数内的所有变量，生命周期就会结束\n\n**static 静态变量**\nstatic  用来定义一个静态变量\n>静态变量只会被初始化一次，之后不会被重新初始化\n静态变量的生命周期等同与全局变量的生命周期，但是他的作用域等同于局部变量的作用\n以上所说都是正常情况下变量的生命周期，但是，我们同样可以用unset()来提前结束一个变量的生命周期。\n\n### 匿名函数\n可以通过对变量的类型进行判断，如果是一个字符串，说明是一个可变函数，如果是一个对象，说明是一个匿名函数\n\n匿名函数的优点\n>匿名函数可以随时随地被调用，也可以随时随地被销毁。特别适合一些临时性的函数\n\n**use**\n虽然，匿名函数是一个赋值语句，但是里面的变量都是一些局部变量。  我们可以利用use将一个和函数处于同一作用域的变量引用进来\n\n```\n$c = 30;\n$fn = function() use($c){\n\t$a = 10;\n\t$b = 20;\n\techo $a+$b+$c;\n}\n\n$fn();\n\n结果：60;\n```\n\n```\n$name = 'rose';\nfunction abc(){\n\t$name = 'jack';\n\t$fn = function() use($name){\n\techo $name;\n\t}\n$fn();\n}\nabc();\n\n结果是：jack;\n```\n>作用域并不是一成不变的，一个全局变量，也可能会变成一个局部变量。\nuse调用函数同样支持值传递和引用传递，如果使用引用传值，在use右边的变量前加上一个&\n\n### 递归函数\n\n递归是属于分治（分，治，合）的算法。迭代也属于分治的算法。\n递归函数，就是在一个函数里面继续调用一个函数。\n\n递归函数必须由两个部分组成：\n递归点：一个函数继续调用他本身。  如果没有递归点，他就不算一个递归函数。\n递归出口：如果一个函数不断地调用他本身，没有出口的话，这个函数会一直运行到空间耗尽或者是时间耗尽的情况才会结束。所以一个函数必须要有递归出口\n\n计算个菲波拉契数列，输出第n项的数字\n\n```php\n//计算菲波拉契数列\n\t//用递归实现菲波拉契数列\n\tfunction fn($n){\n\t\t//第一项和第二项的结果是1\n\t\tif($n==1||$n==2){\n\t\t\treturn 1;\n\t\t}\n\t\t//从第三项开始，每一项等于前两项的和\n\t\treturn fn($n-1)+fn($n-2);  //递归点\n\t}\n\n\techo fn(11);\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201508/20150824-1.md","raw":"layout: post\ntitle: php函数基础\ndate: 2015-08-24 17:18:51\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n### return\n1. 中断文件的功能：终止的仅仅是当前return所在的文件，而不是终止整个程序。\n2. 返回值\n3. return返回结果，可以是一个变量，所以，同样支持值传递和引用传递两种方法，如果使用引用传递，则在函数名的前面加上一个&\n\n### exit()/die()\nexit()和die()的功能一模一样，他们就是一个功能的两种叫法。作用是终止程序。\n\n### sleep()\nsleep后面有一个参数，代表程序延迟多少秒后继续执行。\n\n### 函数调用时间\n代码是先进行解析再执行里面的语句，解析阶段已经预先给function开辟了空间，所以执行阶段调用函数时，可以将调用函数放在函数声明之前。\n\n### 可变函数\n可以用一个变量来存放函数名，需要调用函数的时候，直接调用这个变量\n>作用:将一堆复杂的函数放在一个可变的数组集合中。\n\n```\nimagecreatefromjpg();\nimagecreatefromjpeg();\nimagecreatefrombmp();\nimagecreatefromgif();\n$file = 'chihuo.jpg';\n$type = 'jpg';\n$arr = array(\n\t'jpg' => 'imagecreatefromjpg',\n\t'jpeg'=> 'imagecreatefromjpeg',\n\t'bmp' => 'imagecreatefrombmp',\n\t'gif' => 'imagecreatefromgif'\n)\n$arr[$type]();\n\n```\n\n### 匿名函数\n没有函数名的函数，称之为匿名函数，匿名函数一般是将他赋值给一个变量，需要加载的时候，直接加载这个变量\n>作用：调用完成后使用unset快速销毁\n\n```\n$fn = function($name){\n\techo $name;\n}\nvar_dump($fn);\n``\n>在匿名函数中，要先声明函数，在定义函数\n\n### create_function()\t创建一个函数\n>作用：网站多国语言创建有需求的语言函数，节约空间\n\n语法\n：`create_function(‘参数列表’,’函数体’)；`\n>create_function括号内的参数和函数体，必须要被单引号包裹起来，不能使用双引号\n如果要传递多个参数，在参数列表的单引号内，用,进行分割\n在一些大型的项目中，使用create_function模式去创建函数，可以极大的节省项目所占用的内存空间\n\n**`create_function`创建函数以后，默认的函数名是（隐藏字节+lambda_1），每当调用一次函数，后面的数字加1，重启apache以后，数字清零**\n\n### function_exists()  判断一个函数是否已经被定义\n>一般项目中代码量很大，去寻找一个函数会比较复杂，所以会用function_exists（‘函数名’）去判断一个一个函数是否已经被定义\n\n### 参数\n形参： 声名函数时所使用的参数\n实参： 调用函数时所使用的参数\n\n**直接传递参数的模式，就是一个值传递的过程，改变一个变量的值，不影响另一个变量**\n\n>如果一个参数，有默认值的话，如果实参没有传递，形参以默认值的数据存在，而如果实参传递了一个数据。则形参以实参传递的数据为主\n\n**参数的默认值不能是一个变量，因为function关键词在代码的解析阶段就会去运行，但是这个时候并没有变量的赋值，变量的赋值操作是在代码的运行阶段才会被复制。**\n\n**参数的默认值，可以是一个常量，如果在调用函数之前定义了这个常量，则默认值会以常量的值进行计算。如果在调用函数之前还没有定义这个常量，则函数会将常量名当成一个普通的字符串去解析。**\n\n我们会把带默认值的形参统一放在参数列表的最右边，这样，在实参传递的时候，就不会出现问题\n\n**参数个数带来的问题**\n>实参的个数少于形参的个数---报错--代码还会继续运行下去\n形参的个数少于实参的个数--不报错，代码正常运行--超出部分不被接收\n\n###\t极限情况\n\n在一个函数不知道会传递多少个实参的时候，一般形参一个不写。代码不会报错。\n\n**func_get_args()**\n会将传递的实参以一个数组的形式去进行保存。\n**func_get_arg(num)**\n获取传递的第num+1个实参的值。\n**func_num_args()**\n获取传递实参的个数。\n\n```\n// 计算不确定个数数字的和。\n//方法一\n\tfunction hs(){\n\t\t$num=func_num_args();\n\t\t$sum=0;\n\t\tfor($i=0;$i<$num;$i++){\n\t\t\t$sum+=func_get_arg($i);\n\t\t}\n\t\techo $sum;\n\t}\n\ths(1,3,5,6,7,8,9);\n\n//方法二\n\tfunction hs2(){\n\t\t$arr=func_get_args();\n\t\t$sum=0;\n\t\tfor($i=0,$n=count($arr);$i<$n;$i++){\n\t\t\t$sum+=$arr[$i];\n\t\t}\n\t\techo $sum;\n\t}\n\ths2(1,3,5,6,7,8,9);\n\n```\n>我们可以用func_get_args去同时替代func_get_arg,func_num_args两个函数\n\n>如果我需要返回的值是一个非常非常大的数组或者其他数据类型，如果使用值传递，则需要花费时间去重新复制一个值，而如果使用引用传递，直接复制地址就可以了，可以节省很多的时间\n\n### 变量的作用域\n#### 全局变量\n在函数外部定义的变量称之为全局变量\n\n#### 局部变量\n在函数体内部定义的变量称之为局部变量\n\n>在JS中全局变量可以在局部使用，局部变量不能在全局中使用。\n在PHP中，全局变量不能再局部使用，局部变量也不能在全局中使用。\nPHP中全局变量只能在函数的外面使用，局部变量只能在函数的内部使用\n\n**如果一个变量的作用域同时包含函数内和函数外，那么他就是一个超全局的变量**\n九大超全局变量的作用域都是函数内+函数外\n\n##### $GLOBALS\n\n用$GLOBALS去定义一个变量，$变量名和$GLOBAL[‘变量名’]存在一定的关系。\n>$变量名和$GLOBALS变量名两者是一个一体的关系，修改一个另一个也会发生变化，删除一个另一个就不存在了\n\n**关键词global**\n语法 global 变量名 \n作用，将一个全局变量引用传值到局部变量中，两者是两个独立的变量\n```\nfunction hs(){\n\tglobal $age;\n\t$age++;\n\tunset($age);\n}\n$age = 27;\nhs();\necho $age;\n\n结果：28;\n```\n>虽然global被php大力推广，但是效果很差，程序员还是习惯使用$GLOBALS用法\n\n### 变量的生命周期\n\n全局变量的生命周期，是从**被定义的时候开始，到文件运行完毕**以后，当前文件的全局变量生命周期就会结束。\n\n局部变量的生命周期，是从**函数内部被定义开始，到函数执行完毕**以后，当前函数内的所有变量，生命周期就会结束\n\n**static 静态变量**\nstatic  用来定义一个静态变量\n>静态变量只会被初始化一次，之后不会被重新初始化\n静态变量的生命周期等同与全局变量的生命周期，但是他的作用域等同于局部变量的作用\n以上所说都是正常情况下变量的生命周期，但是，我们同样可以用unset()来提前结束一个变量的生命周期。\n\n### 匿名函数\n可以通过对变量的类型进行判断，如果是一个字符串，说明是一个可变函数，如果是一个对象，说明是一个匿名函数\n\n匿名函数的优点\n>匿名函数可以随时随地被调用，也可以随时随地被销毁。特别适合一些临时性的函数\n\n**use**\n虽然，匿名函数是一个赋值语句，但是里面的变量都是一些局部变量。  我们可以利用use将一个和函数处于同一作用域的变量引用进来\n\n```\n$c = 30;\n$fn = function() use($c){\n\t$a = 10;\n\t$b = 20;\n\techo $a+$b+$c;\n}\n\n$fn();\n\n结果：60;\n```\n\n```\n$name = 'rose';\nfunction abc(){\n\t$name = 'jack';\n\t$fn = function() use($name){\n\techo $name;\n\t}\n$fn();\n}\nabc();\n\n结果是：jack;\n```\n>作用域并不是一成不变的，一个全局变量，也可能会变成一个局部变量。\nuse调用函数同样支持值传递和引用传递，如果使用引用传值，在use右边的变量前加上一个&\n\n### 递归函数\n\n递归是属于分治（分，治，合）的算法。迭代也属于分治的算法。\n递归函数，就是在一个函数里面继续调用一个函数。\n\n递归函数必须由两个部分组成：\n递归点：一个函数继续调用他本身。  如果没有递归点，他就不算一个递归函数。\n递归出口：如果一个函数不断地调用他本身，没有出口的话，这个函数会一直运行到空间耗尽或者是时间耗尽的情况才会结束。所以一个函数必须要有递归出口\n\n计算个菲波拉契数列，输出第n项的数字\n\n```php\n//计算菲波拉契数列\n\t//用递归实现菲波拉契数列\n\tfunction fn($n){\n\t\t//第一项和第二项的结果是1\n\t\tif($n==1||$n==2){\n\t\t\treturn 1;\n\t\t}\n\t\t//从第三项开始，每一项等于前两项的和\n\t\treturn fn($n-1)+fn($n-2);  //递归点\n\t}\n\n\techo fn(11);\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjoz0096pgwirjsdplir"},{"layout":"post","title":"php数组相关","date":"2015-08-26T09:18:51.000Z","_content":">复习：\n匿名函数use用法：将外部和匿名函数处于同一级的变量引用到匿名函数的内部，引用的变量和外部的变量是一个值传递的关系。如果需要引用传址，则在usb变量前加&符号\n\n### 迭代\n>单单从思想的角度上看，递归和迭代没有谁优谁劣，都是一样的，就和大家偏文科偏理科一样，但是，从代码的角度上来看，无疑是迭代的思想更加具有效率，所以建议大家以后去多用迭代的思想去解决问题。\n\n### 数组\n不是所有关联数组都是字符串下标\n`$arr = array(1110=>'刘德华',1111=>'金城武');`\n不是所有数组都是整形下标\n`$arr = array('a'=>'雪碧','b'=>'可乐','c'=>'王老吉');`\n\n#### foreach 遍历数组\n语法：\n`foreach(需要遍历数组的名称 as 数组的键 => 数组的值){  }`\n\n语法：\n`foreach(需要遍历数组的名称 as  数组的值){  }`\n\n注意：\n>foreach遍历数组的时候，数组的指针会自动的下移。\nforeach遍历完数组以后，指针会指向一个非法的位置\nforeach在遍历数组之前，会现对数组做一个初始化的操作\n\nforeach遍历数组，实际是遍历数组的拷贝值,改变原数组的结果，不会影响到遍历数组的结果,foreach遍历数组，如果改变$value的值，原数组不会发生变化\n\n```\nforeach($arr as $key => $value){\n\t$value = '加多宝';\n\techo '数组的下标是：'.$key.'<br>';\n\techo '数组的值为：'.$value.'<br>';\n}\nvar_dump($arr);\n```\n\nforeach遍历数组同样支持引用传值，改变$value的值，原数组也会随之发生变化。\n\n```\nforeach($arr as &$value){\n\t$value = '加多宝';\n\techo '数组的值为：'.$value.'<br>';\n}\nvar_dump($arr);\n```\n\n>foreach遍历完数组以后，下标是一个不确定的情况，如果foreach遍历完以后需要使用数组，最好将他做一个初始化的操作。\n\n\n#### 指针 遍历数组\n>通过移动数组的指针，完成一个遍历数组的情况，指针指向的位置一般是分为一个合法位和非法位\n\nnext($arr) :   让指针下移一位-->指针下移\ncurrent($arr):  获取指针指向当前元素的值-->获取当前值\nkey($arr)  :   获取指针指向当前元素的下标-->获取当前元素下标\n\nfor(;current($arr);next($arr)){\n\techo \"数组元素的下标为：\".key($arr).'<br/>';\n\techo \"数组元素的值为：\".current($arr).'<br/>';\n}\n\nprev()\t\t:\t让数组的指针上移一位。\n>上移指针和下移指针是相对于现在的位置而言，所以一旦指针处于一个非法位置，没有参照物了，指针无论上移还是下移都是非法位\n\nreset()   :   初始化指针。\nend()    :   将数组指针指向数组的最后一个元素。\n>reset()和end()理解成相当于一个绝对路径的概念，我不需要管数组指针当前指向的位置，直接将数组指针指向第一个元素或者最后一个元素\n\neach()  :返回一个四个元素的数组，其中1和value代表当前数组指向的值，0和key指向当前数组的下标。并且他会让数组的指针下移一位\n\n##### while+each+list 遍历数组\neach可以获取元素的值，下标和下移指针，所以直接和while配合，就可以遍历数组\n**方法一**\n\n```\nwhile($element = each($arr)){\n\techo '下标：',$element[0];\n\techo '值：',$element[1];\n}\n```\n\n**方法二**\n\n```\nwhile(list($key,$value)=each($arr)){\n\techo '下标：',$key;\n\techo '值：',$value;\n}\n```\n\nlist（）    ：  list可以将数组里面的值赋值给一个变量\n>each获取的是一个数组类型的变量，所以可以利用list将数组的值获取出来\n\n>3种遍历数组的方式，for(),foreach(),while+each+list的方式，以后工作中90%的人基本上用的都是foreach,9%都会使用while+each+list的方法，for基本上没有人使用\n\n### 关于赋值的指针问题\n\n```\n$arr=array(‘a’,’b’,’c’,’d’);\n$arr2=$arr;\necho current($arr2);\n//结果是 a，地址传递\n```\n\n```\n$arr=array(‘a’,’b’,’c’,’d’);\nnext($arr);\n$arr2=$arr;\necho current($arr2);\n// 结果是b，复制数组的时候，指针跟着一起被复制\n```\n\n```\n$arr=array('a','b','c','d');\n$arr2=$arr;\nnext($arr);\necho current($arr2);\n// 结果是a ,复制数组以后，修改一个数组的指针，另一个数组不会一起发生变化。\n```\n\n```\n$arr=array('a','b','c','d');\nnext($arr);\nnext($arr);\nnext($arr);\nnext($arr);\n$arr2=$arr;\necho current($arr2);\n// 结果是a ,当一个数组处于一个非法位置的时候，复制给另一个数组，此时先查看哪个，哪个就会被初始化，另一个就不会初始化；\n```\n\n### COW 写时复制\n\n如果将一个变量赋值给另一个变量，不会立刻去开辟一个空间，只有当变量进行写操作的时候，才会给他开辟一个空间。\n\nmemory_get_usage()    获取文件占用空间的大小。\narray_fill（开始下标，添加元素的数量，默认值）\nshuffle() - 将数组打乱 \narray_fill() - 用给定的值填充数组\n\n在foreach里面对原数组进行写操作时，复制的数组才开辟了一块空间\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t}\n\tvar_dump(current($arr));\n//指针停留在非法位，没有进行写操作。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\t$arr[1]='加多宝';\n\t}\n\tvar_dump(current($arr));\n//结果为加多宝，foreach循环的是复制的原始数组，里面更改的也是原始数组。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==1){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//结果为王老吉，进行了写操作。\n```\n\n```\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==2){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//结果为可乐，复制数组的时候，指针处于一个非法位置，所以指针被初始化操作了。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==3){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//if语句一直没有被执行，所以一直没有进行写时复制。所以遍历完数组以后，指针指向非法位\n```\n\n**foreach变量数组总结**\n>先复制后移动，原始数组保持指针不变\n先移动后复制，复制的数组会将指针也复制了\n指针处于非法位置时，进行复制，先查看哪个数组，哪个就先被初始化\n\n### 关于数组的几个函数\n\n**range（初始值，结束值）**\n`$arr = range(1,10);`\n\n**array_merge(数组1,数组2)**\n`$arr = array_merge(range(0,9),range('a','z'));`\n\n>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。\narray_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。\narray_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。\n\n**array_rand(数组，个数);**\n随机获取一个数组的下标\n>array_rand获取的是元素的下标，如果只获取一个元素下标，则是以普通数据类型进行存储，如果获取多个下标，则以数组的模式进行存储。\n虽然array_rand是随机获取下标的，但是他获取多个下标的时候会从小到大排序\n\n**shuffle()**\n可以打乱一个数组的元素\n>返回值是bool(true),\n\n**随机验证码**\n\n```\n$arr = array_merge(range(0,9),range('a','z'),range('A','Z'));\n$arr2 = array_rand($arr,4);\nshuffle($arr2);\n$str = '';\nforeach ($arr2 as $value) {\n\t$str.=$arr[$value];\n}\nvar_dump($str);\n```\n补充：\n>memory_get_usage() 获取当前文件占用空间的大小；\narray_fill(0,10,'uiste'); 0开始下标，10是元素个数，uiste是每个元素的内容\n\n\n","source":"_posts/2015/201508/20150826-1.md","raw":"layout: post\ntitle: php数组相关\ndate: 2015-08-26 17:18:51\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n>复习：\n匿名函数use用法：将外部和匿名函数处于同一级的变量引用到匿名函数的内部，引用的变量和外部的变量是一个值传递的关系。如果需要引用传址，则在usb变量前加&符号\n\n### 迭代\n>单单从思想的角度上看，递归和迭代没有谁优谁劣，都是一样的，就和大家偏文科偏理科一样，但是，从代码的角度上来看，无疑是迭代的思想更加具有效率，所以建议大家以后去多用迭代的思想去解决问题。\n\n### 数组\n不是所有关联数组都是字符串下标\n`$arr = array(1110=>'刘德华',1111=>'金城武');`\n不是所有数组都是整形下标\n`$arr = array('a'=>'雪碧','b'=>'可乐','c'=>'王老吉');`\n\n#### foreach 遍历数组\n语法：\n`foreach(需要遍历数组的名称 as 数组的键 => 数组的值){  }`\n\n语法：\n`foreach(需要遍历数组的名称 as  数组的值){  }`\n\n注意：\n>foreach遍历数组的时候，数组的指针会自动的下移。\nforeach遍历完数组以后，指针会指向一个非法的位置\nforeach在遍历数组之前，会现对数组做一个初始化的操作\n\nforeach遍历数组，实际是遍历数组的拷贝值,改变原数组的结果，不会影响到遍历数组的结果,foreach遍历数组，如果改变$value的值，原数组不会发生变化\n\n```\nforeach($arr as $key => $value){\n\t$value = '加多宝';\n\techo '数组的下标是：'.$key.'<br>';\n\techo '数组的值为：'.$value.'<br>';\n}\nvar_dump($arr);\n```\n\nforeach遍历数组同样支持引用传值，改变$value的值，原数组也会随之发生变化。\n\n```\nforeach($arr as &$value){\n\t$value = '加多宝';\n\techo '数组的值为：'.$value.'<br>';\n}\nvar_dump($arr);\n```\n\n>foreach遍历完数组以后，下标是一个不确定的情况，如果foreach遍历完以后需要使用数组，最好将他做一个初始化的操作。\n\n\n#### 指针 遍历数组\n>通过移动数组的指针，完成一个遍历数组的情况，指针指向的位置一般是分为一个合法位和非法位\n\nnext($arr) :   让指针下移一位-->指针下移\ncurrent($arr):  获取指针指向当前元素的值-->获取当前值\nkey($arr)  :   获取指针指向当前元素的下标-->获取当前元素下标\n\nfor(;current($arr);next($arr)){\n\techo \"数组元素的下标为：\".key($arr).'<br/>';\n\techo \"数组元素的值为：\".current($arr).'<br/>';\n}\n\nprev()\t\t:\t让数组的指针上移一位。\n>上移指针和下移指针是相对于现在的位置而言，所以一旦指针处于一个非法位置，没有参照物了，指针无论上移还是下移都是非法位\n\nreset()   :   初始化指针。\nend()    :   将数组指针指向数组的最后一个元素。\n>reset()和end()理解成相当于一个绝对路径的概念，我不需要管数组指针当前指向的位置，直接将数组指针指向第一个元素或者最后一个元素\n\neach()  :返回一个四个元素的数组，其中1和value代表当前数组指向的值，0和key指向当前数组的下标。并且他会让数组的指针下移一位\n\n##### while+each+list 遍历数组\neach可以获取元素的值，下标和下移指针，所以直接和while配合，就可以遍历数组\n**方法一**\n\n```\nwhile($element = each($arr)){\n\techo '下标：',$element[0];\n\techo '值：',$element[1];\n}\n```\n\n**方法二**\n\n```\nwhile(list($key,$value)=each($arr)){\n\techo '下标：',$key;\n\techo '值：',$value;\n}\n```\n\nlist（）    ：  list可以将数组里面的值赋值给一个变量\n>each获取的是一个数组类型的变量，所以可以利用list将数组的值获取出来\n\n>3种遍历数组的方式，for(),foreach(),while+each+list的方式，以后工作中90%的人基本上用的都是foreach,9%都会使用while+each+list的方法，for基本上没有人使用\n\n### 关于赋值的指针问题\n\n```\n$arr=array(‘a’,’b’,’c’,’d’);\n$arr2=$arr;\necho current($arr2);\n//结果是 a，地址传递\n```\n\n```\n$arr=array(‘a’,’b’,’c’,’d’);\nnext($arr);\n$arr2=$arr;\necho current($arr2);\n// 结果是b，复制数组的时候，指针跟着一起被复制\n```\n\n```\n$arr=array('a','b','c','d');\n$arr2=$arr;\nnext($arr);\necho current($arr2);\n// 结果是a ,复制数组以后，修改一个数组的指针，另一个数组不会一起发生变化。\n```\n\n```\n$arr=array('a','b','c','d');\nnext($arr);\nnext($arr);\nnext($arr);\nnext($arr);\n$arr2=$arr;\necho current($arr2);\n// 结果是a ,当一个数组处于一个非法位置的时候，复制给另一个数组，此时先查看哪个，哪个就会被初始化，另一个就不会初始化；\n```\n\n### COW 写时复制\n\n如果将一个变量赋值给另一个变量，不会立刻去开辟一个空间，只有当变量进行写操作的时候，才会给他开辟一个空间。\n\nmemory_get_usage()    获取文件占用空间的大小。\narray_fill（开始下标，添加元素的数量，默认值）\nshuffle() - 将数组打乱 \narray_fill() - 用给定的值填充数组\n\n在foreach里面对原数组进行写操作时，复制的数组才开辟了一块空间\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t}\n\tvar_dump(current($arr));\n//指针停留在非法位，没有进行写操作。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\t$arr[1]='加多宝';\n\t}\n\tvar_dump(current($arr));\n//结果为加多宝，foreach循环的是复制的原始数组，里面更改的也是原始数组。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==1){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//结果为王老吉，进行了写操作。\n```\n\n```\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==2){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//结果为可乐，复制数组的时候，指针处于一个非法位置，所以指针被初始化操作了。\n```\n\n```\n\theader(\"content-type:text/html;charset=utf-8\");\n\t$arr=array('可乐','雪碧','王老吉');\n\tforeach($arr as $key => $value){\n\t\tif($key==3){\n\t\t\t$arr[1]='加多宝';\n\t\t}\n\t}\n\tvar_dump(current($arr));\n//if语句一直没有被执行，所以一直没有进行写时复制。所以遍历完数组以后，指针指向非法位\n```\n\n**foreach变量数组总结**\n>先复制后移动，原始数组保持指针不变\n先移动后复制，复制的数组会将指针也复制了\n指针处于非法位置时，进行复制，先查看哪个数组，哪个就先被初始化\n\n### 关于数组的几个函数\n\n**range（初始值，结束值）**\n`$arr = range(1,10);`\n\n**array_merge(数组1,数组2)**\n`$arr = array_merge(range(0,9),range('a','z'));`\n\n>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。\narray_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。\narray_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。\n\n**array_rand(数组，个数);**\n随机获取一个数组的下标\n>array_rand获取的是元素的下标，如果只获取一个元素下标，则是以普通数据类型进行存储，如果获取多个下标，则以数组的模式进行存储。\n虽然array_rand是随机获取下标的，但是他获取多个下标的时候会从小到大排序\n\n**shuffle()**\n可以打乱一个数组的元素\n>返回值是bool(true),\n\n**随机验证码**\n\n```\n$arr = array_merge(range(0,9),range('a','z'),range('A','Z'));\n$arr2 = array_rand($arr,4);\nshuffle($arr2);\n$str = '';\nforeach ($arr2 as $value) {\n\t$str.=$arr[$value];\n}\nvar_dump($str);\n```\n补充：\n>memory_get_usage() 获取当前文件占用空间的大小；\narray_fill(0,10,'uiste'); 0开始下标，10是元素个数，uiste是每个元素的内容\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp10098pgwik3t5jskf"},{"layout":"post","title":"php数组、字符串","date":"2015-08-27T09:18:51.000Z","_content":"**本章是需要熟记的函数，使用的时候有问题查手册**\n### 操作数组的函数\n\n#### is_array()\n判断一个变量是否是一个数组，返回是一个布尔型，如果是数组返回真，如果不是数组，返回假\n\n#### array_search()\n查找一个值是否正在一个数组中，返回的是以键名\n语法：`$arr = array_search('3',$arr);`\n>array_search()查找值区分大小写，不区分数据类型，如果出现同值问题，取前面第一个下标。\n第三个参数如果是true则区分数据类型`$arr = array_search('3',$arr,true);`\n\n### 操作键值的函数\n\n#### array_keys()\n获取数组中的所有下标，以一个索引数组的模式返回\n语法：`$arr2 = array_keys($arr);`\n>获取的数组，下标从0开始依次递增\n\n#### array_values()\n获取数组中的所有值，以一个索引数组的模式返回\n语法：`$arr3 = array_values($arr);`\n>如果值是一个数组，也同样将这个数组当成以值赋值给数组\n\n#### array_combine()\n将两个数组的值合并成一个数组，第一个数组是下标，第二个数组是值\n语法：`$arr4 = array_combine($arr1,$arr2);`\n>返回的数据类型是一个数组。两个数组参数的元素个数必须要一一对应\n\n#### in_array()\n查找数组中的某一个值是否存在\n语法：`var_dump(in_array('a',$arr));`\n>in_array查找是区分大小写的，并且默认不区分数据类型，如果想让他区分数据类型，将第三个参数修改为true即可；\n第一个参数是需要查找的值，第二个参数是查找的数组，返回的结果是一个布尔值\n而array_search返回的是一个键名\n\n#### array_key_exists()\n查找一个键是否在某个数组中\n语法：`var_dump(array_key_exists('1',$arr));`\n>第一个参数是需要查找的下标，第二个参数是需要寻找的数组，返回的结果是一个boolean型\n本身就不区分数据类型，没有第三个参数；\n\n#### isset()\n判断一个变量是否已经被定义，如果没有被定义或者值为null返回的结果是false\n语法：`var_dump(isset($arr['b']));`\n>isset()和array_key_exists的区别，如果下标对应的值为空。isset返回的结果是false，array_key_exists返回的结果是true\n\n### 合并和拆分字符、数组的函数\n\n#### implode()\n将一个数组里面的元素合并成一个字符串\n语法：`$str = implode('',$arr);`\n>两个参数，第一个是元素值和值之间连接的符号（第一个可以不写），第二个参数是你需要遍历的数组。join()就是implode别名函数\n\n#### explode()\n将一个字符串拆分成一个数组\n语法：`$arr = explode('a',$str);`\n>两个参数，第一个是拆分字符串的标志，第二个参数是需要拆分的字符串\n\n语法：`$arr = explode('a',$str,3);`\n>如果第三个元素是正整数，分割成三个部分，最后一个元素会将包含剩下的所有的包含\n如果第三个原始是负整数，则会将最后的3个元素抛弃，\n\n### 数组的交并差\n\n#### array_merge()\n合并两个数组：array_merge(数组1,数组2)\n语法：`$arr = array_merge(range(0,9),range('a','z'));`\n\n>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。\narray_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。\narray_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。\n\n#### array_diff()\n计算数组差值\n语法：`array array_diff ( array $array1 , array $array2 [, array $... ] )`\n>对比返回在 array1 中但是不在 array2 及任何其它参数数组中的值。\n返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变\n\n#### array_intersect()\n计算数组的交集\n语法：`array array_intersect ( array $array1 , array $array2 [, array $ ... ] )`\n>array_intersect() 返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。\n\n### 函数遍历数组\n回调函数是由计算机自己去调用php中的函数\n\n#### array_map()\n将回调函数作用到给定数组的单元上\n语法：`array array_map ( callable $callback , array $arr1 [, array $... ] )`\n语法： array_map(‘函数名’,数组名)。\n\n```\n//使用系统函数，调用数组\n$arr=array(10,-12,46,-9,-45);\n$arr2 = array_map('abs',$arr);\nvar_dump($arr2);\n```\n\n```\n//使用自身定义的函数，调用数组\n$arr=array(10,-12,46,-9,-45);\nfucntion fn($num){\n\t$num+=10;\n\treturn $num;\n}\n$arr2 = array_map('fn',$arr);\nvar_dump($arr2);\n```\n\n```\n//使用匿名函数，调用数组\n$arr=array(10,-12,46,-9,-45);\n$arr2 = array_map(function($name){return 'hello'.$name;},$arr);\nvar_dump($arr2);\n```\n\n>结果将所有数字转换为正数；\n\n>1. `array_map()`返回一个数组，该数组包含了 arr1 中的所有单元经过 callback 作用过之后的单元。callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致。\n2. array_map去回调我们自己定义好的函数\n3. 除了第一个参数直接写函数名的方法以外，我们也可以直接写一个匿名函数，达到回调函数的功能\n4. 如果第一个参数的值为null，则会把后面的数组的每一个值取出来进行拼接，合并成一个新的数组\n\n#### array_walk()\n功能类似于遍历数组，可以同时获取数组里面的值和下标\n\n```\n$arr = array('name'=>'张无忌','age'=>528,'sex'='男');\nfunction fn($value,$key){\n\techo $key.'-'.$value.'<br>';\n}\n$arr2 = array_walk($arr,'fn');\n```\n\n可以分别获取下标和值，进行计算。如果函数只写一个参数，则获取的是数组里面的值。\n\n```\n$arr2 = array_walk($arr,function($value,$key){\n\techo $key.'->'.$value,'<br>';\n})\n```\n>array_walk同样支持匿名函数的用法\n\n- 接触最多的回调函数还是`array_map()，array_walk()`用的次数相对于而言，比较少。\n\n- array_walk第一个参数写的数组名，第二个参数写的才是调用的数组\narray_walk返回的结果只会是一个布尔型的结果，如果array_walk执行成功返回的记过就是true，如果array_walk执行失败，返回的救过就是false，他不会生成一个新的数组；\n\n### 栈和队列\n栈的特点就是先进后出，后进先出。\n队列的特点就是先进先出，后进后出。\n\n#### array_push()\n第一个参数是需要放置的数组，后面的参数是需要放置的元素\n\n```\n$arr = array();\narray_push($arr,'a');\narray_push($arr,'b','c','d');\nprint_r($arr);\n```\n\n>一次性可以放置多个元素\n\n#### array_pop()\n\n```\n$arr = array();\narray_push($arr,'a');\narray_push($arr,'b','c','d');\narray_pop($arr);\narray_pop($arr);\nprint_r($arr);\n```\n\n>出栈一次只能出一个元素。d和c后进的元素，先被拿出来了\n\n返回结果：mexd,溢出的元素\n\n#### array_shift()\n出队列\n\n>思考：unset和arr_shift有什么区别？\n答案：使用array_shift去移除一个元素，那个其他的元素位置会往前移一位，保持数据完整性；但是unset删除一个元素，下标也会被删除\n\n#### array_unshift()\n就是在数组的第一个位置插入一个元素。\n\n>往数组里面第一个元素的位置放置一个元素。\n\n>栈和队列的优点：栈和队列都是有效保证数据的完整性；\n\n### 数组的排序\n\n#### sort()  \n按照数值值得大小进行排序。从小到大的顺序\n\n>将原有的下标丢弃，从0开始依次递增\n\n#### rsort() \n按照数组的数值进行排序，从大到小的顺序。\n\n>也是将原有的下标丢弃，从0开始依次递增\n\n#### asort() \n按照数组的数值进行排序，从小到大排序，但是会保留下标\n\n#### arsort()\n按照数组的数值进行排序，从大到小排序，但是会保留下标\n\n#### ksort()\n按照数组的下标顺序进行排序。从小到大进行排序\n\n#### krsort()\n按照数组的下标顺序进行排序，从大到小进行排序\n\n#### natsort()\n自然排序\n\n>将字符串整体进行排序，而sort会挨个字符进行比较，然后进行排序\n\n#### usort()\n自定义排序\n\n```\n$arr = array(\n\tarray('name'=>'jack','math'=>78,'age'=>56),\n\tarray('name'=>'rose','math'=>98,'age'=>14),\n\tarray('name'=>'jame','math'=>56,'age'=>67),\n\tarray('name'=>'uiste','math'=>45,'age'=>24)\n\t);\nusort($arr,function($num1,$num2){\n\tif ($num1['age']>$num2['age']) {\n\t\treturn 1;\n\t}elseif ($num1['age']<$num2['age']) {\n\t\treturn -1;\n\t}else{\n\t\treturn 0;\n\t}\n});\n\necho \"<pre>\";\nprint_r($arr);\necho \"</pre>\";\n```\n\n>在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于0的整数。\n\n如果return -1则值放在前面\n如果 return 1 则值放在后面\n如果 return 0 则值的位置不发生变化\n\n### 关于字符串的函数\n\n#### []\n字符串可以理解成字符的合计。\n\n>所以，[]就是获取字符串中的某一个字符\n\n#### strlen()\n获取字符串的长度\n\n>获取长度的单位是字节,中文下的感叹号也被分解为三个字节；空格也在空间\n\n#### trim()\n去除两边的空格\n\n#### rtrim()\n除去右边的空格\n\n#### ltrim()\n去除左边的空格\n\n#### strpos()\n获取字符串某个字符的位置\n语法：``strpos($str,'b');``\n>获取某个字符首次出现的位置。如果后面加上第三个参数，代表字符串从某个位置开始往后去寻找。如果没写第三个参数，则第三个参数默认为0\n\n语法：``strpos($str,'b',3);``\n>参数为3，则是从字符串第4个位置开始去寻找\n\n#### strrpos()\n获取某个字符出现的最后一个位置\n语法：``var_dump(strrpo($str,'b',2));``\n>从右往左查找，第三个参数代表最终查找到某个字符结束。找到返回下标，找不到返回false;\n\n#### str_repeat()\n将某个字符串重复多少次\n>第一个参数是需要重复的字符串，第二个参数重复的次数；\n\n#### chr()  \n将一个数字转换成ASCII码\n\n#### ord()\n将一个ASCII转换成对应的数字\n\n#### substr()\n截取某个字符串\n语法：``substr($str,3);``\n>从下标为3的字符开始，一直截取到结束\n\n语法：``substr($str,3,4);``\n>从下标为3的字符开始，截取4个字符\n\n语法：``substr($str,3,-3);``\n>从下标为3的字符开始截取，舍去最后三个字符\n\n语法：``substr($str,-4,2);``\n>从右往左数4个字符开始截取，截取2个\n\n语法：``substr($str,-5,-2);``\n>从右往左数第五个字符开始截取，截取到倒数第二位终止\n\n#### strchr() \n从某个字符开始截取\n语法：``strchr($str,'c');``\n>从左往右第一个c开始截取到最后（区分大小写）\n\n>strstr()的功能和strchr()的功能一模一样，只不过名称不同\n\n#### stristr()\n也是从某个字符开始截取，但是不区分大小写\n\n#### strrchr()\n从某个字符最后出现的位置开始往后截取\n\n>可以非常方便的获取文件的后缀名\n\n#### str_replace()\n语法：``str_replace(替换前的字符串，替换后的字符串，需要替换的字符串)``\n\n#### str_split()\n分割字符串，生成一个数组\n\n>第一个参数是一个字符串，第二个参数代表以几个字节进行拆分\nexplode是以字符进行拆分的\n\n#### str_pad()\n填充字符串\n\n>四个参数组成，第一个是填充的字符串，第二个是长度，第三个是填充物，第四个是左，右，两边填充\n\n#### strtolower() \n将一个字符串转换成全小写\n\n#### strtoupper()\n将一个字符串转换成全大写\n\n#### nl2br()\n将\\n转换成<br>\n\n#### htmlspecialchars():\n将标签当成普通文本输出\n\n#### urlencode()  \n可以将字符串进行加密\n\n#### urldecode()\n可以将加密好的字符串进行解码\n\n### 多字符处理函数\n\n多字符处理函数，不是php默认的开启模式，需要通过配置php.ini进行操作\n>extension=php_mbstring.dll\n\n#### mb_strlen()\n获取字符的长度\n\n>第一个参数是我们需要获取的字符串，第二个参数是选择的编码格式\n\n#### mb_internal_encoding()\n+ 获取当前的编码格式（不加参数）\n+ 修改当前的编码模式（增加参数）\n\n#### mb_strpos()\n查找当前某个字符的位置\n\n#### mb_substr()\n截取字符\n\n#### iconv()\n转换格式\n\n>里面三个参数，第一个是当前的编码，第二个是转换后的编码，第三个是需要转换的字符串\n\n","source":"_posts/2015/201508/20150827-1.md","raw":"layout: post\ntitle: php数组、字符串\ndate: 2015-08-27 17:18:51\ntags:\n- PHP核心编程\ncategories:\n- PHP\n---\n**本章是需要熟记的函数，使用的时候有问题查手册**\n### 操作数组的函数\n\n#### is_array()\n判断一个变量是否是一个数组，返回是一个布尔型，如果是数组返回真，如果不是数组，返回假\n\n#### array_search()\n查找一个值是否正在一个数组中，返回的是以键名\n语法：`$arr = array_search('3',$arr);`\n>array_search()查找值区分大小写，不区分数据类型，如果出现同值问题，取前面第一个下标。\n第三个参数如果是true则区分数据类型`$arr = array_search('3',$arr,true);`\n\n### 操作键值的函数\n\n#### array_keys()\n获取数组中的所有下标，以一个索引数组的模式返回\n语法：`$arr2 = array_keys($arr);`\n>获取的数组，下标从0开始依次递增\n\n#### array_values()\n获取数组中的所有值，以一个索引数组的模式返回\n语法：`$arr3 = array_values($arr);`\n>如果值是一个数组，也同样将这个数组当成以值赋值给数组\n\n#### array_combine()\n将两个数组的值合并成一个数组，第一个数组是下标，第二个数组是值\n语法：`$arr4 = array_combine($arr1,$arr2);`\n>返回的数据类型是一个数组。两个数组参数的元素个数必须要一一对应\n\n#### in_array()\n查找数组中的某一个值是否存在\n语法：`var_dump(in_array('a',$arr));`\n>in_array查找是区分大小写的，并且默认不区分数据类型，如果想让他区分数据类型，将第三个参数修改为true即可；\n第一个参数是需要查找的值，第二个参数是查找的数组，返回的结果是一个布尔值\n而array_search返回的是一个键名\n\n#### array_key_exists()\n查找一个键是否在某个数组中\n语法：`var_dump(array_key_exists('1',$arr));`\n>第一个参数是需要查找的下标，第二个参数是需要寻找的数组，返回的结果是一个boolean型\n本身就不区分数据类型，没有第三个参数；\n\n#### isset()\n判断一个变量是否已经被定义，如果没有被定义或者值为null返回的结果是false\n语法：`var_dump(isset($arr['b']));`\n>isset()和array_key_exists的区别，如果下标对应的值为空。isset返回的结果是false，array_key_exists返回的结果是true\n\n### 合并和拆分字符、数组的函数\n\n#### implode()\n将一个数组里面的元素合并成一个字符串\n语法：`$str = implode('',$arr);`\n>两个参数，第一个是元素值和值之间连接的符号（第一个可以不写），第二个参数是你需要遍历的数组。join()就是implode别名函数\n\n#### explode()\n将一个字符串拆分成一个数组\n语法：`$arr = explode('a',$str);`\n>两个参数，第一个是拆分字符串的标志，第二个参数是需要拆分的字符串\n\n语法：`$arr = explode('a',$str,3);`\n>如果第三个元素是正整数，分割成三个部分，最后一个元素会将包含剩下的所有的包含\n如果第三个原始是负整数，则会将最后的3个元素抛弃，\n\n### 数组的交并差\n\n#### array_merge()\n合并两个数组：array_merge(数组1,数组2)\n语法：`$arr = array_merge(range(0,9),range('a','z'));`\n\n>array_merge如果合并两个数字下标的数组，会将数字重新从0进行组合。\narray_merge如果合并两个字符串下标的数组，后面的值会将前面的值覆盖。\narray_merge合并两个数组，先从第一个数组开始合并，然后在合并第二个数组。\n\n#### array_diff()\n计算数组差值\n语法：`array array_diff ( array $array1 , array $array2 [, array $... ] )`\n>对比返回在 array1 中但是不在 array2 及任何其它参数数组中的值。\n返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变\n\n#### array_intersect()\n计算数组的交集\n语法：`array array_intersect ( array $array1 , array $array2 [, array $ ... ] )`\n>array_intersect() 返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值。注意键名保留不变。\n\n### 函数遍历数组\n回调函数是由计算机自己去调用php中的函数\n\n#### array_map()\n将回调函数作用到给定数组的单元上\n语法：`array array_map ( callable $callback , array $arr1 [, array $... ] )`\n语法： array_map(‘函数名’,数组名)。\n\n```\n//使用系统函数，调用数组\n$arr=array(10,-12,46,-9,-45);\n$arr2 = array_map('abs',$arr);\nvar_dump($arr2);\n```\n\n```\n//使用自身定义的函数，调用数组\n$arr=array(10,-12,46,-9,-45);\nfucntion fn($num){\n\t$num+=10;\n\treturn $num;\n}\n$arr2 = array_map('fn',$arr);\nvar_dump($arr2);\n```\n\n```\n//使用匿名函数，调用数组\n$arr=array(10,-12,46,-9,-45);\n$arr2 = array_map(function($name){return 'hello'.$name;},$arr);\nvar_dump($arr2);\n```\n\n>结果将所有数字转换为正数；\n\n>1. `array_map()`返回一个数组，该数组包含了 arr1 中的所有单元经过 callback 作用过之后的单元。callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致。\n2. array_map去回调我们自己定义好的函数\n3. 除了第一个参数直接写函数名的方法以外，我们也可以直接写一个匿名函数，达到回调函数的功能\n4. 如果第一个参数的值为null，则会把后面的数组的每一个值取出来进行拼接，合并成一个新的数组\n\n#### array_walk()\n功能类似于遍历数组，可以同时获取数组里面的值和下标\n\n```\n$arr = array('name'=>'张无忌','age'=>528,'sex'='男');\nfunction fn($value,$key){\n\techo $key.'-'.$value.'<br>';\n}\n$arr2 = array_walk($arr,'fn');\n```\n\n可以分别获取下标和值，进行计算。如果函数只写一个参数，则获取的是数组里面的值。\n\n```\n$arr2 = array_walk($arr,function($value,$key){\n\techo $key.'->'.$value,'<br>';\n})\n```\n>array_walk同样支持匿名函数的用法\n\n- 接触最多的回调函数还是`array_map()，array_walk()`用的次数相对于而言，比较少。\n\n- array_walk第一个参数写的数组名，第二个参数写的才是调用的数组\narray_walk返回的结果只会是一个布尔型的结果，如果array_walk执行成功返回的记过就是true，如果array_walk执行失败，返回的救过就是false，他不会生成一个新的数组；\n\n### 栈和队列\n栈的特点就是先进后出，后进先出。\n队列的特点就是先进先出，后进后出。\n\n#### array_push()\n第一个参数是需要放置的数组，后面的参数是需要放置的元素\n\n```\n$arr = array();\narray_push($arr,'a');\narray_push($arr,'b','c','d');\nprint_r($arr);\n```\n\n>一次性可以放置多个元素\n\n#### array_pop()\n\n```\n$arr = array();\narray_push($arr,'a');\narray_push($arr,'b','c','d');\narray_pop($arr);\narray_pop($arr);\nprint_r($arr);\n```\n\n>出栈一次只能出一个元素。d和c后进的元素，先被拿出来了\n\n返回结果：mexd,溢出的元素\n\n#### array_shift()\n出队列\n\n>思考：unset和arr_shift有什么区别？\n答案：使用array_shift去移除一个元素，那个其他的元素位置会往前移一位，保持数据完整性；但是unset删除一个元素，下标也会被删除\n\n#### array_unshift()\n就是在数组的第一个位置插入一个元素。\n\n>往数组里面第一个元素的位置放置一个元素。\n\n>栈和队列的优点：栈和队列都是有效保证数据的完整性；\n\n### 数组的排序\n\n#### sort()  \n按照数值值得大小进行排序。从小到大的顺序\n\n>将原有的下标丢弃，从0开始依次递增\n\n#### rsort() \n按照数组的数值进行排序，从大到小的顺序。\n\n>也是将原有的下标丢弃，从0开始依次递增\n\n#### asort() \n按照数组的数值进行排序，从小到大排序，但是会保留下标\n\n#### arsort()\n按照数组的数值进行排序，从大到小排序，但是会保留下标\n\n#### ksort()\n按照数组的下标顺序进行排序。从小到大进行排序\n\n#### krsort()\n按照数组的下标顺序进行排序，从大到小进行排序\n\n#### natsort()\n自然排序\n\n>将字符串整体进行排序，而sort会挨个字符进行比较，然后进行排序\n\n#### usort()\n自定义排序\n\n```\n$arr = array(\n\tarray('name'=>'jack','math'=>78,'age'=>56),\n\tarray('name'=>'rose','math'=>98,'age'=>14),\n\tarray('name'=>'jame','math'=>56,'age'=>67),\n\tarray('name'=>'uiste','math'=>45,'age'=>24)\n\t);\nusort($arr,function($num1,$num2){\n\tif ($num1['age']>$num2['age']) {\n\t\treturn 1;\n\t}elseif ($num1['age']<$num2['age']) {\n\t\treturn -1;\n\t}else{\n\t\treturn 0;\n\t}\n});\n\necho \"<pre>\";\nprint_r($arr);\necho \"</pre>\";\n```\n\n>在第一个参数小于，等于或大于第二个参数时，该比较函数必须相应地返回一个小于，等于或大于0的整数。\n\n如果return -1则值放在前面\n如果 return 1 则值放在后面\n如果 return 0 则值的位置不发生变化\n\n### 关于字符串的函数\n\n#### []\n字符串可以理解成字符的合计。\n\n>所以，[]就是获取字符串中的某一个字符\n\n#### strlen()\n获取字符串的长度\n\n>获取长度的单位是字节,中文下的感叹号也被分解为三个字节；空格也在空间\n\n#### trim()\n去除两边的空格\n\n#### rtrim()\n除去右边的空格\n\n#### ltrim()\n去除左边的空格\n\n#### strpos()\n获取字符串某个字符的位置\n语法：``strpos($str,'b');``\n>获取某个字符首次出现的位置。如果后面加上第三个参数，代表字符串从某个位置开始往后去寻找。如果没写第三个参数，则第三个参数默认为0\n\n语法：``strpos($str,'b',3);``\n>参数为3，则是从字符串第4个位置开始去寻找\n\n#### strrpos()\n获取某个字符出现的最后一个位置\n语法：``var_dump(strrpo($str,'b',2));``\n>从右往左查找，第三个参数代表最终查找到某个字符结束。找到返回下标，找不到返回false;\n\n#### str_repeat()\n将某个字符串重复多少次\n>第一个参数是需要重复的字符串，第二个参数重复的次数；\n\n#### chr()  \n将一个数字转换成ASCII码\n\n#### ord()\n将一个ASCII转换成对应的数字\n\n#### substr()\n截取某个字符串\n语法：``substr($str,3);``\n>从下标为3的字符开始，一直截取到结束\n\n语法：``substr($str,3,4);``\n>从下标为3的字符开始，截取4个字符\n\n语法：``substr($str,3,-3);``\n>从下标为3的字符开始截取，舍去最后三个字符\n\n语法：``substr($str,-4,2);``\n>从右往左数4个字符开始截取，截取2个\n\n语法：``substr($str,-5,-2);``\n>从右往左数第五个字符开始截取，截取到倒数第二位终止\n\n#### strchr() \n从某个字符开始截取\n语法：``strchr($str,'c');``\n>从左往右第一个c开始截取到最后（区分大小写）\n\n>strstr()的功能和strchr()的功能一模一样，只不过名称不同\n\n#### stristr()\n也是从某个字符开始截取，但是不区分大小写\n\n#### strrchr()\n从某个字符最后出现的位置开始往后截取\n\n>可以非常方便的获取文件的后缀名\n\n#### str_replace()\n语法：``str_replace(替换前的字符串，替换后的字符串，需要替换的字符串)``\n\n#### str_split()\n分割字符串，生成一个数组\n\n>第一个参数是一个字符串，第二个参数代表以几个字节进行拆分\nexplode是以字符进行拆分的\n\n#### str_pad()\n填充字符串\n\n>四个参数组成，第一个是填充的字符串，第二个是长度，第三个是填充物，第四个是左，右，两边填充\n\n#### strtolower() \n将一个字符串转换成全小写\n\n#### strtoupper()\n将一个字符串转换成全大写\n\n#### nl2br()\n将\\n转换成<br>\n\n#### htmlspecialchars():\n将标签当成普通文本输出\n\n#### urlencode()  \n可以将字符串进行加密\n\n#### urldecode()\n可以将加密好的字符串进行解码\n\n### 多字符处理函数\n\n多字符处理函数，不是php默认的开启模式，需要通过配置php.ini进行操作\n>extension=php_mbstring.dll\n\n#### mb_strlen()\n获取字符的长度\n\n>第一个参数是我们需要获取的字符串，第二个参数是选择的编码格式\n\n#### mb_internal_encoding()\n+ 获取当前的编码格式（不加参数）\n+ 修改当前的编码模式（增加参数）\n\n#### mb_strpos()\n查找当前某个字符的位置\n\n#### mb_substr()\n截取字符\n\n#### iconv()\n转换格式\n\n>里面三个参数，第一个是当前的编码，第二个是转换后的编码，第三个是需要转换的字符串\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp2009apgwigy2v9bsu"},{"layout":"post","title":"MySQL 多表查询、备份、账户权限","date":"2015-09-02T10:18:51.000Z","_content":"### 多表查询\n子查询：只能得到1个表的数据，另一个表只是作为一个限制条件\n多表查询：多个表中的数据\n  在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。\n语法：\n  ``select * from 表A,表B 【where 子句】``\n说明：\n  从多个表中获取where子句的匹配条件进行获取数据\n  如果省略where子句，那么得到的结果是一个笛卡尔积\n\n### 联合查询\n语法：\nselect语句A\nunion【union选项】\nselect 语句B\n说明：\n  【union选项】\n  all     显示所有(包含重复记录)\n  distinct    去复(默认)\n作用：\n  1、对同一个表的不同的部分进行不同的操作。\n  2、一般用于对比较大的表进行分表存储，联合查询\n\n### 连接查询\n#### 交差连接\n语法：\n  ``select * from 表A cross join表B 【where子句】``\n说明：\n  如果省略where子句，将是一个迪卡尔积\n  如果使用where子句，则是在迪卡尔积的基础上筛选满足条件的记录\n#### 内连接\n语法：\n  ``select * from 表A inner join 表B【where子句】``\n#### 外连接\n左外连接\n语法：\n  ``select * from 表L left join 表R on 连接条件``\n  右外连接\n语法：\n  ``select * from 表L right join 表R on 连接条件``\n说明：\n  1、外连接，必须使用on关键字，指定连接条件\n  2、from关键字后如果是左外连接第1个表，咱称之为主表，第2个表称之为从表\n  3、from关键字后如果是右外连接第1个表，咱称之为从表，第2个表称之为主表\n### using关键字\n当进行外连接时，如果两个表的连接字段同名，可以使用\n：using(进行连接的同名字段)\n### 自然连接\n所谓的自然就是自已找连接条件，找到的依据是同名字段\n  自然左外连接\n语法：\n  ``select * from 表A natural left join 表B``\n  自然右外连接\n语法：\n  ``select * from 表A natural right join 表B``\n自然左外连接就是左外连接\n自然右外连接就是右外连接\n注意：\n  如果想使用自然连接代替外连接，那么作为连接的字段名子相同名，且不作为连接的字段的名子不能相同\n  对于自然连接会只保留一个同名的字段，且放在第1列\n  其实using关键字及自然连接就是简化left join或right join的语法\n\n理解：\n  MySQL提供很多种连接方式，不同的连接方式的区别：\n  共同点：都是从多个表中进行记录的横向拼接\n  不同点：拼接的方法不同\n\n子查询：一个select包含另一个select\n联合查询：selectA union select B\n\n多表查询：from 表A,表B\n交差连接：from 表A cross join表B\n内连接：from 表A inner join表B\n左外连接：from 表L left join 表R on\n右外连接：from 表L right join 表R on\n\n外连接与其他连接\n1、其他连接与外连接，当匹配条件成立时结果完成一样\n2、外连接会包含，匹配不成功的记录。\n3、匹配不成功时，究竟包含什么样的不成功记录，要看使用的left join还是right join\n如果是left join保留的是左表的没有匹配成功的记录\n如果是right join保留的是右表的没有匹配成功的记录\n\n### 备份\n#### 物理备份（冷备）\n备份表或数据库的物理文件\n\n对于myisam存储引擎，需要备份 `.frm` `.myd` `myi`\n对于innodb 存储引擎，需要备份 `.frm` `data/ibdata1` 或 `.ibd`\n\n#### 数据备份\n只备份数据表中的数据，并没有表结构\n\n备份语法：\n  ``select * from 表名 into outfile ‘备份的文件的文件路径’ ``【fields选项】【lines选项】\n说明：\n  fields选项是以fields开头的：\n  terminated by字符   设置字段的结束符      默认是\\t\n  enclosed by字符   设置字段的包含符      默认是’’\n  escaped by  字符    设置字符null值使用什么字符代替  默认\\N\n\n  lines选项是以lines开头的：\n  terminated by字符   设置行的结束符     默认是\\t\n  starting by 字符    设置行的开始符\n\n```\nmysql> select * from stu into outfile '/Users/uiste/www/back.sql';\nQuery OK, 9 rows affected (0.01 sec)\n\n备份文件内容如下：\n1 it001 zhangsan  1 20  1\n2 it002 lisi  1 26  2\n3 it003 wangwu  1 23  2\n4 it004 zhaoliu 1 30  3\n5 it005 tianqi  0 28  1\n6 it006 wangwang  1 20  1\n7 it007 songjiu 1 18  2\n8 it008 张三  女 19  2\n9 it009 zhener  1 23  1\n```\n\n增加参数的示例\n\n```\nmysql> select * from stu into outfile '/Users/uiste/www/back2.sql'\n    -> fields\n    -> terminated by ''\n    -> enclosed by '#'\n    -> lines\n    -> starting by 'BEGIN';\nQuery OK, 9 rows affected (0.02 sec)\n\n备份文件内容如下：\nBEGIN#1##it001##zhangsan##1##20##1#\nBEGIN#2##it002##lisi##1##26##2#\nBEGIN#3##it003##wangwu##1##23##2#\nBEGIN#4##it004##zhaoliu##1##30##3#\nBEGIN#5##it005##tianqi##0##28##1#\nBEGIN#6##it006##wangwang##1##20##1#\nBEGIN#7##it007##songjiu##1##18##2#\nBEGIN#8##it008##张三##女##19##2#\nBEGIN#9##it009##zhener##1##23##1#\n```\n\n\n\n#### 数据还原\nload data local infile '备份的文件的路径' into table '表名' \\[files选项\\]\\[lines选项\\]\n\n```\nmysql> delete from stu;\nQuery OK, 9 rows affected (0.01 sec)\n\nmysql> select * from stu;\nEmpty set (0.01 sec)\n\nmysql> load data local infile '/Users/uiste/www/back.sql' into table stu;\nQuery OK, 9 rows affected (0.02 sec)\nRecords: 9  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> select * from stu;\n+----+-------+----------+------+------+------+\n| id | s_num | s_name   | sex  | age  | c_id |\n+----+-------+----------+------+------+------+\n|  1 | it001 | zhangsan | 1    |   20 |    1 |\n|  2 | it002 | lisi     | 1    |   26 |    2 |\n|  3 | it003 | wangwu   | 1    |   23 |    2 |\n|  4 | it004 | zhaoliu  | 1    |   30 |    3 |\n|  5 | it005 | tianqi   | 0    |   28 |    1 |\n|  6 | it006 | wangwang | 1    |   20 |    1 |\n|  7 | it007 | songjiu  | 1    |   18 |    2 |\n|  8 | it008 | 张三     | 女   |   19 |    2 |\n|  9 | it009 | zhener   | 1    |   23 |    1 |\n+----+-------+----------+------+------+------+\n9 rows in set (0.01 sec)\n```\n\n第二种方法根据备份内容将限定选项一起加入即可\n\n#### SQL备份\n\n备份的是sql(包含数据)\n语法：\n  需要在mysql之外(cmd命令行使用)mysqldump工具\n  mysqldump –uroot –p 数据库名【数据表名】 > 位置\n\n\n还原：\n语法1：在mysql之外\n  mysql –uroot –p 数据库名 <位置\n\n语法2：在mysql中\n  source 需要还原的文件\n\n`不加引号`\n\n#### 权限管理\n创建用户：\n语法：\n  create user ‘用户名’@’主机’ identified by ‘密码’;\n说明：\n  主机    表示用户所能登陆的位置\n  取值：\n    IP    192.168.10.1    只允许该用户此ip地址上登陆\n    域名  localhost     只允许该用户在本机上登陆\n    %   对该用户的登陆位置没有任何限制\n  密码必须使用引号\n\n查看MYSQL的用户\n1、进入到MySQL数据库\n\n```\nmysql> create user 'xiaoqiang'@'localhost' identified by '123';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> use mysql;\nDatabase changed\nmysql> select host,user,password from user;\n+-----------+-----------+-------------------------------------------+\n| host      | user      | password                                  |\n+-----------+-----------+-------------------------------------------+\n| localhost | root      | *7C31BA29248E9330208F65C47A673D863961B220 |\n| linux     | root      |                                           |\n| localhost |           |                                           |\n| linux     |           |                                           |\n| localhost | pma       |                                           |\n| localhost | xiaoqiang | *7C31BA29248E9330208F65C47A673D863961B220 |\n+-----------+-----------+-------------------------------------------+\n6 rows in set (0.01 sec)\n```\n\n2、MySQL用户被保存在user表中\n\n授权\n语法：\n``grant 权限|all privileges on 数据库名.数据表名 to ‘user’@‘主机名’``\n\n```\nmysql> grant all privileges on uiste.* to 'xiaoqiang'@'localhost';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n查看权限：\n语法：\n  ``show grants``\n\n```\nmysql> show grants;\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for root@localhost                                                                                                              |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY PASSWORD '*7C31BA29248E9330208F65C47A673D863961B220' WITH GRANT OPTION |\n| GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION                                                                           |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n2 rows in set (0.01 sec)\n\n```\n\n收权限\n语法：\n``revoke 权限|all privileges on 数据库名.数据表名 from ‘user’@‘主机名’``\n\n```\nmysql> revoke all privileges on uiste.* from 'xiaoqiang'@'localhost';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n\n更改用户密码：\n语法：\n  ``set password for ‘user’@’host’=password(‘密码’);``\n\n```\nmysql> set password for 'xiaoqiang'@'localhost'=password('');\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n重置管理员密码\n1、先停止mysql服务\n\n2、跳过授权表来，启动mysql\n语法：\n  mysqld --skip-grant-tables\n说明：\n  当执行此语句后，窗口会处于挂起状态，不接收用户的任何输入(但不要关闭此窗口)\n\n3、重新开启一个cmd窗口，直接使用mysql登陆(不需要加任何参数)\n示例：\n\n4、更改mysql数据库的user数据表中的root用户的密码\n\n5、关闭第2步中的窗口，并在任何管理器中结束mysqld服务\n\n6、正常启动mysql，使用新用户密码登陆\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--if判断\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\nif num=1 then\n   select '金牌会员' as '等级' from dual;\nelseif num=2 then\n   select '普通会员' as '等级' from dual;\nelseif num=3 then\n   select '游客' as '等级' from dual;\nelse\n    select '输入有误' from dual;\nend if;\nend //\n\n--case语句（一）\ndrop procedure if exists proc;\ncreate procedure proc(in season int)\nbegin\n     case season\n     when 1 then select '春天' as '季节' from dual;\n     when 2 then select '夏天' as '季节' from dual;\n     when 3 then select '秋天' as '季节' from dual;\n     when 4 then select '冬天' as '季节' from dual;\n     else select '输入不正确' as '季节' from dual;\n     end case;\nend //\n\n--case语句（二）\nselect stuno,stuname,stusex,writtenexam,case\n   when writtenexam>=90 then '等级A'\n   when writtenexam>=80 then '等级B'\n   when writtenexam>=70 then '等级C'\n   when writtenexam>=60 then '等级D'\n   when writtenexam is null then '缺考'\n   else '等级E'\nend as '等级' from stuinfo natural left join stumarks;\n\n--loop循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     aa:loop\n            set total=total+i;\n            set i=i+1;\n            if(i>num) then\n               leave aa;\n            end if;\n     end loop;\n     select total as '结果' from dual;\nend //\n\n--while循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     while i<=num do\n           set total=total+i;\n           set i=i+1;\n     end while;\n     select total as '结果' from dual;\nend //\n\n-- repeat循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     repeat\n     set total=total+i;\n     set i=i+1;\n     until i>num end repeat;\n     select total as '结果' from dual;\nend //\n\n-- leave、iterate\ndrop procedure if exists proc;\ncreate procedure proc()\nbegin\n     declare i int default 0;\n     aa:while i<=5 do\n     set i=i+1;\n     if(i=3) then\n             leave aa;     --类似于break;\n             iterate aa;   --类似于continue\n     end if;\n     select i;\n     end while;\nend //\n\n--coalesce\nselect stuname,coalesce(writtenexam,'缺考'),coalesce(labexam,'缺考') from stuinfo natural left join stumarks//\n\n--获取当前时间\nselect year(now()) '年',month(now()) '月',day(now()) '日',hour(now()) '小时',minute(now()) '分钟',second(now()) '秒'//\n\n--\n\nselect ADDDATE(now(),INTERVAL 12 day) as '日期'\n\nselect datediff(now(),'2017-1-1') as '还有几天过年';\n\n--函数\ncreate function fun() returns varchar(20)\nbegin\n     return '锄禾日当午';\nend //\n\ndrop function if exists fun;\ncreate function fun(num1 int,num2 int)returns int\nbegin\n     declare num int default 0;\n     set num=num1+num2;\n     return num;\nend //\n\n--insert触发器\ncreate table t1(num int);\ncreate table t2(num int);\n\ncreate trigger trig1\nafter insert on t1 for each row\nbegin\n     insert into t2 set num=new.num*new.num;\nend //\n\n--insert触发器\ndrop table transinfo,bank;\ncreate table bank(\n       cardid char(4) primary key,\n       name varchar(20) not null,\n       money int not null\n);\ncreate table transinfo(\n       id int auto_increment primary key,\n       cardid char(4) not null,\n       type char(2) not null,\n       money int not null,\n       transdate datetime\n);\ninsert into bank values ('1001','tom',1000),('1002','berry',1) //\n\ncreate trigger trig_transinfo_insert\nbefore insert on transinfo for each row\nbegin\n     declare mytype,mycardid char(4);\n     declare mymoney int;\n     set mytype=new.type;\n     set mycardid=new.cardid;\n     set mymoney=new.money;\n     if mytype='支取' then\n        update bank set money=money-mymoney where cardid=mycardid;\n     else\n         update bank set money=money+mymoney where cardid=mycardid;\n     end if;\nend //\n\n--delete触发器\ncreate table temp like transinfo//\ncreate trigger trig_transinfo_delete\nafter delete on transinfo for each row\nbegin\n     insert into temp values (null,old.cardid,old.type,old.money,old.transdate);\nend //\n\n--upate触发器\ndrop table if exists stuinfo1,stumarks1;\ncreate table stuinfo1(\n       id int auto_increment primary key,\n       name varchar(20) not null,\n       sex char(1) not null,\n       grade varchar(10) not null\n);\ninsert into stuinfo1 values (null,'tom','男','未知');\ncreate table stumarks1(\n       id int primary key,\n       ch int,\n       math int\n);\ninsert into stumarks1 values (1,77,88) //\n\ncreate trigger trig_stumarks1_update\nafter update on stumarks1 for each row\nbegin\n     declare ch,math int;\n     declare avgscore decimal(3,1);\n     declare sid int;\n     set ch=new.ch;\n     set math=new.math;\n     set sid=new.id;\n     set avgscore=(ch+math)/2;\n     update stuinfo1 set grade=case\n            when avgscore>=90 then '优秀'\n            when avgscore>=80 then '良好'\n            when avgscore>=70 then '一般'\n            when avgscore>=60 then '及格'\n            else '不及格'\n     end where id=sid;\nend //\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150902-2.md","raw":"layout: post\ntitle: MySQL 多表查询、备份、账户权限\ndate: 2015-09-02 18:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### 多表查询\n子查询：只能得到1个表的数据，另一个表只是作为一个限制条件\n多表查询：多个表中的数据\n  在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。\n语法：\n  ``select * from 表A,表B 【where 子句】``\n说明：\n  从多个表中获取where子句的匹配条件进行获取数据\n  如果省略where子句，那么得到的结果是一个笛卡尔积\n\n### 联合查询\n语法：\nselect语句A\nunion【union选项】\nselect 语句B\n说明：\n  【union选项】\n  all     显示所有(包含重复记录)\n  distinct    去复(默认)\n作用：\n  1、对同一个表的不同的部分进行不同的操作。\n  2、一般用于对比较大的表进行分表存储，联合查询\n\n### 连接查询\n#### 交差连接\n语法：\n  ``select * from 表A cross join表B 【where子句】``\n说明：\n  如果省略where子句，将是一个迪卡尔积\n  如果使用where子句，则是在迪卡尔积的基础上筛选满足条件的记录\n#### 内连接\n语法：\n  ``select * from 表A inner join 表B【where子句】``\n#### 外连接\n左外连接\n语法：\n  ``select * from 表L left join 表R on 连接条件``\n  右外连接\n语法：\n  ``select * from 表L right join 表R on 连接条件``\n说明：\n  1、外连接，必须使用on关键字，指定连接条件\n  2、from关键字后如果是左外连接第1个表，咱称之为主表，第2个表称之为从表\n  3、from关键字后如果是右外连接第1个表，咱称之为从表，第2个表称之为主表\n### using关键字\n当进行外连接时，如果两个表的连接字段同名，可以使用\n：using(进行连接的同名字段)\n### 自然连接\n所谓的自然就是自已找连接条件，找到的依据是同名字段\n  自然左外连接\n语法：\n  ``select * from 表A natural left join 表B``\n  自然右外连接\n语法：\n  ``select * from 表A natural right join 表B``\n自然左外连接就是左外连接\n自然右外连接就是右外连接\n注意：\n  如果想使用自然连接代替外连接，那么作为连接的字段名子相同名，且不作为连接的字段的名子不能相同\n  对于自然连接会只保留一个同名的字段，且放在第1列\n  其实using关键字及自然连接就是简化left join或right join的语法\n\n理解：\n  MySQL提供很多种连接方式，不同的连接方式的区别：\n  共同点：都是从多个表中进行记录的横向拼接\n  不同点：拼接的方法不同\n\n子查询：一个select包含另一个select\n联合查询：selectA union select B\n\n多表查询：from 表A,表B\n交差连接：from 表A cross join表B\n内连接：from 表A inner join表B\n左外连接：from 表L left join 表R on\n右外连接：from 表L right join 表R on\n\n外连接与其他连接\n1、其他连接与外连接，当匹配条件成立时结果完成一样\n2、外连接会包含，匹配不成功的记录。\n3、匹配不成功时，究竟包含什么样的不成功记录，要看使用的left join还是right join\n如果是left join保留的是左表的没有匹配成功的记录\n如果是right join保留的是右表的没有匹配成功的记录\n\n### 备份\n#### 物理备份（冷备）\n备份表或数据库的物理文件\n\n对于myisam存储引擎，需要备份 `.frm` `.myd` `myi`\n对于innodb 存储引擎，需要备份 `.frm` `data/ibdata1` 或 `.ibd`\n\n#### 数据备份\n只备份数据表中的数据，并没有表结构\n\n备份语法：\n  ``select * from 表名 into outfile ‘备份的文件的文件路径’ ``【fields选项】【lines选项】\n说明：\n  fields选项是以fields开头的：\n  terminated by字符   设置字段的结束符      默认是\\t\n  enclosed by字符   设置字段的包含符      默认是’’\n  escaped by  字符    设置字符null值使用什么字符代替  默认\\N\n\n  lines选项是以lines开头的：\n  terminated by字符   设置行的结束符     默认是\\t\n  starting by 字符    设置行的开始符\n\n```\nmysql> select * from stu into outfile '/Users/uiste/www/back.sql';\nQuery OK, 9 rows affected (0.01 sec)\n\n备份文件内容如下：\n1 it001 zhangsan  1 20  1\n2 it002 lisi  1 26  2\n3 it003 wangwu  1 23  2\n4 it004 zhaoliu 1 30  3\n5 it005 tianqi  0 28  1\n6 it006 wangwang  1 20  1\n7 it007 songjiu 1 18  2\n8 it008 张三  女 19  2\n9 it009 zhener  1 23  1\n```\n\n增加参数的示例\n\n```\nmysql> select * from stu into outfile '/Users/uiste/www/back2.sql'\n    -> fields\n    -> terminated by ''\n    -> enclosed by '#'\n    -> lines\n    -> starting by 'BEGIN';\nQuery OK, 9 rows affected (0.02 sec)\n\n备份文件内容如下：\nBEGIN#1##it001##zhangsan##1##20##1#\nBEGIN#2##it002##lisi##1##26##2#\nBEGIN#3##it003##wangwu##1##23##2#\nBEGIN#4##it004##zhaoliu##1##30##3#\nBEGIN#5##it005##tianqi##0##28##1#\nBEGIN#6##it006##wangwang##1##20##1#\nBEGIN#7##it007##songjiu##1##18##2#\nBEGIN#8##it008##张三##女##19##2#\nBEGIN#9##it009##zhener##1##23##1#\n```\n\n\n\n#### 数据还原\nload data local infile '备份的文件的路径' into table '表名' \\[files选项\\]\\[lines选项\\]\n\n```\nmysql> delete from stu;\nQuery OK, 9 rows affected (0.01 sec)\n\nmysql> select * from stu;\nEmpty set (0.01 sec)\n\nmysql> load data local infile '/Users/uiste/www/back.sql' into table stu;\nQuery OK, 9 rows affected (0.02 sec)\nRecords: 9  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> select * from stu;\n+----+-------+----------+------+------+------+\n| id | s_num | s_name   | sex  | age  | c_id |\n+----+-------+----------+------+------+------+\n|  1 | it001 | zhangsan | 1    |   20 |    1 |\n|  2 | it002 | lisi     | 1    |   26 |    2 |\n|  3 | it003 | wangwu   | 1    |   23 |    2 |\n|  4 | it004 | zhaoliu  | 1    |   30 |    3 |\n|  5 | it005 | tianqi   | 0    |   28 |    1 |\n|  6 | it006 | wangwang | 1    |   20 |    1 |\n|  7 | it007 | songjiu  | 1    |   18 |    2 |\n|  8 | it008 | 张三     | 女   |   19 |    2 |\n|  9 | it009 | zhener   | 1    |   23 |    1 |\n+----+-------+----------+------+------+------+\n9 rows in set (0.01 sec)\n```\n\n第二种方法根据备份内容将限定选项一起加入即可\n\n#### SQL备份\n\n备份的是sql(包含数据)\n语法：\n  需要在mysql之外(cmd命令行使用)mysqldump工具\n  mysqldump –uroot –p 数据库名【数据表名】 > 位置\n\n\n还原：\n语法1：在mysql之外\n  mysql –uroot –p 数据库名 <位置\n\n语法2：在mysql中\n  source 需要还原的文件\n\n`不加引号`\n\n#### 权限管理\n创建用户：\n语法：\n  create user ‘用户名’@’主机’ identified by ‘密码’;\n说明：\n  主机    表示用户所能登陆的位置\n  取值：\n    IP    192.168.10.1    只允许该用户此ip地址上登陆\n    域名  localhost     只允许该用户在本机上登陆\n    %   对该用户的登陆位置没有任何限制\n  密码必须使用引号\n\n查看MYSQL的用户\n1、进入到MySQL数据库\n\n```\nmysql> create user 'xiaoqiang'@'localhost' identified by '123';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> use mysql;\nDatabase changed\nmysql> select host,user,password from user;\n+-----------+-----------+-------------------------------------------+\n| host      | user      | password                                  |\n+-----------+-----------+-------------------------------------------+\n| localhost | root      | *7C31BA29248E9330208F65C47A673D863961B220 |\n| linux     | root      |                                           |\n| localhost |           |                                           |\n| linux     |           |                                           |\n| localhost | pma       |                                           |\n| localhost | xiaoqiang | *7C31BA29248E9330208F65C47A673D863961B220 |\n+-----------+-----------+-------------------------------------------+\n6 rows in set (0.01 sec)\n```\n\n2、MySQL用户被保存在user表中\n\n授权\n语法：\n``grant 权限|all privileges on 数据库名.数据表名 to ‘user’@‘主机名’``\n\n```\nmysql> grant all privileges on uiste.* to 'xiaoqiang'@'localhost';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n查看权限：\n语法：\n  ``show grants``\n\n```\nmysql> show grants;\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for root@localhost                                                                                                              |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY PASSWORD '*7C31BA29248E9330208F65C47A673D863961B220' WITH GRANT OPTION |\n| GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION                                                                           |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n2 rows in set (0.01 sec)\n\n```\n\n收权限\n语法：\n``revoke 权限|all privileges on 数据库名.数据表名 from ‘user’@‘主机名’``\n\n```\nmysql> revoke all privileges on uiste.* from 'xiaoqiang'@'localhost';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n\n更改用户密码：\n语法：\n  ``set password for ‘user’@’host’=password(‘密码’);``\n\n```\nmysql> set password for 'xiaoqiang'@'localhost'=password('');\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n重置管理员密码\n1、先停止mysql服务\n\n2、跳过授权表来，启动mysql\n语法：\n  mysqld --skip-grant-tables\n说明：\n  当执行此语句后，窗口会处于挂起状态，不接收用户的任何输入(但不要关闭此窗口)\n\n3、重新开启一个cmd窗口，直接使用mysql登陆(不需要加任何参数)\n示例：\n\n4、更改mysql数据库的user数据表中的root用户的密码\n\n5、关闭第2步中的窗口，并在任何管理器中结束mysqld服务\n\n6、正常启动mysql，使用新用户密码登陆\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--if判断\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\nif num=1 then\n   select '金牌会员' as '等级' from dual;\nelseif num=2 then\n   select '普通会员' as '等级' from dual;\nelseif num=3 then\n   select '游客' as '等级' from dual;\nelse\n    select '输入有误' from dual;\nend if;\nend //\n\n--case语句（一）\ndrop procedure if exists proc;\ncreate procedure proc(in season int)\nbegin\n     case season\n     when 1 then select '春天' as '季节' from dual;\n     when 2 then select '夏天' as '季节' from dual;\n     when 3 then select '秋天' as '季节' from dual;\n     when 4 then select '冬天' as '季节' from dual;\n     else select '输入不正确' as '季节' from dual;\n     end case;\nend //\n\n--case语句（二）\nselect stuno,stuname,stusex,writtenexam,case\n   when writtenexam>=90 then '等级A'\n   when writtenexam>=80 then '等级B'\n   when writtenexam>=70 then '等级C'\n   when writtenexam>=60 then '等级D'\n   when writtenexam is null then '缺考'\n   else '等级E'\nend as '等级' from stuinfo natural left join stumarks;\n\n--loop循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     aa:loop\n            set total=total+i;\n            set i=i+1;\n            if(i>num) then\n               leave aa;\n            end if;\n     end loop;\n     select total as '结果' from dual;\nend //\n\n--while循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     while i<=num do\n           set total=total+i;\n           set i=i+1;\n     end while;\n     select total as '结果' from dual;\nend //\n\n-- repeat循环\ndrop procedure if exists proc;\ncreate procedure proc(in num int)\nbegin\n     declare total int default 0;\n     declare i int default 1;\n     repeat\n     set total=total+i;\n     set i=i+1;\n     until i>num end repeat;\n     select total as '结果' from dual;\nend //\n\n-- leave、iterate\ndrop procedure if exists proc;\ncreate procedure proc()\nbegin\n     declare i int default 0;\n     aa:while i<=5 do\n     set i=i+1;\n     if(i=3) then\n             leave aa;     --类似于break;\n             iterate aa;   --类似于continue\n     end if;\n     select i;\n     end while;\nend //\n\n--coalesce\nselect stuname,coalesce(writtenexam,'缺考'),coalesce(labexam,'缺考') from stuinfo natural left join stumarks//\n\n--获取当前时间\nselect year(now()) '年',month(now()) '月',day(now()) '日',hour(now()) '小时',minute(now()) '分钟',second(now()) '秒'//\n\n--\n\nselect ADDDATE(now(),INTERVAL 12 day) as '日期'\n\nselect datediff(now(),'2017-1-1') as '还有几天过年';\n\n--函数\ncreate function fun() returns varchar(20)\nbegin\n     return '锄禾日当午';\nend //\n\ndrop function if exists fun;\ncreate function fun(num1 int,num2 int)returns int\nbegin\n     declare num int default 0;\n     set num=num1+num2;\n     return num;\nend //\n\n--insert触发器\ncreate table t1(num int);\ncreate table t2(num int);\n\ncreate trigger trig1\nafter insert on t1 for each row\nbegin\n     insert into t2 set num=new.num*new.num;\nend //\n\n--insert触发器\ndrop table transinfo,bank;\ncreate table bank(\n       cardid char(4) primary key,\n       name varchar(20) not null,\n       money int not null\n);\ncreate table transinfo(\n       id int auto_increment primary key,\n       cardid char(4) not null,\n       type char(2) not null,\n       money int not null,\n       transdate datetime\n);\ninsert into bank values ('1001','tom',1000),('1002','berry',1) //\n\ncreate trigger trig_transinfo_insert\nbefore insert on transinfo for each row\nbegin\n     declare mytype,mycardid char(4);\n     declare mymoney int;\n     set mytype=new.type;\n     set mycardid=new.cardid;\n     set mymoney=new.money;\n     if mytype='支取' then\n        update bank set money=money-mymoney where cardid=mycardid;\n     else\n         update bank set money=money+mymoney where cardid=mycardid;\n     end if;\nend //\n\n--delete触发器\ncreate table temp like transinfo//\ncreate trigger trig_transinfo_delete\nafter delete on transinfo for each row\nbegin\n     insert into temp values (null,old.cardid,old.type,old.money,old.transdate);\nend //\n\n--upate触发器\ndrop table if exists stuinfo1,stumarks1;\ncreate table stuinfo1(\n       id int auto_increment primary key,\n       name varchar(20) not null,\n       sex char(1) not null,\n       grade varchar(10) not null\n);\ninsert into stuinfo1 values (null,'tom','男','未知');\ncreate table stumarks1(\n       id int primary key,\n       ch int,\n       math int\n);\ninsert into stumarks1 values (1,77,88) //\n\ncreate trigger trig_stumarks1_update\nafter update on stumarks1 for each row\nbegin\n     declare ch,math int;\n     declare avgscore decimal(3,1);\n     declare sid int;\n     set ch=new.ch;\n     set math=new.math;\n     set sid=new.id;\n     set avgscore=(ch+math)/2;\n     update stuinfo1 set grade=case\n            when avgscore>=90 then '优秀'\n            when avgscore>=80 then '良好'\n            when avgscore>=70 then '一般'\n            when avgscore>=60 then '及格'\n            else '不及格'\n     end where id=sid;\nend //\n\n\n\n\n\n\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp4009cpgwij3o7k66f"},{"layout":"post","title":"MySQL 数据库常见查询","date":"2015-09-03T09:18:51.000Z","_content":"### 查询语句\n``select 【select选项】|*|字段列表|字段名 【as】 字段别名 from 表名 【as】表别名 【where子句】【group by子句】【having子句】【order by子句】【limit子句】``\n说明：\n【where子句】【group by子句】【having子句】【order by子句】【limit子句】五子句，可以随意的组合，但无论如何组合，五子句的顺序一定要按语法的顺序书写。\n*王狗和欧丽*\n\n#### where子句\n\nwhere后面跟的是条件，在数据源中进行筛选\n##### in | not in\n``..where 字段 in('北京','上海');``\n##### between…and|not between…and\n``..where 字段 between 25 and 28;``\n##### is null | is not null\n``..where 字段1 is null or 字段2 is null;``\n##### 模糊查询（like）\n``..where 字段 like '%永%';``\n``..where 字段 like 'character\\_set\\_%';``\n\n#### group 分组查询\n\n##### group by 【分组查询】\n``..group by 字段;``\n##### 回溯统计【with rollup】\n``..group by 字段 with rollup;``\n\n#### having条件\nwhere是对原始数据进行筛选，having是对记录集(结果集)进行筛选\n``select stusex,count(*) total from stu group by stusex having total>3;``\n\n#### order by排序\nasc：升序【默认】\ndesc：降序\n``..from 表名 order by 字段 desc;``\n\n#### limit 限制\n语法：limit 起始位置，显示长度\n起始位置可以省略，默认是从0开始\n``..from 表名 order by 字段 desc limit 0,3;``\n\n#### 查询选项条件\nall：显示所有数据\n``select all 字段 from 表名;``\ndistinct：去除结果集中重复的数据\n``select distinct 字段 from 表名;``\n\n#### insert...select...(复制表)\n创建一个和stu一样结构的表stu1\n``create table stu1 like stu;``\n将上海的学生插入stu1表中\n``insert into stu1 select * from stu where stuaddress='上海';``\n\n#### on duplicate key update\n在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。\n\n```\n– 创建表\ncreate table emp(\nid int primary key,\nname varchar(20) unique\n);\n– 插入测试数据\ninsert into emp values (1,'tom');\n- 测试数据\nmysql>insert into emp values (1,'berry') on duplicate key update name='berry';\nmysql>insert into emp values (2,'berry') on duplicate key update id=2;\nmysql>insert into emp values (2,'tom') on duplicate key update id=2,name='tom';\n```\n\n### 几个关键词\ndistinct：去除select结果集中重复的数据\nengine=innodb或myisam 存储引擎\n    innodb：5.5版本以上，引擎支持事务安全（提供：commit、rollback功能），且支持外键\n    在data目录创建一个`.frm`的表结构文件，数据文件与索引文件，被保存在data目录的ibdata1文件中\n    myisam引擎中：`.frm`结构文件 `.MYD`数据文件 `.MYI`索引文件  \ncharset :字符集\ncollate :校对集\nwith rollup :回溯统计\ndual :表（伪表）->from dual \n\n### 注意：\nselect 嵌套 select 子句必须使用括号括起来，同时起个别名\n\n### union 纵向联合\n作用：将多个select语句结果集纵向联合起来\n语法：select 语句 union [选项] select 语句 union [选项] select 语句\n``select stuname from stu union [all | distinct] select stuname from stu1;``\n\n\n>小常识大问题，字段相关用反斜线 `` ，属性内容相关用引号 '';\n\n### 主键删除\nauto_increment一定是一个int系列的主键或唯一键\n\n修改主键是不需要增加primary key\n``alter table 表名 modify id int auo_increment;``\n不是``alter table 表名 modify id int auo_increment primary key;``\n\n由于unique是一种索引，删除时使用固定语法\n``alter table 表名 drop index 唯一键名``\n>唯一键名默认是字段名\n\n### MySQL约束\nMySQL约束存在`information_schema` 数据库的`table_constraints` 中，可以通过该表查询约束信息；\n约束主要完成对数据的检验，保证数据库数据的完整；如果有相互依赖数据，保证该数据不被删除。\n\n常用五类约束：\nnot null：非空约束，指定某列不能为空\nunique：唯一 约束，指定某列和几列组合的数据不能重复\nprimary key：主键约束，指定某列的数据不能重复唯一\nforeign key：外键，指定该列记录属于主表中的一条记录，参照另一条数据\ncheck：检查，指定一个表达式，用于检验指定数据（MySQL不支持check约束，但可以使用，没有任何效果）\n\n>虽然唯一约束不允许出现重复的值，但是可以为多个null，同一个表可以有多个唯一约束，多个列组合的约束\n\nMySQL会给唯一约束的列上默认创建一个唯一索引。\nMySQL中 auto_increment 必须是主键，但主键不一定是自动增长的\n\n### Mac 使用XAMPP配置SQL-model\n松散模式与严格模式\n\n问题：使用枚举类型，可以插入未列举选项为空字符\n\n```\nmysql> create table test(\n    -> id int auto_increment primary key,\n    -> sex enum('M','W','no')\n    -> );\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> insert into test values (1,'A');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from test;\n+----+------+\n| id | sex  |\n+----+------+\n|  1 |      |\n+----+------+\n1 row in set (0.01 sec)\n```\n\n进程解决方案如下(单次解决)：\n\n```\nmysql> show variables like '%sql%%';\n+---------------------------+------------------------+\n| Variable_name             | Value                  |\n+---------------------------+------------------------+\n| slave_sql_verify_checksum | ON                     |\n| sql_auto_is_null          | OFF                    |\n| sql_big_selects           | ON                     |\n| sql_buffer_result         | OFF                    |\n| sql_log_bin               | ON                     |\n| sql_log_off               | OFF                    |\n| sql_mode                  | NO_ENGINE_SUBSTITUTION |\n| sql_notes                 | ON                     |\n| sql_quote_show_create     | ON                     |\n| sql_safe_updates          | OFF                    |\n| sql_select_limit          | 18446744073709551615   |\n| sql_slave_skip_counter    | 0                      |\n| sql_warnings              | OFF                    |\n+---------------------------+------------------------+\n13 rows in set (0.01 sec)\n\nmysql> set sql_mode='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n结果：\n\n```\nmysql> show variables like '%sql%%';\n+---------------------------+----------------------------------------------------------------+\n| Variable_name             | Value                                                          |\n+---------------------------+----------------------------------------------------------------+\n| slave_sql_verify_checksum | ON                                                             |\n| sql_auto_is_null          | OFF                                                            |\n| sql_big_selects           | ON                                                             |\n| sql_buffer_result         | OFF                                                            |\n| sql_log_bin               | ON                                                             |\n| sql_log_off               | OFF                                                            |\n| sql_mode                  | STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n| sql_notes                 | ON                                                             |\n| sql_quote_show_create     | ON                                                             |\n| sql_safe_updates          | OFF                                                            |\n| sql_select_limit          | 18446744073709551615                                           |\n| sql_slave_skip_counter    | 0                                                              |\n| sql_warnings              | OFF                                                            |\n+---------------------------+----------------------------------------------------------------+\n13 rows in set (0.00 sec)\n\nmysql> desc test;\n+-------+--------------------+------+-----+---------+----------------+\n| Field | Type               | Null | Key | Default | Extra          |\n+-------+--------------------+------+-----+---------+----------------+\n| id    | int(11)            | NO   | PRI | NULL    | auto_increment |\n| sex   | enum('M','W','no') | YES  |     | NULL    |                |\n+-------+--------------------+------+-----+---------+----------------+\n2 rows in set (0.02 sec)\n\nmysql> insert into test value (null,'k');\nERROR 1265 (01000): Data truncated for column 'sex' at row 1\n\n```\n\n----\n补充优化知识：\n### 第一部分\n字段创建\n索引\n引擎-事物回滚-innodb:金融\n\n### 第二部分\n语句优化 使用较少的条件过滤结果\n\n### 第三部分\n分区\n\n### 第四部分\nmysql 事物、视图\n\n### 第五部分\nPDO数据层","source":"_posts/2015/201509/20150903-2.md","raw":"layout: post\ntitle: MySQL 数据库常见查询\ndate: 2015-09-03 17:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### 查询语句\n``select 【select选项】|*|字段列表|字段名 【as】 字段别名 from 表名 【as】表别名 【where子句】【group by子句】【having子句】【order by子句】【limit子句】``\n说明：\n【where子句】【group by子句】【having子句】【order by子句】【limit子句】五子句，可以随意的组合，但无论如何组合，五子句的顺序一定要按语法的顺序书写。\n*王狗和欧丽*\n\n#### where子句\n\nwhere后面跟的是条件，在数据源中进行筛选\n##### in | not in\n``..where 字段 in('北京','上海');``\n##### between…and|not between…and\n``..where 字段 between 25 and 28;``\n##### is null | is not null\n``..where 字段1 is null or 字段2 is null;``\n##### 模糊查询（like）\n``..where 字段 like '%永%';``\n``..where 字段 like 'character\\_set\\_%';``\n\n#### group 分组查询\n\n##### group by 【分组查询】\n``..group by 字段;``\n##### 回溯统计【with rollup】\n``..group by 字段 with rollup;``\n\n#### having条件\nwhere是对原始数据进行筛选，having是对记录集(结果集)进行筛选\n``select stusex,count(*) total from stu group by stusex having total>3;``\n\n#### order by排序\nasc：升序【默认】\ndesc：降序\n``..from 表名 order by 字段 desc;``\n\n#### limit 限制\n语法：limit 起始位置，显示长度\n起始位置可以省略，默认是从0开始\n``..from 表名 order by 字段 desc limit 0,3;``\n\n#### 查询选项条件\nall：显示所有数据\n``select all 字段 from 表名;``\ndistinct：去除结果集中重复的数据\n``select distinct 字段 from 表名;``\n\n#### insert...select...(复制表)\n创建一个和stu一样结构的表stu1\n``create table stu1 like stu;``\n将上海的学生插入stu1表中\n``insert into stu1 select * from stu where stuaddress='上海';``\n\n#### on duplicate key update\n在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。\n\n```\n– 创建表\ncreate table emp(\nid int primary key,\nname varchar(20) unique\n);\n– 插入测试数据\ninsert into emp values (1,'tom');\n- 测试数据\nmysql>insert into emp values (1,'berry') on duplicate key update name='berry';\nmysql>insert into emp values (2,'berry') on duplicate key update id=2;\nmysql>insert into emp values (2,'tom') on duplicate key update id=2,name='tom';\n```\n\n### 几个关键词\ndistinct：去除select结果集中重复的数据\nengine=innodb或myisam 存储引擎\n    innodb：5.5版本以上，引擎支持事务安全（提供：commit、rollback功能），且支持外键\n    在data目录创建一个`.frm`的表结构文件，数据文件与索引文件，被保存在data目录的ibdata1文件中\n    myisam引擎中：`.frm`结构文件 `.MYD`数据文件 `.MYI`索引文件  \ncharset :字符集\ncollate :校对集\nwith rollup :回溯统计\ndual :表（伪表）->from dual \n\n### 注意：\nselect 嵌套 select 子句必须使用括号括起来，同时起个别名\n\n### union 纵向联合\n作用：将多个select语句结果集纵向联合起来\n语法：select 语句 union [选项] select 语句 union [选项] select 语句\n``select stuname from stu union [all | distinct] select stuname from stu1;``\n\n\n>小常识大问题，字段相关用反斜线 `` ，属性内容相关用引号 '';\n\n### 主键删除\nauto_increment一定是一个int系列的主键或唯一键\n\n修改主键是不需要增加primary key\n``alter table 表名 modify id int auo_increment;``\n不是``alter table 表名 modify id int auo_increment primary key;``\n\n由于unique是一种索引，删除时使用固定语法\n``alter table 表名 drop index 唯一键名``\n>唯一键名默认是字段名\n\n### MySQL约束\nMySQL约束存在`information_schema` 数据库的`table_constraints` 中，可以通过该表查询约束信息；\n约束主要完成对数据的检验，保证数据库数据的完整；如果有相互依赖数据，保证该数据不被删除。\n\n常用五类约束：\nnot null：非空约束，指定某列不能为空\nunique：唯一 约束，指定某列和几列组合的数据不能重复\nprimary key：主键约束，指定某列的数据不能重复唯一\nforeign key：外键，指定该列记录属于主表中的一条记录，参照另一条数据\ncheck：检查，指定一个表达式，用于检验指定数据（MySQL不支持check约束，但可以使用，没有任何效果）\n\n>虽然唯一约束不允许出现重复的值，但是可以为多个null，同一个表可以有多个唯一约束，多个列组合的约束\n\nMySQL会给唯一约束的列上默认创建一个唯一索引。\nMySQL中 auto_increment 必须是主键，但主键不一定是自动增长的\n\n### Mac 使用XAMPP配置SQL-model\n松散模式与严格模式\n\n问题：使用枚举类型，可以插入未列举选项为空字符\n\n```\nmysql> create table test(\n    -> id int auto_increment primary key,\n    -> sex enum('M','W','no')\n    -> );\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> insert into test values (1,'A');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from test;\n+----+------+\n| id | sex  |\n+----+------+\n|  1 |      |\n+----+------+\n1 row in set (0.01 sec)\n```\n\n进程解决方案如下(单次解决)：\n\n```\nmysql> show variables like '%sql%%';\n+---------------------------+------------------------+\n| Variable_name             | Value                  |\n+---------------------------+------------------------+\n| slave_sql_verify_checksum | ON                     |\n| sql_auto_is_null          | OFF                    |\n| sql_big_selects           | ON                     |\n| sql_buffer_result         | OFF                    |\n| sql_log_bin               | ON                     |\n| sql_log_off               | OFF                    |\n| sql_mode                  | NO_ENGINE_SUBSTITUTION |\n| sql_notes                 | ON                     |\n| sql_quote_show_create     | ON                     |\n| sql_safe_updates          | OFF                    |\n| sql_select_limit          | 18446744073709551615   |\n| sql_slave_skip_counter    | 0                      |\n| sql_warnings              | OFF                    |\n+---------------------------+------------------------+\n13 rows in set (0.01 sec)\n\nmysql> set sql_mode='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n结果：\n\n```\nmysql> show variables like '%sql%%';\n+---------------------------+----------------------------------------------------------------+\n| Variable_name             | Value                                                          |\n+---------------------------+----------------------------------------------------------------+\n| slave_sql_verify_checksum | ON                                                             |\n| sql_auto_is_null          | OFF                                                            |\n| sql_big_selects           | ON                                                             |\n| sql_buffer_result         | OFF                                                            |\n| sql_log_bin               | ON                                                             |\n| sql_log_off               | OFF                                                            |\n| sql_mode                  | STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n| sql_notes                 | ON                                                             |\n| sql_quote_show_create     | ON                                                             |\n| sql_safe_updates          | OFF                                                            |\n| sql_select_limit          | 18446744073709551615                                           |\n| sql_slave_skip_counter    | 0                                                              |\n| sql_warnings              | OFF                                                            |\n+---------------------------+----------------------------------------------------------------+\n13 rows in set (0.00 sec)\n\nmysql> desc test;\n+-------+--------------------+------+-----+---------+----------------+\n| Field | Type               | Null | Key | Default | Extra          |\n+-------+--------------------+------+-----+---------+----------------+\n| id    | int(11)            | NO   | PRI | NULL    | auto_increment |\n| sex   | enum('M','W','no') | YES  |     | NULL    |                |\n+-------+--------------------+------+-----+---------+----------------+\n2 rows in set (0.02 sec)\n\nmysql> insert into test value (null,'k');\nERROR 1265 (01000): Data truncated for column 'sex' at row 1\n\n```\n\n----\n补充优化知识：\n### 第一部分\n字段创建\n索引\n引擎-事物回滚-innodb:金融\n\n### 第二部分\n语句优化 使用较少的条件过滤结果\n\n### 第三部分\n分区\n\n### 第四部分\nmysql 事物、视图\n\n### 第五部分\nPDO数据层","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp5009fpgwib5uc96br"},{"layout":"post","title":"PHP面向对象2","date":"2015-09-16T13:40:36.000Z","_content":"### 多态\n多态就是多种形态\n多态分为：方法重载和方法重写，但是PHP不支持方法重载。\n\n#### 方法重写\n子类方法和父类的方法必须同名\n\n```php\n<?php\nclass animal{\n\tpublic $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\n$dog->jiao();\n\n  ?>\nvar_dump($obj);\nobject(dog)#1 (1) { [\"name\"]=> string(3) \"狗\" }\n```\n\n>1.子类重写的方法不能比父类的方法更加严格(封装)\npublic、protected、private\n2.子类可以拥有和父类不同个数的参数，[严格标准是不允许的]\n\n#### 私有属性的继承和重写\n私有属性可以被继承但不能被重写\n\n```\n<?php \nclass animal{\n\tprivate $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tprivate $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\nvar_dump($dog);\n?>\nobject(dog)#1 (2) { [\"name\":\"dog\":private]=> string(3) \"狗\" [\"name\":\"animal\":private]=> string(6) \"动物\" }\n```\n\n### 访问修饰符\nstatic\t\t静态的\nfinal\t\t最终的\nabstract\t抽象的\n\n#### static【静态的】\n1、\tstatic修饰属性叫静态属性，static修饰方法叫静态方法\n2、\t当类加载的时候就分配内存空间，在内存中就一份。不用实例化可以直接访问。为所有的对象共享。\n3、\t销毁对象不会销毁静态成员，因为静态成员属于类，而不属于对象。\n4、\t当页面执行完毕的时候才销毁静态成员。\n5、\t父类的static属性子类中可以继承并重写，但不能重新定义同名普通属性。\n6、\t静态方法中不能直接访问普通属性\n7、\t被self调用的普通方法会转成静态方法，【严格标准不允许】\n\n```\n<?php \nclass Person{\n\tpublic static $name = '人类';\n\tpublic static function show(){\n\t\t// echo '这个星球的主宰者是：'.$this->name;(报错：Fatal error: Using $this when not in object context in)\n\t\techo '这个星球的主宰者是：'.Person::$name;//(正确)\n\t}\n}\n\necho Person::$name,\"<br>\";\nPerson::show();\n ?>\n```\n\n**静态成员可以被继承**\n\n```\n<?php \nclass Person{\n\tpublic static $name = '人类';\n\tpublic static function show(){\n\t\t// echo '这个星球的主宰者是：'.$this->name;(报错：Fatal error: Using $this when not in object context in)\n\t\techo '这个星球的主宰者是：'.Person::$name;//(正确)\n\t}\n}\n\nclass Student extends Person{\n\n}\necho Person::$name,\"<br>\";\nPerson::show();\necho \"<br>\";\necho Student::$name,'<br>';\nStudent::show();\necho '<br>';\n ?>\n```\n\n>调用静态成员：类名::静态成员\n\n>self 表示当前类名\n非静态方法被self调用，自动将非静态方法转成静态方法【严格标准是不允许的】\n\n```\n<?php \nclass Teacher{\n\tpublic function show(){\n\t\techo \"stay hungry\";\n\t}\n\tpublic function test(){\n\t\t$obj = new self();\n\t\t$obj->show();\n\t}\n}\n\nTeacher::test();\n\n ?>\n```\n\n#### 确定当前对象\n1、$this表示当前对象的引用\n2、self表示当前方法所在的类的类名\n3、static表示当前对象所属的类的类名【静态延时绑定】\n\t最后一次执行类的属性\n\n```\n<?php\nclass Person {\n\tpublic static $type='人类';\n\tpublic function showPerson() {\n\t\t//var_dump($this);\t//object(Student)#1 (0) { }\n\t\t//echo self::$type;\t//人类\n\t\techo static::$type;\t//学生    静态延时绑定,表示Student\n\t}\n}\nclass Student extends Person {\n\tpublic static $type='学生';\n\tpublic function showStu() {\n\t\t//var_dump($this);\t//object(Student)#1 (0) { }\n\t\t//echo self::$type;\t//学生\n\t\techo static::$type;\t//学生\n\t}\n}\n//测试\nheader('content-type:text/html;charset=utf-8');\n$obj=new Student;\n$obj->showPerson();\n$obj->showStu();\n\n```\n\n#### final[最终的]\n1、\tfinal修饰的类不能被继承\n2、\tfinal修饰的方法不能被重写\n3、\tfinal不能修饰属性\n\n```\n<?php \nfinal class animal{\n\tpublic $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\necho $dog->name,\"<br>\";\n$dog->jiao();\n ?>\n\nFatal error: Class dog may not inherit from final class (animal) in\n```\n\n```\n<?php \nclass animal{\n\tpublic $name='动物';\n\tfinal public function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\necho $dog->name,\"<br>\";\n$dog->jiao();\n ?>\nFatal error: Cannot override final method animal::jiao() in \n```\n\n#### abstract[抽象的]\n1、\tabstract修饰的类成为抽象类，abstract修饰的方法叫抽象方法\n2、\t抽象方法：只有方法的声明，没有方法的实现\n3、\t抽象类：类中只要有一个方法是抽象方法，这个类就是抽象类。\n4、\t抽象类不可以被实例化，必须在子类中重新实现。\n\n>抽象类的作用：定义方法的命名规范\n\n### 接口（interface）\n1、\t如果一个类中所有的方法都是抽象方法，这个类就声明成接口。\n2、\t接口是一个特殊的抽象类\n3、\t接口中的方法只能是public的，默认是public的\n4、\t接口中的方法不能用abstract、final来修饰。\n5、\t定义过程用`interface`实现接口用的`implements`关键字\n\n>类不能多重继承，但是接口可以多重实现\n\n#### 继承类的同时实现接口\n必须先继承类，再实现接口\n\n`class Myclass extends Class implements IPict1,IPict2`\n\n### 类常量【const】\n类中可以放属性、方法、常量\n调用类常量    类名::常量名\n类常量属于类自身，不属于对象实例，不能通过对象实例访问\n子类可以重写父类中的常量，可以通过(parent::)来调用父类中的常量\n\n\n```\n<?php \nclass Student {\n\tconst type='学生';\t//类常量\n\tpublic function show() {\n\t\techo self::type,'<br>';\n\t}\n}\n//测试\n$stu=new Student;\n$stu->show();\t//学生\n ?>\n```\n\n>类常量也可以放在接口中\n\n```\n<?php \ninterface Person{\n\tconst type='人类';\n}\necho Person::type;\n ?>\n```\n\n### 参数约束\n1、\t在PHP5.3以后才支持参数约束\n2、\t只能约束对象，不能约束基本数据类型\n\n```\n<?php \nclass Student{\n}\nfunction show(Student $obj){\n\tvar_dump($obj);\n}\nshow(10);\n\n?>\nCatchable fatal error: Argument 1 passed to show() must be an instance of Student, integer given, called in /Users/uiste/www/test.php on line 95 and defined in /Users/uiste/www/test.php on line 92\n只能传递Student类型的数据\n\n<?php \nclass Student{\n}\nfunction show(Student $obj){\n\tvar_dump($obj);\n}\nshow(new Student);\n ?>\nobject(Student)#1 (0) { }\n```\n\n### 父类可以指向子类的引用\n父类对象可以保存子类的地址\n\n面向对象的三大特性：封装、继承、多态\n\n### 类的自动加载\n1、\t一个文件中只能有一个类\n2、\t类文件名以.class.php结尾\n3、\t类名和文件名同名\n\nGoods.class.php\n```\n<?php\n/***商品类*/\nabstract class Goods {\n\tprotected $name;\n\t//设置商品名称\n\tpublic function setName($name) {\n\t\t$this->name=$name;\n\t}\n\t//获取商品名称\n\tabstract function getName();\n}\n?>\n```\n\nBooks.class.php\n```\n<?php\nclass Books extends Goods {\n\tpublic function getName() {\n\t\techo \"《{$this->name}》\";\n\t}\n}\n?>\n```\n\nPhone.class.php\n```\n<?php\nclass Phone extends Goods {\n\tpublic function getName() {\n\t\techo $this->name;\n\t}\n}\n?>\n```\n\nloadClass.php\n```\n<?php\nheader('content-type:text/html;charset=utf-8');\nrequire './Goods.class.php';\nrequire './Books.class.php';\nrequire './Phone.class.php';\n$book=new 45Books();\n$phone=new Phone();\n$book->setName('PHP高级');\n$book->getName();\n?>\n```\n\n手动引入类比较麻烦，不健壮。最好能实现需要什么类就自动加载什么类。\n\n####　``__autoload($class_name)``\n当页面执行的时候，PHP核心程序（Zend Engine）判断当前需要哪个类，如果没有找到该类，就自动的调用``__autoload()``函数，并且将缺少的类名作为参数传递到``__autoload()``函数中。\n\n#### 通过缺少类名来加载需要的类\n\n```\n<?php \n$book = new Books();\n$book->setname(\"PHP高级\");\n$book->getname();\n\nfunction __autoload($class_name){\n\trequire \"./$class_name.class.php\";\n}\n ?>\n```\n#### 将类映射到数组中\n有的时候类存放的位置不规则，将不规则的地址映射到类名，形成一个数组再加载。\n\n```\n<?php \nfunction __autoload($class_name){\n\t$map = array(\n\t\t'Goods' => './aa/Goods.class.php',\n\t\t'Books' => './bb/Books.class.php',\n\t\t'Phone' => './cc/Phone.class.php'\n\t);\n\tif (isset($map[$class_name])) {\n\t\trequire $map[$class_name];\n\t}\n}\n ?>\n```\n\n#### 利用命名规则加载类\n同一类别的类放在同一个文件夹下，这样便于分组管理\n\n将所有的类文件放到Lib文件夹下。将类名名字改为：类名+文件夹名\n\n```\n1.常规引入方法\n require 'Goods.class.php';\n require 'Book.class.php';\n2.通过调用autoload自动加载类名，加载缺少类名的类\n function __autoload($class_name){\n \trequire \"./{$class_name}.class.php\";\n }\n 3.将类名与地址映射到关联数组中去加载\n function __autoload($class_name){\n \t$arr = array(\n \t\t'Book'=>'Book.class.php',\n \t\t'Phone'=>'Phone.class.php',\n \t\t'Goods'=>'Goods.class.php'\n \t);\n \tif (isset($arr[$class_name]))\n \t\trequire \"./{$arr[$class_name]}\";\n }\n 4.利用命名规则加载类一个项目中会有很多类，我们会将类分类存放，类的命令规则：在Lib文件夹下的类以Lib结尾，在Model文件夹的类以Model结尾。\n function __autoload($class_name){\n \tif (substr($class_name,-3)=='Lib')\n \t\trequire \"./Lib/{$class_name}.class.php\";\n \telseif (substr($class_name,-3)=='Control')\n \t\trequire \"./Control/{$class_name}.class.php\";\n \telseif (substr($class_name,-3)=='Model')\n \t\trequire \"./Model/{$class_name}.class.php\";\n\n}\n```\n\n>Final 和 abstract 不能修饰接口中的方法\n参数约束只能约束对象\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150916-1.md","raw":"layout: post\ntitle: PHP面向对象2\ndate: 2015-09-16 21:40:36\ntags:\n- PHP面向对象\n---\n### 多态\n多态就是多种形态\n多态分为：方法重载和方法重写，但是PHP不支持方法重载。\n\n#### 方法重写\n子类方法和父类的方法必须同名\n\n```php\n<?php\nclass animal{\n\tpublic $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\n$dog->jiao();\n\n  ?>\nvar_dump($obj);\nobject(dog)#1 (1) { [\"name\"]=> string(3) \"狗\" }\n```\n\n>1.子类重写的方法不能比父类的方法更加严格(封装)\npublic、protected、private\n2.子类可以拥有和父类不同个数的参数，[严格标准是不允许的]\n\n#### 私有属性的继承和重写\n私有属性可以被继承但不能被重写\n\n```\n<?php \nclass animal{\n\tprivate $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tprivate $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\nvar_dump($dog);\n?>\nobject(dog)#1 (2) { [\"name\":\"dog\":private]=> string(3) \"狗\" [\"name\":\"animal\":private]=> string(6) \"动物\" }\n```\n\n### 访问修饰符\nstatic\t\t静态的\nfinal\t\t最终的\nabstract\t抽象的\n\n#### static【静态的】\n1、\tstatic修饰属性叫静态属性，static修饰方法叫静态方法\n2、\t当类加载的时候就分配内存空间，在内存中就一份。不用实例化可以直接访问。为所有的对象共享。\n3、\t销毁对象不会销毁静态成员，因为静态成员属于类，而不属于对象。\n4、\t当页面执行完毕的时候才销毁静态成员。\n5、\t父类的static属性子类中可以继承并重写，但不能重新定义同名普通属性。\n6、\t静态方法中不能直接访问普通属性\n7、\t被self调用的普通方法会转成静态方法，【严格标准不允许】\n\n```\n<?php \nclass Person{\n\tpublic static $name = '人类';\n\tpublic static function show(){\n\t\t// echo '这个星球的主宰者是：'.$this->name;(报错：Fatal error: Using $this when not in object context in)\n\t\techo '这个星球的主宰者是：'.Person::$name;//(正确)\n\t}\n}\n\necho Person::$name,\"<br>\";\nPerson::show();\n ?>\n```\n\n**静态成员可以被继承**\n\n```\n<?php \nclass Person{\n\tpublic static $name = '人类';\n\tpublic static function show(){\n\t\t// echo '这个星球的主宰者是：'.$this->name;(报错：Fatal error: Using $this when not in object context in)\n\t\techo '这个星球的主宰者是：'.Person::$name;//(正确)\n\t}\n}\n\nclass Student extends Person{\n\n}\necho Person::$name,\"<br>\";\nPerson::show();\necho \"<br>\";\necho Student::$name,'<br>';\nStudent::show();\necho '<br>';\n ?>\n```\n\n>调用静态成员：类名::静态成员\n\n>self 表示当前类名\n非静态方法被self调用，自动将非静态方法转成静态方法【严格标准是不允许的】\n\n```\n<?php \nclass Teacher{\n\tpublic function show(){\n\t\techo \"stay hungry\";\n\t}\n\tpublic function test(){\n\t\t$obj = new self();\n\t\t$obj->show();\n\t}\n}\n\nTeacher::test();\n\n ?>\n```\n\n#### 确定当前对象\n1、$this表示当前对象的引用\n2、self表示当前方法所在的类的类名\n3、static表示当前对象所属的类的类名【静态延时绑定】\n\t最后一次执行类的属性\n\n```\n<?php\nclass Person {\n\tpublic static $type='人类';\n\tpublic function showPerson() {\n\t\t//var_dump($this);\t//object(Student)#1 (0) { }\n\t\t//echo self::$type;\t//人类\n\t\techo static::$type;\t//学生    静态延时绑定,表示Student\n\t}\n}\nclass Student extends Person {\n\tpublic static $type='学生';\n\tpublic function showStu() {\n\t\t//var_dump($this);\t//object(Student)#1 (0) { }\n\t\t//echo self::$type;\t//学生\n\t\techo static::$type;\t//学生\n\t}\n}\n//测试\nheader('content-type:text/html;charset=utf-8');\n$obj=new Student;\n$obj->showPerson();\n$obj->showStu();\n\n```\n\n#### final[最终的]\n1、\tfinal修饰的类不能被继承\n2、\tfinal修饰的方法不能被重写\n3、\tfinal不能修饰属性\n\n```\n<?php \nfinal class animal{\n\tpublic $name='动物';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\necho $dog->name,\"<br>\";\n$dog->jiao();\n ?>\n\nFatal error: Class dog may not inherit from final class (animal) in\n```\n\n```\n<?php \nclass animal{\n\tpublic $name='动物';\n\tfinal public function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\nclass dog extends animal{\n\tpublic $name='狗';\n\tpublic function jiao(){\n\t\techo $this->name.\"会叫<br>\";\n\t}\n}\n\n$dog = new dog();\necho $dog->name,\"<br>\";\n$dog->jiao();\n ?>\nFatal error: Cannot override final method animal::jiao() in \n```\n\n#### abstract[抽象的]\n1、\tabstract修饰的类成为抽象类，abstract修饰的方法叫抽象方法\n2、\t抽象方法：只有方法的声明，没有方法的实现\n3、\t抽象类：类中只要有一个方法是抽象方法，这个类就是抽象类。\n4、\t抽象类不可以被实例化，必须在子类中重新实现。\n\n>抽象类的作用：定义方法的命名规范\n\n### 接口（interface）\n1、\t如果一个类中所有的方法都是抽象方法，这个类就声明成接口。\n2、\t接口是一个特殊的抽象类\n3、\t接口中的方法只能是public的，默认是public的\n4、\t接口中的方法不能用abstract、final来修饰。\n5、\t定义过程用`interface`实现接口用的`implements`关键字\n\n>类不能多重继承，但是接口可以多重实现\n\n#### 继承类的同时实现接口\n必须先继承类，再实现接口\n\n`class Myclass extends Class implements IPict1,IPict2`\n\n### 类常量【const】\n类中可以放属性、方法、常量\n调用类常量    类名::常量名\n类常量属于类自身，不属于对象实例，不能通过对象实例访问\n子类可以重写父类中的常量，可以通过(parent::)来调用父类中的常量\n\n\n```\n<?php \nclass Student {\n\tconst type='学生';\t//类常量\n\tpublic function show() {\n\t\techo self::type,'<br>';\n\t}\n}\n//测试\n$stu=new Student;\n$stu->show();\t//学生\n ?>\n```\n\n>类常量也可以放在接口中\n\n```\n<?php \ninterface Person{\n\tconst type='人类';\n}\necho Person::type;\n ?>\n```\n\n### 参数约束\n1、\t在PHP5.3以后才支持参数约束\n2、\t只能约束对象，不能约束基本数据类型\n\n```\n<?php \nclass Student{\n}\nfunction show(Student $obj){\n\tvar_dump($obj);\n}\nshow(10);\n\n?>\nCatchable fatal error: Argument 1 passed to show() must be an instance of Student, integer given, called in /Users/uiste/www/test.php on line 95 and defined in /Users/uiste/www/test.php on line 92\n只能传递Student类型的数据\n\n<?php \nclass Student{\n}\nfunction show(Student $obj){\n\tvar_dump($obj);\n}\nshow(new Student);\n ?>\nobject(Student)#1 (0) { }\n```\n\n### 父类可以指向子类的引用\n父类对象可以保存子类的地址\n\n面向对象的三大特性：封装、继承、多态\n\n### 类的自动加载\n1、\t一个文件中只能有一个类\n2、\t类文件名以.class.php结尾\n3、\t类名和文件名同名\n\nGoods.class.php\n```\n<?php\n/***商品类*/\nabstract class Goods {\n\tprotected $name;\n\t//设置商品名称\n\tpublic function setName($name) {\n\t\t$this->name=$name;\n\t}\n\t//获取商品名称\n\tabstract function getName();\n}\n?>\n```\n\nBooks.class.php\n```\n<?php\nclass Books extends Goods {\n\tpublic function getName() {\n\t\techo \"《{$this->name}》\";\n\t}\n}\n?>\n```\n\nPhone.class.php\n```\n<?php\nclass Phone extends Goods {\n\tpublic function getName() {\n\t\techo $this->name;\n\t}\n}\n?>\n```\n\nloadClass.php\n```\n<?php\nheader('content-type:text/html;charset=utf-8');\nrequire './Goods.class.php';\nrequire './Books.class.php';\nrequire './Phone.class.php';\n$book=new 45Books();\n$phone=new Phone();\n$book->setName('PHP高级');\n$book->getName();\n?>\n```\n\n手动引入类比较麻烦，不健壮。最好能实现需要什么类就自动加载什么类。\n\n####　``__autoload($class_name)``\n当页面执行的时候，PHP核心程序（Zend Engine）判断当前需要哪个类，如果没有找到该类，就自动的调用``__autoload()``函数，并且将缺少的类名作为参数传递到``__autoload()``函数中。\n\n#### 通过缺少类名来加载需要的类\n\n```\n<?php \n$book = new Books();\n$book->setname(\"PHP高级\");\n$book->getname();\n\nfunction __autoload($class_name){\n\trequire \"./$class_name.class.php\";\n}\n ?>\n```\n#### 将类映射到数组中\n有的时候类存放的位置不规则，将不规则的地址映射到类名，形成一个数组再加载。\n\n```\n<?php \nfunction __autoload($class_name){\n\t$map = array(\n\t\t'Goods' => './aa/Goods.class.php',\n\t\t'Books' => './bb/Books.class.php',\n\t\t'Phone' => './cc/Phone.class.php'\n\t);\n\tif (isset($map[$class_name])) {\n\t\trequire $map[$class_name];\n\t}\n}\n ?>\n```\n\n#### 利用命名规则加载类\n同一类别的类放在同一个文件夹下，这样便于分组管理\n\n将所有的类文件放到Lib文件夹下。将类名名字改为：类名+文件夹名\n\n```\n1.常规引入方法\n require 'Goods.class.php';\n require 'Book.class.php';\n2.通过调用autoload自动加载类名，加载缺少类名的类\n function __autoload($class_name){\n \trequire \"./{$class_name}.class.php\";\n }\n 3.将类名与地址映射到关联数组中去加载\n function __autoload($class_name){\n \t$arr = array(\n \t\t'Book'=>'Book.class.php',\n \t\t'Phone'=>'Phone.class.php',\n \t\t'Goods'=>'Goods.class.php'\n \t);\n \tif (isset($arr[$class_name]))\n \t\trequire \"./{$arr[$class_name]}\";\n }\n 4.利用命名规则加载类一个项目中会有很多类，我们会将类分类存放，类的命令规则：在Lib文件夹下的类以Lib结尾，在Model文件夹的类以Model结尾。\n function __autoload($class_name){\n \tif (substr($class_name,-3)=='Lib')\n \t\trequire \"./Lib/{$class_name}.class.php\";\n \telseif (substr($class_name,-3)=='Control')\n \t\trequire \"./Control/{$class_name}.class.php\";\n \telseif (substr($class_name,-3)=='Model')\n \t\trequire \"./Model/{$class_name}.class.php\";\n\n}\n```\n\n>Final 和 abstract 不能修饰接口中的方法\n参数约束只能约束对象\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-09T15:32:20.394Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp6009jpgwin8txgj27"},{"layout":"post","title":"PHP面向对象3","date":"2015-09-17T15:41:27.000Z","_content":"### clone与__clone()\n\n```\n<?php\nclass Person{\n\tprotected $name;\n\tpublic function __construnt($name){\n\t\t$this->name=$name;\n\t}\n\tpublic function show(){\n\t\techo $this->name;\n\t}\n\tpublic function __clone(){\n\t\techo \"对象被克隆了<br>\";\n\t}\n}\n\n$per1 = new Person('胡浩');\nvar_dump($per1);\necho '<br>';\n$per2 = $per1;\nvar_dump($per2);\necho '<br>';\n$per3 = clone $per1;\nvar_dump($per3);\n?>\nobject(Person)#1 (1) { [\"name\":protected]=> NULL } \nobject(Person)#1 (1) { [\"name\":protected]=> NULL } \n对象被克隆了\nobject(Person)#2 (1) { [\"name\":protected]=> NULL }\n```\n\n>创建新对象的方法有两个：\n1、\t实例化\n2、\tclone\n当执行clone命令的时候，会自动调用__clone()函数\n\n### 单例模式\n一个类只能有一个对象\n\n```\n<?php\n//三私一公\nclass Student{\n\t// 私有的静态属性保存当前实例\n\tprivate static $instance;\n\t// 私有的构造函数阻止在类的外部实例化\n\tprivate function __construnct(){}\n\t// 私有的__clone() 用来阻止在类外部clone对象\n\tprivate function __clone(){}\n\t// 公有的静态方法用来获取实例\n\tpublic static function getInstance(){\n\t\tif (!self::$instance instanceof self) {\n\t\t\tself::$instance = new self;\n\t\t}\n\t\treturn self::$instance;\n\t}\n}\n\n//单例模式\n$stu1 = Student::getInstance();\n$stu2 = Student::getInstance();\n\nvar_dump($stu1);\necho \"<br>\";\nvar_dump($stu2);\n?>\nobject(Student)#1 (0) { } \nobject(Student)#1 (0) { }\n```\n\n>instanceof用来判断变量是否属于某种数据类型\n\n#### 项目层面的单例模式（一个项目中有一组单例模式）\n\n```\n<?php\nclass DB1 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n \t\t\tself::$instance=new self;\n \t\treturn self::$instance;\n \t}\n }\nclass DB2 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n\t\t\tself::$instance=new self;\n\t\treturn self::$instance;\n\t}\n}\nclass DB3 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n\t\t\tself::$instance=new self;\n\t\treturn self::$instance;\n\t}\n}\n//项目层面的单例模式\nfunction getInstance($db_name) {\n\tstatic $array=array();\n\tif(!isset($array[$db_name]))\n\t\t$array[$db_name]=$db_name::getInstance($db_name);\n\treturn $array[$db_name];\n}\n//测试\n$db1=getInstance('DB1');\n$db2=DB1::getInstance();\nvar_dump($db1,$db2);\n?>\n```\n\n>object(DB1)#1 (0) { } object(DB1)#1 (0) { }\n\n### 工厂模式\n传递不同的参数获取不同的对象\n\n```\n<?php \nclass ProductA {\n\tpublic function getProduct() {\n\t\techo '这是A商品<br>';\n\t}\n}\nclass ProductB{\n\tpublic function getProduct() {\n\t\techo '这是B商品<br>';\n\t}\n}\n//工厂模式\nclass ProductFactory {\n\tpublic static function create($num) {\n\t\tswitch($num) {\n\t\t\tcase 1:\n\t\t\t\treturn new ProductA();\n\t\t\tcase 2:\n\t\t\t\treturn new ProductB;\n\t\t}\n\t\treturn null;\n\t}\n}\n$objA=ProductFactory::create(1);\n$objB=ProductFactory::create(2);\n$objA->getProduct();\n$objB->getProduct();\n ?>\n这是A商品\n这是B商品\n```\n\n### 策略模式\n传递不同的参数，调用不同的方法\n\n```\n<?php \n//策略模式\ninterface IStrategy {\n\tfunction ontheway();\n}\n\nclass Walk implements IStrategy {\n\tpublic function ontheway() {\n\t\techo '走着去<br>';\n\t}\n}\nclass Bike implements IStrategy{\n\tpublic function ontheway() {\n\t\techo '骑车去<br>';\n\t}\n}\nclass Bus implements IStrategy {\n\tpublic function ontheway() {\n\t\techo '坐巴士去<br>';\n\t}\n}\n//传递不同的参数，调用不同方法\nclass Strategy {\n\tpublic function getWay(IStrategy $obj) {\n\t\t$obj->ontheway();\n\t}\n}\n$obj=new Strategy();\n$obj->getWay(new Walk);\n$obj->getWay(new Bike);\n$obj->getWay(new Bus);\n ?>\n走着去\n骑车去\n坐巴士去\n```\n\n### 魔术方法\n#### __tostring()\n当把对象当成字符串调用时自动执行\n\n```\n<?php \nclass Student{\n\t//当把对象当成字符串调用时自动执行\n\tpublic function __toString(){\n\t\treturn \"这是一个学生对象\";\n\t}\n}\n\n$stu=new Student;\necho $stu;\n ?>\n这是一个学生对象\n```\n\n#### __invoke()\n当把对象当成函数调用的时候自动执行\n\n```\n<?php \nclass Student{\n\t//当把对象当成函数调用的时候自动执行\n\tpublic function __invoke($args){\n\t\techo \"这是一个学生对象，你传递的参数是：\".$args;\n\t}\n}\n$stu = new Student();\n$stu('tom')\n ?>\n这是一个学生对象，你传递的参数是：tom\n```\n\n#### `__set()、__get()`\n__set()：当给无法访问的属性*赋值*的时候自动调用\n__get()：当*获取*无法访问的属性值的时候自动调用\n\n```\n<?php \nclass Student{\n\tprivate $name;\n\t// 当给无法访问的属性赋值时自动调用\n\tpublic function __set($key,$value){\n\t\t$this->$key=$value;\n\t}\n\t//当获取无法访问的属性值的时候自动调用\n\tpublic function __get($key){\n\t\treturn $this->$key;\n\t}\n}\n\n$stu = new Student();\n$stu->name='tom';\necho $stu->name;\n ?>\ntom\n```\n\n#### `__unset()、__isset()`\n__unset():当销毁无法访问的属性的时候自动调用\n__isset():当判断无法访问的属性是否存在时自动调用\n\n```\n<?php \nclass Student{\n\tprivate $name;\n\tprivate $sex;\n\tprivate $array=array('name','sex');\n\t// 当销毁无法访问的属性的时候自动调用\n\tpublic function __unset($key){\n\t\tunset($this->$key);\n\t}\n\t// 当判断无法访问的属性时自动调用\n\tpublic function __isset($key){\n\t\treturn in_array($key,$this->array);\n\t}\n}\n\n$stu=new Student();\necho isset($stu->name)?'yes':'no';\necho \"<br>\";\necho isset($stu->sss)?'yes':'no';\n ?>\nyes\nno\n```\n\n#### `__call()、__callstatic()`\n__call():当调用无法访问的普通方法时候自动调用\n__callstatic():当调用无法访问的静态方法时候自动调用\n\n```\n<?php \nclass Student{\n\t/**\n\t * 当调用无法访问的方法时自动调用\n\t * @param $fn_name string 传递方法名\n\t * @param $fn_args array 传递参数数组\n\t */\n\tpublic function __call($fn_name,$fn_args){\n\t\techo \"不能调用\".$fn_name.\"方法<br>\";\n\t\tvar_dump($fn_args);\n\t\t//echo implode(',',$fn_args);\n\t}\n\t// 当输出静态方法调用一个无法访问的方式时自动调用\n\tpublic static function __callStatic($fn_name,$fn_args){\n\t\techo \"<br>不能调用静态\".$fn_name.'方法<br>';\n\t}\n}\n\n$stu = new Student();\n$stu->show(10,20);\nStudent::test();\n ?>\n不能调用show方法\narray(2) { [0]=> int(10) [1]=> int(20) } \n不能调用静态test方法\n```\n\n### Iterator（迭代器）\nIterator是迭代器，是PHP内置的接口，用来遍历类中的某个属性。迭代器中有5个抽象方法\n1. Iterator::current \t-返回当前元素\n2. Iterator::key\t\t-返回当前元素的键\n3. Iterator::next\t\t-向前移动到下一个元素\n4. Iterator::rewind\t\t-返回到迭代器的第一个元素\n5. Iterator::valid\t\t-检查当前位置是否有效\n\n```\n<?php \n//学生类\nclass Student {\nprivate $name;\npublic function __construct($name) {\n\t$this->name=$name;\n}\npublic function __get($key) {\n\treturn $this->$key;\n\t}\n}\n//班级类\nclass MyClass implements Iterator {\n\tprivate $stu_list=array();\t//学生数组\n\tpublic function addStu(Student $stu) {\n\t\t$this->stu_list[]=$stu;\n\t}\n\t//指针复位到数组的第一个元素\n\tpublic function rewind() {\n\t\treset($this->stu_list);\n\t}\n\t//检查当前指针的位置是否合法\n\tpublic function valid() {\n\t\treturn key($this->stu_list)!==null;\n\t}\n\t//返回当前值\n\tpublic function current() {\n\t\treturn current($this->stu_list);\n\t}\n\t//返回当前键\n\tpublic function key() {\n\t\treturn key($this->stu_list);\n\t}\n\t//指针下移一位\n\tpublic function next() {\n\t\tnext($this->stu_list);\n\t}\n}\n//创建班级\n$class=new MyClass;\n$class->addStu(new Student('tom'));\n$class->addStu(new Student('berry'));\n$class->addStu(new Student('Ketty'));\n//遍历班级，就是遍历学生数组\nforeach($class as $stu) {\n\techo $stu->name,'<br>';\n}\n ?>\ntom\nberry\nKetty\n```\n\n### 数组的序列化（serialize）和反序列化（unserialize）\n### 对象的序列化和反序列化\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150917-1.md","raw":"layout: post\ntitle: PHP面向对象3\ndate: 2015-09-17 23:41:27\ntags:\n- PHP面向对象\n---\n### clone与__clone()\n\n```\n<?php\nclass Person{\n\tprotected $name;\n\tpublic function __construnt($name){\n\t\t$this->name=$name;\n\t}\n\tpublic function show(){\n\t\techo $this->name;\n\t}\n\tpublic function __clone(){\n\t\techo \"对象被克隆了<br>\";\n\t}\n}\n\n$per1 = new Person('胡浩');\nvar_dump($per1);\necho '<br>';\n$per2 = $per1;\nvar_dump($per2);\necho '<br>';\n$per3 = clone $per1;\nvar_dump($per3);\n?>\nobject(Person)#1 (1) { [\"name\":protected]=> NULL } \nobject(Person)#1 (1) { [\"name\":protected]=> NULL } \n对象被克隆了\nobject(Person)#2 (1) { [\"name\":protected]=> NULL }\n```\n\n>创建新对象的方法有两个：\n1、\t实例化\n2、\tclone\n当执行clone命令的时候，会自动调用__clone()函数\n\n### 单例模式\n一个类只能有一个对象\n\n```\n<?php\n//三私一公\nclass Student{\n\t// 私有的静态属性保存当前实例\n\tprivate static $instance;\n\t// 私有的构造函数阻止在类的外部实例化\n\tprivate function __construnct(){}\n\t// 私有的__clone() 用来阻止在类外部clone对象\n\tprivate function __clone(){}\n\t// 公有的静态方法用来获取实例\n\tpublic static function getInstance(){\n\t\tif (!self::$instance instanceof self) {\n\t\t\tself::$instance = new self;\n\t\t}\n\t\treturn self::$instance;\n\t}\n}\n\n//单例模式\n$stu1 = Student::getInstance();\n$stu2 = Student::getInstance();\n\nvar_dump($stu1);\necho \"<br>\";\nvar_dump($stu2);\n?>\nobject(Student)#1 (0) { } \nobject(Student)#1 (0) { }\n```\n\n>instanceof用来判断变量是否属于某种数据类型\n\n#### 项目层面的单例模式（一个项目中有一组单例模式）\n\n```\n<?php\nclass DB1 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n \t\t\tself::$instance=new self;\n \t\treturn self::$instance;\n \t}\n }\nclass DB2 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n\t\t\tself::$instance=new self;\n\t\treturn self::$instance;\n\t}\n}\nclass DB3 {\n\tprivate static $instance;\n\tprivate function __construct() {\n\t}\n\tprivate function __clone() {\n\t}\n\tpublic static function getInstance() {\n\t\tif(!self::$instance instanceof self)\t//实例的数据类型不是Student类型的\n\t\t\tself::$instance=new self;\n\t\treturn self::$instance;\n\t}\n}\n//项目层面的单例模式\nfunction getInstance($db_name) {\n\tstatic $array=array();\n\tif(!isset($array[$db_name]))\n\t\t$array[$db_name]=$db_name::getInstance($db_name);\n\treturn $array[$db_name];\n}\n//测试\n$db1=getInstance('DB1');\n$db2=DB1::getInstance();\nvar_dump($db1,$db2);\n?>\n```\n\n>object(DB1)#1 (0) { } object(DB1)#1 (0) { }\n\n### 工厂模式\n传递不同的参数获取不同的对象\n\n```\n<?php \nclass ProductA {\n\tpublic function getProduct() {\n\t\techo '这是A商品<br>';\n\t}\n}\nclass ProductB{\n\tpublic function getProduct() {\n\t\techo '这是B商品<br>';\n\t}\n}\n//工厂模式\nclass ProductFactory {\n\tpublic static function create($num) {\n\t\tswitch($num) {\n\t\t\tcase 1:\n\t\t\t\treturn new ProductA();\n\t\t\tcase 2:\n\t\t\t\treturn new ProductB;\n\t\t}\n\t\treturn null;\n\t}\n}\n$objA=ProductFactory::create(1);\n$objB=ProductFactory::create(2);\n$objA->getProduct();\n$objB->getProduct();\n ?>\n这是A商品\n这是B商品\n```\n\n### 策略模式\n传递不同的参数，调用不同的方法\n\n```\n<?php \n//策略模式\ninterface IStrategy {\n\tfunction ontheway();\n}\n\nclass Walk implements IStrategy {\n\tpublic function ontheway() {\n\t\techo '走着去<br>';\n\t}\n}\nclass Bike implements IStrategy{\n\tpublic function ontheway() {\n\t\techo '骑车去<br>';\n\t}\n}\nclass Bus implements IStrategy {\n\tpublic function ontheway() {\n\t\techo '坐巴士去<br>';\n\t}\n}\n//传递不同的参数，调用不同方法\nclass Strategy {\n\tpublic function getWay(IStrategy $obj) {\n\t\t$obj->ontheway();\n\t}\n}\n$obj=new Strategy();\n$obj->getWay(new Walk);\n$obj->getWay(new Bike);\n$obj->getWay(new Bus);\n ?>\n走着去\n骑车去\n坐巴士去\n```\n\n### 魔术方法\n#### __tostring()\n当把对象当成字符串调用时自动执行\n\n```\n<?php \nclass Student{\n\t//当把对象当成字符串调用时自动执行\n\tpublic function __toString(){\n\t\treturn \"这是一个学生对象\";\n\t}\n}\n\n$stu=new Student;\necho $stu;\n ?>\n这是一个学生对象\n```\n\n#### __invoke()\n当把对象当成函数调用的时候自动执行\n\n```\n<?php \nclass Student{\n\t//当把对象当成函数调用的时候自动执行\n\tpublic function __invoke($args){\n\t\techo \"这是一个学生对象，你传递的参数是：\".$args;\n\t}\n}\n$stu = new Student();\n$stu('tom')\n ?>\n这是一个学生对象，你传递的参数是：tom\n```\n\n#### `__set()、__get()`\n__set()：当给无法访问的属性*赋值*的时候自动调用\n__get()：当*获取*无法访问的属性值的时候自动调用\n\n```\n<?php \nclass Student{\n\tprivate $name;\n\t// 当给无法访问的属性赋值时自动调用\n\tpublic function __set($key,$value){\n\t\t$this->$key=$value;\n\t}\n\t//当获取无法访问的属性值的时候自动调用\n\tpublic function __get($key){\n\t\treturn $this->$key;\n\t}\n}\n\n$stu = new Student();\n$stu->name='tom';\necho $stu->name;\n ?>\ntom\n```\n\n#### `__unset()、__isset()`\n__unset():当销毁无法访问的属性的时候自动调用\n__isset():当判断无法访问的属性是否存在时自动调用\n\n```\n<?php \nclass Student{\n\tprivate $name;\n\tprivate $sex;\n\tprivate $array=array('name','sex');\n\t// 当销毁无法访问的属性的时候自动调用\n\tpublic function __unset($key){\n\t\tunset($this->$key);\n\t}\n\t// 当判断无法访问的属性时自动调用\n\tpublic function __isset($key){\n\t\treturn in_array($key,$this->array);\n\t}\n}\n\n$stu=new Student();\necho isset($stu->name)?'yes':'no';\necho \"<br>\";\necho isset($stu->sss)?'yes':'no';\n ?>\nyes\nno\n```\n\n#### `__call()、__callstatic()`\n__call():当调用无法访问的普通方法时候自动调用\n__callstatic():当调用无法访问的静态方法时候自动调用\n\n```\n<?php \nclass Student{\n\t/**\n\t * 当调用无法访问的方法时自动调用\n\t * @param $fn_name string 传递方法名\n\t * @param $fn_args array 传递参数数组\n\t */\n\tpublic function __call($fn_name,$fn_args){\n\t\techo \"不能调用\".$fn_name.\"方法<br>\";\n\t\tvar_dump($fn_args);\n\t\t//echo implode(',',$fn_args);\n\t}\n\t// 当输出静态方法调用一个无法访问的方式时自动调用\n\tpublic static function __callStatic($fn_name,$fn_args){\n\t\techo \"<br>不能调用静态\".$fn_name.'方法<br>';\n\t}\n}\n\n$stu = new Student();\n$stu->show(10,20);\nStudent::test();\n ?>\n不能调用show方法\narray(2) { [0]=> int(10) [1]=> int(20) } \n不能调用静态test方法\n```\n\n### Iterator（迭代器）\nIterator是迭代器，是PHP内置的接口，用来遍历类中的某个属性。迭代器中有5个抽象方法\n1. Iterator::current \t-返回当前元素\n2. Iterator::key\t\t-返回当前元素的键\n3. Iterator::next\t\t-向前移动到下一个元素\n4. Iterator::rewind\t\t-返回到迭代器的第一个元素\n5. Iterator::valid\t\t-检查当前位置是否有效\n\n```\n<?php \n//学生类\nclass Student {\nprivate $name;\npublic function __construct($name) {\n\t$this->name=$name;\n}\npublic function __get($key) {\n\treturn $this->$key;\n\t}\n}\n//班级类\nclass MyClass implements Iterator {\n\tprivate $stu_list=array();\t//学生数组\n\tpublic function addStu(Student $stu) {\n\t\t$this->stu_list[]=$stu;\n\t}\n\t//指针复位到数组的第一个元素\n\tpublic function rewind() {\n\t\treset($this->stu_list);\n\t}\n\t//检查当前指针的位置是否合法\n\tpublic function valid() {\n\t\treturn key($this->stu_list)!==null;\n\t}\n\t//返回当前值\n\tpublic function current() {\n\t\treturn current($this->stu_list);\n\t}\n\t//返回当前键\n\tpublic function key() {\n\t\treturn key($this->stu_list);\n\t}\n\t//指针下移一位\n\tpublic function next() {\n\t\tnext($this->stu_list);\n\t}\n}\n//创建班级\n$class=new MyClass;\n$class->addStu(new Student('tom'));\n$class->addStu(new Student('berry'));\n$class->addStu(new Student('Ketty'));\n//遍历班级，就是遍历学生数组\nforeach($class as $stu) {\n\techo $stu->name,'<br>';\n}\n ?>\ntom\nberry\nKetty\n```\n\n### 数组的序列化（serialize）和反序列化（unserialize）\n### 对象的序列化和反序列化\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-09T15:32:14.452Z","comments":1,"photos":[],"link":"","_id":"ck39ugjp7009mpgwibwkyf1yq"},{"layout":"post","title":"初识Linux","date":"2015-09-24T06:06:41.000Z","_content":"## Linux目录结构\nbin 和 sbin  ：存放命令的\n/dev        ：存放外设文件\n/etc        ：存放配置文件\n/home       ：普通用户的家目录(主目录)\n/root       ：超级管理员的家目录\n/mnt        ：挂载点\n/usr        ：安装程序\n/var        ：相当于D、E盘，用来存储一些文件站点\n## Linux常用命令\npasswd\t更改密码\nls    、ls -al *.png\t查看目录中的内容\ncd\t进入目录\nexit\t退出当前工作环境\npwd\t获取当前工作目录\nsu或su -\t获取管理员权限\nsu - uiste\t获取普通用户的权限\nrunlevel\t获取运行级别\ninit N\t改变运行等级\nstartx 和init5\t启动图形化界面\nclear\t清空终端\n## Linux命令格式\n语法：名利 [-选项] 参数\nLinux 命令是区分大小写的\n## 查看文件的详细信息(ls -al)\n-a  显示所有文件\n-l  显示详细信息\n![](media/14746901645222/14746929569559.jpg)\npwd\t显示当前目录\nls\t显示当前目录的文件\nls -l\t列出文件的详细信息\nls -a\t列出所有文件，包括隐藏文件\nls -al\t后面是查询选择，查询选项是没有先后顺序的\n## 常用指令\ndir             显示当前目录的所有文件\nwho am  i       显示登录的用户名\nwhoami          显示当前使用谁的权限\nexit  、q        退出权限系统\nhalt            关闭计算机\npower off       关闭计算机\nreboot          重启计算机\nman             查看帮助文档 manual\n--help、-help    调用命令的注释帮助\n## 显示目录所占磁盘容量(du)\ndu file/dir 显示文件或文件夹的容量，单位是KB，如果是文件夹显示文件夹中每个文件额大小和总大小\ndu -s dir 显示文件夹的总大小，不显示文件夹中文件大小\ndu -h file/dir 用友好的方式显示容量\n\n## 改变工作目录(cd)\n语法：cd 目录\n\n| cd dir | 进入dir文件夹下 |\n| --- | --- |\n| cd .. | ..表示上一级 |\n| cd ../dir | 进入上一级目录中的dir文件夹下 |\n| cd /dir | 通过绝对路径进入到dir文件夹下 |\n| cd ~ | 进入个人主目录 |\n| cd  | cd后面不跟参数就进入到个人主目录，和cd ~一样 |\n\n## 目录操作\n\n### 创建目录(mkdir)\n\n| mkdir dir1 | 在当前目录下创建dir1文件夹 |\n| --- | --- |\n| mkdir dir1/dir2 | 在dir1目录下创建dir2目录（dir1必须存在) |\n| mkdir -p dir1/dir2 | 如果没有dir1，先创建dir1再创建dir2\\. -p 可以写在后面 |\n| mk dir1 dir2 . | 同时创建dir1、dir2、dir3... |\n\n### 删除目录(rmdir)\n\n| rmdir dir | 删除目录，如果目标不为空这报错，不能删除 |\n| --- | --- |\n| rmdir dir1 dir2 | 同时删除多个目录 |\n\n### 既能删除文件也能删除目录(rm)\n>-r recursieve 递归\n>-f force 强制\n\n| rm file | 删除文件 |\n| --- | --- |\n| rm -rf file/dir | 删除文件和文件夹 |\n\n## 复制文件和目录(cp)\n语法：cp [-r/-R] 源地址 目标地址\n\n| cp file dir | 将file文件拷贝到dir文件夹下 |\n| --- | --- |\n| cp file1 dir/file2 | 将file1拷贝到dir文件夹下并改名为file2 |\n| cp file1 file2 | 将file1复制一份，重命名为file2 |\n| cp -R/-r dir1 dir2 | 将dir1文件夹递归复制到dir2文件夹下 |\n\n## 移动文件或目录(mv)\n\n| mv file dir | 将file文件移动到dir文件夹下 |\n| --- | --- |\n| mv dir1 dir2 | dir2不存在就是该文件夹名字 dir2存在就是将dir1移动到dir2文件夹下 |\n| mv file1 file2 | 将file1的名字改为file2 |\n| mv dir1 dir2/dir3 | 将dir1拷贝到dir2文件夹下，并改名为dir3 |\n\n## 文件查看\n\n| cat 文件名 | 一次性查看全部内容 |\n| --- | --- |\n| more 文件名 | 分屏显示，按回车向下翻，一旦下翻就不能上翻 |\n| less 文件名 | 允许上翻和下翻，按向上和向下的键 |\n| head -n 文件名 | 显示前n条记录 |\n| tail -n 文件名 | 显示后几条 |\n| wc 文件名 | 用来计算文件行数、句数、字符数 |\n\n## 新建文件和添加内容\n### 新建文件(touch)\n\n| touch 文件名 | 新建一个文件 |\n| --- | --- |\n| touch file1 file2 ... | 一次新建多个文件 |\n| touch dir/file | 在dir文件夹下新建file文件 |\n\n### 添加内容(echo、cat)\n\n| echo 内容>文件 | 将内容写入到文件（清空写），如果文件不存在则创建新文件 |\n| --- | --- |\n| echo 内容>>文件 | 和上面一样，（追加内容） |\n| cat file1>file2 | 将file1的内容写到file2中（清空写）（文件不存在则创建） |\n| cat file1>>file2 | 和上面一样，（追加内容） |\n| cat file1 file2 > file3 | 将file1和file2的内容合并成file3 |\n> \\>是清空写\n> \\>>追加写\n> 写入>字符时，使用引号，或者\\ 反斜杠，进行转义\n\n\n## 组(group)的操作\n\n| groupadd 组名 | 添加组 |\n| --- | --- |\n| grouped -n 新组名 旧组名 | 修改组 |\n| grouped 组名 | 删除组 |\n\n>查看组：cat ../etc/group\n\n## 用户（user）的操作\n>用户信息都保存在`/etc/passwd` 文件中 `cat ../etc/passwd`\n`uiste:x:500:500::/home/uiste:/bin/bash`\n用户名：口令：用户id号：组的id号：注释性描述：家目录：登录shell\n\n### 添加用户（useradd）\n\n| 命令 | 描述 |\n| --- | --- |\n| useradd 用户名 | 创建用户，在创建的时候自动创建组 |\n| useradd 用户名 -g 组编号 | 在相应的组下创建用户 |\n| useradd 用户名 -u 用户编号 | 给创建的用户指定用户编号 |\n| useradd 用户名 -d 家目录 | 给用户指定家目录 |\n\n### 修改用户（usermod）\n\n| 命令 | 描述 |\n| --- | --- |\n| usermod -l 新用户名 旧用户名 | 修改用户名 |\n| usermod -u 用户编号 用户名 | 修改用户编号 |\n| usermod -g 组的编号 用户名 | 修改用户的组 |\n| usermod -d 家目录 用户名 | 修改家目录 |\n\n### 删除用户（userdel）\n\n| 命令 | 描述 |\n| --- | --- |\n| userdel 用户名 | 删除用户，家目录还存在 |\n| userdel -r 用户名 | 删除用户同时删除家目录 |\n\n## 常用指令\n\n| 命令 | 描述 |\n| --- | --- |\n| grep string [file] | 在字符串中查找 |\n| ps -A | （process）查询所有进程 |\n| kill —9 pid | 杀死指定进程 |\n| df -lh | 参看系统分区 |\n\n## date\n\n| 命令 | 描述 |\n| --- | --- |\n| date | 显示系统时间 |\n| date -s ‘2015-11-6 11:11:11’ | 更改系统时间 |\n\n## 管道(|)\n## 查找文件（find）\n\n| 命令 | 描述 |\n| --- | --- |\n| find / -name passwd | 查找根下所有passwd的文件[区分大小写] |\n| find / -iname passwd | 查找根下所有passwd的文件[不区分大小写] |\n| find / -mindepth 3 -name passwd | 在最低3层目录下查找passwd文件 |\n| find / -maxdepth 2 -name passwd | 在最高2层目录下查找passwd文件 |\n| find . -iname *.c | 在当前目录下查找以.c结尾的文件，不区分大小写 |\n| find / -size +50k | 搜索大于50K的文件 |\n| find / -size -40c | 搜索小鱼40字节的文件char |\n| find . -type f | 查找当前目录下的所有文件 |\n| find . -type d | 查找当前目录下所有的文件夹 |\n\n## 软连接和硬连接\n### 软连接\n软连接就是快捷方式\n语法：ln -s 源文件 连接文件\n### 硬连接\n语法：ln 源文件 连接文件\n查看：ls -li 查看文件的索引编号\n>在Linux中删除文件并不是件文件本身删除，而是删除文件的索引，文件是垃圾回收机制来删除\n>只有文件才能做硬连接\n\n## 权限（rwx-）\nLinux的权限有3种：读权限（read）、写权限（write）、可执行权限（execute）\n文件属性部分有10个字符组成，第一个字符是表示文件的类型，后面还剩下9个字符，每3个一组（每组由读、写、可执行组成），分成3组，第一组是文件所有者（user）的权限，第二组是和文件所有者同组（group）的权限，第三组其他用户（other）的权限\n\n### 常用便是文件的字符\n\n| b | 系统设备文件，使用i/o与外界交互的设备，通常是磁盘 |\n| --- | --- |\n| d | 表示文件夹 |\n| - | 表示文件 |\n| l | 连接文件 |\n| c | 系统设备文件，利用串口设备和声音 |\n\n### 更新权限\n语法：chmod 权限 file/dir\n\n| 案例 | 说明 |\n| --- | --- |\n| chmod u+x,o+rx dir | 用户添加可执行权限，其他用户添加读、可执行权限 |\n| chmod u+rwx,o-r file | 用户添加读、写、可执行，其他用户去掉读权限 |\n| chmod go -rwx file | 组和其他用户去掉读、写、可执行权限 |\n| chmod 750 file | 通过数字来设置权限 |\n\n## 更改文件所有者和组\n### 更改所有者（chown）\n\n| chown user file | 将file改成user用户 |\n| --- | --- |\n| chown -R user dir | 将dir文件中的所有文件所有者改为user |\n\n### 更改组（chgrp）\n语法一：chgrp [-R] 新组名 file/dir\n将file 或 dir 更改新组名\n语法二：chown 用户名.组名 文件\n\n\n```\nchown  user passwd        将passwd更改为user所有\nchown  .php passwd        将passwd更改为php组所有\nchown  user.php passwd    将passwd更改为php组的user所有\n```\n","source":"_posts/2015/201509/20150924-2.md","raw":"layout: post\ntitle: 初识Linux\ndate: 2015-09-24 14:06:41\ntags:\n- Linux\n---\n## Linux目录结构\nbin 和 sbin  ：存放命令的\n/dev        ：存放外设文件\n/etc        ：存放配置文件\n/home       ：普通用户的家目录(主目录)\n/root       ：超级管理员的家目录\n/mnt        ：挂载点\n/usr        ：安装程序\n/var        ：相当于D、E盘，用来存储一些文件站点\n## Linux常用命令\npasswd\t更改密码\nls    、ls -al *.png\t查看目录中的内容\ncd\t进入目录\nexit\t退出当前工作环境\npwd\t获取当前工作目录\nsu或su -\t获取管理员权限\nsu - uiste\t获取普通用户的权限\nrunlevel\t获取运行级别\ninit N\t改变运行等级\nstartx 和init5\t启动图形化界面\nclear\t清空终端\n## Linux命令格式\n语法：名利 [-选项] 参数\nLinux 命令是区分大小写的\n## 查看文件的详细信息(ls -al)\n-a  显示所有文件\n-l  显示详细信息\n![](media/14746901645222/14746929569559.jpg)\npwd\t显示当前目录\nls\t显示当前目录的文件\nls -l\t列出文件的详细信息\nls -a\t列出所有文件，包括隐藏文件\nls -al\t后面是查询选择，查询选项是没有先后顺序的\n## 常用指令\ndir             显示当前目录的所有文件\nwho am  i       显示登录的用户名\nwhoami          显示当前使用谁的权限\nexit  、q        退出权限系统\nhalt            关闭计算机\npower off       关闭计算机\nreboot          重启计算机\nman             查看帮助文档 manual\n--help、-help    调用命令的注释帮助\n## 显示目录所占磁盘容量(du)\ndu file/dir 显示文件或文件夹的容量，单位是KB，如果是文件夹显示文件夹中每个文件额大小和总大小\ndu -s dir 显示文件夹的总大小，不显示文件夹中文件大小\ndu -h file/dir 用友好的方式显示容量\n\n## 改变工作目录(cd)\n语法：cd 目录\n\n| cd dir | 进入dir文件夹下 |\n| --- | --- |\n| cd .. | ..表示上一级 |\n| cd ../dir | 进入上一级目录中的dir文件夹下 |\n| cd /dir | 通过绝对路径进入到dir文件夹下 |\n| cd ~ | 进入个人主目录 |\n| cd  | cd后面不跟参数就进入到个人主目录，和cd ~一样 |\n\n## 目录操作\n\n### 创建目录(mkdir)\n\n| mkdir dir1 | 在当前目录下创建dir1文件夹 |\n| --- | --- |\n| mkdir dir1/dir2 | 在dir1目录下创建dir2目录（dir1必须存在) |\n| mkdir -p dir1/dir2 | 如果没有dir1，先创建dir1再创建dir2\\. -p 可以写在后面 |\n| mk dir1 dir2 . | 同时创建dir1、dir2、dir3... |\n\n### 删除目录(rmdir)\n\n| rmdir dir | 删除目录，如果目标不为空这报错，不能删除 |\n| --- | --- |\n| rmdir dir1 dir2 | 同时删除多个目录 |\n\n### 既能删除文件也能删除目录(rm)\n>-r recursieve 递归\n>-f force 强制\n\n| rm file | 删除文件 |\n| --- | --- |\n| rm -rf file/dir | 删除文件和文件夹 |\n\n## 复制文件和目录(cp)\n语法：cp [-r/-R] 源地址 目标地址\n\n| cp file dir | 将file文件拷贝到dir文件夹下 |\n| --- | --- |\n| cp file1 dir/file2 | 将file1拷贝到dir文件夹下并改名为file2 |\n| cp file1 file2 | 将file1复制一份，重命名为file2 |\n| cp -R/-r dir1 dir2 | 将dir1文件夹递归复制到dir2文件夹下 |\n\n## 移动文件或目录(mv)\n\n| mv file dir | 将file文件移动到dir文件夹下 |\n| --- | --- |\n| mv dir1 dir2 | dir2不存在就是该文件夹名字 dir2存在就是将dir1移动到dir2文件夹下 |\n| mv file1 file2 | 将file1的名字改为file2 |\n| mv dir1 dir2/dir3 | 将dir1拷贝到dir2文件夹下，并改名为dir3 |\n\n## 文件查看\n\n| cat 文件名 | 一次性查看全部内容 |\n| --- | --- |\n| more 文件名 | 分屏显示，按回车向下翻，一旦下翻就不能上翻 |\n| less 文件名 | 允许上翻和下翻，按向上和向下的键 |\n| head -n 文件名 | 显示前n条记录 |\n| tail -n 文件名 | 显示后几条 |\n| wc 文件名 | 用来计算文件行数、句数、字符数 |\n\n## 新建文件和添加内容\n### 新建文件(touch)\n\n| touch 文件名 | 新建一个文件 |\n| --- | --- |\n| touch file1 file2 ... | 一次新建多个文件 |\n| touch dir/file | 在dir文件夹下新建file文件 |\n\n### 添加内容(echo、cat)\n\n| echo 内容>文件 | 将内容写入到文件（清空写），如果文件不存在则创建新文件 |\n| --- | --- |\n| echo 内容>>文件 | 和上面一样，（追加内容） |\n| cat file1>file2 | 将file1的内容写到file2中（清空写）（文件不存在则创建） |\n| cat file1>>file2 | 和上面一样，（追加内容） |\n| cat file1 file2 > file3 | 将file1和file2的内容合并成file3 |\n> \\>是清空写\n> \\>>追加写\n> 写入>字符时，使用引号，或者\\ 反斜杠，进行转义\n\n\n## 组(group)的操作\n\n| groupadd 组名 | 添加组 |\n| --- | --- |\n| grouped -n 新组名 旧组名 | 修改组 |\n| grouped 组名 | 删除组 |\n\n>查看组：cat ../etc/group\n\n## 用户（user）的操作\n>用户信息都保存在`/etc/passwd` 文件中 `cat ../etc/passwd`\n`uiste:x:500:500::/home/uiste:/bin/bash`\n用户名：口令：用户id号：组的id号：注释性描述：家目录：登录shell\n\n### 添加用户（useradd）\n\n| 命令 | 描述 |\n| --- | --- |\n| useradd 用户名 | 创建用户，在创建的时候自动创建组 |\n| useradd 用户名 -g 组编号 | 在相应的组下创建用户 |\n| useradd 用户名 -u 用户编号 | 给创建的用户指定用户编号 |\n| useradd 用户名 -d 家目录 | 给用户指定家目录 |\n\n### 修改用户（usermod）\n\n| 命令 | 描述 |\n| --- | --- |\n| usermod -l 新用户名 旧用户名 | 修改用户名 |\n| usermod -u 用户编号 用户名 | 修改用户编号 |\n| usermod -g 组的编号 用户名 | 修改用户的组 |\n| usermod -d 家目录 用户名 | 修改家目录 |\n\n### 删除用户（userdel）\n\n| 命令 | 描述 |\n| --- | --- |\n| userdel 用户名 | 删除用户，家目录还存在 |\n| userdel -r 用户名 | 删除用户同时删除家目录 |\n\n## 常用指令\n\n| 命令 | 描述 |\n| --- | --- |\n| grep string [file] | 在字符串中查找 |\n| ps -A | （process）查询所有进程 |\n| kill —9 pid | 杀死指定进程 |\n| df -lh | 参看系统分区 |\n\n## date\n\n| 命令 | 描述 |\n| --- | --- |\n| date | 显示系统时间 |\n| date -s ‘2015-11-6 11:11:11’ | 更改系统时间 |\n\n## 管道(|)\n## 查找文件（find）\n\n| 命令 | 描述 |\n| --- | --- |\n| find / -name passwd | 查找根下所有passwd的文件[区分大小写] |\n| find / -iname passwd | 查找根下所有passwd的文件[不区分大小写] |\n| find / -mindepth 3 -name passwd | 在最低3层目录下查找passwd文件 |\n| find / -maxdepth 2 -name passwd | 在最高2层目录下查找passwd文件 |\n| find . -iname *.c | 在当前目录下查找以.c结尾的文件，不区分大小写 |\n| find / -size +50k | 搜索大于50K的文件 |\n| find / -size -40c | 搜索小鱼40字节的文件char |\n| find . -type f | 查找当前目录下的所有文件 |\n| find . -type d | 查找当前目录下所有的文件夹 |\n\n## 软连接和硬连接\n### 软连接\n软连接就是快捷方式\n语法：ln -s 源文件 连接文件\n### 硬连接\n语法：ln 源文件 连接文件\n查看：ls -li 查看文件的索引编号\n>在Linux中删除文件并不是件文件本身删除，而是删除文件的索引，文件是垃圾回收机制来删除\n>只有文件才能做硬连接\n\n## 权限（rwx-）\nLinux的权限有3种：读权限（read）、写权限（write）、可执行权限（execute）\n文件属性部分有10个字符组成，第一个字符是表示文件的类型，后面还剩下9个字符，每3个一组（每组由读、写、可执行组成），分成3组，第一组是文件所有者（user）的权限，第二组是和文件所有者同组（group）的权限，第三组其他用户（other）的权限\n\n### 常用便是文件的字符\n\n| b | 系统设备文件，使用i/o与外界交互的设备，通常是磁盘 |\n| --- | --- |\n| d | 表示文件夹 |\n| - | 表示文件 |\n| l | 连接文件 |\n| c | 系统设备文件，利用串口设备和声音 |\n\n### 更新权限\n语法：chmod 权限 file/dir\n\n| 案例 | 说明 |\n| --- | --- |\n| chmod u+x,o+rx dir | 用户添加可执行权限，其他用户添加读、可执行权限 |\n| chmod u+rwx,o-r file | 用户添加读、写、可执行，其他用户去掉读权限 |\n| chmod go -rwx file | 组和其他用户去掉读、写、可执行权限 |\n| chmod 750 file | 通过数字来设置权限 |\n\n## 更改文件所有者和组\n### 更改所有者（chown）\n\n| chown user file | 将file改成user用户 |\n| --- | --- |\n| chown -R user dir | 将dir文件中的所有文件所有者改为user |\n\n### 更改组（chgrp）\n语法一：chgrp [-R] 新组名 file/dir\n将file 或 dir 更改新组名\n语法二：chown 用户名.组名 文件\n\n\n```\nchown  user passwd        将passwd更改为user所有\nchown  .php passwd        将passwd更改为php组所有\nchown  user.php passwd    将passwd更改为php组的user所有\n```\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpa009ppgwiwdxqauej"},{"layout":"post","title":"COOKIE 和 SESSION","date":"2015-09-26T11:31:59.000Z","_content":">思考：A页面中如何访问B页面中的变量\n包含文件\nget传递或post传递\ncookie：cookie是小的信息包。\n\n# Cookie\n### cookie的原理\n浏览器----http请求（无值）-------->服务器\n浏览器<---响应头中传递cookie-------服务器\n浏览器----再次发送http请求（有值）-->服务器\n\n1. **请求头：客户端请求服务器的时候，告知服务器客户端的信息**\n2. **响应头：服务器响应客户端的时候，告知客户端服务器的信息**\n\n### 长连接\n在多个http请求之间，TCP连接不断开称为长连接，默认是5秒。\n长连接过程中，可以建立多次*http请求*与*http响应*\n\n### cookie保存在客户端\n### 设置cookie\n语法：setcookie(名字,值,过期时间,有效目录,子域名)\n\n`bool setcookie ( string $name [, string $value = \"\" [, int $expire = 0 [, string $path = \"\" [, string $domain = \"\" [, bool $secure = false [, bool $httponly = false ]]]]]] )`\n\n### 临时性cookie\n关闭浏览器cookie就消失\n### 永久性cookie\n* [ ] 下次自动登录    （案例）\n\n>在临时性cookie的基础上加上一个过期时间就成了永久性cookie，过期时间是一个时间戳\n永久性cookie保存在浏览器上，换个浏览器就不行了\n\n### cookie保存的数据类型\ncookie不能存放bool型数据，true=>1 false=>delete\ncookie不能存放数组和对象\n**cookie中只能存放字符串**\n\n### 删除cookie\n\n```\nSet-Cookie:\nname=uiste; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nsex=man; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nage=24; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nname=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0\nsex=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0\nage=\n```\n\n### cookie支持下标\ncookie在浏览器上没有数组的概念，只是浏览器请求到服务器，PHP将同名的变量转成数组\n\n```\n<?php\n//cookie不支持数组，但是支持下标\nsetcookie('stu[0]','tom');\nsetcookie('stu[1]','berry');\nsetcookie('stu[2]','ketty');\n?>\n```\n\n### cookie有效目录\n默认情况下，cookie只能在当前目录和子级目录中有效\n如果要在整个网站中有效，就要设置有效目录，‘/’表示整站有效\n`setcookie('name','tom',0,'/')`\n\n### cookie支持子域名\n默认情况下，cookie是区分子域名的。一个子域名就代替一个独立的服务器\n\n### cookie的缺点\n1. 信息保存在本地，安全性低\n2. 只能保存字符串，不能保存数组和对象，可控性差\n3. 数据保存在头信息中，增加请求时的数据负载\n4. 一般浏览器对cookie的要求是不能高于4K\n\n# session(会话)\n将数据存储到服务器端，每个客户一个空间，通过编号访问自己的数据\n* 第一次访问服务器，服务器给客户端分配一个编号\n* 通过编号来访问服务器保存的数据\n* 每个客户只能访问自己的数据\n**session是基于cookie的技术**\n\n### session的操作\n1. 要使用会话必须显示的开启会话，`session_start()`。默认情况下，会话不会自动开启。\n2. 要自动开启会话，在`php.ini`文件中`session.auto_start=1`，把0改为1就自动开启了\n3. session_id():会话编号\n4. session_name():会话名称\n5. session可以保存除了资源以外的所有类型的数据\n6. 重复开启会话会报错，可以通过`@`来屏蔽会话\n\n### session执行过程\n1. 使用`session_start()`从`session`仓库中加载已经存在的`session`变量\n2. 第一次请求服务器，一个唯一的会话id存储到cookie响应头中\n3. 在后面的请求中，会话id保存请求头中，服务器获取请求头的会话id，通过id获取会话的值\n4. 页面执行完毕返回到客户端之前，将会话自动保存到服务器的session库中。下次浏览网页可以加载再次使用\n\n### session的配置\n1. session.save_path：指定session库的路径  \n-------\nsession.save_path = \"N;/path\", N表示通过N级目录来保存会话，N等于1，就是通过会话的第一个字母创建文件夹；N等于2表示通过两级目录创建文件夹，第一级是第一个字母，第二级是第二个字母。\n\n```\n; 用于保存/取回数据的控制方式\nsession.save_handler=files\n;     session.save_path = \"N;/path\"\n; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径\nsession.save_path=\"/Applications/XAMPP/xamppfiles/temp/\"\n```\n2. session.name：设置会话名称\n-------\n\n```\n; Name of the session (used as cookie name).\n; http://php.net/session.name\nsession.name=PHPSESSID\n```\n3. session.cookie_lifetime：保存会话编号的cookie有效时间\n-------\n\n```\n; Lifetime in seconds of cookie or, if 0, until browser is restarted.\n; http://php.net/session.cookie-lifetime\nsession.cookie_lifetime=0\n```\n4. session.cookie_path：保存会话的cookie整站有效\n-------\n```\n; The path for which the cookie is valid.\n; http://php.net/session.cookie-path\nsession.cookie_path=/\n```\n5. session.cookie_domain：当前域名有效\n-------\n\n```\n; The domain for which the cookie is valid.\n; http://php.net/session.cookie-domain\nsession.cookie_domain=\n```\n6. session.save_handler = files：会话按文件格式保存\n-------\n\n```\n; Handler used to store/retrieve data.\n; http://php.net/session.save-handler\nsession.save_handler=files\n```\n\n7. session.hash_function = 0：设置session会话的算法\n-------\n```\n; Select a hash function for use in generating session ids.\n; Possible Values \n;   0  (MD5 128 bits)\n;   1  (SHA-1 160 bits)\n; http://php.net/session.hash-function\nsession.hash_function=0\n```\n\n8. session.hash_bits_per_character = 5：每个字符占用的位数\n-------\n```\n; Define how many bits are stored in each character when converting\n; the binary hash data to something readable.\n; Possible values:\n;   4  (4 bits: 0-9, a-f)\n;   5  (5 bits: 0-9, a-v)\n;   6  (6 bits: 0-9, a-z, A-Z, \"-\", \",\")\n; Default Value: 4\n; Development Value: 5\n; Production Value: 5\n; http://php.net/session.hash-bits-per-character\nsession.hash_bits_per_character=5\n```\n\n9. session.gc_maxlifetime = 1440：会话过期时间\n-------\n\n```\n; After this number of seconds, stored data will be seen as 'garbage' and\n; cleaned up by the garbage collection process.\n; http://php.net/session.gc-maxlifetime\nsession.gc_maxlifetime=1440\n```\n\n### session_destroy()：销毁会话\n1. 删除储存介质中的文件\n2. 执行此行，就不会执行会话写入操作了\n\n# session入库\n### 新建数据库\n\n```\ndrop table if exists sess;\ncreate table sess(\n       sess_id varchar(32) primary key comment '会话编号',\n       sess_value text comment '会话的值',\n       sess_expires int not null comment '会话产生时间'\n)engine=innodb charset=utf8;\n```\n\n### session_set_save_handler()设置用户自定义会话存储函数\n`bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid ] )`\n\n* open:开启会话\n* close:关闭会话\n* read:读取会话\n* write:写入会话\n* destroy:销毁会话\n* gc:销毁会话\n\n执行session_destroy()的时候才调用destroy()函数\n\n>为什么gc不执行?\n\n```\n; Defines the probability that the 'garbage collection' process is started\n; on every session initialization. The probability is calculated by using\n; gc_probability/gc_divisor. Where session.gc_probability is the numerator\n; and gc_divisor is the denominator in the equation. Setting this value to 1\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n; the gc will run on any give request.\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; http://php.net/session.gc-probability\nsession.gc_probability=1\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using the following equation: \n; gc_probability/gc_divisor. Where session.gc_probability is the numerator and\n; session.gc_divisor is the denominator in the equation. Setting this value to 1\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n; the gc will run on any give request. Increasing this value to 1000 will give you\n; a 0.1% chance the gc will run on any give request. For high volume production servers,\n; this is a more efficient approach.\n; Default Value: 100\n; Development Value: 1000\n; Production Value: 1000\n; http://php.net/session.gc-divisor\nsession.gc_divisor=1000\n```\n\n>session.gc_probability=1   概率\n>session.gc_divisor=1000    除数\n>执行垃圾回收的概率是：1/1000\n\n### session入库\n```\n<?php\nheader('content-type:text/html;charset=utf-8');\n//开启会话\nfunction open() {\n\tmysql_connect('localhost','root','aa');\n\tmysql_query('set names utf8');\n\tmysql_query('use php5');\n}\n//关闭会话\nfunction close() {\n}\n/**\n*读取会话\n*@param $sess_id string 会话编号\n*/\nfunction read($sess_id) {\n\t$sql=\"select sess_value from sess where sess_id='$sess_id'\";\n\t$rs=mysql_query($sql);\n\tif($rows=mysql_fetch_row($rs))\n\t\treturn $rows[0];\n\treturn '';\n}\n/**\n*写入会话\n*@param $sess_id string 会话编号\n*@param $sess_value string 会话值\n*/\nfunction write($sess_id,$sess_value) {\n\t$expires=time();\n\t$sql=\"insert into sess values ('$sess_id','$sess_value',$expires) on duplicate key update sess_value='$sess_value',sess_expires=$expires\";\n\treturn mysql_query($sql);\n}\n/**\n*销毁会话\n*/\nfunction destroy($sess_id) {\n\t$sql=\"delete from sess where sess_id='$sess_id'\";\n\treturn mysql_query($sql);\n}\n/**\n*垃圾回收\n*超过生命周期的会话都是垃圾\n*/\nfunction gc($maxlifetime) {\n\t$time=time()-$maxlifetime;\n\t$sql=\"delete from sess where sess_expires<$time\";\n\treturn mysql_query($sql);\n}\n\n//更改会话的存储\nsession_set_save_handler('open','close','read','write','destroy','gc');\nsession_start();\n$_SESSION['sex']=100;\necho $_SESSION['sex'];\nsession_destroy();\n?>\n```\n\n-------\n>session_set_save_handler()必须放在session_start()前面才能起作用\n\n# COOKIE 与 SESSION的区别\ncookie将键值存储在浏览器上\nsession将键存储在浏览器上，值存储在服务器上。\n\n>cookie的可以被禁用的，禁用cookie，基于cookie的所有技术都无法使用。\n\n默认情况下，session是基于的cookie的，可以通过配置更改。\n\n`session.use_trans_sid=1`\n`session.use_only_cookies=0`\n\n重启Apache会发现，会话编号不保存到cookie中，而是保存到get提交的URL中或表单的隐藏域中。\n\n>已知session_set_save_handler()必须在session_start()前面开启，如果在php.ini中设置了session.auto_start = 1后，则session_set_save_handler()无效。如何处理？\n>在分布式部署文件中有两个指令来更改php.ini中的配置\nphp_flag：用来更改开关性质的配置\nphp_value：用来更改值性质的配置\nphp_flag session.auto_start 0\nphp_value session.gc_maxlifetime 10\n将以上命令添置在.htaccess文件中\n\n","source":"_posts/2015/201509/20150926-1.md","raw":"layout: post\ntitle: COOKIE 和 SESSION\ndate: 2015-09-26 19:31:59\ntags:\n- PHP\n---\n>思考：A页面中如何访问B页面中的变量\n包含文件\nget传递或post传递\ncookie：cookie是小的信息包。\n\n# Cookie\n### cookie的原理\n浏览器----http请求（无值）-------->服务器\n浏览器<---响应头中传递cookie-------服务器\n浏览器----再次发送http请求（有值）-->服务器\n\n1. **请求头：客户端请求服务器的时候，告知服务器客户端的信息**\n2. **响应头：服务器响应客户端的时候，告知客户端服务器的信息**\n\n### 长连接\n在多个http请求之间，TCP连接不断开称为长连接，默认是5秒。\n长连接过程中，可以建立多次*http请求*与*http响应*\n\n### cookie保存在客户端\n### 设置cookie\n语法：setcookie(名字,值,过期时间,有效目录,子域名)\n\n`bool setcookie ( string $name [, string $value = \"\" [, int $expire = 0 [, string $path = \"\" [, string $domain = \"\" [, bool $secure = false [, bool $httponly = false ]]]]]] )`\n\n### 临时性cookie\n关闭浏览器cookie就消失\n### 永久性cookie\n* [ ] 下次自动登录    （案例）\n\n>在临时性cookie的基础上加上一个过期时间就成了永久性cookie，过期时间是一个时间戳\n永久性cookie保存在浏览器上，换个浏览器就不行了\n\n### cookie保存的数据类型\ncookie不能存放bool型数据，true=>1 false=>delete\ncookie不能存放数组和对象\n**cookie中只能存放字符串**\n\n### 删除cookie\n\n```\nSet-Cookie:\nname=uiste; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nsex=man; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nage=24; expires=Mon, 26-Sep-2015 12:07:11 GMT; Max-Age=100\nname=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0\nsex=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0\nage=\n```\n\n### cookie支持下标\ncookie在浏览器上没有数组的概念，只是浏览器请求到服务器，PHP将同名的变量转成数组\n\n```\n<?php\n//cookie不支持数组，但是支持下标\nsetcookie('stu[0]','tom');\nsetcookie('stu[1]','berry');\nsetcookie('stu[2]','ketty');\n?>\n```\n\n### cookie有效目录\n默认情况下，cookie只能在当前目录和子级目录中有效\n如果要在整个网站中有效，就要设置有效目录，‘/’表示整站有效\n`setcookie('name','tom',0,'/')`\n\n### cookie支持子域名\n默认情况下，cookie是区分子域名的。一个子域名就代替一个独立的服务器\n\n### cookie的缺点\n1. 信息保存在本地，安全性低\n2. 只能保存字符串，不能保存数组和对象，可控性差\n3. 数据保存在头信息中，增加请求时的数据负载\n4. 一般浏览器对cookie的要求是不能高于4K\n\n# session(会话)\n将数据存储到服务器端，每个客户一个空间，通过编号访问自己的数据\n* 第一次访问服务器，服务器给客户端分配一个编号\n* 通过编号来访问服务器保存的数据\n* 每个客户只能访问自己的数据\n**session是基于cookie的技术**\n\n### session的操作\n1. 要使用会话必须显示的开启会话，`session_start()`。默认情况下，会话不会自动开启。\n2. 要自动开启会话，在`php.ini`文件中`session.auto_start=1`，把0改为1就自动开启了\n3. session_id():会话编号\n4. session_name():会话名称\n5. session可以保存除了资源以外的所有类型的数据\n6. 重复开启会话会报错，可以通过`@`来屏蔽会话\n\n### session执行过程\n1. 使用`session_start()`从`session`仓库中加载已经存在的`session`变量\n2. 第一次请求服务器，一个唯一的会话id存储到cookie响应头中\n3. 在后面的请求中，会话id保存请求头中，服务器获取请求头的会话id，通过id获取会话的值\n4. 页面执行完毕返回到客户端之前，将会话自动保存到服务器的session库中。下次浏览网页可以加载再次使用\n\n### session的配置\n1. session.save_path：指定session库的路径  \n-------\nsession.save_path = \"N;/path\", N表示通过N级目录来保存会话，N等于1，就是通过会话的第一个字母创建文件夹；N等于2表示通过两级目录创建文件夹，第一级是第一个字母，第二级是第二个字母。\n\n```\n; 用于保存/取回数据的控制方式\nsession.save_handler=files\n;     session.save_path = \"N;/path\"\n; 在 save_handler 设为文件时传给控制器的参数， 这是数据文件将保存的路径\nsession.save_path=\"/Applications/XAMPP/xamppfiles/temp/\"\n```\n2. session.name：设置会话名称\n-------\n\n```\n; Name of the session (used as cookie name).\n; http://php.net/session.name\nsession.name=PHPSESSID\n```\n3. session.cookie_lifetime：保存会话编号的cookie有效时间\n-------\n\n```\n; Lifetime in seconds of cookie or, if 0, until browser is restarted.\n; http://php.net/session.cookie-lifetime\nsession.cookie_lifetime=0\n```\n4. session.cookie_path：保存会话的cookie整站有效\n-------\n```\n; The path for which the cookie is valid.\n; http://php.net/session.cookie-path\nsession.cookie_path=/\n```\n5. session.cookie_domain：当前域名有效\n-------\n\n```\n; The domain for which the cookie is valid.\n; http://php.net/session.cookie-domain\nsession.cookie_domain=\n```\n6. session.save_handler = files：会话按文件格式保存\n-------\n\n```\n; Handler used to store/retrieve data.\n; http://php.net/session.save-handler\nsession.save_handler=files\n```\n\n7. session.hash_function = 0：设置session会话的算法\n-------\n```\n; Select a hash function for use in generating session ids.\n; Possible Values \n;   0  (MD5 128 bits)\n;   1  (SHA-1 160 bits)\n; http://php.net/session.hash-function\nsession.hash_function=0\n```\n\n8. session.hash_bits_per_character = 5：每个字符占用的位数\n-------\n```\n; Define how many bits are stored in each character when converting\n; the binary hash data to something readable.\n; Possible values:\n;   4  (4 bits: 0-9, a-f)\n;   5  (5 bits: 0-9, a-v)\n;   6  (6 bits: 0-9, a-z, A-Z, \"-\", \",\")\n; Default Value: 4\n; Development Value: 5\n; Production Value: 5\n; http://php.net/session.hash-bits-per-character\nsession.hash_bits_per_character=5\n```\n\n9. session.gc_maxlifetime = 1440：会话过期时间\n-------\n\n```\n; After this number of seconds, stored data will be seen as 'garbage' and\n; cleaned up by the garbage collection process.\n; http://php.net/session.gc-maxlifetime\nsession.gc_maxlifetime=1440\n```\n\n### session_destroy()：销毁会话\n1. 删除储存介质中的文件\n2. 执行此行，就不会执行会话写入操作了\n\n# session入库\n### 新建数据库\n\n```\ndrop table if exists sess;\ncreate table sess(\n       sess_id varchar(32) primary key comment '会话编号',\n       sess_value text comment '会话的值',\n       sess_expires int not null comment '会话产生时间'\n)engine=innodb charset=utf8;\n```\n\n### session_set_save_handler()设置用户自定义会话存储函数\n`bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid ] )`\n\n* open:开启会话\n* close:关闭会话\n* read:读取会话\n* write:写入会话\n* destroy:销毁会话\n* gc:销毁会话\n\n执行session_destroy()的时候才调用destroy()函数\n\n>为什么gc不执行?\n\n```\n; Defines the probability that the 'garbage collection' process is started\n; on every session initialization. The probability is calculated by using\n; gc_probability/gc_divisor. Where session.gc_probability is the numerator\n; and gc_divisor is the denominator in the equation. Setting this value to 1\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n; the gc will run on any give request.\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; http://php.net/session.gc-probability\nsession.gc_probability=1\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using the following equation: \n; gc_probability/gc_divisor. Where session.gc_probability is the numerator and\n; session.gc_divisor is the denominator in the equation. Setting this value to 1\n; when the session.gc_divisor value is 100 will give you approximately a 1% chance\n; the gc will run on any give request. Increasing this value to 1000 will give you\n; a 0.1% chance the gc will run on any give request. For high volume production servers,\n; this is a more efficient approach.\n; Default Value: 100\n; Development Value: 1000\n; Production Value: 1000\n; http://php.net/session.gc-divisor\nsession.gc_divisor=1000\n```\n\n>session.gc_probability=1   概率\n>session.gc_divisor=1000    除数\n>执行垃圾回收的概率是：1/1000\n\n### session入库\n```\n<?php\nheader('content-type:text/html;charset=utf-8');\n//开启会话\nfunction open() {\n\tmysql_connect('localhost','root','aa');\n\tmysql_query('set names utf8');\n\tmysql_query('use php5');\n}\n//关闭会话\nfunction close() {\n}\n/**\n*读取会话\n*@param $sess_id string 会话编号\n*/\nfunction read($sess_id) {\n\t$sql=\"select sess_value from sess where sess_id='$sess_id'\";\n\t$rs=mysql_query($sql);\n\tif($rows=mysql_fetch_row($rs))\n\t\treturn $rows[0];\n\treturn '';\n}\n/**\n*写入会话\n*@param $sess_id string 会话编号\n*@param $sess_value string 会话值\n*/\nfunction write($sess_id,$sess_value) {\n\t$expires=time();\n\t$sql=\"insert into sess values ('$sess_id','$sess_value',$expires) on duplicate key update sess_value='$sess_value',sess_expires=$expires\";\n\treturn mysql_query($sql);\n}\n/**\n*销毁会话\n*/\nfunction destroy($sess_id) {\n\t$sql=\"delete from sess where sess_id='$sess_id'\";\n\treturn mysql_query($sql);\n}\n/**\n*垃圾回收\n*超过生命周期的会话都是垃圾\n*/\nfunction gc($maxlifetime) {\n\t$time=time()-$maxlifetime;\n\t$sql=\"delete from sess where sess_expires<$time\";\n\treturn mysql_query($sql);\n}\n\n//更改会话的存储\nsession_set_save_handler('open','close','read','write','destroy','gc');\nsession_start();\n$_SESSION['sex']=100;\necho $_SESSION['sex'];\nsession_destroy();\n?>\n```\n\n-------\n>session_set_save_handler()必须放在session_start()前面才能起作用\n\n# COOKIE 与 SESSION的区别\ncookie将键值存储在浏览器上\nsession将键存储在浏览器上，值存储在服务器上。\n\n>cookie的可以被禁用的，禁用cookie，基于cookie的所有技术都无法使用。\n\n默认情况下，session是基于的cookie的，可以通过配置更改。\n\n`session.use_trans_sid=1`\n`session.use_only_cookies=0`\n\n重启Apache会发现，会话编号不保存到cookie中，而是保存到get提交的URL中或表单的隐藏域中。\n\n>已知session_set_save_handler()必须在session_start()前面开启，如果在php.ini中设置了session.auto_start = 1后，则session_set_save_handler()无效。如何处理？\n>在分布式部署文件中有两个指令来更改php.ini中的配置\nphp_flag：用来更改开关性质的配置\nphp_value：用来更改值性质的配置\nphp_flag session.auto_start 0\nphp_value session.gc_maxlifetime 10\n将以上命令添置在.htaccess文件中\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpb009rpgwia4uj8jui"},{"layout":"post","title":"laravel - Composer 安装","date":"2015-09-30T05:48:18.000Z","_content":"# Composer 安装（一）\n### 一、简介\n\nComposer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。\n\n### 二、为什么要使用Composer\n\n你有一个项目依赖于若干个库。\n其中一些库依赖于其他库。\n你声明你所依赖的东西。\nComposer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。\n\n### 三、安装方式\n\n通用安装方式（Win、Linux、Mac都能用），使用composer.phar文件（其实就是下载composer.phar文件，不需要翻墙）\n\n* 直接下载composer.phar文件\n[composer下载](https://getcomposer.org/download/)\n\n* 打开命令行并执行下列命令安装最新版本的 Composer\n\n```\nuiste:~ uiste$ php -r \"readfile('https://getcomposer.org/installer');\" | php\nAll settings correct for using Composer\nDownloading 1.2.1...\n\nComposer successfully installed to: /Users/uiste/composer.phar\nUse it: php composer.phar\n```\n\n>这将检查一些PHP的设置，然后下载composer.phar到当前工作目录中。这是Composer的二进制文件。这是一个PHAR 包（PHP 的归档），这是PHP的归档格式可以帮助用户在命令行中执行一些操作。\n\n* 检测是否安装成功\n输入如下命令，如果成功则出现以下信息：\n\n```\nuiste:~ uiste$ php composer.phar\n   ______\n  / ____/___  ____ ___  ____  ____  ________  _____\n / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                    /_/\nComposer version 1.2.1 2015-09-12 11:27:19\n.\n.\n.\n___\n```\n\n### 局部安装和全局安装\n\n四、局部安装\n\n上述下载Composer的过程正确执行完毕后，可以将composer.phar文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用Composer了！\n\n五、全局安装\n\n全局安装是将Composer安装到系统环境变量PATH所包含的路径下面，然后就能够在命令行窗口中直接执行composer命令了。\n\n1. Mac或Linux系统\n\n打开命令行窗口并执行如下命令将前面下载的composer.phar文件移动到 /usr/local/bin/ 目录下面：\n\nsudo mv composer.phar /usr/local/bin/composer  \n\n```\nuiste:~ uiste$ sudo mv composer.phar /usr/local/bin/composer\n\nWARNING: Improper use of the sudo command could lead to data loss\nor the deletion of important system files. Please double-check your\ntyping when using sudo. Type \"man sudo\" for more information.\n\nTo proceed, enter your password, or type Ctrl-C to abort.\n\nPassword:\n```\n\n2. Win系统\n\n找到并进入PHP的安装目录（和你在命令行中执行的php指令应该是同一套PHP）。\n将 composer.phar 复制到PHP的安装目录下面，也就是和 php.exe 在同一级目录。\n在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。\n@php \"%~dp0composer.phar\" %*\n3. 检测全局安装是否成功\n\n```\nuiste:~ uiste$ composer --version\nComposer version 1.2.1 2015-09-12 11:27:19\n```\n# Composer 中国全量镜像（二）\n\n为什么要使用Composer中国全量镜像？\n\n一般情况下，安装包的数据（主要是 zip 文件）是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。\n\n然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”。\n\n“Composer 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，这样我们使用Composer时就会更加快速、稳定。\n\n### 查看当前镜像地址\n在命令行输入如下命令，即可查看镜像地址：`composer config -l -g` 查看所有全局配置\n\n```\nuiste:~ uiste$ composer config -l -g\n[repositories.packagist.type] composer\n[repositories.packagist.url] https?://packagist.org\n[repositories.packagist.allow_ssl_downgrade] true\n```\n\n### 启用中国全量镜像服务\n启用中国全量镜像服务有两种方式，具体配置方法如下：\n\n1. 系统全局配置：\n即将配置信息添加到 Composer 的全局配置文件 config.json 中。修改composer的全局配置文件（推荐方式），打开命令行并执行如下命令：\n`uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n2. 单个项目配置：\n即将将配置信息添加到某个项目的 composer.json 文件中。修改当前项目的composer.json配置文件有两种方式，最后都是向文件中添加如下配置信息：\n\n```\n\"repositories\": {\n    \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n    }\n}\n```\n\n2.1 打开命令行并进入项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：\n`composer config repo.packagist composer https://packagist.phpcomposer.com`\n该命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息\n2.2 手动向composer.json文件中添加以上信息\n\n# Composer 常用命令总结（三）\n### init（初始化）\n\n该命令用于创建 composer.json 文件，并进行基础信息配置：\n`uiste:~ uiste$ composer init`\n\n```\nuiste:~ uiste$ composer init\n\n                                            \n  Welcome to the Composer config generator  \n                                            \n\n\nThis command will guide you through creating your composer.json config.\n\nPackage name (<vendor>/<name>) [uiste/uiste]: \n\n```\n\n可以配置Package name、Description、Author、Minimum、Package Type、License、dependencies 及 dev dependencies 信息。\n\n完成后配置文件内容如下：\n\n```\n{\n    \"name\": \"test/test\",\n    \"description\": \"test init\",\n    \"type\": \"library\",\n    \"license\": \"License Description\",\n    \"authors\": [\n        {\n            \"name\": \"mayanlong\",\n            \"email\": \"json_vip@163.com\"\n        }\n    ],\n    \"require\": {}\n}\n```\n\n### search（搜索）\n\n根据名称搜索相关的包，成功后会列出符合的相关包的信息，本处以搜索 monolog 为例：\n\n```\n$ composer search monolog \nmonolog/monolog Sends your logs to files, sockets, inboxes, databases and various web services\nkdyby/monolog Integration of Monolog into Nette Framework\n```\n\n### show（详情）\n\n根据包的名称，列出包的相关信息，本处以查看 monolog/monolog 为例：\n\n```\n$ composer show -all monolog/monolog\nname     : monolog/monolog\ndescrip. : Sends your logs to files, sockets, inboxes, databases and various web services\nkeywords : log, logging, psr-3\nversions : dev-master, 2.0.x-dev, 1.x-dev, 1.21.0, 1.20.0, 1.19.0, 1.18.2, 1.18.1, 1.18.0, 1.17.2, 1.17.1, 1.17.0, 1.16.0, 1.15.0, 1.14.0, 1.13.1, 1.13.0, 1.12.0, 1.11.0, 1.10.0, 1.9.1, 1.9.0, 1.8.0, 1.7.0, 1.6.0, 1.5.0, 1.4.1, 1.4.0, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1\n```\n\n想查看更多信息，就亲自将该命令复制到命令行执行吧。\n\n### install (安装)\n\n先在 composer.json 配置中添加一个 monolog/monolog 依赖库，如下：\n\n```\n{\n    \"name\": \"test/test\",\n    \"description\": \"test init\",\n    \"type\": \"library\",\n    \"license\": \"License Description\",\n    \"authors\": [\n        {\n            \"name\": \"mayanlong\",\n            \"email\": \"json_vip@163.com\"\n        }\n    ],\n    \"require\": {\n        \"monolog/monolog\": \"1.21.*\",\n    }\n}\n```\n\n然后通过如下命令进行安装依赖\n\n`$ composer install`\n### update （更新）\n\n如果我们新增或者删除了某个依赖，可以通过如下命令进行更新\n\n`$ composer update `\n###  require （申明依赖）\n\n我们也可以用命令直接添加依赖，执行该命令后将自动下载，命令如下：\n\n`$ composer require symfony/http-foundation`\n\n\n\n[composer中文网](http://www.phpcomposer.com/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150930-1.md","raw":"layout: post\ntitle: laravel - Composer 安装\ndate: 2015-09-30 13:48:18\ntags:\n- laravel\n---\n# Composer 安装（一）\n### 一、简介\n\nComposer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。\n\n### 二、为什么要使用Composer\n\n你有一个项目依赖于若干个库。\n其中一些库依赖于其他库。\n你声明你所依赖的东西。\nComposer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。\n\n### 三、安装方式\n\n通用安装方式（Win、Linux、Mac都能用），使用composer.phar文件（其实就是下载composer.phar文件，不需要翻墙）\n\n* 直接下载composer.phar文件\n[composer下载](https://getcomposer.org/download/)\n\n* 打开命令行并执行下列命令安装最新版本的 Composer\n\n```\nuiste:~ uiste$ php -r \"readfile('https://getcomposer.org/installer');\" | php\nAll settings correct for using Composer\nDownloading 1.2.1...\n\nComposer successfully installed to: /Users/uiste/composer.phar\nUse it: php composer.phar\n```\n\n>这将检查一些PHP的设置，然后下载composer.phar到当前工作目录中。这是Composer的二进制文件。这是一个PHAR 包（PHP 的归档），这是PHP的归档格式可以帮助用户在命令行中执行一些操作。\n\n* 检测是否安装成功\n输入如下命令，如果成功则出现以下信息：\n\n```\nuiste:~ uiste$ php composer.phar\n   ______\n  / ____/___  ____ ___  ____  ____  ________  _____\n / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                    /_/\nComposer version 1.2.1 2015-09-12 11:27:19\n.\n.\n.\n___\n```\n\n### 局部安装和全局安装\n\n四、局部安装\n\n上述下载Composer的过程正确执行完毕后，可以将composer.phar文件复制到任意目录（比如项目根目录下），然后通过 php composer.phar 指令即可使用Composer了！\n\n五、全局安装\n\n全局安装是将Composer安装到系统环境变量PATH所包含的路径下面，然后就能够在命令行窗口中直接执行composer命令了。\n\n1. Mac或Linux系统\n\n打开命令行窗口并执行如下命令将前面下载的composer.phar文件移动到 /usr/local/bin/ 目录下面：\n\nsudo mv composer.phar /usr/local/bin/composer  \n\n```\nuiste:~ uiste$ sudo mv composer.phar /usr/local/bin/composer\n\nWARNING: Improper use of the sudo command could lead to data loss\nor the deletion of important system files. Please double-check your\ntyping when using sudo. Type \"man sudo\" for more information.\n\nTo proceed, enter your password, or type Ctrl-C to abort.\n\nPassword:\n```\n\n2. Win系统\n\n找到并进入PHP的安装目录（和你在命令行中执行的php指令应该是同一套PHP）。\n将 composer.phar 复制到PHP的安装目录下面，也就是和 php.exe 在同一级目录。\n在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。\n@php \"%~dp0composer.phar\" %*\n3. 检测全局安装是否成功\n\n```\nuiste:~ uiste$ composer --version\nComposer version 1.2.1 2015-09-12 11:27:19\n```\n# Composer 中国全量镜像（二）\n\n为什么要使用Composer中国全量镜像？\n\n一般情况下，安装包的数据（主要是 zip 文件）是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。\n\n然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”。\n\n“Composer 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，这样我们使用Composer时就会更加快速、稳定。\n\n### 查看当前镜像地址\n在命令行输入如下命令，即可查看镜像地址：`composer config -l -g` 查看所有全局配置\n\n```\nuiste:~ uiste$ composer config -l -g\n[repositories.packagist.type] composer\n[repositories.packagist.url] https?://packagist.org\n[repositories.packagist.allow_ssl_downgrade] true\n```\n\n### 启用中国全量镜像服务\n启用中国全量镜像服务有两种方式，具体配置方法如下：\n\n1. 系统全局配置：\n即将配置信息添加到 Composer 的全局配置文件 config.json 中。修改composer的全局配置文件（推荐方式），打开命令行并执行如下命令：\n`uiste:~ uiste$ composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n2. 单个项目配置：\n即将将配置信息添加到某个项目的 composer.json 文件中。修改当前项目的composer.json配置文件有两种方式，最后都是向文件中添加如下配置信息：\n\n```\n\"repositories\": {\n    \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n    }\n}\n```\n\n2.1 打开命令行并进入项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：\n`composer config repo.packagist composer https://packagist.phpcomposer.com`\n该命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息\n2.2 手动向composer.json文件中添加以上信息\n\n# Composer 常用命令总结（三）\n### init（初始化）\n\n该命令用于创建 composer.json 文件，并进行基础信息配置：\n`uiste:~ uiste$ composer init`\n\n```\nuiste:~ uiste$ composer init\n\n                                            \n  Welcome to the Composer config generator  \n                                            \n\n\nThis command will guide you through creating your composer.json config.\n\nPackage name (<vendor>/<name>) [uiste/uiste]: \n\n```\n\n可以配置Package name、Description、Author、Minimum、Package Type、License、dependencies 及 dev dependencies 信息。\n\n完成后配置文件内容如下：\n\n```\n{\n    \"name\": \"test/test\",\n    \"description\": \"test init\",\n    \"type\": \"library\",\n    \"license\": \"License Description\",\n    \"authors\": [\n        {\n            \"name\": \"mayanlong\",\n            \"email\": \"json_vip@163.com\"\n        }\n    ],\n    \"require\": {}\n}\n```\n\n### search（搜索）\n\n根据名称搜索相关的包，成功后会列出符合的相关包的信息，本处以搜索 monolog 为例：\n\n```\n$ composer search monolog \nmonolog/monolog Sends your logs to files, sockets, inboxes, databases and various web services\nkdyby/monolog Integration of Monolog into Nette Framework\n```\n\n### show（详情）\n\n根据包的名称，列出包的相关信息，本处以查看 monolog/monolog 为例：\n\n```\n$ composer show -all monolog/monolog\nname     : monolog/monolog\ndescrip. : Sends your logs to files, sockets, inboxes, databases and various web services\nkeywords : log, logging, psr-3\nversions : dev-master, 2.0.x-dev, 1.x-dev, 1.21.0, 1.20.0, 1.19.0, 1.18.2, 1.18.1, 1.18.0, 1.17.2, 1.17.1, 1.17.0, 1.16.0, 1.15.0, 1.14.0, 1.13.1, 1.13.0, 1.12.0, 1.11.0, 1.10.0, 1.9.1, 1.9.0, 1.8.0, 1.7.0, 1.6.0, 1.5.0, 1.4.1, 1.4.0, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 1.0.0-RC1\n```\n\n想查看更多信息，就亲自将该命令复制到命令行执行吧。\n\n### install (安装)\n\n先在 composer.json 配置中添加一个 monolog/monolog 依赖库，如下：\n\n```\n{\n    \"name\": \"test/test\",\n    \"description\": \"test init\",\n    \"type\": \"library\",\n    \"license\": \"License Description\",\n    \"authors\": [\n        {\n            \"name\": \"mayanlong\",\n            \"email\": \"json_vip@163.com\"\n        }\n    ],\n    \"require\": {\n        \"monolog/monolog\": \"1.21.*\",\n    }\n}\n```\n\n然后通过如下命令进行安装依赖\n\n`$ composer install`\n### update （更新）\n\n如果我们新增或者删除了某个依赖，可以通过如下命令进行更新\n\n`$ composer update `\n###  require （申明依赖）\n\n我们也可以用命令直接添加依赖，执行该命令后将自动下载，命令如下：\n\n`$ composer require symfony/http-foundation`\n\n\n\n[composer中文网](http://www.phpcomposer.com/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpc009spgwin0dtwt6f"},{"layout":"post","title":"laravel - 安装laravel框架","date":"2015-09-30T06:43:24.000Z","_content":"Composer 安装 Laravel 有两种方式：\n\n第一种是通过 Composer 的 create-project 命令安装 Laravel 框架，\n第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。\n\n为什么 Composer 可以安装 Laravel 框架呢？\n\n其实 Laravel框架也是一个 Composer包，我们可以通过如下命令查看：\n\n```\nuiste:~ uiste$ composer show --all laravel/laravel\nNo composer.json found in the current directory, showing available packages from packagist\nname     : laravel/laravel\ndescrip. : The Laravel Framework.\nkeywords : framework, laravel\nversions : dev-master, v5.3.10, v5.3.0, 5.2.x-dev, v5.2.31, v5.2.29, v5.2.27, v5.2.24, v5.2.23, v5.2.15, v5.2.0, 5.1.x-dev, v5.1.33, v5.1.11, v5.1.4, v5.1.3, v5.1.1, v5.1.0, 5.0.x-dev, v5.0.22, v5.0.16, v5.0.1, v5.0.0, v4.2.11, v4.2.0, v4.1.27, v4.1.18, v4.1.0, v4.0.9, v4.0.8, v4.0.7, v4.0.6, v4.0.5, v4.0.4, v4.0.0, v4.0.0-BETA4, v4.0.0-BETA3, dev-develop\ntype     : project\nlicense  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\nsource   : [git] https://github.com/laravel/laravel.git f4606d2bb94dc9579488df61fa3744b17e91be62\ndist     : [zip] https://packagist.phpcomposer.com/files/laravel/laravel/f4606d2bb94dc9579488df61fa3744b17e91be62.zip f4606d2bb94dc9579488df61fa3744b17e91be62\nnames    : laravel/laravel\n\nautoload\nclassmap\ndatabase\npsr-4\nApp\\ => app/\n\nrequires\nphp >=5.6.4\nlaravel/framework 5.3.*\n\nrequires (dev)\nfzaninotto/faker ~1.4\nmockery/mockery 0.9.*\nphpunit/phpunit ~5.0\nsymfony/css-selector 3.1.*\nsymfony/dom-crawler 3.1.*\n```\n\n## create-project\n\n第一种通过 Composer的 create-project 命令安装 Laravel 框架，\n\n`$ composer create-project laravel/laravel --prefer-dist [别名]`\n## Laravel 安装器\n\n第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。\n\n1. 使用 composer 全局安装 Laravel 安装器\n\n`$ composer global require \"laravel/installer\"`\n\n```\nuiste:~ uiste$ composer global require \"laravel/installer\"\nChanged current directory to /Users/uiste/.composer\nUsing version ^1.3 for laravel/installer\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing symfony/process (v3.1.4)\n    Downloading: 100%         \n\n  - Installing symfony/polyfill-mbstring (v1.2.0)\n    Downloading: 100%         \n\n  - Installing symfony/console (v3.1.4)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/promises (1.2.0)\n    Downloading: 100%         \n\n  - Installing psr/http-message (1.0.1)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/psr7 (1.3.1)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/guzzle (6.2.1)\n    Downloading: 100%         \n\n  - Installing laravel/installer (v1.3.4)\n    Downloading: 100%         \n\nsymfony/console suggests installing symfony/event-dispatcher ()\nsymfony/console suggests installing psr/log (For using the console logger)\nWriting lock file\nGenerating autoload files\n```\n\n2. 配置PATH环境变量\n\n将 `~/.composer/vendor/bin` 添加到 PATH 环境变量中，这样可执行文件 laravel 就能被你的系统检测到了。\n\n编辑 `~/.bash_profile` 文件， `vim ~/.bash_profile` 加入如下代码：\n\n`export PATH=\"~/.composer/vendor/bin:$PATH\"`\n3. 检测是否配置成功\n\n新打开一个终端，输入如下命令：\n\n```\nuiste:~ uiste$ laravel --version\nLaravel Installer version 1.3.3\n```\n\n如果出现该信息，说明安装器已安装成功。\n\n4. 安装Laravel\n\n打开终端，输入如下命令即可安装：\n\n$ laravel new blog\n\n```\nuiste:~ uiste$ laravel new blog\n\n                               \n  [RuntimeException]           \n  Application already exists!  \n                               \n\nnew [--dev] [--5.2] [--] [<name>]\n```\n\n5. 安装最新的开发版本\n\n如果童鞋们对最新的开发版本比较感兴趣，可以下载进行测试，加上 --dev 参数即可：\n\n$ laravel new demo --dev\n\n---\n报错如下：\n\n```\nuiste:~ uiste$ laravel new blog\nCrafting application...\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nYour requirements could not be resolved to an installable set of packages.\n\n  Problem 1\n    - This package requires php >=5.6.4 but your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 2\n    - Installation request for laravel/framework v5.3.15 -> satisfiable by laravel/framework[v5.3.15].\n    - laravel/framework v5.3.15 requires php >=5.6.4 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 3\n    - Installation request for phpunit/php-code-coverage 4.0.1 -> satisfiable by phpunit/php-code-coverage[4.0.1].\n    - phpunit/php-code-coverage 4.0.1 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 4\n    - Installation request for phpunit/phpunit 5.5.5 -> satisfiable by phpunit/phpunit[5.5.5].\n    - phpunit/phpunit 5.5.5 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 5\n    - Installation request for phpunit/phpunit-mock-objects 3.2.7 -> satisfiable by phpunit/phpunit-mock-objects[3.2.7].\n    - phpunit/phpunit-mock-objects 3.2.7 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 6\n    - Installation request for sebastian/code-unit-reverse-lookup 1.0.0 -> satisfiable by sebastian/code-unit-reverse-lookup[1.0.0].\n    - sebastian/code-unit-reverse-lookup 1.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 7\n    - Installation request for sebastian/object-enumerator 1.0.0 -> satisfiable by sebastian/object-enumerator[1.0.0].\n    - sebastian/object-enumerator 1.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 8\n    - Installation request for sebastian/resource-operations 1.0.0 -> satisfiable by sebastian/resource-operations[1.0.0].\n    - sebastian/resource-operations 1.0.0 requires php >=5.6.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 9\n    - Installation request for sebastian/version 2.0.0 -> satisfiable by sebastian/version[2.0.0].\n    - sebastian/version 2.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n\nApplication ready! Build something amazing.\n```\n\n## Mac OS X 升级PHP版本\n\n### 方法一：\n1. 查询本机PHP版本\n\n```\nuiste:~ uiste$ php -v\nPHP 5.5.36 (cli) (built: May 29 2015 01:07:06) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies\n```\n\n2. 然后我们根据实际需求去升级\n\n`curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4`\n\n```\nuiste:~ uiste$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4\nDetected OS X El Capitan 10.11. All ok.\nGet packager.tgz\nUnpack packager.tgz\nPlease type in your password, as we want to install this into /usr/local\n\nWARNING: Improper use of the sudo command could lead to data loss\nor the deletion of important system files. Please double-check your\ntyping when using sudo. Type \"man sudo\" for more information.\n\nTo proceed, enter your password, or type Ctrl-C to abort.\n\nPassword:\nStart packager (may take some time)\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/install/5.6.4-frontenddev-latest.dat\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.bz2\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.gz\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tgz\nDid or could not download package: 5.6.4-frontenddev\n```\n\n>中途会提示你输入密码，下载的 PHP 会放置到 /usr/local 下，但不会覆盖原系统 PHP\n如上所升级的 5.5，PHP 会位于 /usr/local/php5 中，并自动链接到 /etc/apache2/ 下的配置文件\n然后再新建一个 PHP 文件，写上 phpinfo(); 浏览器访问看看，版本已经升级。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150930-2.md","raw":"layout: post\ntitle: laravel - 安装laravel框架\ndate: 2015-09-30 14:43:24\ntags:\n- laravel\n---\nComposer 安装 Laravel 有两种方式：\n\n第一种是通过 Composer 的 create-project 命令安装 Laravel 框架，\n第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。\n\n为什么 Composer 可以安装 Laravel 框架呢？\n\n其实 Laravel框架也是一个 Composer包，我们可以通过如下命令查看：\n\n```\nuiste:~ uiste$ composer show --all laravel/laravel\nNo composer.json found in the current directory, showing available packages from packagist\nname     : laravel/laravel\ndescrip. : The Laravel Framework.\nkeywords : framework, laravel\nversions : dev-master, v5.3.10, v5.3.0, 5.2.x-dev, v5.2.31, v5.2.29, v5.2.27, v5.2.24, v5.2.23, v5.2.15, v5.2.0, 5.1.x-dev, v5.1.33, v5.1.11, v5.1.4, v5.1.3, v5.1.1, v5.1.0, 5.0.x-dev, v5.0.22, v5.0.16, v5.0.1, v5.0.0, v4.2.11, v4.2.0, v4.1.27, v4.1.18, v4.1.0, v4.0.9, v4.0.8, v4.0.7, v4.0.6, v4.0.5, v4.0.4, v4.0.0, v4.0.0-BETA4, v4.0.0-BETA3, dev-develop\ntype     : project\nlicense  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\nsource   : [git] https://github.com/laravel/laravel.git f4606d2bb94dc9579488df61fa3744b17e91be62\ndist     : [zip] https://packagist.phpcomposer.com/files/laravel/laravel/f4606d2bb94dc9579488df61fa3744b17e91be62.zip f4606d2bb94dc9579488df61fa3744b17e91be62\nnames    : laravel/laravel\n\nautoload\nclassmap\ndatabase\npsr-4\nApp\\ => app/\n\nrequires\nphp >=5.6.4\nlaravel/framework 5.3.*\n\nrequires (dev)\nfzaninotto/faker ~1.4\nmockery/mockery 0.9.*\nphpunit/phpunit ~5.0\nsymfony/css-selector 3.1.*\nsymfony/dom-crawler 3.1.*\n```\n\n## create-project\n\n第一种通过 Composer的 create-project 命令安装 Laravel 框架，\n\n`$ composer create-project laravel/laravel --prefer-dist [别名]`\n## Laravel 安装器\n\n第二种是先通过 Composer 安装 Laravel 安装器，然后通过安装器安装 Laravel 框架。\n\n1. 使用 composer 全局安装 Laravel 安装器\n\n`$ composer global require \"laravel/installer\"`\n\n```\nuiste:~ uiste$ composer global require \"laravel/installer\"\nChanged current directory to /Users/uiste/.composer\nUsing version ^1.3 for laravel/installer\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing symfony/process (v3.1.4)\n    Downloading: 100%         \n\n  - Installing symfony/polyfill-mbstring (v1.2.0)\n    Downloading: 100%         \n\n  - Installing symfony/console (v3.1.4)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/promises (1.2.0)\n    Downloading: 100%         \n\n  - Installing psr/http-message (1.0.1)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/psr7 (1.3.1)\n    Downloading: 100%         \n\n  - Installing guzzlehttp/guzzle (6.2.1)\n    Downloading: 100%         \n\n  - Installing laravel/installer (v1.3.4)\n    Downloading: 100%         \n\nsymfony/console suggests installing symfony/event-dispatcher ()\nsymfony/console suggests installing psr/log (For using the console logger)\nWriting lock file\nGenerating autoload files\n```\n\n2. 配置PATH环境变量\n\n将 `~/.composer/vendor/bin` 添加到 PATH 环境变量中，这样可执行文件 laravel 就能被你的系统检测到了。\n\n编辑 `~/.bash_profile` 文件， `vim ~/.bash_profile` 加入如下代码：\n\n`export PATH=\"~/.composer/vendor/bin:$PATH\"`\n3. 检测是否配置成功\n\n新打开一个终端，输入如下命令：\n\n```\nuiste:~ uiste$ laravel --version\nLaravel Installer version 1.3.3\n```\n\n如果出现该信息，说明安装器已安装成功。\n\n4. 安装Laravel\n\n打开终端，输入如下命令即可安装：\n\n$ laravel new blog\n\n```\nuiste:~ uiste$ laravel new blog\n\n                               \n  [RuntimeException]           \n  Application already exists!  \n                               \n\nnew [--dev] [--5.2] [--] [<name>]\n```\n\n5. 安装最新的开发版本\n\n如果童鞋们对最新的开发版本比较感兴趣，可以下载进行测试，加上 --dev 参数即可：\n\n$ laravel new demo --dev\n\n---\n报错如下：\n\n```\nuiste:~ uiste$ laravel new blog\nCrafting application...\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nYour requirements could not be resolved to an installable set of packages.\n\n  Problem 1\n    - This package requires php >=5.6.4 but your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 2\n    - Installation request for laravel/framework v5.3.15 -> satisfiable by laravel/framework[v5.3.15].\n    - laravel/framework v5.3.15 requires php >=5.6.4 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 3\n    - Installation request for phpunit/php-code-coverage 4.0.1 -> satisfiable by phpunit/php-code-coverage[4.0.1].\n    - phpunit/php-code-coverage 4.0.1 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 4\n    - Installation request for phpunit/phpunit 5.5.5 -> satisfiable by phpunit/phpunit[5.5.5].\n    - phpunit/phpunit 5.5.5 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 5\n    - Installation request for phpunit/phpunit-mock-objects 3.2.7 -> satisfiable by phpunit/phpunit-mock-objects[3.2.7].\n    - phpunit/phpunit-mock-objects 3.2.7 requires php ^5.6 || ^7.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 6\n    - Installation request for sebastian/code-unit-reverse-lookup 1.0.0 -> satisfiable by sebastian/code-unit-reverse-lookup[1.0.0].\n    - sebastian/code-unit-reverse-lookup 1.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 7\n    - Installation request for sebastian/object-enumerator 1.0.0 -> satisfiable by sebastian/object-enumerator[1.0.0].\n    - sebastian/object-enumerator 1.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 8\n    - Installation request for sebastian/resource-operations 1.0.0 -> satisfiable by sebastian/resource-operations[1.0.0].\n    - sebastian/resource-operations 1.0.0 requires php >=5.6.0 -> your PHP version (5.5.36) does not satisfy that requirement.\n  Problem 9\n    - Installation request for sebastian/version 2.0.0 -> satisfiable by sebastian/version[2.0.0].\n    - sebastian/version 2.0.0 requires php >=5.6 -> your PHP version (5.5.36) does not satisfy that requirement.\n\nApplication ready! Build something amazing.\n```\n\n## Mac OS X 升级PHP版本\n\n### 方法一：\n1. 查询本机PHP版本\n\n```\nuiste:~ uiste$ php -v\nPHP 5.5.36 (cli) (built: May 29 2015 01:07:06) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies\n```\n\n2. 然后我们根据实际需求去升级\n\n`curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4`\n\n```\nuiste:~ uiste$ curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6.4\nDetected OS X El Capitan 10.11. All ok.\nGet packager.tgz\nUnpack packager.tgz\nPlease type in your password, as we want to install this into /usr/local\n\nWARNING: Improper use of the sudo command could lead to data loss\nor the deletion of important system files. Please double-check your\ntyping when using sudo. Type \"man sudo\" for more information.\n\nTo proceed, enter your password, or type Ctrl-C to abort.\n\nPassword:\nStart packager (may take some time)\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/install/5.6.4-frontenddev-latest.dat\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.bz2\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tar.gz\ndownloading https://s3-eu-west-1.amazonaws.com/php-osx.liip.ch/5.6.4-frontenddev.tgz\nDid or could not download package: 5.6.4-frontenddev\n```\n\n>中途会提示你输入密码，下载的 PHP 会放置到 /usr/local 下，但不会覆盖原系统 PHP\n如上所升级的 5.5，PHP 会位于 /usr/local/php5 中，并自动链接到 /etc/apache2/ 下的配置文件\n然后再新建一个 PHP 文件，写上 phpinfo(); 浏览器访问看看，版本已经升级。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpd009wpgwi7ybcjt7p"},{"layout":"post","title":"PHP - 文件上传 | 缩略图","date":"2015-10-08T15:46:01.000Z","_content":"# 文件上传\n---\n### 表单的enctype属性：\n+ `application/x-www-fomr-urlencoded` ：表示表单先服务器传输的文件数据。这是默认格式。(将表单的数据转成XML格式向服务器传输)\n+ `multipart/form-data` ：符合数据，告知浏览器表单中是符合数据（字符串，二进制文件）\n+ `text/plain`：用于向服务器传输大量文本，效率高，但时安全性低，用于发送邮件\n表示表单传输的数据类型\n\n**表单文件域**\n\n```html\n<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\n\t\t<input type=\"file\" name=\"\">\n\t\t<input type=\"submit\" name=\"button\" value=\"上传\">\n\t</form>\n```\n\n### **超全局变量**\n`$_FILES`\n`$_FILES[]['name']` ：上传文件名\n`$_FILES[]['size']`\t：文件上传的大小\n\n**`$_FILES[]['error']`\t：文件上传的错误号 0，1，2，3，4，6，7**\n>UPLOAD_ERR_OK：值为 0，没有错误发生，文件上传成功。\n`UPLOAD_ERR_INI_SIZE` ： 值为 1，上传的文件超过了 php.ini 中 `upload_max_filesize` 选项限制的值。\n`UPLOAD_ERR_FORM_SIZE`：值为 2，上传文件的大小超过了 HTML 表单中 `MAX_FILE_SIZE` 选项指定的值。`<input type='hidden' name='MAX_FILE_SIZE' value='2'>`,隐藏域必须在文件域前面才起作用。\n`UPLOAD_ERR_PARTIAL`：值为 3，文件只有部分被上传。\n`UPLOAD_ERR_NO_FILE`：值为 4，没有文件被上传。\n`UPLOAD_ERR_NO_TMP_DIR`：值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。\n`UPLOAD_ERR_CANT_WRITE`：值为 7，文件写入失败。PHP 5.1.0 引进。\n\n补充：\n>表单允许POST传输的最大值：\n>`post_max_size = 8M`\n\n**`$_FILES[]['type']`\t：上传文件格式，返回MIMIE格式 语法：类型/格式**\n**`$_FILES[]['tmp']`\t：文件上传的临时目录** \n>`upload_tmp_dir='F:\\wamp\\tmp'`  临时目录地址\n\nphp.ini 配置文件\n`file_uploads = On` 是否允许文件上传\n`max_file_uploads = 20` 同时最多允许上传20个文件\n\n### **move_uploaded_file()移动上传文件**\n\n`bool move_uploaded_file ( string $filename , string $destination )`\n`$filename`：上传的文件的文件名。\n`$destination`：移动文件到这个位置。\n\n**常用函数**\n`bool is_uploaded_file ( string $filename )` — 判断文件是否是通过 HTTP POST 上传的\n`is_uploaded_file($_FILES['userfile']['tmp_name'])`：用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如 /etc/passwd\n\n**文件名截取**\n方法一：`strrchr($filename,'.');` 从最后出现的点截取到末尾\n方法二：pathinfo($filename); 通过文件路径返回文件信息\n\n```php\n<?php\n$path_parts = pathinfo('/www/htdocs/inc/lib.inc.php');\n\necho $path_parts['dirname'], \"\\n\";\necho $path_parts['basename'], \"\\n\";\necho $path_parts['extension'], \"\\n\";\necho $path_parts['filename'], \"\\n\"; // since PHP 5.2.0\n?>\n/www/htdocs/inc\nlib.inc.php\nphp\nlib.inc\n```\n\n>以上两种方法方法可以被伪装（强制修改文件扩展名）\n\n方法三：开启`fileinfo`扩展`extension_fileinfo.dll`\n\n```\n$finfo = finfo_open(FILEINFO_MIME); //创建finfo对象，用来匹配文件\n$info = finfo_file($finfo,'F:/image.jpg');//通过对象匹配文件\nvar_dump($info);//显示文件信息\n```\n\n文件上传注意事项：\n>上传文件的大小限制（文件上传`upload_max_filesize`、post大小`post_max_size`、表单隐藏域`<input type='hidden' name='MAX_FILE_SIZE' value='2'>`,文件域之前）\n>文件格式验证的三种方法：\n>路径截取、pathinfo、fileinfo\n\n### 生成唯一文件名\ntime().rand(100,999).strrchr($path,'.');\n\nuniqid().strrchar($path,'.');\n>`string uniqid ([ string $prefix = \"\" [, bool $more_entropy = false ]] )`,可选前缀`prefix`、基于当前时间微秒数的唯一ID。设置第二个参数`more_entropy`为`TRUE`，返回唯一ID更具唯一性。\n\n### 优化文件上传\n\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Date: 2015/10/8 Time: 19:50 \n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\n\n/**\n * Class UploadLib 文件上传类\n */\nclass UploadLib{\n    //保存操作获取的错误信息\n    private $error;\n    //外部调用文件上传的错误信息\n    public function getError(){\n        return $this->error;\n    }\n    /**\n     * 文件上传优化类\n     * @param  array $file 文件上传获取的数组信息\n     * @return string       上传文件的路径\n     */\n    public function upload($file){\n        /**\n         * 验证错误信息，保存到私有属性中\n         */\n        if ($file['error']!==0) {\n            switch ($file['error']) {\n                case 1:\n                    $this->error = \"上传文件超过了配置文件中允许的最大值\";\n                    break;\n                case 2:\n                    $this->error = \"上传文件超过了表单允许的最大值\";\n                    break;\n                case 3:\n                    $this->error = \"只有部分文件上传，没有完全上传\";\n                    break;\n                case 4:\n                    $this->error = \"没有文件被上传\";\n                    break;\n                case 6:\n                    $this->error = \"找不到临时文件\";\n                    break;\n                case 7:\n                    $this->error = \"文件写入失败\";\n                    break;\n                default:\n                    $this->error = \"其它未知错误\";\n                    break;\n            }\n            return false;\n        }\n        /**\n         * 验证文件类型\n         * @param array $allow_types 允许上传的文件类型\n         * @param resource $finfo MIME资源，用于finfo_file匹配需求\n         * @param string $info 文件类型与编码信息的字符串\n         * @param array $type_mime 截取mime文件类型\n         */\n        $allow_types = array(\"image/jpeg\",\"image/png\",\"image/gif\");\n        $finfo = finfo_open(FILEINFO_MIME);\n        $info = finfo_file($finfo, $file['tmp_name']);\n        $info_array = explode(';',$info);\n        $type_mime = $info_array[0];\n        if (!in_array($type_mime,$allow_types)) {\n            $this->error = \"文件类型错误，不能上传\".$type_mime.\"类型的文件\";\n            return false;\n        }\n        /**\n         * 验证文件类型\n         * @param byte $file['size'] 上传文件的大小\n         * @param byte $GLOBALS['config']['file']['allow_size'] 网站允许上传的文件大小\n         */\n        if ($file['size']>$GLOBALS['config']['file']['allow_size']) {\n            $this->error = \"上传文件大小是:\".number_format($file['size']/1024/1024,2).\"M;超过了网站允许的最大值:\".number_format($GLOBALS['config']['file']['allow_size']/1024/1024,2).\"M\";\n            return false;\n        }\n        /**\n         * 验证文件是否通过HTTP POST上传\n         */\n        if (!is_uploaded_file($file['tmp_name'])) {\n            $this->error = \"非法上传文件，必须通过HTTP上传\";\n            return false;\n        }\n        /**\n         * 创建上传文件夹\n         * @param array $type 拆分MIME类型文件类型与文件格式\n         * @param string $folder_set 定义级联文件夹\n         * @param string $folder_path 网站配置上传文件路径与级联路径后的全路径\n         * @param string $file_name 上传文件重新生成的唯一文件名\n         * @param string $file_path 文件全路径，包含文件名\n         */\n        $type = explode('/', $type_mime);//获取的文件类型与文件格式两个值\n        $folder_set = $type[0].DS.$type[1].DS.date('Ym').DS;\n        $folder_path = $GLOBALS['config']['file']['upload_path'].DS.$folder_set;\n        $file_name = uniqid('',true).'.'.$type[1];\n        $file_path = $folder_path.$file_name;\n        if (!file_exists($folder_path)) {\n            if (!mkdir($folder_path,0777,true)) {\n                $this->error = \"上传文件夹创建失败\";\n                return false;\n            }\n\n        }\n        //上传文件\n        if (move_uploaded_file($file['tmp_name'], $file_path)) {\n            return $folder_set.$file_name;\n        }else{\n            $this->error = \"文件上传失败\";\n        }\n    }\n}\n?>\n```\n\n### 多文件上传\n表单命名以数组的形式，接收到的数据，按相同的**属性**组成一个索引数组\n\n# 缩略图\n---\n`bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )`\n重采样拷贝部分图像并调整大小\n\n>dst_image：目标图象连接资源。\nsrc_image：源图象连接资源。\ndst_x：目标 X 坐标点。\ndst_y：目标 Y 坐标点。\nsrc_x：源的 X 坐标点。\nsrc_y：源的 Y 坐标点。\ndst_w：目标宽度。\ndst_h：目标高度。\nsrc_w：源图象的宽度。\nsrc_h：源图象的高度\n\n# 等比缩略图\n---\n思想：按图的长宽比例进行比较，源图的比例大的为标准，短边进行等比压缩。\n>压缩目标图边的长度=源图缩放边的长度*目标图标准边长度/源图标准边的长度\n\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Date: 2015/10/8 Time: 19:50 \n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\n\n/**\n * Class ThumbLib 生成缩略图\n */\nclass ThumbLib{\n    //保存操作获取的错误信息\n    private $error;\n    //外部调用文件上传的错误信息\n    public function getError(){\n        return $this->error;\n    }\n    /**\n     * 生成缩略图\n     * @param string $src_path 源图路径资源\n     * @param int $max_w 缩略图的最大宽度，若调用时不传递就直接使用配置文件的大小\n     * @param int $max_h 缩略图的最大高度，同上\n     * @param bool $is_ration 是否等比缩放\n     * @param string $prefix 缩略图文件名前缀\n     * @return string 返回缩略图路径\n     */\n    public function thumb($src_path,$max_w='',$max_h='',$is_ratio=true,$prefix='small_'){\n        $max_w = $max_w!='' ? $max_w : $GLOBALS['config']['file']['thumb_w'] ;\n        $max_h = $max_h!=''\t? $max_h : $GLOBALS['config']['file']['thumb_h'] ;\n        $ext = strtolower(strrchr($src_path,'.'));//获取文件的后缀\n        $type = '';\n        switch ($ext) {\n            case '.jpg':\n                $type = 'jpeg';\n                break;\n            case '.jpeg':\n                $type = 'jpeg';\n                break;\n            case '.png':\n                $type = 'png';\n                break;\n            case '.gif':\n                $type = 'gif';\n                break;\n            default:\n                $this->error = \"不支持该文件类型\".$ext;\n                return false;\n        }\n        $open_fn = 'imagecreatefrom'.$type; //拼接函数名\n        // 创建缩略图画布\n        $dst_img = imagecreatetruecolor($max_w, $max_h);\n        // 打开源图片资源\n        $src_path_all = $GLOBALS['config']['file']['upload_path'].DS.$src_path;\n        if(!$src_img = $open_fn($src_path_all)){\n           $this->error = \"源图路径错误或者不全\";\n            return false;\n        }\n        $src_w = imagesx($src_img);\n        $src_h = imagesy($src_img);\n        if ($is_ratio) {\n            if ($src_w/$src_h>$max_w/$max_h) {\n                #若源图的宽度较长，则等比缩放高度\n                $dst_w = $max_w;\n                $dst_h = $dst_w*$src_h/$src_w;\n            }else{\n                #如源图的高度较长，则等比缩放宽度\n                $dst_h = $max_h;\n                $dst_w = $dst_h*$src_w/$src_h;\n            }\n        }\n        // 求目标图的坐标\n        $dst_x = (int)(($max_w-$dst_w)/2);\n        $dst_y = (int)(($max_h-$dst_h)/2);\n        // 生成缩略图\n        imagecopyresampled($dst_img, $src_img, $dst_x, $dst_y, 0, 0, $dst_w, $dst_h, $src_w, $src_h);\n        // 保存缩略图\n        $folderpath = dirname($src_path);//获取目录地址\n        $filename = basename($src_path); //获取文件名\n        $small_path = $GLOBALS['config']['file']['upload_path'].DS.$folderpath.DS.$prefix.$filename; //缩略图的全路径\n        $save_fn = 'image'.$type;\n        $save_fn($dst_img,$small_path);\n        // 关闭资源\n        imagedestroy($src_img);\n        imagedestroy($dst_img);\n        // 返回缩略图保存路径\n        return $folderpath.DS.$prefix.$filename;\n    }\n}\n?>\n```\n\n","source":"_posts/2015/201510/20151008-1.md","raw":"layout: post\ntitle: PHP - 文件上传 | 缩略图\ndate: 2015-10-08 23:46:01\ntags:\n- PHP思想养成\n---\n# 文件上传\n---\n### 表单的enctype属性：\n+ `application/x-www-fomr-urlencoded` ：表示表单先服务器传输的文件数据。这是默认格式。(将表单的数据转成XML格式向服务器传输)\n+ `multipart/form-data` ：符合数据，告知浏览器表单中是符合数据（字符串，二进制文件）\n+ `text/plain`：用于向服务器传输大量文本，效率高，但时安全性低，用于发送邮件\n表示表单传输的数据类型\n\n**表单文件域**\n\n```html\n<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\n\t\t<input type=\"file\" name=\"\">\n\t\t<input type=\"submit\" name=\"button\" value=\"上传\">\n\t</form>\n```\n\n### **超全局变量**\n`$_FILES`\n`$_FILES[]['name']` ：上传文件名\n`$_FILES[]['size']`\t：文件上传的大小\n\n**`$_FILES[]['error']`\t：文件上传的错误号 0，1，2，3，4，6，7**\n>UPLOAD_ERR_OK：值为 0，没有错误发生，文件上传成功。\n`UPLOAD_ERR_INI_SIZE` ： 值为 1，上传的文件超过了 php.ini 中 `upload_max_filesize` 选项限制的值。\n`UPLOAD_ERR_FORM_SIZE`：值为 2，上传文件的大小超过了 HTML 表单中 `MAX_FILE_SIZE` 选项指定的值。`<input type='hidden' name='MAX_FILE_SIZE' value='2'>`,隐藏域必须在文件域前面才起作用。\n`UPLOAD_ERR_PARTIAL`：值为 3，文件只有部分被上传。\n`UPLOAD_ERR_NO_FILE`：值为 4，没有文件被上传。\n`UPLOAD_ERR_NO_TMP_DIR`：值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。\n`UPLOAD_ERR_CANT_WRITE`：值为 7，文件写入失败。PHP 5.1.0 引进。\n\n补充：\n>表单允许POST传输的最大值：\n>`post_max_size = 8M`\n\n**`$_FILES[]['type']`\t：上传文件格式，返回MIMIE格式 语法：类型/格式**\n**`$_FILES[]['tmp']`\t：文件上传的临时目录** \n>`upload_tmp_dir='F:\\wamp\\tmp'`  临时目录地址\n\nphp.ini 配置文件\n`file_uploads = On` 是否允许文件上传\n`max_file_uploads = 20` 同时最多允许上传20个文件\n\n### **move_uploaded_file()移动上传文件**\n\n`bool move_uploaded_file ( string $filename , string $destination )`\n`$filename`：上传的文件的文件名。\n`$destination`：移动文件到这个位置。\n\n**常用函数**\n`bool is_uploaded_file ( string $filename )` — 判断文件是否是通过 HTTP POST 上传的\n`is_uploaded_file($_FILES['userfile']['tmp_name'])`：用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如 /etc/passwd\n\n**文件名截取**\n方法一：`strrchr($filename,'.');` 从最后出现的点截取到末尾\n方法二：pathinfo($filename); 通过文件路径返回文件信息\n\n```php\n<?php\n$path_parts = pathinfo('/www/htdocs/inc/lib.inc.php');\n\necho $path_parts['dirname'], \"\\n\";\necho $path_parts['basename'], \"\\n\";\necho $path_parts['extension'], \"\\n\";\necho $path_parts['filename'], \"\\n\"; // since PHP 5.2.0\n?>\n/www/htdocs/inc\nlib.inc.php\nphp\nlib.inc\n```\n\n>以上两种方法方法可以被伪装（强制修改文件扩展名）\n\n方法三：开启`fileinfo`扩展`extension_fileinfo.dll`\n\n```\n$finfo = finfo_open(FILEINFO_MIME); //创建finfo对象，用来匹配文件\n$info = finfo_file($finfo,'F:/image.jpg');//通过对象匹配文件\nvar_dump($info);//显示文件信息\n```\n\n文件上传注意事项：\n>上传文件的大小限制（文件上传`upload_max_filesize`、post大小`post_max_size`、表单隐藏域`<input type='hidden' name='MAX_FILE_SIZE' value='2'>`,文件域之前）\n>文件格式验证的三种方法：\n>路径截取、pathinfo、fileinfo\n\n### 生成唯一文件名\ntime().rand(100,999).strrchr($path,'.');\n\nuniqid().strrchar($path,'.');\n>`string uniqid ([ string $prefix = \"\" [, bool $more_entropy = false ]] )`,可选前缀`prefix`、基于当前时间微秒数的唯一ID。设置第二个参数`more_entropy`为`TRUE`，返回唯一ID更具唯一性。\n\n### 优化文件上传\n\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Date: 2015/10/8 Time: 19:50 \n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\n\n/**\n * Class UploadLib 文件上传类\n */\nclass UploadLib{\n    //保存操作获取的错误信息\n    private $error;\n    //外部调用文件上传的错误信息\n    public function getError(){\n        return $this->error;\n    }\n    /**\n     * 文件上传优化类\n     * @param  array $file 文件上传获取的数组信息\n     * @return string       上传文件的路径\n     */\n    public function upload($file){\n        /**\n         * 验证错误信息，保存到私有属性中\n         */\n        if ($file['error']!==0) {\n            switch ($file['error']) {\n                case 1:\n                    $this->error = \"上传文件超过了配置文件中允许的最大值\";\n                    break;\n                case 2:\n                    $this->error = \"上传文件超过了表单允许的最大值\";\n                    break;\n                case 3:\n                    $this->error = \"只有部分文件上传，没有完全上传\";\n                    break;\n                case 4:\n                    $this->error = \"没有文件被上传\";\n                    break;\n                case 6:\n                    $this->error = \"找不到临时文件\";\n                    break;\n                case 7:\n                    $this->error = \"文件写入失败\";\n                    break;\n                default:\n                    $this->error = \"其它未知错误\";\n                    break;\n            }\n            return false;\n        }\n        /**\n         * 验证文件类型\n         * @param array $allow_types 允许上传的文件类型\n         * @param resource $finfo MIME资源，用于finfo_file匹配需求\n         * @param string $info 文件类型与编码信息的字符串\n         * @param array $type_mime 截取mime文件类型\n         */\n        $allow_types = array(\"image/jpeg\",\"image/png\",\"image/gif\");\n        $finfo = finfo_open(FILEINFO_MIME);\n        $info = finfo_file($finfo, $file['tmp_name']);\n        $info_array = explode(';',$info);\n        $type_mime = $info_array[0];\n        if (!in_array($type_mime,$allow_types)) {\n            $this->error = \"文件类型错误，不能上传\".$type_mime.\"类型的文件\";\n            return false;\n        }\n        /**\n         * 验证文件类型\n         * @param byte $file['size'] 上传文件的大小\n         * @param byte $GLOBALS['config']['file']['allow_size'] 网站允许上传的文件大小\n         */\n        if ($file['size']>$GLOBALS['config']['file']['allow_size']) {\n            $this->error = \"上传文件大小是:\".number_format($file['size']/1024/1024,2).\"M;超过了网站允许的最大值:\".number_format($GLOBALS['config']['file']['allow_size']/1024/1024,2).\"M\";\n            return false;\n        }\n        /**\n         * 验证文件是否通过HTTP POST上传\n         */\n        if (!is_uploaded_file($file['tmp_name'])) {\n            $this->error = \"非法上传文件，必须通过HTTP上传\";\n            return false;\n        }\n        /**\n         * 创建上传文件夹\n         * @param array $type 拆分MIME类型文件类型与文件格式\n         * @param string $folder_set 定义级联文件夹\n         * @param string $folder_path 网站配置上传文件路径与级联路径后的全路径\n         * @param string $file_name 上传文件重新生成的唯一文件名\n         * @param string $file_path 文件全路径，包含文件名\n         */\n        $type = explode('/', $type_mime);//获取的文件类型与文件格式两个值\n        $folder_set = $type[0].DS.$type[1].DS.date('Ym').DS;\n        $folder_path = $GLOBALS['config']['file']['upload_path'].DS.$folder_set;\n        $file_name = uniqid('',true).'.'.$type[1];\n        $file_path = $folder_path.$file_name;\n        if (!file_exists($folder_path)) {\n            if (!mkdir($folder_path,0777,true)) {\n                $this->error = \"上传文件夹创建失败\";\n                return false;\n            }\n\n        }\n        //上传文件\n        if (move_uploaded_file($file['tmp_name'], $file_path)) {\n            return $folder_set.$file_name;\n        }else{\n            $this->error = \"文件上传失败\";\n        }\n    }\n}\n?>\n```\n\n### 多文件上传\n表单命名以数组的形式，接收到的数据，按相同的**属性**组成一个索引数组\n\n# 缩略图\n---\n`bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )`\n重采样拷贝部分图像并调整大小\n\n>dst_image：目标图象连接资源。\nsrc_image：源图象连接资源。\ndst_x：目标 X 坐标点。\ndst_y：目标 Y 坐标点。\nsrc_x：源的 X 坐标点。\nsrc_y：源的 Y 坐标点。\ndst_w：目标宽度。\ndst_h：目标高度。\nsrc_w：源图象的宽度。\nsrc_h：源图象的高度\n\n# 等比缩略图\n---\n思想：按图的长宽比例进行比较，源图的比例大的为标准，短边进行等比压缩。\n>压缩目标图边的长度=源图缩放边的长度*目标图标准边长度/源图标准边的长度\n\n```php\n<?php\n/*\n** +-------------------------------------------\n** | Author: uiste [ JUST DO IT ]\n** +-------------------------------------------\n** | Date: 2015/10/8 Time: 19:50 \n** +-------------------------------------------\n** | Connection: <blog.uiste.com>\n** +-------------------------------------------\n*/\n\n/**\n * Class ThumbLib 生成缩略图\n */\nclass ThumbLib{\n    //保存操作获取的错误信息\n    private $error;\n    //外部调用文件上传的错误信息\n    public function getError(){\n        return $this->error;\n    }\n    /**\n     * 生成缩略图\n     * @param string $src_path 源图路径资源\n     * @param int $max_w 缩略图的最大宽度，若调用时不传递就直接使用配置文件的大小\n     * @param int $max_h 缩略图的最大高度，同上\n     * @param bool $is_ration 是否等比缩放\n     * @param string $prefix 缩略图文件名前缀\n     * @return string 返回缩略图路径\n     */\n    public function thumb($src_path,$max_w='',$max_h='',$is_ratio=true,$prefix='small_'){\n        $max_w = $max_w!='' ? $max_w : $GLOBALS['config']['file']['thumb_w'] ;\n        $max_h = $max_h!=''\t? $max_h : $GLOBALS['config']['file']['thumb_h'] ;\n        $ext = strtolower(strrchr($src_path,'.'));//获取文件的后缀\n        $type = '';\n        switch ($ext) {\n            case '.jpg':\n                $type = 'jpeg';\n                break;\n            case '.jpeg':\n                $type = 'jpeg';\n                break;\n            case '.png':\n                $type = 'png';\n                break;\n            case '.gif':\n                $type = 'gif';\n                break;\n            default:\n                $this->error = \"不支持该文件类型\".$ext;\n                return false;\n        }\n        $open_fn = 'imagecreatefrom'.$type; //拼接函数名\n        // 创建缩略图画布\n        $dst_img = imagecreatetruecolor($max_w, $max_h);\n        // 打开源图片资源\n        $src_path_all = $GLOBALS['config']['file']['upload_path'].DS.$src_path;\n        if(!$src_img = $open_fn($src_path_all)){\n           $this->error = \"源图路径错误或者不全\";\n            return false;\n        }\n        $src_w = imagesx($src_img);\n        $src_h = imagesy($src_img);\n        if ($is_ratio) {\n            if ($src_w/$src_h>$max_w/$max_h) {\n                #若源图的宽度较长，则等比缩放高度\n                $dst_w = $max_w;\n                $dst_h = $dst_w*$src_h/$src_w;\n            }else{\n                #如源图的高度较长，则等比缩放宽度\n                $dst_h = $max_h;\n                $dst_w = $dst_h*$src_w/$src_h;\n            }\n        }\n        // 求目标图的坐标\n        $dst_x = (int)(($max_w-$dst_w)/2);\n        $dst_y = (int)(($max_h-$dst_h)/2);\n        // 生成缩略图\n        imagecopyresampled($dst_img, $src_img, $dst_x, $dst_y, 0, 0, $dst_w, $dst_h, $src_w, $src_h);\n        // 保存缩略图\n        $folderpath = dirname($src_path);//获取目录地址\n        $filename = basename($src_path); //获取文件名\n        $small_path = $GLOBALS['config']['file']['upload_path'].DS.$folderpath.DS.$prefix.$filename; //缩略图的全路径\n        $save_fn = 'image'.$type;\n        $save_fn($dst_img,$small_path);\n        // 关闭资源\n        imagedestroy($src_img);\n        imagedestroy($dst_img);\n        // 返回缩略图保存路径\n        return $folderpath.DS.$prefix.$filename;\n    }\n}\n?>\n```\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpe009ypgwiwod81krk"},{"layout":"post","title":"Smarty2 模板引擎","date":"2015-10-16T18:40:34.000Z","_content":"# Smarty 模板引擎\n## Smarty作用\nSmarty 是一个成熟的引擎，用来实现表现和内容相分离。\n[Smarty官网](www.smarty.net)\n>文件目录\n* `plugins` 存放Smarty插件，即扩展类文件\n* `sysplugins` 存放系统系统函数的目录\n* `Smarty.class.php` Smarty 的入口文件，引入此文件即可\n* `SmartyBC.class.php` 兼容版\n\n>Smarty.class.php -构造函数\n* setTemplateDir(): 设置模板文件夹\n* setCompileDir(): 设置混编文件夹\n* setCacheDir(): 设置缓存文件夹\n* setConfigsDir(): 设置配置文件夹\n\n## 使用步骤\n拷贝核心文件libs 到站点下。并更名为Smarty\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->assign('name','uiste');\n$smarty->display('demo1.html');\n```\n\n界定符：`$left_delimiter = '{' `\n修改界定符：`$smarty->left_delimiter = '<{';`\n更改模板文件：`$smarty->setTemplateDir('./views/');`\n更改混编文件夹：`$smarty->setCompileDir('./view_c/');`\n\n\n注释：`{*这是Smarty的注释*}`\n多学一招：Smarty和HTML注释内容的区别。Smarty注释在网页源代码中不显示。\n>如果Smarty的定界符是`{*` `*}`那么注释的语法是?\n答：`{** 注释 **}`\n\n## 变量\n### 普通变量\n自定义变量。\n语法一：\n在PHP文件中，$smarty->assign('变量名','变量值');\n在模板文件中，`{$name}`\n语法二：\n在模板文件中，使用{assign} 标签,定义变量\n`{assign var='name' value='berry'}`\n`{$name}`\n\n### 保留变量\nSmarty 中有一个特殊的变量 `$smarty` ，不能作为自定义变量名，他是一个保留变量（内置变量）。该变量用来获取用户的请求、系统变量、常量。\n>例题\n>* 模板文件中：`{$smarty.get.name}` 获取`GET`、`POST`、`REQUEST`提交的值\n>* 模板文件中：`{$smarty.const.PI}` 获取`define`定义常量\n>* PHP文件中：`$_SESSION['name'] = 'root'` ；模板文件中：`$smarty.session.admin` 获取会话的值，`$smarty.cookies.admin` 获取cookie的值\n>* 模板文件中：`{$smarty.server.DOCUMENT_ROOT}` 获取根目录\n>* 模板文件中：`{$smarty.now}` 获取时间戳\n>* 模板文件中：`{$smarty.ldelim}`，`{$smarty.rdelim}` 获取左右界定符\n>* 模板文件中：`{$smarty.version}` 获取版本号\n\n### 配置变量\n将变量保存在配置文件，然后再Smarty模板中引入\n>1. 新建`configs`文件夹\n>2. 创建`smarty.conf`文件，参数设置如下：\n>```\n>HOST          = 127.0.0.1\n>USERNAME =  ROOT\n>PWD            =  aa\n>[style1]\n>COLOR        =   #FF0000\n>[style2]\n>COLOR        =   #00FF00\n>```\n>配置文件中**节**，用`[]`中括号来声明，通过`config_load` 的 `section` 属性来引入配置文件中的节，没有经过`[]`设置为节的为**全局**配置文件\n>3. 模板文件中：`{config_load file = 'smarty.conf' section=''}` //只需要写配置文件名，不需要写路径\n>4. 模板文件中，获取数据\n> 语法a) ：{##}\n> 主机名{#HOST#} 用户名{#USERNAME#}\n\n自定义不同情况下的颜色\n```\n*{\n\tcolor:{##COLOR}\n}\n```\n## 数组\n### 在Smarty中对数组的操作有两种方法\n方法一：{数组[下标]}\n方法二：{数组.下标}\n### foreach 循环遍历数组\n#### 语法\n```\n{foreach 数组 as 键=>值}\n//循环体\n{foreachelse}\n//没有数组输出，foreachelse可以省略\n{/foreach}\n```\n\n#### 属性\n语法：`{值变量@属性}`\n`{$value@iteration}` 从1开始的编号\n`{$value@index}` 从0开始的索引\n`{$value@first}` 是否是第一个元素 \n`{$value@last}` 是否是最后一个元素\n`{$value@show}` 数组中是否有元素显示\n`{$value@total}` 一共有多少个元素\n\n### section 循环遍历数组\n只能遍历索引数组，不能遍历关联数组\n#### 语法：\n`{section name = 自定义变量(key)  loop=数组($week)}`\n{$week[key]}//循环体\n{sectionelse} \n//没有数组输出\n{/section}\n#### 属性\n`{$smarty.section.自定义变量名.iteration}` 从1增长的编号\n`{$smarty.section.自定义变量名.index}` 从0增长的索引\n`{$smarty.section.自定义变量名.first}` 是否是第一个元素\n`{$smarty.section.自定义变量名.last}` 是否是最后一个元素\n\n## 判断\n语法：\n```\n{if $score>=90}\n优秀\n{elseif $score>=80}\n良好\n{else $score>=70}\n满意\n{/if}\n```\n\n## 循环\n### for循环\n```\n{for 变量=初始值 to 结束值 [step 步长]}\n//循环体\n{/for}\n```\n\n```\n{for $i=1 to 10 step 2}\n\t{$i}:锄禾日当午\n{/for}\n```\n\n>步长默认是1，step 自定义步长\n### while循环\n```\n{while 条件}\n\t//循环体\n{/while}\n```\n\n```\n{assign var='n' value=1}\n{while $n<=10}\n\t{$n++}:汗滴禾下土\n{/while}\n```\n\n## 自定义函数\n### {html_checkboxes} 复选框\n\n模板文件中：\n方法一：`{html_checkboxes output=$output values=$values selected=$selected}`\n方法二：`{html_checkboxes options=$options selected=$selected}`\nPHP文件中：\n```\n$smarty->assign('output',array('ff','bb','cc','dd','ee'));\n$smarty->assign('value',array('1','2','3','4','5'));\n$smarty->assign('selected',array('1','4'));\n```\n\n模板文件中\n```\n{html_checkboxes output=$output values=$value selected=$selected}\n{html_options output=$output values=$value name='hobby' selected=$selected2}\n{html_radios output=$output values=$value selected=$selected2}\n{html_select_date month_format='%m' field_order='YMD'}\n```\n\n### {html_options} 下拉菜单\n模板文件中：\n`{html_options options=$options name='hobby' selected=$selected}`\nPHP文件中：\n\n### {html_radios}单选按钮\n模板文件中：\n`{html_radios options=$options selected=$selected}`\n\n### {html_select_date}显示日期\n`{html_select_date month_format='%m' field_order='YMD'}`\n\n## 变量修饰器\n要使用变量修饰器，我们需要管道运算符( | )\n\n在默认情况下，`truncate`是按字节截取的，但是中文属于多字节字符，在UTF-8下一个字符占用3个字节显示，这样会出现乱码；如果开启了多字节处理，`truncate`就会自动按多字符处理了。\n>`extension=php_mbstring.dll`\n\n## 缓存\n### Smarty 缓存就是生成静态页面\n开启：`$smarty->caching = 1;`  开启缓存\n更新缓存：\n方法一：删除对应的缓存，系统会更新\n方法二：更改对应的模板文件，包括配置文件，包含文件，布局文件缓存都会自动更新\n方法三：缓存文件的有效时间过期，会自动更新\n方法四：`$smarty->force_cache = true;` 强制更新缓存\n\n### 缓存的生命周期\n默认情况下，缓存的生命周期是3600秒。\n`$smarty->cache_lifetime = -1 | 0 | N;`\n* N：表示缓存文件生命周期是N秒\n* 0：缓存文件立即失效\n* -1：永远不失效\n\n### 单模板，多缓存【缓存分页】\nphp文件：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$smarty->display('demo17.html',$_GET['pageno'])\n```\n\n模板文件：\n```\n当前是第{$smarty.get.pageno}页\n```\n\n### 缓存集合\nPHP代码：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$color = $_GET['color'];\n$size = $_GET['size']\n$smarty->display('demo18.html',\"$color|$size\");\n```\n\n模板文件：\n```\n颜色：{$smarty.get.color}\n大小：{$samrty.get.size}\n```\n\n>邓东旭语：厉害了我的哥\n\n### 清除缓存\n$smarty->clearCache(模板，识别id)\n$smarty->clearAllCache();  //清楚所有缓存\n\n`$smarty->clearCache('demo18.html','red|4');`清除有demeo18.html 模板生成的red 和 4组合的缓存\n2、$smarty->clearCache('demo18.html','red') : 清除demo18.html 模板生成的带有red的缓存\n3、$smarty->clearCache(null,'red'); //清楚所有模板中带有red 的缓存\n\n局部缓存\n\n方法一：如果只有一个变量不缓存使用nocache属性\n模板文件`{$smarty.now nocache}`\n\n方法二：如果有很多内容不缓存，使用`{nocache}`标签\n```\n{nocache}\n一大堆什么鬼东西，是会被动态加载的\n{/nocache}\n```\n\n### money\nPHP文件：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$smarty->display('demo17.html',$_GET['pageno'])\n```\n\n模板文件：\n```\n<style type='text/css'>\n.aa{\n\tcolor:red;\n}\n</style>\n<div class='aa'>锄禾日当午</div>\n```\n\n>报错问题：源于大括号`{}`，Smarty将CSS中大括号当成了Smarty的定界符\n\n解决方法：\n方法一：更改定界符\n方法二：在CSS和JS的大括号后面加上一个空格\n方法三：使用{literal}标签，在literal标签内的大括号不会被解析\n\n### Smarty的优点与缺点\n1. 因为可以生产缓存，所有速度快\n2. 如果要实时更新的内容很多的情况，不适合使用Smarty（比如，股票），如果一个小项目，不适合用\n\n\n","source":"_posts/2015/201510/20151017-1.md","raw":"layout: post\ntitle: Smarty2 模板引擎\ndate: 2015-10-17 02:40:34\ntags:\n- Smarty\n---\n# Smarty 模板引擎\n## Smarty作用\nSmarty 是一个成熟的引擎，用来实现表现和内容相分离。\n[Smarty官网](www.smarty.net)\n>文件目录\n* `plugins` 存放Smarty插件，即扩展类文件\n* `sysplugins` 存放系统系统函数的目录\n* `Smarty.class.php` Smarty 的入口文件，引入此文件即可\n* `SmartyBC.class.php` 兼容版\n\n>Smarty.class.php -构造函数\n* setTemplateDir(): 设置模板文件夹\n* setCompileDir(): 设置混编文件夹\n* setCacheDir(): 设置缓存文件夹\n* setConfigsDir(): 设置配置文件夹\n\n## 使用步骤\n拷贝核心文件libs 到站点下。并更名为Smarty\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->assign('name','uiste');\n$smarty->display('demo1.html');\n```\n\n界定符：`$left_delimiter = '{' `\n修改界定符：`$smarty->left_delimiter = '<{';`\n更改模板文件：`$smarty->setTemplateDir('./views/');`\n更改混编文件夹：`$smarty->setCompileDir('./view_c/');`\n\n\n注释：`{*这是Smarty的注释*}`\n多学一招：Smarty和HTML注释内容的区别。Smarty注释在网页源代码中不显示。\n>如果Smarty的定界符是`{*` `*}`那么注释的语法是?\n答：`{** 注释 **}`\n\n## 变量\n### 普通变量\n自定义变量。\n语法一：\n在PHP文件中，$smarty->assign('变量名','变量值');\n在模板文件中，`{$name}`\n语法二：\n在模板文件中，使用{assign} 标签,定义变量\n`{assign var='name' value='berry'}`\n`{$name}`\n\n### 保留变量\nSmarty 中有一个特殊的变量 `$smarty` ，不能作为自定义变量名，他是一个保留变量（内置变量）。该变量用来获取用户的请求、系统变量、常量。\n>例题\n>* 模板文件中：`{$smarty.get.name}` 获取`GET`、`POST`、`REQUEST`提交的值\n>* 模板文件中：`{$smarty.const.PI}` 获取`define`定义常量\n>* PHP文件中：`$_SESSION['name'] = 'root'` ；模板文件中：`$smarty.session.admin` 获取会话的值，`$smarty.cookies.admin` 获取cookie的值\n>* 模板文件中：`{$smarty.server.DOCUMENT_ROOT}` 获取根目录\n>* 模板文件中：`{$smarty.now}` 获取时间戳\n>* 模板文件中：`{$smarty.ldelim}`，`{$smarty.rdelim}` 获取左右界定符\n>* 模板文件中：`{$smarty.version}` 获取版本号\n\n### 配置变量\n将变量保存在配置文件，然后再Smarty模板中引入\n>1. 新建`configs`文件夹\n>2. 创建`smarty.conf`文件，参数设置如下：\n>```\n>HOST          = 127.0.0.1\n>USERNAME =  ROOT\n>PWD            =  aa\n>[style1]\n>COLOR        =   #FF0000\n>[style2]\n>COLOR        =   #00FF00\n>```\n>配置文件中**节**，用`[]`中括号来声明，通过`config_load` 的 `section` 属性来引入配置文件中的节，没有经过`[]`设置为节的为**全局**配置文件\n>3. 模板文件中：`{config_load file = 'smarty.conf' section=''}` //只需要写配置文件名，不需要写路径\n>4. 模板文件中，获取数据\n> 语法a) ：{##}\n> 主机名{#HOST#} 用户名{#USERNAME#}\n\n自定义不同情况下的颜色\n```\n*{\n\tcolor:{##COLOR}\n}\n```\n## 数组\n### 在Smarty中对数组的操作有两种方法\n方法一：{数组[下标]}\n方法二：{数组.下标}\n### foreach 循环遍历数组\n#### 语法\n```\n{foreach 数组 as 键=>值}\n//循环体\n{foreachelse}\n//没有数组输出，foreachelse可以省略\n{/foreach}\n```\n\n#### 属性\n语法：`{值变量@属性}`\n`{$value@iteration}` 从1开始的编号\n`{$value@index}` 从0开始的索引\n`{$value@first}` 是否是第一个元素 \n`{$value@last}` 是否是最后一个元素\n`{$value@show}` 数组中是否有元素显示\n`{$value@total}` 一共有多少个元素\n\n### section 循环遍历数组\n只能遍历索引数组，不能遍历关联数组\n#### 语法：\n`{section name = 自定义变量(key)  loop=数组($week)}`\n{$week[key]}//循环体\n{sectionelse} \n//没有数组输出\n{/section}\n#### 属性\n`{$smarty.section.自定义变量名.iteration}` 从1增长的编号\n`{$smarty.section.自定义变量名.index}` 从0增长的索引\n`{$smarty.section.自定义变量名.first}` 是否是第一个元素\n`{$smarty.section.自定义变量名.last}` 是否是最后一个元素\n\n## 判断\n语法：\n```\n{if $score>=90}\n优秀\n{elseif $score>=80}\n良好\n{else $score>=70}\n满意\n{/if}\n```\n\n## 循环\n### for循环\n```\n{for 变量=初始值 to 结束值 [step 步长]}\n//循环体\n{/for}\n```\n\n```\n{for $i=1 to 10 step 2}\n\t{$i}:锄禾日当午\n{/for}\n```\n\n>步长默认是1，step 自定义步长\n### while循环\n```\n{while 条件}\n\t//循环体\n{/while}\n```\n\n```\n{assign var='n' value=1}\n{while $n<=10}\n\t{$n++}:汗滴禾下土\n{/while}\n```\n\n## 自定义函数\n### {html_checkboxes} 复选框\n\n模板文件中：\n方法一：`{html_checkboxes output=$output values=$values selected=$selected}`\n方法二：`{html_checkboxes options=$options selected=$selected}`\nPHP文件中：\n```\n$smarty->assign('output',array('ff','bb','cc','dd','ee'));\n$smarty->assign('value',array('1','2','3','4','5'));\n$smarty->assign('selected',array('1','4'));\n```\n\n模板文件中\n```\n{html_checkboxes output=$output values=$value selected=$selected}\n{html_options output=$output values=$value name='hobby' selected=$selected2}\n{html_radios output=$output values=$value selected=$selected2}\n{html_select_date month_format='%m' field_order='YMD'}\n```\n\n### {html_options} 下拉菜单\n模板文件中：\n`{html_options options=$options name='hobby' selected=$selected}`\nPHP文件中：\n\n### {html_radios}单选按钮\n模板文件中：\n`{html_radios options=$options selected=$selected}`\n\n### {html_select_date}显示日期\n`{html_select_date month_format='%m' field_order='YMD'}`\n\n## 变量修饰器\n要使用变量修饰器，我们需要管道运算符( | )\n\n在默认情况下，`truncate`是按字节截取的，但是中文属于多字节字符，在UTF-8下一个字符占用3个字节显示，这样会出现乱码；如果开启了多字节处理，`truncate`就会自动按多字符处理了。\n>`extension=php_mbstring.dll`\n\n## 缓存\n### Smarty 缓存就是生成静态页面\n开启：`$smarty->caching = 1;`  开启缓存\n更新缓存：\n方法一：删除对应的缓存，系统会更新\n方法二：更改对应的模板文件，包括配置文件，包含文件，布局文件缓存都会自动更新\n方法三：缓存文件的有效时间过期，会自动更新\n方法四：`$smarty->force_cache = true;` 强制更新缓存\n\n### 缓存的生命周期\n默认情况下，缓存的生命周期是3600秒。\n`$smarty->cache_lifetime = -1 | 0 | N;`\n* N：表示缓存文件生命周期是N秒\n* 0：缓存文件立即失效\n* -1：永远不失效\n\n### 单模板，多缓存【缓存分页】\nphp文件：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$smarty->display('demo17.html',$_GET['pageno'])\n```\n\n模板文件：\n```\n当前是第{$smarty.get.pageno}页\n```\n\n### 缓存集合\nPHP代码：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$color = $_GET['color'];\n$size = $_GET['size']\n$smarty->display('demo18.html',\"$color|$size\");\n```\n\n模板文件：\n```\n颜色：{$smarty.get.color}\n大小：{$samrty.get.size}\n```\n\n>邓东旭语：厉害了我的哥\n\n### 清除缓存\n$smarty->clearCache(模板，识别id)\n$smarty->clearAllCache();  //清楚所有缓存\n\n`$smarty->clearCache('demo18.html','red|4');`清除有demeo18.html 模板生成的red 和 4组合的缓存\n2、$smarty->clearCache('demo18.html','red') : 清除demo18.html 模板生成的带有red的缓存\n3、$smarty->clearCache(null,'red'); //清楚所有模板中带有red 的缓存\n\n局部缓存\n\n方法一：如果只有一个变量不缓存使用nocache属性\n模板文件`{$smarty.now nocache}`\n\n方法二：如果有很多内容不缓存，使用`{nocache}`标签\n```\n{nocache}\n一大堆什么鬼东西，是会被动态加载的\n{/nocache}\n```\n\n### money\nPHP文件：\n```\nrequire './Smarty/Smarty.class.php';\n$smarty = new Smarty();\n$smarty->caching = 1; //开启缓存\n$smarty->display('demo17.html',$_GET['pageno'])\n```\n\n模板文件：\n```\n<style type='text/css'>\n.aa{\n\tcolor:red;\n}\n</style>\n<div class='aa'>锄禾日当午</div>\n```\n\n>报错问题：源于大括号`{}`，Smarty将CSS中大括号当成了Smarty的定界符\n\n解决方法：\n方法一：更改定界符\n方法二：在CSS和JS的大括号后面加上一个空格\n方法三：使用{literal}标签，在literal标签内的大括号不会被解析\n\n### Smarty的优点与缺点\n1. 因为可以生产缓存，所有速度快\n2. 如果要实时更新的内容很多的情况，不适合使用Smarty（比如，股票），如果一个小项目，不适合用\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpf00a2pgwipmjt8clz"},{"layout":"post","title":"数据库设计-商城购物系统","date":"2015-10-16T18:43:08.000Z","_content":"## 数据库设计\n```sql\n/*\n Navicat Premium Data Transfer\n\n Source Server         : uiste\n Source Server Type    : MySQL\n Source Server Version : 50542\n Source Host           : localhost\n Source Database       : ugo\n\n Target Server Type    : MySQL\n Target Server Version : 50542\n File Encoding         : utf-8\n\n Date: 10/16/2015 14:27:21 PM\n*/\n\n#创建数据库\ncreate database ugo charset utf8;\n#选择数据库\nuse ugou;\n\n/*------------------------------------商品模块---------------------------------------*/\n#创建商品类别表\nDROP TABLE IF EXISTS `ugo_category`;\ncreate table ugo_category(\n\tcat_id smallint unsigned not null auto_increment primary key comment '商品类别ID',\n\tcat_name varchar(30) not null default '' comment '商品类别名称',\n\tcat_parent_id smallint unsigned not null default 0 comment '商品类别父ID',\n\tcat_desc varchar(255) not null default '' comment '商品类别描述',\n\tsort_order tinyint not null default 50 comment '排序依据',\n\tunit varchar(15) not null default '' comment '单位',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tindex pid(cat_parent_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品国家表\nDROP TABLE IF EXISTS `ugo_country`;\ncreate table ugo_country(\n\tcountry_id smallint unsigned not null auto_increment primary key comment '国家ID',\n\tcountry_name varchar(30) not null default '' comment '国家名称',\n\tcountry_parent_name enum('亚洲','欧洲','北美洲','南美洲','非洲','大洋洲','南极洲') not null default '亚洲' comment '国家所属区域',\n\tsort_order tinyint not null default 50 comment '排序依据',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tindex pid(country_parent_name)\n)engine=MyISAM charset=utf8;\n\n#创建商品品牌表\nDROP TABLE IF EXISTS `ugo_brand`;\ncreate table ugo_brand(\n\tbrand_id smallint unsigned not null auto_increment primary key comment '商品品牌ID',\n\tbrand_name varchar(30) not null default '' comment '商品品牌名称',\n\tbrand_desc varchar(255) not null default '' comment '商品品牌描述',\n\turl varchar(100) not null default '' comment '商品品牌网址',\n\tlogo varchar(50) not null default '' comment '品牌logo',\n\tsort_order tinyint unsigned not null default 50 comment '商品品牌排序依据',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tcountry_id smallint unsigned not null comment '商品品牌所属国家ID'\n)engine=MyISAM charset=utf8;\n\n#创建商品类型表\nDROP TABLE IF EXISTS `ugo_attrtype`;\ncreate table ugo_attrtype(\n\ttype_id smallint unsigned not null auto_increment primary key comment '商品类型ID',\n\ttype_name varchar(50) not null default '' comment '商品类型名称'\n)engine=MyISAM charset=utf8;\n\n\n#创建商品属性表\nDROP TABLE IF EXISTS `ugo_attribute`;\ncreate table ugo_attribute(\n\tattr_id smallint unsigned not null auto_increment primary key comment '商品属性ID',\n\tattr_name varchar(50) not null default '' comment '商品属性名称',\n\ttype_id smallint not null default 0 comment '商品属性所属类型ID',\n\tattr_input_type tinyint not null default 1 comment '属性录入方式 0为手工录入，1为从列表中选择，2为文本域',\n\tattr_input_value text comment '属性的值',\n\tindex type_id(type_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品表\nDROP TABLE IF EXISTS `ugo_goods`;\ncreate table ugo_goods(\n\tgoods_id int unsigned not null auto_increment primary key comment '商品ID',\n\tgoods_sn varchar(30) not null default '' comment '商品货号',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_brief varchar(255) not null default '' comment '商品简单描述',\n\tgoods_slogan varchar(50) not null default '' comment '商品宣传语',\n\tgoods_desc text comment '商品详情',\n\tcat_id smallint unsigned not null default 0 comment '商品所属类别ID',\n\tbrand_id smallint unsigned not null default 0 comment '商品所属品牌ID',\n\tmarket_price decimal(10,2) not null default 0 comment '市场价格',\n\tpromote_price decimal(10,2) not null default 0 comment '促销价格',\n\tpromote_start_time int unsigned not null default 0 comment '促销起始时间',\n\tpromote_end_time int unsigned not null default 0 comment '促销截止时间',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tgoods_thumb varchar(50) not null default '' comment '商品缩略图',\n\tgoods_number smallint unsigned not null default 0 comment '商品库存',\n\tclick_count int unsigned not null default 0 comment '点击次数',\n\ttype_id smallint unsigned not null default 0 comment '商品类型ID',\n\tis_promote tinyint unsigned not null default 0 comment '是否促销，默认为0不促销',\n\tis_best tinyint unsigned not null default 0 comment '是否精品,默认为0',\n\tis_new tinyint unsigned not null default 0 comment '是否新品，默认为0',\n\tis_hot tinyint unsigned not null default 0 comment '是否热卖,默认为0',\n\tis_onsale tinyint unsigned not null default 1 comment '是否上架,默认为1',\n\tadd_time int unsigned not null default 0 comment '添加时间',\n\tindex cat_id(cat_id),\n\tindex brand_id(brand_id),\n\tindex type_id(type_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品属性对应表\nDROP TABLE IF EXISTS `ugo_goods_attr`;\ncreate table ugo_goods_attr(\n\tgoods_attr_id int unsigned not null auto_increment primary key comment '编号ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tattr_id smallint unsigned not null default 0 comment '属性ID',\n\tattr_value varchar(255) not null default '' comment '属性值',\n\tattr_price decimal(10,2) not null default 0 comment '属性价格',\n\tindex goods_id(goods_id),\n\tindex attr_id(attr_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品相册表\nDROP TABLE IF EXISTS `ugo_gallery`;\ncreate table ugo_gallery(\n\timg_id int unsigned not null auto_increment primary key comment '图片编号',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\timg_url varchar(50) not null default '' comment '图片URL',\n\tthumb_url varchar(50) not null default '' comment '缩略图URL',\n\timg_desc varchar(50) not null default '' comment '图片描述',\n\tindex goods_id(goods_id)\n)engine=MyISAM charset=utf8;\n\n/*------------------------------------商品模块 end-----------------------------------*/\n\n\n/*------------------------------------用户模块---------------------------------------*/\n#创建用户表\nDROP TABLE IF EXISTS `ugo_user`;\ncreate table ugo_user(\n\tuser_id int unsigned not null auto_increment primary key comment '用户编号',\n\tuser_name varchar(50) not null default '' comment '用户名',\n\ttel char(12) not null default '' comment '手机号码',\n\temail varchar(50) not null default '' comment '电子邮箱',\n\tpassword char(32) not null default '' comment '用户密码,md5加密',\n\treg_time int unsigned not null default 0 comment '用户注册时间'\n)engine=MyISAM charset=utf8;\n\n#创建用户收货地址表\nDROP TABLE IF EXISTS `ugo_address`;\ncreate table ugo_address(\n\taddress_id int unsigned not null auto_increment primary key comment '地址编号',\n\tuser_id int unsigned not null default 0 comment '地址所属用户ID',\n\tconsignee varchar(60) not null default '' comment '收货人姓名',\n\tprovince smallint unsigned not null default 0 comment '省份，保存是ID',\n\tcity smallint unsigned not null default 0 comment '市',\n\tdistrict smallint unsigned not null default 0 comment '区',\n\tstreet varchar(100) not null default '' comment '街道地址',\n\tzipcode varchar(10) not null default '' comment '邮政编码',\n\ttelephone varchar(20) not null default '' comment '电话',\n\tmobile varchar(20) not null default '' comment '移动电话',\n\tindex user_id(user_id)\n)engine=MyISAM charset=utf8;\n\n#创建地区表，包括省市区三级\nDROP TABLE IF EXISTS `ugo_region`;\ncreate table ugo_region(\n\tregion_id smallint unsigned not null auto_increment primary key comment '地区ID',\n\tparent_id smallint unsigned not null default 0 comment '父ID',\n\tregion_name varchar(30) not null default '' comment '地区名称',\n\tregion_type tinyint unsigned not null default 1 comment '地区类型 1 省份 2 市 3 区(县)'\n)engine=MyISAM charset=utf8;\n\n#创建购物车表\nDROP TABLE IF EXISTS `ugo_cart`;\ncreate table ugo_cart(\n\tcart_id int unsigned not null auto_increment primary key comment '购物车ID',\n\tuser_id int unsigned not null default 0 comment '用户ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tgoods_attr varchar(255) not null default '' comment '商品属性',\n\tgoods_number smallint unsigned not null default 1 comment '商品数量',\n\tmarket_price decimal(10,2) not null default 0 comment '市场价格',\n\tgoods_price decimal(10,2) not null default 0 comment '成交价格',\n\tsubtotal decimal(10,2) not null default 0 comment '小计'\n)engine=MyISAM charset=utf8;\n/*------------------------------------用户模块 end-----------------------------------*/\n\n\n\n\n/*------------------------------------订单模块---------------------------------------*/\n#创建送货方式表\nDROP TABLE IF EXISTS `ugo_shipping`;\ncreate table ugo_shipping(\n\tshipping_id tinyint unsigned not null auto_increment primary key comment '编号',\n\tshipping_name varchar(30) not null default '' comment '送货方式名称',\n\tshipping_desc varchar(255) not null default '' comment '送货方式描述',\n\tshipping_fee decimal(10,2) not null default 0 comment '送货费用',\n\tenabled tinyint unsigned not null default 1 comment '是否启用，默认启用'\n)engine=MyISAM charset=utf8;\n\n\n#创建支付方式表\nDROP TABLE IF EXISTS `ugo_payment`;\ncreate table ugo_payment(\n\tpay_id tinyint unsigned not null auto_increment primary key comment '支付方式ID',\n\tpay_name varchar(30) not null default '' comment '支付方式名称',\n\tpay_desc varchar(255) not null default '' comment '支付方式描述',\n\tenabled tinyint unsigned not null default 1 comment '是否启用，默认启用'\n)engine=MyISAM charset=utf8;\n\n\n#创建订单表\nDROP TABLE IF EXISTS `ugo_order`;\ncreate table ugo_order(\n\torder_id int unsigned not null auto_increment primary key comment '订单ID',\n\torder_sn varchar(30) not null default '' comment '订单号',\n\tuser_id int unsigned not null default 0 comment '用户ID',\n\taddress_id int unsigned not null default 0 comment '收货地址id',\n\torder_status tinyint unsigned not null default 0 comment '订单状态 1 待付款 2 待发货 3 已发货 4 已完成',\n\tpostscripts varchar(255) not null default '' comment '订单附言',\n\tshipping_id tinyint not null default 0 comment '送货方式ID',\n\tpay_id tinyint not null default 0 comment '支付方式ID',\n\tgoods_amount decimal(10,2) not null default 0 comment '商品总金额',\n\torder_amount decimal(10,2) not null default 0 comment '订单总金额',\n\torder_time int unsigned not null default 0 comment '下单时间',\n\tindex user_id(user_id),\n\tindex address_id(address_id),\n\tindex pay_id(pay_id),\n\tindex shipping_id(shipping_id)\n)engine=MyISAM charset=utf8;\n\n\n#创建订单明细表,即商品订单关系表（多对多）\nDROP TABLE IF EXISTS `ugo_order_goods`;\ncreate table ugo_order_goods(\n\trec_id int unsigned not null auto_increment primary key comment '编号',\n\torder_id int unsigned not null default 0 comment '订单ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tshop_price decimal(10,2) not null default 0 comment '商品价格',\n\tgoods_price decimal(10,2) not null default 0 comment '成交价格',\n\tgoods_number smallint unsigned not null default 1 comment '购买数量',\n\tgoods_attr varchar(255) not null default '' comment '商品属性',\n\tsubtotal decimal(10,2) not null default 0 comment '商品小计'\n)engine=MyISAM charset=utf8;\n\n/*------------------------------------订单模块 end-----------------------------------*/\n#创建后台管理员表\nDROP TABLE IF EXISTS ugo_admin;\nCREATE TABLE ugo_admin(\n\tadmin_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT '管理员id' ,\n\tadmin_name VARCHAR(50) NOT NULL COMMENT '用户名' ,\n\tadmin_pwd VARCHAR(50) NOT NULL COMMENT '密码' ,\n\tadmin_role_id TINYINT UNSIGNED NOT NULL COMMENT '角色编号'\n) ENGINE = INNODB charset = utf8 COMMENT '管理员表';\n# 超级管理员测试数据\ninsert into ugo_admin values (null,'aa','aa',0);\n\n#创建后台权限表\nDROP TABLE IF EXISTS ugo_authority;\nCREATE TABLE ugo_authority(\n\tauth_id INT UNSIGNED auto_increment PRIMARY KEY COMMENT 'auth_id' ,\n\tauth_name VARCHAR(50) NOT NULL COMMENT '权限名称' ,\n\tauth_pid INT UNSIGNED NOT NULL COMMENT '权限父级id' ,\n\tauth_c VARCHAR(50) NULL COMMENT '控制器名' ,\n\tauth_a VARCHAR(50) NULL COMMENT '方法名' ,\n\tauth_path VARCHAR(50) NULL COMMENT '全路径,格式:父级id-子级id' ,\n\tis_show TINYINT NOT NULL DEFAULT 1 COMMENT '是否显示在导航栏上'\n) ENGINE = INNODB charset = utf8 COMMENT '权限表';\n\n#创建后台角色表\nDROP TABLE IF EXISTS ugo_role;\nCREATE TABLE IF NOT EXISTS ugo_role(\n\trole_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT 'role_id' ,\n\trole_name VARCHAR(50) NOT NULL COMMENT '角色名称' ,\n\trole_auth_ids VARCHAR(255) NOT NULL COMMENT '角色具有权限id的集合，格式1,2,5' ,\n\trole_auth_ac text NOT NULL COMMENT '控制器和方法的组合，格式：控制器-方法名'\n) ENGINE = INNODB charset = utf8 COMMENT '角色表';\n\n# *********************************************************** #\n-- 插入测试数据\ninsert into ugo_authority values (1,'商品管理',0,'','',1,1);\ninsert into ugo_authority values (2,'会员管理',0,'','',2,1);\ninsert into ugo_authority values (3,'权限管理',0,'','',3,1);\n\ninsert into ugo_authority values (4,'商品列表',1,'Goods','show','1-4',1);\ninsert into ugo_authority values (5,'添加商品',1,'Goods','add','1-5',1);\ninsert into ugo_authority values (6,'修改商品',1,'Goods','edit','1-6',0);\ninsert into ugo_authority values (7,'删除商品',1,'Goods','del','1-7',0);\n\ninsert into ugo_authority values (8,'会员列表',2,'Role','show','2-12',1);\ninsert into ugo_authority values (9,'添加会员',2,'Role','add','2-13',1);\ninsert into ugo_authority values (10,'修改会员',2,'Role','edit','2-14',0);\ninsert into ugo_authority values (11,'删除会员',2,'Role','del','2-15',0);\n\ninsert into ugo_authority values (12,'权限列表',3,'Authority','show','3-8',1);\ninsert into ugo_authority values (13,'添加权限',3,'Authority','add','3-9',1);\ninsert into ugo_authority values (14,'修改权限',3,'Authority','edit','3-10',0);\ninsert into ugo_authority values (15,'删除权限',3,'Authority','del','3-11',0);\n\ninsert into ugo_role values (1,'经理','1,4,5','Goods-show,Goods-add');\ninsert into ugo_role values (2,'主管','1,4','Goods-show');\n\ninsert into ugo_admin values (null,'aa','aa',0)\n# *********************************************************** #\n```\n","source":"_posts/2015/201510/20151017-3.md","raw":"layout: post\ntitle: 数据库设计-商城购物系统\ndate: 2015-10-17 02:43:08\ntags:\n- 数据库设计\n---\n## 数据库设计\n```sql\n/*\n Navicat Premium Data Transfer\n\n Source Server         : uiste\n Source Server Type    : MySQL\n Source Server Version : 50542\n Source Host           : localhost\n Source Database       : ugo\n\n Target Server Type    : MySQL\n Target Server Version : 50542\n File Encoding         : utf-8\n\n Date: 10/16/2015 14:27:21 PM\n*/\n\n#创建数据库\ncreate database ugo charset utf8;\n#选择数据库\nuse ugou;\n\n/*------------------------------------商品模块---------------------------------------*/\n#创建商品类别表\nDROP TABLE IF EXISTS `ugo_category`;\ncreate table ugo_category(\n\tcat_id smallint unsigned not null auto_increment primary key comment '商品类别ID',\n\tcat_name varchar(30) not null default '' comment '商品类别名称',\n\tcat_parent_id smallint unsigned not null default 0 comment '商品类别父ID',\n\tcat_desc varchar(255) not null default '' comment '商品类别描述',\n\tsort_order tinyint not null default 50 comment '排序依据',\n\tunit varchar(15) not null default '' comment '单位',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tindex pid(cat_parent_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品国家表\nDROP TABLE IF EXISTS `ugo_country`;\ncreate table ugo_country(\n\tcountry_id smallint unsigned not null auto_increment primary key comment '国家ID',\n\tcountry_name varchar(30) not null default '' comment '国家名称',\n\tcountry_parent_name enum('亚洲','欧洲','北美洲','南美洲','非洲','大洋洲','南极洲') not null default '亚洲' comment '国家所属区域',\n\tsort_order tinyint not null default 50 comment '排序依据',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tindex pid(country_parent_name)\n)engine=MyISAM charset=utf8;\n\n#创建商品品牌表\nDROP TABLE IF EXISTS `ugo_brand`;\ncreate table ugo_brand(\n\tbrand_id smallint unsigned not null auto_increment primary key comment '商品品牌ID',\n\tbrand_name varchar(30) not null default '' comment '商品品牌名称',\n\tbrand_desc varchar(255) not null default '' comment '商品品牌描述',\n\turl varchar(100) not null default '' comment '商品品牌网址',\n\tlogo varchar(50) not null default '' comment '品牌logo',\n\tsort_order tinyint unsigned not null default 50 comment '商品品牌排序依据',\n\tis_show tinyint not null default 1 comment '是否显示，默认显示',\n\tcountry_id smallint unsigned not null comment '商品品牌所属国家ID'\n)engine=MyISAM charset=utf8;\n\n#创建商品类型表\nDROP TABLE IF EXISTS `ugo_attrtype`;\ncreate table ugo_attrtype(\n\ttype_id smallint unsigned not null auto_increment primary key comment '商品类型ID',\n\ttype_name varchar(50) not null default '' comment '商品类型名称'\n)engine=MyISAM charset=utf8;\n\n\n#创建商品属性表\nDROP TABLE IF EXISTS `ugo_attribute`;\ncreate table ugo_attribute(\n\tattr_id smallint unsigned not null auto_increment primary key comment '商品属性ID',\n\tattr_name varchar(50) not null default '' comment '商品属性名称',\n\ttype_id smallint not null default 0 comment '商品属性所属类型ID',\n\tattr_input_type tinyint not null default 1 comment '属性录入方式 0为手工录入，1为从列表中选择，2为文本域',\n\tattr_input_value text comment '属性的值',\n\tindex type_id(type_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品表\nDROP TABLE IF EXISTS `ugo_goods`;\ncreate table ugo_goods(\n\tgoods_id int unsigned not null auto_increment primary key comment '商品ID',\n\tgoods_sn varchar(30) not null default '' comment '商品货号',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_brief varchar(255) not null default '' comment '商品简单描述',\n\tgoods_slogan varchar(50) not null default '' comment '商品宣传语',\n\tgoods_desc text comment '商品详情',\n\tcat_id smallint unsigned not null default 0 comment '商品所属类别ID',\n\tbrand_id smallint unsigned not null default 0 comment '商品所属品牌ID',\n\tmarket_price decimal(10,2) not null default 0 comment '市场价格',\n\tpromote_price decimal(10,2) not null default 0 comment '促销价格',\n\tpromote_start_time int unsigned not null default 0 comment '促销起始时间',\n\tpromote_end_time int unsigned not null default 0 comment '促销截止时间',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tgoods_thumb varchar(50) not null default '' comment '商品缩略图',\n\tgoods_number smallint unsigned not null default 0 comment '商品库存',\n\tclick_count int unsigned not null default 0 comment '点击次数',\n\ttype_id smallint unsigned not null default 0 comment '商品类型ID',\n\tis_promote tinyint unsigned not null default 0 comment '是否促销，默认为0不促销',\n\tis_best tinyint unsigned not null default 0 comment '是否精品,默认为0',\n\tis_new tinyint unsigned not null default 0 comment '是否新品，默认为0',\n\tis_hot tinyint unsigned not null default 0 comment '是否热卖,默认为0',\n\tis_onsale tinyint unsigned not null default 1 comment '是否上架,默认为1',\n\tadd_time int unsigned not null default 0 comment '添加时间',\n\tindex cat_id(cat_id),\n\tindex brand_id(brand_id),\n\tindex type_id(type_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品属性对应表\nDROP TABLE IF EXISTS `ugo_goods_attr`;\ncreate table ugo_goods_attr(\n\tgoods_attr_id int unsigned not null auto_increment primary key comment '编号ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tattr_id smallint unsigned not null default 0 comment '属性ID',\n\tattr_value varchar(255) not null default '' comment '属性值',\n\tattr_price decimal(10,2) not null default 0 comment '属性价格',\n\tindex goods_id(goods_id),\n\tindex attr_id(attr_id)\n)engine=MyISAM charset=utf8;\n\n#创建商品相册表\nDROP TABLE IF EXISTS `ugo_gallery`;\ncreate table ugo_gallery(\n\timg_id int unsigned not null auto_increment primary key comment '图片编号',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\timg_url varchar(50) not null default '' comment '图片URL',\n\tthumb_url varchar(50) not null default '' comment '缩略图URL',\n\timg_desc varchar(50) not null default '' comment '图片描述',\n\tindex goods_id(goods_id)\n)engine=MyISAM charset=utf8;\n\n/*------------------------------------商品模块 end-----------------------------------*/\n\n\n/*------------------------------------用户模块---------------------------------------*/\n#创建用户表\nDROP TABLE IF EXISTS `ugo_user`;\ncreate table ugo_user(\n\tuser_id int unsigned not null auto_increment primary key comment '用户编号',\n\tuser_name varchar(50) not null default '' comment '用户名',\n\ttel char(12) not null default '' comment '手机号码',\n\temail varchar(50) not null default '' comment '电子邮箱',\n\tpassword char(32) not null default '' comment '用户密码,md5加密',\n\treg_time int unsigned not null default 0 comment '用户注册时间'\n)engine=MyISAM charset=utf8;\n\n#创建用户收货地址表\nDROP TABLE IF EXISTS `ugo_address`;\ncreate table ugo_address(\n\taddress_id int unsigned not null auto_increment primary key comment '地址编号',\n\tuser_id int unsigned not null default 0 comment '地址所属用户ID',\n\tconsignee varchar(60) not null default '' comment '收货人姓名',\n\tprovince smallint unsigned not null default 0 comment '省份，保存是ID',\n\tcity smallint unsigned not null default 0 comment '市',\n\tdistrict smallint unsigned not null default 0 comment '区',\n\tstreet varchar(100) not null default '' comment '街道地址',\n\tzipcode varchar(10) not null default '' comment '邮政编码',\n\ttelephone varchar(20) not null default '' comment '电话',\n\tmobile varchar(20) not null default '' comment '移动电话',\n\tindex user_id(user_id)\n)engine=MyISAM charset=utf8;\n\n#创建地区表，包括省市区三级\nDROP TABLE IF EXISTS `ugo_region`;\ncreate table ugo_region(\n\tregion_id smallint unsigned not null auto_increment primary key comment '地区ID',\n\tparent_id smallint unsigned not null default 0 comment '父ID',\n\tregion_name varchar(30) not null default '' comment '地区名称',\n\tregion_type tinyint unsigned not null default 1 comment '地区类型 1 省份 2 市 3 区(县)'\n)engine=MyISAM charset=utf8;\n\n#创建购物车表\nDROP TABLE IF EXISTS `ugo_cart`;\ncreate table ugo_cart(\n\tcart_id int unsigned not null auto_increment primary key comment '购物车ID',\n\tuser_id int unsigned not null default 0 comment '用户ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tgoods_attr varchar(255) not null default '' comment '商品属性',\n\tgoods_number smallint unsigned not null default 1 comment '商品数量',\n\tmarket_price decimal(10,2) not null default 0 comment '市场价格',\n\tgoods_price decimal(10,2) not null default 0 comment '成交价格',\n\tsubtotal decimal(10,2) not null default 0 comment '小计'\n)engine=MyISAM charset=utf8;\n/*------------------------------------用户模块 end-----------------------------------*/\n\n\n\n\n/*------------------------------------订单模块---------------------------------------*/\n#创建送货方式表\nDROP TABLE IF EXISTS `ugo_shipping`;\ncreate table ugo_shipping(\n\tshipping_id tinyint unsigned not null auto_increment primary key comment '编号',\n\tshipping_name varchar(30) not null default '' comment '送货方式名称',\n\tshipping_desc varchar(255) not null default '' comment '送货方式描述',\n\tshipping_fee decimal(10,2) not null default 0 comment '送货费用',\n\tenabled tinyint unsigned not null default 1 comment '是否启用，默认启用'\n)engine=MyISAM charset=utf8;\n\n\n#创建支付方式表\nDROP TABLE IF EXISTS `ugo_payment`;\ncreate table ugo_payment(\n\tpay_id tinyint unsigned not null auto_increment primary key comment '支付方式ID',\n\tpay_name varchar(30) not null default '' comment '支付方式名称',\n\tpay_desc varchar(255) not null default '' comment '支付方式描述',\n\tenabled tinyint unsigned not null default 1 comment '是否启用，默认启用'\n)engine=MyISAM charset=utf8;\n\n\n#创建订单表\nDROP TABLE IF EXISTS `ugo_order`;\ncreate table ugo_order(\n\torder_id int unsigned not null auto_increment primary key comment '订单ID',\n\torder_sn varchar(30) not null default '' comment '订单号',\n\tuser_id int unsigned not null default 0 comment '用户ID',\n\taddress_id int unsigned not null default 0 comment '收货地址id',\n\torder_status tinyint unsigned not null default 0 comment '订单状态 1 待付款 2 待发货 3 已发货 4 已完成',\n\tpostscripts varchar(255) not null default '' comment '订单附言',\n\tshipping_id tinyint not null default 0 comment '送货方式ID',\n\tpay_id tinyint not null default 0 comment '支付方式ID',\n\tgoods_amount decimal(10,2) not null default 0 comment '商品总金额',\n\torder_amount decimal(10,2) not null default 0 comment '订单总金额',\n\torder_time int unsigned not null default 0 comment '下单时间',\n\tindex user_id(user_id),\n\tindex address_id(address_id),\n\tindex pay_id(pay_id),\n\tindex shipping_id(shipping_id)\n)engine=MyISAM charset=utf8;\n\n\n#创建订单明细表,即商品订单关系表（多对多）\nDROP TABLE IF EXISTS `ugo_order_goods`;\ncreate table ugo_order_goods(\n\trec_id int unsigned not null auto_increment primary key comment '编号',\n\torder_id int unsigned not null default 0 comment '订单ID',\n\tgoods_id int unsigned not null default 0 comment '商品ID',\n\tgoods_name varchar(100) not null default '' comment '商品名称',\n\tgoods_img varchar(50) not null default '' comment '商品图片',\n\tshop_price decimal(10,2) not null default 0 comment '商品价格',\n\tgoods_price decimal(10,2) not null default 0 comment '成交价格',\n\tgoods_number smallint unsigned not null default 1 comment '购买数量',\n\tgoods_attr varchar(255) not null default '' comment '商品属性',\n\tsubtotal decimal(10,2) not null default 0 comment '商品小计'\n)engine=MyISAM charset=utf8;\n\n/*------------------------------------订单模块 end-----------------------------------*/\n#创建后台管理员表\nDROP TABLE IF EXISTS ugo_admin;\nCREATE TABLE ugo_admin(\n\tadmin_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT '管理员id' ,\n\tadmin_name VARCHAR(50) NOT NULL COMMENT '用户名' ,\n\tadmin_pwd VARCHAR(50) NOT NULL COMMENT '密码' ,\n\tadmin_role_id TINYINT UNSIGNED NOT NULL COMMENT '角色编号'\n) ENGINE = INNODB charset = utf8 COMMENT '管理员表';\n# 超级管理员测试数据\ninsert into ugo_admin values (null,'aa','aa',0);\n\n#创建后台权限表\nDROP TABLE IF EXISTS ugo_authority;\nCREATE TABLE ugo_authority(\n\tauth_id INT UNSIGNED auto_increment PRIMARY KEY COMMENT 'auth_id' ,\n\tauth_name VARCHAR(50) NOT NULL COMMENT '权限名称' ,\n\tauth_pid INT UNSIGNED NOT NULL COMMENT '权限父级id' ,\n\tauth_c VARCHAR(50) NULL COMMENT '控制器名' ,\n\tauth_a VARCHAR(50) NULL COMMENT '方法名' ,\n\tauth_path VARCHAR(50) NULL COMMENT '全路径,格式:父级id-子级id' ,\n\tis_show TINYINT NOT NULL DEFAULT 1 COMMENT '是否显示在导航栏上'\n) ENGINE = INNODB charset = utf8 COMMENT '权限表';\n\n#创建后台角色表\nDROP TABLE IF EXISTS ugo_role;\nCREATE TABLE IF NOT EXISTS ugo_role(\n\trole_id TINYINT UNSIGNED auto_increment PRIMARY KEY COMMENT 'role_id' ,\n\trole_name VARCHAR(50) NOT NULL COMMENT '角色名称' ,\n\trole_auth_ids VARCHAR(255) NOT NULL COMMENT '角色具有权限id的集合，格式1,2,5' ,\n\trole_auth_ac text NOT NULL COMMENT '控制器和方法的组合，格式：控制器-方法名'\n) ENGINE = INNODB charset = utf8 COMMENT '角色表';\n\n# *********************************************************** #\n-- 插入测试数据\ninsert into ugo_authority values (1,'商品管理',0,'','',1,1);\ninsert into ugo_authority values (2,'会员管理',0,'','',2,1);\ninsert into ugo_authority values (3,'权限管理',0,'','',3,1);\n\ninsert into ugo_authority values (4,'商品列表',1,'Goods','show','1-4',1);\ninsert into ugo_authority values (5,'添加商品',1,'Goods','add','1-5',1);\ninsert into ugo_authority values (6,'修改商品',1,'Goods','edit','1-6',0);\ninsert into ugo_authority values (7,'删除商品',1,'Goods','del','1-7',0);\n\ninsert into ugo_authority values (8,'会员列表',2,'Role','show','2-12',1);\ninsert into ugo_authority values (9,'添加会员',2,'Role','add','2-13',1);\ninsert into ugo_authority values (10,'修改会员',2,'Role','edit','2-14',0);\ninsert into ugo_authority values (11,'删除会员',2,'Role','del','2-15',0);\n\ninsert into ugo_authority values (12,'权限列表',3,'Authority','show','3-8',1);\ninsert into ugo_authority values (13,'添加权限',3,'Authority','add','3-9',1);\ninsert into ugo_authority values (14,'修改权限',3,'Authority','edit','3-10',0);\ninsert into ugo_authority values (15,'删除权限',3,'Authority','del','3-11',0);\n\ninsert into ugo_role values (1,'经理','1,4,5','Goods-show,Goods-add');\ninsert into ugo_role values (2,'主管','1,4','Goods-show');\n\ninsert into ugo_admin values (null,'aa','aa',0)\n# *********************************************************** #\n```\n","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpg00a4pgwil9qh9hjz"},{"layout":"post","title":"Linux 常用命令","date":"2015-11-10T11:24:03.000Z","_content":"Linux命令分为两类，内部命令和外部命令。内部命令比如cd、ls等等，外部命令就是shell文件。\n命令的格式：`command [-选项] 参数`\n## 常用的命令\n`pwd` 查看当前工作目录\n`ls` 查看目录中的子文件\n`cd` 进入目录\n`su` 获取管理员权限\n`init` 改变系统运行登录\n`runlevel` 显示系统运行登录\n`startx` 启动窗口界面\n`passwd` 更改密码\n`clear` 清屏\n`exit` 退出当前工作环境或退出系统\n`dir` 查看当前目录下的文件和文件夹\n`whoami` 使用当前权限的用户\n`who am i` 查看登录的用户\n`halt`或`power off`或`shut down` 关机\n `reboot` 重启\n`man 命令` 查看帮助    `命令 --help`\n`du [-h] [-s]` 查看磁盘容量\n`df` 查看分期\n`ps -A` 查看进程\n`kill –9 进程号` 或 `pkill 进程名`杀死进程\n`grep 搜索字符串`\n`control + U` 撤销非乱七八糟输入\n## 关于目录和文件的命令\n### cd 改变工作目录\n`cd`和`cd ~`  进入主目录\n`cd ../` 相对路径\n`cd /../..` 绝对路径\n### mkdir 创建目录\n`mkdir dir` 创建目录\n`mkdir dir1/dir2` 在`dir1`目录下创建`dir2`(`dir1`必须存在)\n`mkdir -p dir1/dir2` 递归创建目录（dir1不存在）\n`mkdir dir1 dir2 dir3` 创建多个目录\n`rmdir 删除目录`\n`rm –rf 文件/目录` 删除文件或文件夹\n### cp 复制文件或目录\n`cp file dir` 将file复制到dir中\n`cp file1 dir/file2` 将file1复制到dir中并改名为file2\n`cp file1 ./file2` 将file1复制一份，并改名为file2\n### mv 移动文件或文件夹\n`mv file1 file2` 将file1改名为file2\n`mv file1 dir1` 将file1移动发哦dir1下\n`mv dir1 dir2` 如果dir2不存在就是将dir1改名为dir2，如果dir2存在将dir1移动到dir2下。\n`mv dir1 dir2/dir3` dir3不存在就是将dir1移动到dir2中并改名为dir3。\n### 查看文件内容\n`cat file` 将file文件内容全部显示\n`tac file` 将file文件内容反向查看\n`cat file1 file2 > file3` 将file1和file3的内容合并到file3中\n`more file` 分屏显示，按回车键显示 不能上翻\n`less file` 分屏显示，可以上下翻\n`head –n file` 显示前n行\n`tail -n file` 显示后n行动态查看：`tail -n 5 /etc/group`\n`wc file` 显示文件的行数，句数  字符数\n### 创建和向文件中添加内容\n` touch file` 创建文件，可以一次创建多个\n`echo 内容 > 文件 `将内容清空写入文件\n`echo 内容 >> 文件 `将内容追加写入文件\n`cat file1 > file2 `将file1的内容清空写入到file2\n`cat file1 >> file2 `将file1的内容追加写到file2中\n##用户和组的操作\n### useradd 添加用户\n`useradd uiste `添加用户同时创建同名的组\n`useradd -g group_name uiste  `添加用户指定所属组\n`useradd -d home_path uiste `添加用户指定家目录\n### uesrmod 修改用户\n`-c comment `修改备注信息\n` -l login_name `修改登录名称\n`-d home_dir `修改用户的家目录\n` -g group_name `修改用户所属组\n###  userdel 删除用户\n`-r `同时删除用户的家目录\n### 增加组\n`groupadd `添加组\n`groupadd -g 组编号 itcast2`\n### 修改组\n`groupmod -n myitcast itcast `修改组名称\n`groupmod -g 504 myitcast` 修改组编号\n### 删除组\n`groupdel 组名称` 删除组\n### 查看组\n`tail -n 5 /etc/group `查看最后五条信息\n## 组\n### 文件：/etc/group 组信息\n#### 组名称\n2. 组密码（X占位符）\n3. 组编号（超级管理员0，1-499默认给系统使用，500+自定义用户组）\n4. 组内用户\n### 组密码：/etc/gshadow 目前组密码没有使用\n1. 组名称\n2. 组密码（！没有密码）\n## 用户\n### 文件：/etcpasswd\n1. 用户名\n2. 密码占位符\n3. 用户编号\n4. 用户所属组编号\n5. 用户全名（备注）\n6. 用户家目录\n7. 用户能够使用的指令（bin/bash用户表示可以登录到操作系统中，bin/nologin表示用户不能够登录到系统）\n### 密码：/etc/shadow\n1. 用户名\n2. 用户密码，散列算法加密密码。使用！！表示用户没有密码的用户不能登录到系统\n### 设置用户口令 passwd\n`passwd uiste` (设置密码注意，检验过程)\n`-S： status `查看某个用户的状态\n`-l： lock `锁定某个用户，不能正常登录\n`-u： unlock `解除锁\n`-d：delete `清空用户密码\n### 禁止普通用户登录\n1. 锁定\n2. 删除密码\n3. 修改用户密码文件直接在前面加上 !!\n\t1. `vim /etc/shadow`\n\t2. 对应用户密码前面增加两个感叹号\n5. 禁止所有普通用户登录\n\t1. 在etc目录下创建一个空文件 nologin\n\t2. `touch nologin `\n6. 用户相关的其他命令\n\t1. `su` : 切换用户\n\t2. `whoami`：我是谁\n\t3. `id`：用户信息\n\t4. `groups`：用户所属组\n7. 用户资料信息\n\t1. `chfn 用户名 `：添加备注信息\n\t2. `finger 用户名`：查看用户信息\n\t\t\t1. `cd /bin`与`cd /sbin`找不该命令\n\t\t\t2. 安装\n8. 赋予用户特殊权限\n\t1. 直接编辑 `/etc/sudoers`\n\t2. `visudo` 修改文件\n\t3. 操作步骤\n\t\t1. `useradd dumin `创建用户\n\t\t2. `passwd dumin `创建密码\n\t\t3. `whereis useradd `查询某个命令所在位置\n\t\t4. 修改`/etc/sudoers `文件给某个普通用户赋予权限\n\t\t\t\t1) `dumin localhost = /user/sbin/useradd`\n\t\t5. 切换用户执行命令\n\t\t\t\t1)` su dumin`\n\t\t\t\t2) `sudo -l `显示拥有权限 \n9. date 查看或设置系统日期时间\n10. | 管道运行符\n## 文件权限\t\n1. 第一列：代表文件权限信息\n2. 第二列：文件节点数\n3. 第三列：文件所有者（用户）\n4. 第四列：文件所属组（组）\n### 字母含义\n1. 第一个字母表示文件类型，-表示普通文件，d表示文件夹\n2. 后面九个字母，每三个为一组\n3. 第一组：所有者的权限\n4. 第二组：所有组的权限（所有组所在的组其他用户对文件的权限）\n5. 第三组：组外用户的权限\n6. 最后一个点，表示文件具备selinux安全\n### 文件权限数字转换，777，755，644\n§ r可读权限，使用数字4表示\n§ w写入权限，使用数字2表示\n§ x执行权限，使用数字1表示\n§ 0代表没有权限\n§ 777分别对应了所有者，组内用户，组外用户\n#### 修改文件权限\n##### chmod修改权限\n`[uiste@localhost ~]$ chmod -R 777 1.php   `\n`-R`参数表示递归\n##### chown修改文件拥有者\n`chown -R uiste 1.php`\n`chown -R uiste.uiste  1.php`\n#### chgrp修改所属组\n`chgrp -R root 1.php`\n基本语法：`ln  -sn  源文件地址  目标地址`\n#### 创建软连接\n相当于windows下的快捷方式\n## vim(vi)\n1. 查看vim是否存在\n2. `vi file`   file存在就打开，不存在就新建后打开\n3. `vi + filename /vi + n + filename`  打开文件定位到指定行数\n4. `vi + string filename `打开文件并定位到string\n5. vi有三种模式命令模式、末行模式、编辑模式\n6. 末行模式\n\t1. `：`进入末行模式\n\t2. `:w `保存\n\t3. `:w! `强制保存\n\t4. `:q `退出\n\t5. `:q! `强制退出\n\t6. `:wq` 保存退出   :x\n\t7. `:wq! `强制保存退出\n\t8. `set number`或`set nu` 设置行号\n\t9. `set nonumber` 或`set nonu` 取消行号\n\t10. `:n` 跳转到第n行\n\t11. `/str` 向下查找    n下一个  N上一个\n\t12. `?str` 向上查找                                                                                          \n\t13. `/xx/yy` 将当前的xx改为yy\n\t14. `s/xx/yy/g` 将当前行的xx改为yy\n\t15. `%s/xx/yy/g` 将整个页面的xx改成yy\n\t16. `u` 撤销前一条指令\n\t17. `.` 继续上一条指令\n\t18. `J `连接上下两行\n\t19. `r+指定字符` 用指定字符替换当前字符\n7. 编辑模式：按`i、o 、a、s`进入编辑模式，退出esc退出编辑模式\n8. 命令模式\n\t1. 光标的移动\n\t2. 单词级别操作\n\t3. 行级操作\n\t\t1. `$` 行尾\n\t\t2. `0` 行首\n\t4. 段级\n\t\t1. `{` 段的开始\n\t\t2. `}` 段的结束\n\t5. 屏幕的级别\n\t\t1. `H`：head   屏幕的首部\n\t\t2. `L`：tail 屏幕的尾部\n\t6. 文档级\n\t\t1. `G` 移动到文档的尾部\n\t\t2. `3G` 移动的文本的第3行\n9. 删除操作\n\t1. `dd` 删除当前行\n\t2. `x` 删除当前字符\n\t3. `d+光标的区域` 删除当前字符到光标达到的区域\n10. 复制\n\t1. `yy` 复制当前行\n\t2. `p` 粘贴","source":"_posts/2015/201511/20151110-1.md","raw":"layout: post\ntitle: Linux 常用命令\ndate: 2015-11-10 19:24:03\ntags:\n- Linux\n---\nLinux命令分为两类，内部命令和外部命令。内部命令比如cd、ls等等，外部命令就是shell文件。\n命令的格式：`command [-选项] 参数`\n## 常用的命令\n`pwd` 查看当前工作目录\n`ls` 查看目录中的子文件\n`cd` 进入目录\n`su` 获取管理员权限\n`init` 改变系统运行登录\n`runlevel` 显示系统运行登录\n`startx` 启动窗口界面\n`passwd` 更改密码\n`clear` 清屏\n`exit` 退出当前工作环境或退出系统\n`dir` 查看当前目录下的文件和文件夹\n`whoami` 使用当前权限的用户\n`who am i` 查看登录的用户\n`halt`或`power off`或`shut down` 关机\n `reboot` 重启\n`man 命令` 查看帮助    `命令 --help`\n`du [-h] [-s]` 查看磁盘容量\n`df` 查看分期\n`ps -A` 查看进程\n`kill –9 进程号` 或 `pkill 进程名`杀死进程\n`grep 搜索字符串`\n`control + U` 撤销非乱七八糟输入\n## 关于目录和文件的命令\n### cd 改变工作目录\n`cd`和`cd ~`  进入主目录\n`cd ../` 相对路径\n`cd /../..` 绝对路径\n### mkdir 创建目录\n`mkdir dir` 创建目录\n`mkdir dir1/dir2` 在`dir1`目录下创建`dir2`(`dir1`必须存在)\n`mkdir -p dir1/dir2` 递归创建目录（dir1不存在）\n`mkdir dir1 dir2 dir3` 创建多个目录\n`rmdir 删除目录`\n`rm –rf 文件/目录` 删除文件或文件夹\n### cp 复制文件或目录\n`cp file dir` 将file复制到dir中\n`cp file1 dir/file2` 将file1复制到dir中并改名为file2\n`cp file1 ./file2` 将file1复制一份，并改名为file2\n### mv 移动文件或文件夹\n`mv file1 file2` 将file1改名为file2\n`mv file1 dir1` 将file1移动发哦dir1下\n`mv dir1 dir2` 如果dir2不存在就是将dir1改名为dir2，如果dir2存在将dir1移动到dir2下。\n`mv dir1 dir2/dir3` dir3不存在就是将dir1移动到dir2中并改名为dir3。\n### 查看文件内容\n`cat file` 将file文件内容全部显示\n`tac file` 将file文件内容反向查看\n`cat file1 file2 > file3` 将file1和file3的内容合并到file3中\n`more file` 分屏显示，按回车键显示 不能上翻\n`less file` 分屏显示，可以上下翻\n`head –n file` 显示前n行\n`tail -n file` 显示后n行动态查看：`tail -n 5 /etc/group`\n`wc file` 显示文件的行数，句数  字符数\n### 创建和向文件中添加内容\n` touch file` 创建文件，可以一次创建多个\n`echo 内容 > 文件 `将内容清空写入文件\n`echo 内容 >> 文件 `将内容追加写入文件\n`cat file1 > file2 `将file1的内容清空写入到file2\n`cat file1 >> file2 `将file1的内容追加写到file2中\n##用户和组的操作\n### useradd 添加用户\n`useradd uiste `添加用户同时创建同名的组\n`useradd -g group_name uiste  `添加用户指定所属组\n`useradd -d home_path uiste `添加用户指定家目录\n### uesrmod 修改用户\n`-c comment `修改备注信息\n` -l login_name `修改登录名称\n`-d home_dir `修改用户的家目录\n` -g group_name `修改用户所属组\n###  userdel 删除用户\n`-r `同时删除用户的家目录\n### 增加组\n`groupadd `添加组\n`groupadd -g 组编号 itcast2`\n### 修改组\n`groupmod -n myitcast itcast `修改组名称\n`groupmod -g 504 myitcast` 修改组编号\n### 删除组\n`groupdel 组名称` 删除组\n### 查看组\n`tail -n 5 /etc/group `查看最后五条信息\n## 组\n### 文件：/etc/group 组信息\n#### 组名称\n2. 组密码（X占位符）\n3. 组编号（超级管理员0，1-499默认给系统使用，500+自定义用户组）\n4. 组内用户\n### 组密码：/etc/gshadow 目前组密码没有使用\n1. 组名称\n2. 组密码（！没有密码）\n## 用户\n### 文件：/etcpasswd\n1. 用户名\n2. 密码占位符\n3. 用户编号\n4. 用户所属组编号\n5. 用户全名（备注）\n6. 用户家目录\n7. 用户能够使用的指令（bin/bash用户表示可以登录到操作系统中，bin/nologin表示用户不能够登录到系统）\n### 密码：/etc/shadow\n1. 用户名\n2. 用户密码，散列算法加密密码。使用！！表示用户没有密码的用户不能登录到系统\n### 设置用户口令 passwd\n`passwd uiste` (设置密码注意，检验过程)\n`-S： status `查看某个用户的状态\n`-l： lock `锁定某个用户，不能正常登录\n`-u： unlock `解除锁\n`-d：delete `清空用户密码\n### 禁止普通用户登录\n1. 锁定\n2. 删除密码\n3. 修改用户密码文件直接在前面加上 !!\n\t1. `vim /etc/shadow`\n\t2. 对应用户密码前面增加两个感叹号\n5. 禁止所有普通用户登录\n\t1. 在etc目录下创建一个空文件 nologin\n\t2. `touch nologin `\n6. 用户相关的其他命令\n\t1. `su` : 切换用户\n\t2. `whoami`：我是谁\n\t3. `id`：用户信息\n\t4. `groups`：用户所属组\n7. 用户资料信息\n\t1. `chfn 用户名 `：添加备注信息\n\t2. `finger 用户名`：查看用户信息\n\t\t\t1. `cd /bin`与`cd /sbin`找不该命令\n\t\t\t2. 安装\n8. 赋予用户特殊权限\n\t1. 直接编辑 `/etc/sudoers`\n\t2. `visudo` 修改文件\n\t3. 操作步骤\n\t\t1. `useradd dumin `创建用户\n\t\t2. `passwd dumin `创建密码\n\t\t3. `whereis useradd `查询某个命令所在位置\n\t\t4. 修改`/etc/sudoers `文件给某个普通用户赋予权限\n\t\t\t\t1) `dumin localhost = /user/sbin/useradd`\n\t\t5. 切换用户执行命令\n\t\t\t\t1)` su dumin`\n\t\t\t\t2) `sudo -l `显示拥有权限 \n9. date 查看或设置系统日期时间\n10. | 管道运行符\n## 文件权限\t\n1. 第一列：代表文件权限信息\n2. 第二列：文件节点数\n3. 第三列：文件所有者（用户）\n4. 第四列：文件所属组（组）\n### 字母含义\n1. 第一个字母表示文件类型，-表示普通文件，d表示文件夹\n2. 后面九个字母，每三个为一组\n3. 第一组：所有者的权限\n4. 第二组：所有组的权限（所有组所在的组其他用户对文件的权限）\n5. 第三组：组外用户的权限\n6. 最后一个点，表示文件具备selinux安全\n### 文件权限数字转换，777，755，644\n§ r可读权限，使用数字4表示\n§ w写入权限，使用数字2表示\n§ x执行权限，使用数字1表示\n§ 0代表没有权限\n§ 777分别对应了所有者，组内用户，组外用户\n#### 修改文件权限\n##### chmod修改权限\n`[uiste@localhost ~]$ chmod -R 777 1.php   `\n`-R`参数表示递归\n##### chown修改文件拥有者\n`chown -R uiste 1.php`\n`chown -R uiste.uiste  1.php`\n#### chgrp修改所属组\n`chgrp -R root 1.php`\n基本语法：`ln  -sn  源文件地址  目标地址`\n#### 创建软连接\n相当于windows下的快捷方式\n## vim(vi)\n1. 查看vim是否存在\n2. `vi file`   file存在就打开，不存在就新建后打开\n3. `vi + filename /vi + n + filename`  打开文件定位到指定行数\n4. `vi + string filename `打开文件并定位到string\n5. vi有三种模式命令模式、末行模式、编辑模式\n6. 末行模式\n\t1. `：`进入末行模式\n\t2. `:w `保存\n\t3. `:w! `强制保存\n\t4. `:q `退出\n\t5. `:q! `强制退出\n\t6. `:wq` 保存退出   :x\n\t7. `:wq! `强制保存退出\n\t8. `set number`或`set nu` 设置行号\n\t9. `set nonumber` 或`set nonu` 取消行号\n\t10. `:n` 跳转到第n行\n\t11. `/str` 向下查找    n下一个  N上一个\n\t12. `?str` 向上查找                                                                                          \n\t13. `/xx/yy` 将当前的xx改为yy\n\t14. `s/xx/yy/g` 将当前行的xx改为yy\n\t15. `%s/xx/yy/g` 将整个页面的xx改成yy\n\t16. `u` 撤销前一条指令\n\t17. `.` 继续上一条指令\n\t18. `J `连接上下两行\n\t19. `r+指定字符` 用指定字符替换当前字符\n7. 编辑模式：按`i、o 、a、s`进入编辑模式，退出esc退出编辑模式\n8. 命令模式\n\t1. 光标的移动\n\t2. 单词级别操作\n\t3. 行级操作\n\t\t1. `$` 行尾\n\t\t2. `0` 行首\n\t4. 段级\n\t\t1. `{` 段的开始\n\t\t2. `}` 段的结束\n\t5. 屏幕的级别\n\t\t1. `H`：head   屏幕的首部\n\t\t2. `L`：tail 屏幕的尾部\n\t6. 文档级\n\t\t1. `G` 移动到文档的尾部\n\t\t2. `3G` 移动的文本的第3行\n9. 删除操作\n\t1. `dd` 删除当前行\n\t2. `x` 删除当前字符\n\t3. `d+光标的区域` 删除当前字符到光标达到的区域\n10. 复制\n\t1. `yy` 复制当前行\n\t2. `p` 粘贴","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjph00a7pgwixeq3wi69"},{"layout":"post","title":"Linux LAMP环境搭建","date":"2015-11-11T02:54:38.000Z","_content":"## 软件安装与卸载\n### 软件安装\n1. `.rpm`格式：二进制格式，相对于window下的.exe文件\n2. `.tar.gz`：二进制源码包，需要借助于gcc 编译器进行源码编译安装\n3. `yum`：自动解决依赖问题\n### 安装软件查询\n1. 基本语法：`rpm -qa`\n\t1. `-q(query)` 表示查询\n\t2. `-a(all)` 表示所有\n2. 查询指定软件：`rpm -qa | grep 软件名称`\n\t1. `|` 管道，可以针对前面的结果进行二次筛选\n\t2. `grep` 匹配\n3. 卸载软件\n\t1. 基本语法：`rpm -e 软件名称 (软件名称可以只选到软件名称)`\n4. 软件安装\n\t1. 基本语法：`rpm -ivh (软件名称)`\n\t2. `-i` ：表示安装\n\t3. `vh`：显示进度条\n\t4. 注意：镜像文件被正确选中，已连接的状态\n\t5. `cd /media/CentOS_6.5_Final/Packages/` 进入媒体文件夹（存储了很多安装包）\n## 源码编译安装\n1. 先解压\n2. 进入安装目录\n3. 编译\n4. 安装\n### Apache 安装\n1. 进入LAMP安装目录\n2. 使用tar命令实现解压功能\n\t1. `tar -zxvf httpd-2.2.11.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t1. `cd httpd-2.2.11`\n\t2. `./configure --prefix=/usr/local/apache --enable-so`\n4. 安装\n\t1. `make && make install`\n5. 配置加载PHP\n\t1. `vim /usr/local/apache/conf/httpd.conf`\n\t2. `AddType application/x-httpd-php .php`\n#### 启动Apache，并测试Apache\n1. 进入到Apache的bin目录启动Apache：`[root@localhost usr]# cd /usr/local/apache/bin`\n2. 修改Apache配置文件：`[root@localhost bin]# vim ../conf/httpd.conf`\n\t1. 开启并修改域名：`ServerName localhost:80`\n3. 重启Apache：\n4. 测试\n\t1. 关闭防火墙：`service iptables stop`；服务器重启之后防火墙会再次开启。实际应用场景可修改编辑（/etc/sysconfig/iptables文件,开启SSH端口22，或tcp80，数据库3306可以加上如下内容：-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT）\n\t2. 直接输入IP地址，测试\n\t3. 在命令行下使用curl工具：`/usr/bin/curl http:127.0.0.1`\n\t4. 通过端口的方式：`netstat -tunple|grep 80 `\n\t5. 通过进程方式：`ps - aux | grep httpd`\n5. 报错排错：\n![apache_error](http://7xwlfk.com1.z0.glb.clouddn.com/1apache_error.png)\n```\t\t\n[root@localhost bin]# ./apachectl start\n(98)Address already in use: make_sock: could not bind to address [::]:80\n(98)Address already in use: make_sock: could not bind to address 0.0.0.0:80\nno listening sockets available, shutting down\nUnable to open logs\n[root@localhost bin]# netstat -tunple|grep 80\ntcp        0      0 :::80                       :::*                        LISTEN      0          59332      22963/httpd\nudp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd\nudp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd\n[root@localhost bin]# pkill httpd\n[root@localhost bin]# netstat -tunple|grep 80\nudp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd\nudp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd\n[root@localhost bin]# ./apachectl start\n```\n\n### PHP安装\n#### 安装zlib压缩库\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf zlib-1.2.5.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd zlib-1.2.5`\n\t\t2. `[root@localhost zlib-1.2.5]# ./configure`\n4. 安装\n\t\t1. `[root@localhost zlib-1.2.5]# make && make install`\n#### 安装libxml2\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf libxml2-2.7.2.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd libxml2-2.7.2`\n\t\t2. `[root@localhost libxml2-2.7.2]# ./configure --prefix=/usr/local/libxml2 -without-zlib`\n4. 安装\n\t\t1. `[root@localhost libxml2-2.7.2]# make && make install`\n#### 安装jpeg8\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf jpegsrc.v8b.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd jpeg-8b/`\n\t\t2. `[root@localhost jpeg-8b]# ./configure --prefix=/usr/local/jpeg --enable-shared --enable-static`\n4. 安装\n\t\t1. `[root@localhost jpeg-8b]# make && make install`\n#### 安装libpng\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf libpng-1.4.3.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd libpng-1.4.3`\n\t\t2. `[root@localhost libpng-1.4.3]# ./configure`\n4. 安装\n\t\t1. `[root@localhost libpng-1.4.3]# make && make install`\n#### 安装freetype（字体库）\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf freetype-2.4.1.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd freetype-2.4.1`\n\t\t2. `[root@localhost freetype-2.4.1]# ./configure --prefix=/usr/local/freetype`\n4. 安装\n\t\t1. `[root@localhost freetype-2.4.1]# make && make install`\n#### 安装GD库\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf gd-2.0.35.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd gd-2.0.35`\n\t\t2. `[root@localhost gd-2.0.35]# ./configure --prefix=/usr/local/gd  --with-jpeg=/usr/local/jpeg/ --with-png --with-zlib --with-freetype=/usr/local/freetype`\n4. 安装\n\t\t1. `[root@localhost gd-2.0.35]# make && make install`\n#### 安装PHP\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zvxf php-5.3.28.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd php-5.3.28`\n\t\t2. `[root@localhost php-5.3.28]#./configure --prefix=/usr/local/php --with-mysql=mysqlnd --with-pdo-mysql=mysqlnd  --with-mysqli=mysqlnd --with-freetype-dir=/usr/local/freetype --with-gd=/usr/local/gd   --with-zlib --with-libxml-dir=/usr/local/libxml2 --with-jpeg-dir=/usr/local/jpeg --with-png-dir --enable-mbstring=all --enable-mbregex --enable-shared --with-config-file-path=/usr/local/php/etc --with-curlwrappers --with-apxs2=/usr/local/apache/bin/apxs`\n4. 安装\n\t\t1. `[root@localhost php-5.3.28]# make && make install`\n### 安装MySQL\nMySQL使用二进制包安装，已经安装过了的（安装前终止msyqld进程：`pkill mysqld`）\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令，使用C指定解压目录\n\t\t1. `[root@localhost LAMP]# tar -zxvf mysql-5.5.38-linux2.6-i686.tar.gz -C /usr/local`\n3. 进入到解压目录`/usr/local`下\n\t\t1. `[root@localhost LAMP]# cd /usr/local`\n4. 创建软连接\n\t\t1. `[root@localhost local]# ln -sv mysql-5.5.38-linux2.6-i686/ mysql`\n\t\t2. `[root@localhost local]# cd mysql`\n\t使用`vim INSTALL-BINARY`查看安装提示\n5. 添加MySQL用户\n\t\t1. `[root@localhost local]# useradd mysql`\n6. 修改文件权限\n\t\t1. `[root@localhost mysql]# chown -R mysql.mysql ./`\n7. 安装MySQL\n\t\t1. `[root@localhost mysql]# ./scripts/mysql_install_db --user=mysql`\n\t\t2. 成功提示：\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/2.mysql_success.png)\n8. 再次修改权限\n\t\t1. `[root@localhost mysql]# chown -R root . `\n\t\t2. `[root@localhost mysql]# chown -R mysql data`\n9. 复制配置文件\n\t\t1. `[root@localhost mysql]# cp support-files/my-medium.cnf /etc/my.cnf`\n\t\t2. `cp：是否覆盖\"/etc/my.cnf\"？ y`\n10. 复制服务\n\t\t1. `[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld`\n11. 将MySQL的服务添加到系统服务中\n\t\t1. `[root@localhost mysql]# chkconfig --add mysqld`\n12. 启动MySQL服务\n\t\t1. `[root@localhost mysql]# service mysqld start`\n13. 默认安装完成没有密码，修改密码\n\t1. `[root@localhost mysql]# ./bin/mysqladmin -u root password 'newpass'`\n\t2. 如果已经设置了密码可以通过如下方式设置\n\t\t1. `mysql> set password for 'root'@'localhost'=password('newpass');`\n\t\t2. `[root@localhost mysql]# ./bin/mysqladmin -u root password oldpass 'newpass'`\n\t\t3. `update user set password = password('newpass') where user = 'root';`\n\t3. 如果密码丢失了，可以这样：\n\t\t1. `mysql_safe --skip-grant-tables&mysql -u root mysql`\n\t\t2. `mysql> update user set password=password('new password') where user ='root';`\n\t\t3. `mysql>FLUSH PRIVILEGES;`\n14. 打开MySQL客户端\n\t\t1. `[root@localhost mysql]# ./bin/mysql -uroot -p`\n\t\t2. `Enter password:`\n15. 报错排错\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/3.mysql_error1.png)\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/4.mysql_error2.png)\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/5.mysql_error3.png)\n#### 设置远程登录权限\n1. `mysql> use mysql`\n2. `mysql> select host,user from user;`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/6.quanxian1.png)\n3. `mysql> update user set host='%' where user ='root' and host ='127.0.0.1';`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/7.quanxian2.png)\n4. `mysql> delete from user where host != '%';`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/8.quanxian3.png)\n5. `mysql> FLUSH PRIVILEGES;`\n6. 若没有关闭防火墙需要关闭防火墙 `ervice iptables stop`\n\n16. 开启静态IP\n```\nONBOOT=yes\nNM_CONTROLLED=yes\nBOOTPROTO=static\nIPADDR=192.168.34.100\nNETMASK=255.255.255.0\nNM_CONTROLLED=no\n```\n","source":"_posts/2015/201511/20151111-1.md","raw":"layout: post\ntitle: Linux LAMP环境搭建\ndate: 2015-11-11 10:54:38\ntags:\n- LAMP环境\n---\n## 软件安装与卸载\n### 软件安装\n1. `.rpm`格式：二进制格式，相对于window下的.exe文件\n2. `.tar.gz`：二进制源码包，需要借助于gcc 编译器进行源码编译安装\n3. `yum`：自动解决依赖问题\n### 安装软件查询\n1. 基本语法：`rpm -qa`\n\t1. `-q(query)` 表示查询\n\t2. `-a(all)` 表示所有\n2. 查询指定软件：`rpm -qa | grep 软件名称`\n\t1. `|` 管道，可以针对前面的结果进行二次筛选\n\t2. `grep` 匹配\n3. 卸载软件\n\t1. 基本语法：`rpm -e 软件名称 (软件名称可以只选到软件名称)`\n4. 软件安装\n\t1. 基本语法：`rpm -ivh (软件名称)`\n\t2. `-i` ：表示安装\n\t3. `vh`：显示进度条\n\t4. 注意：镜像文件被正确选中，已连接的状态\n\t5. `cd /media/CentOS_6.5_Final/Packages/` 进入媒体文件夹（存储了很多安装包）\n## 源码编译安装\n1. 先解压\n2. 进入安装目录\n3. 编译\n4. 安装\n### Apache 安装\n1. 进入LAMP安装目录\n2. 使用tar命令实现解压功能\n\t1. `tar -zxvf httpd-2.2.11.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t1. `cd httpd-2.2.11`\n\t2. `./configure --prefix=/usr/local/apache --enable-so`\n4. 安装\n\t1. `make && make install`\n5. 配置加载PHP\n\t1. `vim /usr/local/apache/conf/httpd.conf`\n\t2. `AddType application/x-httpd-php .php`\n#### 启动Apache，并测试Apache\n1. 进入到Apache的bin目录启动Apache：`[root@localhost usr]# cd /usr/local/apache/bin`\n2. 修改Apache配置文件：`[root@localhost bin]# vim ../conf/httpd.conf`\n\t1. 开启并修改域名：`ServerName localhost:80`\n3. 重启Apache：\n4. 测试\n\t1. 关闭防火墙：`service iptables stop`；服务器重启之后防火墙会再次开启。实际应用场景可修改编辑（/etc/sysconfig/iptables文件,开启SSH端口22，或tcp80，数据库3306可以加上如下内容：-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT）\n\t2. 直接输入IP地址，测试\n\t3. 在命令行下使用curl工具：`/usr/bin/curl http:127.0.0.1`\n\t4. 通过端口的方式：`netstat -tunple|grep 80 `\n\t5. 通过进程方式：`ps - aux | grep httpd`\n5. 报错排错：\n![apache_error](http://7xwlfk.com1.z0.glb.clouddn.com/1apache_error.png)\n```\t\t\n[root@localhost bin]# ./apachectl start\n(98)Address already in use: make_sock: could not bind to address [::]:80\n(98)Address already in use: make_sock: could not bind to address 0.0.0.0:80\nno listening sockets available, shutting down\nUnable to open logs\n[root@localhost bin]# netstat -tunple|grep 80\ntcp        0      0 :::80                       :::*                        LISTEN      0          59332      22963/httpd\nudp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd\nudp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd\n[root@localhost bin]# pkill httpd\n[root@localhost bin]# netstat -tunple|grep 80\nudp        0      0 :::57780                    :::*                                    29         12263      1361/rpc.statd\nudp        0      0 fe80::20c:29ff:fe04:2b3c:123 :::*                                    0          13141      1573/ntpd\n[root@localhost bin]# ./apachectl start\n```\n\n### PHP安装\n#### 安装zlib压缩库\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf zlib-1.2.5.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd zlib-1.2.5`\n\t\t2. `[root@localhost zlib-1.2.5]# ./configure`\n4. 安装\n\t\t1. `[root@localhost zlib-1.2.5]# make && make install`\n#### 安装libxml2\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf libxml2-2.7.2.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd libxml2-2.7.2`\n\t\t2. `[root@localhost libxml2-2.7.2]# ./configure --prefix=/usr/local/libxml2 -without-zlib`\n4. 安装\n\t\t1. `[root@localhost libxml2-2.7.2]# make && make install`\n#### 安装jpeg8\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf jpegsrc.v8b.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd jpeg-8b/`\n\t\t2. `[root@localhost jpeg-8b]# ./configure --prefix=/usr/local/jpeg --enable-shared --enable-static`\n4. 安装\n\t\t1. `[root@localhost jpeg-8b]# make && make install`\n#### 安装libpng\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf libpng-1.4.3.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd libpng-1.4.3`\n\t\t2. `[root@localhost libpng-1.4.3]# ./configure`\n4. 安装\n\t\t1. `[root@localhost libpng-1.4.3]# make && make install`\n#### 安装freetype（字体库）\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf freetype-2.4.1.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd freetype-2.4.1`\n\t\t2. `[root@localhost freetype-2.4.1]# ./configure --prefix=/usr/local/freetype`\n4. 安装\n\t\t1. `[root@localhost freetype-2.4.1]# make && make install`\n#### 安装GD库\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zxvf gd-2.0.35.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd gd-2.0.35`\n\t\t2. `[root@localhost gd-2.0.35]# ./configure --prefix=/usr/local/gd  --with-jpeg=/usr/local/jpeg/ --with-png --with-zlib --with-freetype=/usr/local/freetype`\n4. 安装\n\t\t1. `[root@localhost gd-2.0.35]# make && make install`\n#### 安装PHP\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令实现解压功能\n\t\t1. `[root@localhost LAMP]# tar -zvxf php-5.3.28.tar.gz`\n3. 进入到解压目录并编译(需安装gcc)\n\t\t1. `[root@localhost LAMP]# cd php-5.3.28`\n\t\t2. `[root@localhost php-5.3.28]#./configure --prefix=/usr/local/php --with-mysql=mysqlnd --with-pdo-mysql=mysqlnd  --with-mysqli=mysqlnd --with-freetype-dir=/usr/local/freetype --with-gd=/usr/local/gd   --with-zlib --with-libxml-dir=/usr/local/libxml2 --with-jpeg-dir=/usr/local/jpeg --with-png-dir --enable-mbstring=all --enable-mbregex --enable-shared --with-config-file-path=/usr/local/php/etc --with-curlwrappers --with-apxs2=/usr/local/apache/bin/apxs`\n4. 安装\n\t\t1. `[root@localhost php-5.3.28]# make && make install`\n### 安装MySQL\nMySQL使用二进制包安装，已经安装过了的（安装前终止msyqld进程：`pkill mysqld`）\n1. 进入LAMP安装目录\n\t\t1. `[root@localhost home]# cd /home/LAMP`\n2. 使用tar命令，使用C指定解压目录\n\t\t1. `[root@localhost LAMP]# tar -zxvf mysql-5.5.38-linux2.6-i686.tar.gz -C /usr/local`\n3. 进入到解压目录`/usr/local`下\n\t\t1. `[root@localhost LAMP]# cd /usr/local`\n4. 创建软连接\n\t\t1. `[root@localhost local]# ln -sv mysql-5.5.38-linux2.6-i686/ mysql`\n\t\t2. `[root@localhost local]# cd mysql`\n\t使用`vim INSTALL-BINARY`查看安装提示\n5. 添加MySQL用户\n\t\t1. `[root@localhost local]# useradd mysql`\n6. 修改文件权限\n\t\t1. `[root@localhost mysql]# chown -R mysql.mysql ./`\n7. 安装MySQL\n\t\t1. `[root@localhost mysql]# ./scripts/mysql_install_db --user=mysql`\n\t\t2. 成功提示：\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/2.mysql_success.png)\n8. 再次修改权限\n\t\t1. `[root@localhost mysql]# chown -R root . `\n\t\t2. `[root@localhost mysql]# chown -R mysql data`\n9. 复制配置文件\n\t\t1. `[root@localhost mysql]# cp support-files/my-medium.cnf /etc/my.cnf`\n\t\t2. `cp：是否覆盖\"/etc/my.cnf\"？ y`\n10. 复制服务\n\t\t1. `[root@localhost mysql]# cp support-files/mysql.server /etc/init.d/mysqld`\n11. 将MySQL的服务添加到系统服务中\n\t\t1. `[root@localhost mysql]# chkconfig --add mysqld`\n12. 启动MySQL服务\n\t\t1. `[root@localhost mysql]# service mysqld start`\n13. 默认安装完成没有密码，修改密码\n\t1. `[root@localhost mysql]# ./bin/mysqladmin -u root password 'newpass'`\n\t2. 如果已经设置了密码可以通过如下方式设置\n\t\t1. `mysql> set password for 'root'@'localhost'=password('newpass');`\n\t\t2. `[root@localhost mysql]# ./bin/mysqladmin -u root password oldpass 'newpass'`\n\t\t3. `update user set password = password('newpass') where user = 'root';`\n\t3. 如果密码丢失了，可以这样：\n\t\t1. `mysql_safe --skip-grant-tables&mysql -u root mysql`\n\t\t2. `mysql> update user set password=password('new password') where user ='root';`\n\t\t3. `mysql>FLUSH PRIVILEGES;`\n14. 打开MySQL客户端\n\t\t1. `[root@localhost mysql]# ./bin/mysql -uroot -p`\n\t\t2. `Enter password:`\n15. 报错排错\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/3.mysql_error1.png)\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/4.mysql_error2.png)\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/5.mysql_error3.png)\n#### 设置远程登录权限\n1. `mysql> use mysql`\n2. `mysql> select host,user from user;`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/6.quanxian1.png)\n3. `mysql> update user set host='%' where user ='root' and host ='127.0.0.1';`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/7.quanxian2.png)\n4. `mysql> delete from user where host != '%';`\n![Alt text](http://7xwlfk.com1.z0.glb.clouddn.com/8.quanxian3.png)\n5. `mysql> FLUSH PRIVILEGES;`\n6. 若没有关闭防火墙需要关闭防火墙 `ervice iptables stop`\n\n16. 开启静态IP\n```\nONBOOT=yes\nNM_CONTROLLED=yes\nBOOTPROTO=static\nIPADDR=192.168.34.100\nNETMASK=255.255.255.0\nNM_CONTROLLED=no\n```\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpi00a9pgwiipuyyauq"},{"layout":"post","title":"MySQL架构 | 多种方式登录","date":"2015-11-17T18:36:19.000Z","_content":"集群由一组服务器相互独立的服务器，构建的高性能与可靠性的服务器架构\n\n## MySQL读写分离\n主从复制是读写分离的基础\n### 主从复制原理\n1. 主服务器将修改的SQL语句写入到二进制（bin）日志中\n2. 从服务器中的IO线程通过授权账号读取二进制日志，将信息写入到中继日志中（relay）\n3. 从服务器中的SQL线程读取中继日志中的数据，然后将SQL语句执行，还原主服务器中的数据\n\n### 实现主从复制\n1. 开启主服务器的二进制日志\ncentos yum 安装MySQL配置文件路径：\n```\nlog-bin=mysql-bin\nbinlog_format=mixed\nserver-id=101\n```\n\n2. 重启主服务器MySQL\n`service mysqld restart`\n\n3. 添加授权账号\n```\n[root@localhost etc]# mysql -uroot -p\nEnter password:\nmysql> GRANT REPLICATION SLAVE ON *.* TO repuser@\"192.168.%.%\" IDENTIFIED BY '123456'; \nQuery OK, 0 rows affected (0.00 sec)\n#''引号内是授权账号的密码\n```\n\n4. 在主服务器下刷新用户权限\n`mysql> FLUSH PRIVILEGES;`\n\n5. 查看主服务器状态\n```\nmysql> show master status;\n+------------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+------------------+----------+--------------+------------------+\n| mysql-bin.000001 |      326 |              |                  |\n+------------------+----------+--------------+------------------+\n1 row in set (0.00 sec)\nFile ：表示正在使用二进制文件\nPosition：二进制当前所在的位置\n```\n\n6. 修改从服务器mysql配置项\n```\n[root@localhost ~]# vim /etc/my.cnf\nserver-id       = 102\n```\n\n7. 重启从服务器的mysql服务\n`[root@localhost ~]# service mysqld restart`\n\n8. 配置从服务器通过授权账号读取主服务器信息\n```\nmysql> CHANGE MASTER TO MASTER_HOST='192.168.34.101',MASTER_USER='repuser',MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.000001',MASTER_LOG_POS=326;\nQuery OK, 0 rows affected (0.07 sec)\n```\n\n9. 在从服务器上开启主从同步数据\n```\nmysql> slave start;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n10. 查看主从复制的状态\n```\nmysql> show slave status\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.34.101\n                  Master_User: repuser\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 326\n               Relay_Log_File: mysqld-relay-bin.000002\n                Relay_Log_Pos: 251\n        Relay_Master_Log_File: mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n```\n\n11. 成功\n在主服务器上建表，写入数据，查看重服务的数据表跟数据是否与主服务一样\n![slave](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-18%2023.17.49.png)\n>slave_io_running与slave_sql_running要求都为yes则表示成功\n可以使用 slave stop关闭主从，使用reset slave 可以清空主从信息\n\n从服务器配置参数\n>CHANGE MASTER TO\n>MASTER_HOST='192.168.81.128',//指定主服务器的地址\n>MASTER_USER='repuser',//指定授权账号的用户名\n>MASTER_PASSWORD='123456',//指定授权账号的密码\n>MASTER_LOG_FILE='mysql-bin.000001',//指定主服务的正在使用的二进制文件\n>MASTER_LOG_POS=326;//指定主服务器当前记录到的SQL语句的文字\n\n开启bin日志，相关配置文件\n>`log-bin=mysql-bin` 开启二进制日志，并且名称以mysql-bin开头\n>`binlog-format=mixed` 指定二进制文件记录sql语句的格式。statement：用一条sql语句记录修改。row：表示记录每一条sql语句。mixed：表示混合使用由mysql自己决定\n>`server-id = 101` 表示主从服务器每台的标识各不一样\n>`datadir=/var/lib/mysql`\nmysql-bin.index //索引文件，列出当前有哪些二进制文件\nmysql-bin.000001//记录修改的SQL语句\nbin日志，只记录修改表数据的SQL语句：`inser`、`delete`、`update`\n\n### 读写分离原理\n判断sql语句，如果是insert、update、delete类型sql语句则直接连接主服务器修改数据；如果是select语句则从slave服务器中选择一台进行查询。\n\n### 实现读写分离\n#### ThinkPHP实现读写分离\n1. 修改配置项\n```\n'DB_DEPLOY_TYPE'        =>  1, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)\n'DB_RW_SEPARATE'        =>  true,       // 数据库读写是否分离 主从式有效\n'DB_MASTER_NUM'         =>  1, // 读写分离后 主服务器数量\n'DB_SLAVE_NO'           =>  '', // 指定从服务器序号\n/* 数据库设置 */\n'DB_TYPE'               =>  'mysql',     // 数据库类型\n'DB_HOST'               =>  '192.168.34.101,192.168.34.102', // 服务器地址\n'DB_NAME'               =>  'test',          // 数据库名\n'DB_USER'               =>  'root,root',      // 用户名\n'DB_PWD'                =>  '123456,123456',          // 密码\n'DB_PORT'               =>  '3306,3306',        // 端口\n'DB_PREFIX'             =>  '',    // 数据库表前缀\n```\n\n2. 代码书写\n```\npublic function read(){\n\t$model = M('slave');\n\t$data = $model->select();\n\tdump($data);\n}\npublic function write(){\n\t$model = M('slave');\n\t$data=array('name'=>'dumin','age'=>'18','sex'=>'女');\n\t$res = $model -> add($data);\n\tdump($res);\n}\n```\n\n## 分库分表\n垂直分表\n* 冷热字段区分\n\n水平分表\n* 逻辑分表 MySQL内部完成\n* 物理分表 可通过主键取余、MD5加密数据字母与数据分表等\n\n### 逻辑分表\nkey：取模算法\nhash：哈希算法\nrange：某一个范围\nlist：某些值得中间\n\n### 创建语法\n```\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by key(分表字段) partitions num;\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by hash(分表字段) partitions num;\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by range(字段)(\n partition 别名 values less than (常量)\n);\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by list(字段)(\n partition 别名 values in (列表)\n);\n```\n\n### 添加语法\n```\n求余算法：alter table 表名 add partition partitions 5;\n条件算法：  \nalter table 表名 add partition(\n    partition 名称 values less than (常量)\n    或\n   partition 名称 in (n,n,n)\n);\n```\n\n## 分表与多方式登录数据表\n```\n#创建一个不重复的ID\ncreate table blog_people_uid(\n\tuid int not null auto_increment comment '用户唯一id',\n\tprimary key(uid)\n)engine=myisam default charset=utf8;\n\ncreate table blog_people(\n\tid int not null auto_increment comment '用户表id',\n\tuid int not null default 0 comment '用户唯一id',\n\tname char(24) not null default '' comment '用户名',\n\tpwd char(32) not null default '' comment '密码',\n\ttel char(11) not null default '' comment '手机号码',\n\temail char(30) not null default '' comment '电子邮件',\n\tprimary key(id),\n\tunique key (uid),\n\tunique key (name),\n\tunique key (tel),\n\tunique key (email)\n)engine=myisam default charset=utf8;\n\ncreate table blog_people_index(\n\tid int not null auto_increment comment '登录检索表索引',\n\tuid int not null default 0 comment '检索用户id',\n\tname char(30) not null default '' comment '检索用户信息',\n\tprimary key(id)\n)engine=myisam default charset=utf8;\n\n```\n\nlaravel 源码\n```php\npublic function register(){\n    if($input = Input::all());\n    // 定义验证规则\n    $rules = [\n        'pwd' => 'required|between:6,20',\n        'name' => 'alpha_num',\n        'name' => 'unique:people,tel',\n        'email' => 'email',\n        'tel' => 'integer',\n    ];\n    // 提示信息\n    $message = [\n        'name.alpha_num' => '用户名只能是字符和数字',\n        'name.unique' => '该用户已经存在请重新输入',\n        'email.email' => '请输入合法邮箱',\n        'tel.integer' => '请输入合法手机号码',\n        'pwd.required' => '密码不能为空',\n        'pwd.between'  => '密码必须在6-20位之间',\n    ];\n    $validator = Validator::make($input,$rules,$message);\n    if($validator->passes()){//验证规则通过\n        $pwd   = $input['pwd'];\n        $tel   = $input['tel'];\n        $email = $input['email'];\n        // 检查用户名是否存在\n        $name = People::where('name','=',$input['name'])->first();\n        $tel = People::where('tel','=',$input['tel'])->first();\n        $email = People::where('email','=',$input['email'])->first();\n        if($name!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该用户名已经存在，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        if($tel!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该手机已经注册，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        if($email!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该邮箱已经存在，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        $uid = DB::table('people_uid')->insertGetId(array());\n        $input['uid']=$uid;\n        $input['pwd'] = Crypt::encrypt($input['pwd']);\n        DB::table('people')->insert($input);\n        DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['name']));\n        DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['tel']));\n        $res = DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['email']));\n        if($res){\n            // 成功\n            $data = array(\n                'sign' => 1,\n                'code' => 'register success',\n                'msg' => '注册成功！'\n            );\n            echo json_encode($data);exit();\n        }else{\n            // 入库失败\n            $data = array(\n                'sign' => 0,\n                'code' => 'insert error',\n                'msg' => '入库失败请联系管理员！'\n            );\n            echo json_encode($data);exit();\n        }\n    }else{\n        // 服务器端验证规则\n        $messages = $validator->messages();\n        $data = array(\n            'sign' => 0,\n            'code' => 'insert error',\n            'msg' => $messages->first(),\n        );\n        echo json_encode($data);exit();\n    }\n}\n?>\n```","source":"_posts/2015/201511/20151118-1.md","raw":"layout: post\ntitle: MySQL架构 | 多种方式登录\ndate: 2015-11-18 02:36:19\ntags:\n- 数据库优化\n---\n集群由一组服务器相互独立的服务器，构建的高性能与可靠性的服务器架构\n\n## MySQL读写分离\n主从复制是读写分离的基础\n### 主从复制原理\n1. 主服务器将修改的SQL语句写入到二进制（bin）日志中\n2. 从服务器中的IO线程通过授权账号读取二进制日志，将信息写入到中继日志中（relay）\n3. 从服务器中的SQL线程读取中继日志中的数据，然后将SQL语句执行，还原主服务器中的数据\n\n### 实现主从复制\n1. 开启主服务器的二进制日志\ncentos yum 安装MySQL配置文件路径：\n```\nlog-bin=mysql-bin\nbinlog_format=mixed\nserver-id=101\n```\n\n2. 重启主服务器MySQL\n`service mysqld restart`\n\n3. 添加授权账号\n```\n[root@localhost etc]# mysql -uroot -p\nEnter password:\nmysql> GRANT REPLICATION SLAVE ON *.* TO repuser@\"192.168.%.%\" IDENTIFIED BY '123456'; \nQuery OK, 0 rows affected (0.00 sec)\n#''引号内是授权账号的密码\n```\n\n4. 在主服务器下刷新用户权限\n`mysql> FLUSH PRIVILEGES;`\n\n5. 查看主服务器状态\n```\nmysql> show master status;\n+------------------+----------+--------------+------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+------------------+----------+--------------+------------------+\n| mysql-bin.000001 |      326 |              |                  |\n+------------------+----------+--------------+------------------+\n1 row in set (0.00 sec)\nFile ：表示正在使用二进制文件\nPosition：二进制当前所在的位置\n```\n\n6. 修改从服务器mysql配置项\n```\n[root@localhost ~]# vim /etc/my.cnf\nserver-id       = 102\n```\n\n7. 重启从服务器的mysql服务\n`[root@localhost ~]# service mysqld restart`\n\n8. 配置从服务器通过授权账号读取主服务器信息\n```\nmysql> CHANGE MASTER TO MASTER_HOST='192.168.34.101',MASTER_USER='repuser',MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.000001',MASTER_LOG_POS=326;\nQuery OK, 0 rows affected (0.07 sec)\n```\n\n9. 在从服务器上开启主从同步数据\n```\nmysql> slave start;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n10. 查看主从复制的状态\n```\nmysql> show slave status\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.34.101\n                  Master_User: repuser\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 326\n               Relay_Log_File: mysqld-relay-bin.000002\n                Relay_Log_Pos: 251\n        Relay_Master_Log_File: mysql-bin.000001\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n```\n\n11. 成功\n在主服务器上建表，写入数据，查看重服务的数据表跟数据是否与主服务一样\n![slave](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-18%2023.17.49.png)\n>slave_io_running与slave_sql_running要求都为yes则表示成功\n可以使用 slave stop关闭主从，使用reset slave 可以清空主从信息\n\n从服务器配置参数\n>CHANGE MASTER TO\n>MASTER_HOST='192.168.81.128',//指定主服务器的地址\n>MASTER_USER='repuser',//指定授权账号的用户名\n>MASTER_PASSWORD='123456',//指定授权账号的密码\n>MASTER_LOG_FILE='mysql-bin.000001',//指定主服务的正在使用的二进制文件\n>MASTER_LOG_POS=326;//指定主服务器当前记录到的SQL语句的文字\n\n开启bin日志，相关配置文件\n>`log-bin=mysql-bin` 开启二进制日志，并且名称以mysql-bin开头\n>`binlog-format=mixed` 指定二进制文件记录sql语句的格式。statement：用一条sql语句记录修改。row：表示记录每一条sql语句。mixed：表示混合使用由mysql自己决定\n>`server-id = 101` 表示主从服务器每台的标识各不一样\n>`datadir=/var/lib/mysql`\nmysql-bin.index //索引文件，列出当前有哪些二进制文件\nmysql-bin.000001//记录修改的SQL语句\nbin日志，只记录修改表数据的SQL语句：`inser`、`delete`、`update`\n\n### 读写分离原理\n判断sql语句，如果是insert、update、delete类型sql语句则直接连接主服务器修改数据；如果是select语句则从slave服务器中选择一台进行查询。\n\n### 实现读写分离\n#### ThinkPHP实现读写分离\n1. 修改配置项\n```\n'DB_DEPLOY_TYPE'        =>  1, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)\n'DB_RW_SEPARATE'        =>  true,       // 数据库读写是否分离 主从式有效\n'DB_MASTER_NUM'         =>  1, // 读写分离后 主服务器数量\n'DB_SLAVE_NO'           =>  '', // 指定从服务器序号\n/* 数据库设置 */\n'DB_TYPE'               =>  'mysql',     // 数据库类型\n'DB_HOST'               =>  '192.168.34.101,192.168.34.102', // 服务器地址\n'DB_NAME'               =>  'test',          // 数据库名\n'DB_USER'               =>  'root,root',      // 用户名\n'DB_PWD'                =>  '123456,123456',          // 密码\n'DB_PORT'               =>  '3306,3306',        // 端口\n'DB_PREFIX'             =>  '',    // 数据库表前缀\n```\n\n2. 代码书写\n```\npublic function read(){\n\t$model = M('slave');\n\t$data = $model->select();\n\tdump($data);\n}\npublic function write(){\n\t$model = M('slave');\n\t$data=array('name'=>'dumin','age'=>'18','sex'=>'女');\n\t$res = $model -> add($data);\n\tdump($res);\n}\n```\n\n## 分库分表\n垂直分表\n* 冷热字段区分\n\n水平分表\n* 逻辑分表 MySQL内部完成\n* 物理分表 可通过主键取余、MD5加密数据字母与数据分表等\n\n### 逻辑分表\nkey：取模算法\nhash：哈希算法\nrange：某一个范围\nlist：某些值得中间\n\n### 创建语法\n```\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by key(分表字段) partitions num;\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by hash(分表字段) partitions num;\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by range(字段)(\n partition 别名 values less than (常量)\n);\n\ncreate table 表名(\n具体某些字段信息\n)engine=myisam default charset=utf8\npartition by list(字段)(\n partition 别名 values in (列表)\n);\n```\n\n### 添加语法\n```\n求余算法：alter table 表名 add partition partitions 5;\n条件算法：  \nalter table 表名 add partition(\n    partition 名称 values less than (常量)\n    或\n   partition 名称 in (n,n,n)\n);\n```\n\n## 分表与多方式登录数据表\n```\n#创建一个不重复的ID\ncreate table blog_people_uid(\n\tuid int not null auto_increment comment '用户唯一id',\n\tprimary key(uid)\n)engine=myisam default charset=utf8;\n\ncreate table blog_people(\n\tid int not null auto_increment comment '用户表id',\n\tuid int not null default 0 comment '用户唯一id',\n\tname char(24) not null default '' comment '用户名',\n\tpwd char(32) not null default '' comment '密码',\n\ttel char(11) not null default '' comment '手机号码',\n\temail char(30) not null default '' comment '电子邮件',\n\tprimary key(id),\n\tunique key (uid),\n\tunique key (name),\n\tunique key (tel),\n\tunique key (email)\n)engine=myisam default charset=utf8;\n\ncreate table blog_people_index(\n\tid int not null auto_increment comment '登录检索表索引',\n\tuid int not null default 0 comment '检索用户id',\n\tname char(30) not null default '' comment '检索用户信息',\n\tprimary key(id)\n)engine=myisam default charset=utf8;\n\n```\n\nlaravel 源码\n```php\npublic function register(){\n    if($input = Input::all());\n    // 定义验证规则\n    $rules = [\n        'pwd' => 'required|between:6,20',\n        'name' => 'alpha_num',\n        'name' => 'unique:people,tel',\n        'email' => 'email',\n        'tel' => 'integer',\n    ];\n    // 提示信息\n    $message = [\n        'name.alpha_num' => '用户名只能是字符和数字',\n        'name.unique' => '该用户已经存在请重新输入',\n        'email.email' => '请输入合法邮箱',\n        'tel.integer' => '请输入合法手机号码',\n        'pwd.required' => '密码不能为空',\n        'pwd.between'  => '密码必须在6-20位之间',\n    ];\n    $validator = Validator::make($input,$rules,$message);\n    if($validator->passes()){//验证规则通过\n        $pwd   = $input['pwd'];\n        $tel   = $input['tel'];\n        $email = $input['email'];\n        // 检查用户名是否存在\n        $name = People::where('name','=',$input['name'])->first();\n        $tel = People::where('tel','=',$input['tel'])->first();\n        $email = People::where('email','=',$input['email'])->first();\n        if($name!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该用户名已经存在，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        if($tel!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该手机已经注册，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        if($email!=null){\n            $data = array(\n            'sign' => 0,\n            'code' => 'register error',\n            'msg' => '该邮箱已经存在，请返回登录或重新注册！'\n             );\n            return json_encode($data);\n        }\n        $uid = DB::table('people_uid')->insertGetId(array());\n        $input['uid']=$uid;\n        $input['pwd'] = Crypt::encrypt($input['pwd']);\n        DB::table('people')->insert($input);\n        DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['name']));\n        DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['tel']));\n        $res = DB::table('people_index')->insert(array('uid'=>$uid,'name'=>$input['email']));\n        if($res){\n            // 成功\n            $data = array(\n                'sign' => 1,\n                'code' => 'register success',\n                'msg' => '注册成功！'\n            );\n            echo json_encode($data);exit();\n        }else{\n            // 入库失败\n            $data = array(\n                'sign' => 0,\n                'code' => 'insert error',\n                'msg' => '入库失败请联系管理员！'\n            );\n            echo json_encode($data);exit();\n        }\n    }else{\n        // 服务器端验证规则\n        $messages = $validator->messages();\n        $data = array(\n            'sign' => 0,\n            'code' => 'insert error',\n            'msg' => $messages->first(),\n        );\n        echo json_encode($data);exit();\n    }\n}\n?>\n```","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpj00abpgwi18c7dwkx"},{"layout":"post","title":"Redis","date":"2015-11-18T17:49:13.000Z","_content":"redis是一个基于内存的键值对的数据库。支持5中数据类型其中包括字符串，链表，哈希，无序集合、有序集合。并且支持数据持久化操作(保证数据安全，在服务器重启之后，会自动的将数据还原到内存中)\n\n## 安装\n1. 解压\n`[root@localhost redis]# tar -zxvf redis-2.6.14.tar.gz`\n2. 安装\n`[root@localhost redis-2.6.14]# make && make install`\n3. 创建软件目录\n`[root@localhost redis-2.6.14]# mkdir /usr/local/redis`\n4. 复制服务到软件目录\n`[root@localhost redis-2.6.14]# cp src/redis-server /usr/local/redis/`\n5. 复制配置文件到软件目录\n`[root@localhost redis-2.6.14]# cp redis.conf /usr/local/redis/`\n6. 进入软件目录下启动Redis\n`[root@localhost redis-2.6.14]# /usr/local/redis/redis-server`\n![Redis_success](http://7xwlfk.com1.z0.glb.clouddn.com/Redis.png)\n7. 修改Redis为后台启动\n``\n8. 通过配置文件启动redis服务\n``\n9. 查看是否正常运行\n`netstat -tunple|grep 6379`\n\n## 基本使用\n1. exists key\n检查某个key是否存在\n2. del key\n删除某个key\n3. type key \n检查key所对应的value的类型\n在redis中对外显示没有整形，在内部有区分\n4. keys pattern\n查找满足条件的所有的key\nkeys * \nkeys user_*\n5. rename oldkey newkey\n重命名某个key\nexpire key\n为某个key设置过期时间\n6. ttl key\n查看某个key的有效时间\n7. select db\n切换数据库\n在redis中有数据库的概念。默认有16个数据库\n每个数据库之间相互没有关系，默认是连接到0数据库\n在redis配置项中有一个databases参数设置默认的数据个数\n8. flushdb\n清空当前所在的数据库下的所有数据\n\n## redis的数据结构\n### 字符串\n可以包含任何数据，比如jpg图片或者序列化的对象(PHP中对象序列化函数serialize)。\n单个value最大值上限是512M\n如果说只用这种类型，Redis就像一个可以持久化的memcached服务器\n>常用命令\n```\nset key 设置key的值\nget key 获取key的值\nMget key1 key2 ... 批量获取指定key的值\nMset key1 value1 key2 value2 ... 批量设置值\nstrlen key 返回字符串的长度\nincr key 对key的值进行自增\ndecr key 对key的值进行自减\nincrby key num 对key值进行自加num操作\ndecrby key num 对key值进行自减num操作\nappend key value 对key值的值末尾追加value 如果key不存在则创建\nsubstr key start end 返回名称为key的字符串子串\n```\n\n### 哈希\nhash是一个string类型的field和value的映射表。hash特别适合用于存储对象。相较于将对象的每个字段存成单个string类型。将一个对象存储在hash类型中会占用更少的内存，并且可以更方便的存取整个对象。\n>常用命令\n```\nhset key field value 添加一个filed属性 值为value\nhget key field 返回field属性的值\nhmset key field1 value1 field2 value2 批量设置key中field1和field2的值\nhmget key field1 field2 批量获取key总field1 field2的值\nhexists key field 检查key中为field属性的值是否存在\nhdel key field 删除key中的field的属性\nhlen key 返回key中属性的个数\nhvals key 返回key中所有的value值\nhgetall key 返回key总所有filed跟value对应值\n```\n\n### 链表\nlist类型其实就是一个每个子元素都是string类型的双向链表\n链表可以使用在显示最新登录的用户，邮件队列。消息推送，抢购。\n\n>常用命令\n```\nrpush key value 表末添加一个元素\nlpush key value 表头添加一个元素\nlpop key 删除表头的元素\nrpop key 删除表尾的元素\nllen key 返回链表长度\nlrange key start end 返回list 中key从start开始end之间的元素\nltrim key start end 截取名称为key 的list保留start到end之间的元素（该变了链表的元素）\nlindex key index 返回list中为index位置的元素\niset key index value 给list中为index位置的元素赋值\n```\n\n### 集合\n很多字符串组合在一起就叫做集合，对于集合两两之间可以进行交集、并集、差集。主要应用在社交关系处理，例如计算两个人之间的共同好友可以通过集合取交集得到结果\n>常用命令\n```\nsadd key value 添加一个元素（集合中不能有重复元素）\nstrm key value 删除为value的元素\nsmembers key 返回所有的元素\nspop value 返回一个随机被删除的元素（集合会被修改）\nscard key 返回集合中有多少个元素\nsmove key key2 value 将key 中元素为value的转移到key2集合中，key2不存在则创建\nsismember key value 测试key集合中是否存在value\nsinter key1 key2 集合求交集\nsinterstore key key1,key2 将集合key1和key2的交集保存到key集合中\nsunion key1 key2 求并集\nsunionstore key key1,key2 求并集 保存到key集合中\nsdiff key1 key2 求差集\nsidff key key1 key2 求差集保存到key集合中\n```\n\n### 有序集合\n有序集合是在无序集合的基础之上增加了一个权重score，可以用于排序操作。\n>常用命令\n```\nzadd key score member 添加元素到集合中\nzrem key member 删除指定元素\nzcard key返回集合中的元素\nzincrby key num member 将member上的分值增加num\nzrank key member返回指定元素在集合中的排名 score从小到大排列\nzrange key start end 获取集合中指定区间的元素\n```\n\n## 持久化\n### 原理\nredis定期的将内存中的数据转存储到磁盘上，如果一旦出现重启情况，redis会自动的将磁盘中备份数据还原到内存中\n\n###snap shotting快照方式(默认方式)\n#### 实现1\nredis默认开启快照备份功能，能够将数据存储到默认是存储到dump.rdb文件中\n\n>参数描述\n```\nsave 900 1:表示在900秒之内(以上一次备份的时间)有一个key发生变化，就会触发备份操作\nsave 300 10:表示在300秒之内(以上一次备份的时间)有10个key发生变化，就会触发备份操作\nsave 60 10000:表示在60秒之内(以上一次备份的时间)有10000个key发生变化，就会触发备份操作\n注意：只要有一个条件满足就会执行备份\n问题：例如16:25这个时间点发生了一次备份，下次备份将会法师在16:40这个时间，然后16:30突然服务器重启了。还原过程中只能讲数据还原到16:25这个时间点上，因此数据丢失。\n```\n\n#### 实现2\n手动备份可以通过在客户端上执行save或者bgsave命令备份\nsave：表示前台备份，该方式会阻塞其他请求。\nbgsave：后台备份方式，此方式不会阻塞其他请求。\n阻塞过程中其他客户端不能正常操作数据\n\n### AOF备份\n#### 原理\naof备份会将每一个写入操作的命令都记录到某一个文件中，当redis重新运行起来之后，会把文件中记录的命令重新执行一遍，因此就能还原数据\n\n#### 开启aof备份\nAOF备份默认是关闭的，通过配置项appendonle参数控制(注意：开启aof会清空所有的数据)\n```\n此三个参数是用于控制redis将命名写入文件中的速度\nalways：每写入一个命名刷新缓冲区的内容到文件中，即每写入一个命令就将命令写入到文件中\neverysec:表示每秒钟写入一次\nno：由系统决定什么时候写入\n```\n\n#### aof备份文件压缩\n随着时间变长，redis中的aof备份文件会越来越大，有很多写入命名，在重复操作占用了空间，因此可以使用压缩功能将文件大小减少\n在客户端命令行下使用bgrewriteaof\n\n## 主从复制\n192.168.34.101：作为主服务器也叫master服务器\n192.168.153.128：作为从服务器，去同步主服务器中的数据，也叫slave服务器\n\n### 实现步骤\n1. 设置从服务器\n2. 重启Redis服务\n3. 验证从服务器数据\n\n>主服务器关闭防火墙\n\n\n## 权限验证\n在redis中有权限验证的，验证方式只有密码，没有用户名，密码是存储在配置文件中，并且是明文存储，使用配置项requirepass指定密码。\nredis数据存储在内存，速度比较快可以暴力破解密码，因此建议可以不使用密码。通过服务器安全防护\n1. 修改配置文件中密码\n2. 重启Redis服务\n3. 进入Redis客户端\n4. 密码校验\n\n\n## PHP操作Redis\n1. 开启Redis扩展\n查看phpinfo中Thread Safety：enabled -> TS版本 线程是否安全选择ts或者nts版本\n如果为5.3以上的版本有2个dll文件，并且顺序要是redis.dll的引入在下\n\n2. PHP操作Redis数据\n```php\n<?php \n\t// 实例化对象\n\t$redis = new Redis();\n\t$redis->connect('192.168.153.132',6379);\n\n\t// 密码验证\n\t$redis->auth('123456');\n\n\t// 赋值操作\n\t$res = $redis->set('user','uiste');\n\tvar_dump($res);\n\n\t// 取值操作\n\t$content = $redis->get('user');\n\tvar_dump($content);\n\n ?>\n ```\n\n","source":"_posts/2015/201511/20151119-2.md","raw":"layout: post\ntitle: Redis\ndate: 2015-11-19 01:49:13\ntags:\n- 数据库优化\n---\nredis是一个基于内存的键值对的数据库。支持5中数据类型其中包括字符串，链表，哈希，无序集合、有序集合。并且支持数据持久化操作(保证数据安全，在服务器重启之后，会自动的将数据还原到内存中)\n\n## 安装\n1. 解压\n`[root@localhost redis]# tar -zxvf redis-2.6.14.tar.gz`\n2. 安装\n`[root@localhost redis-2.6.14]# make && make install`\n3. 创建软件目录\n`[root@localhost redis-2.6.14]# mkdir /usr/local/redis`\n4. 复制服务到软件目录\n`[root@localhost redis-2.6.14]# cp src/redis-server /usr/local/redis/`\n5. 复制配置文件到软件目录\n`[root@localhost redis-2.6.14]# cp redis.conf /usr/local/redis/`\n6. 进入软件目录下启动Redis\n`[root@localhost redis-2.6.14]# /usr/local/redis/redis-server`\n![Redis_success](http://7xwlfk.com1.z0.glb.clouddn.com/Redis.png)\n7. 修改Redis为后台启动\n``\n8. 通过配置文件启动redis服务\n``\n9. 查看是否正常运行\n`netstat -tunple|grep 6379`\n\n## 基本使用\n1. exists key\n检查某个key是否存在\n2. del key\n删除某个key\n3. type key \n检查key所对应的value的类型\n在redis中对外显示没有整形，在内部有区分\n4. keys pattern\n查找满足条件的所有的key\nkeys * \nkeys user_*\n5. rename oldkey newkey\n重命名某个key\nexpire key\n为某个key设置过期时间\n6. ttl key\n查看某个key的有效时间\n7. select db\n切换数据库\n在redis中有数据库的概念。默认有16个数据库\n每个数据库之间相互没有关系，默认是连接到0数据库\n在redis配置项中有一个databases参数设置默认的数据个数\n8. flushdb\n清空当前所在的数据库下的所有数据\n\n## redis的数据结构\n### 字符串\n可以包含任何数据，比如jpg图片或者序列化的对象(PHP中对象序列化函数serialize)。\n单个value最大值上限是512M\n如果说只用这种类型，Redis就像一个可以持久化的memcached服务器\n>常用命令\n```\nset key 设置key的值\nget key 获取key的值\nMget key1 key2 ... 批量获取指定key的值\nMset key1 value1 key2 value2 ... 批量设置值\nstrlen key 返回字符串的长度\nincr key 对key的值进行自增\ndecr key 对key的值进行自减\nincrby key num 对key值进行自加num操作\ndecrby key num 对key值进行自减num操作\nappend key value 对key值的值末尾追加value 如果key不存在则创建\nsubstr key start end 返回名称为key的字符串子串\n```\n\n### 哈希\nhash是一个string类型的field和value的映射表。hash特别适合用于存储对象。相较于将对象的每个字段存成单个string类型。将一个对象存储在hash类型中会占用更少的内存，并且可以更方便的存取整个对象。\n>常用命令\n```\nhset key field value 添加一个filed属性 值为value\nhget key field 返回field属性的值\nhmset key field1 value1 field2 value2 批量设置key中field1和field2的值\nhmget key field1 field2 批量获取key总field1 field2的值\nhexists key field 检查key中为field属性的值是否存在\nhdel key field 删除key中的field的属性\nhlen key 返回key中属性的个数\nhvals key 返回key中所有的value值\nhgetall key 返回key总所有filed跟value对应值\n```\n\n### 链表\nlist类型其实就是一个每个子元素都是string类型的双向链表\n链表可以使用在显示最新登录的用户，邮件队列。消息推送，抢购。\n\n>常用命令\n```\nrpush key value 表末添加一个元素\nlpush key value 表头添加一个元素\nlpop key 删除表头的元素\nrpop key 删除表尾的元素\nllen key 返回链表长度\nlrange key start end 返回list 中key从start开始end之间的元素\nltrim key start end 截取名称为key 的list保留start到end之间的元素（该变了链表的元素）\nlindex key index 返回list中为index位置的元素\niset key index value 给list中为index位置的元素赋值\n```\n\n### 集合\n很多字符串组合在一起就叫做集合，对于集合两两之间可以进行交集、并集、差集。主要应用在社交关系处理，例如计算两个人之间的共同好友可以通过集合取交集得到结果\n>常用命令\n```\nsadd key value 添加一个元素（集合中不能有重复元素）\nstrm key value 删除为value的元素\nsmembers key 返回所有的元素\nspop value 返回一个随机被删除的元素（集合会被修改）\nscard key 返回集合中有多少个元素\nsmove key key2 value 将key 中元素为value的转移到key2集合中，key2不存在则创建\nsismember key value 测试key集合中是否存在value\nsinter key1 key2 集合求交集\nsinterstore key key1,key2 将集合key1和key2的交集保存到key集合中\nsunion key1 key2 求并集\nsunionstore key key1,key2 求并集 保存到key集合中\nsdiff key1 key2 求差集\nsidff key key1 key2 求差集保存到key集合中\n```\n\n### 有序集合\n有序集合是在无序集合的基础之上增加了一个权重score，可以用于排序操作。\n>常用命令\n```\nzadd key score member 添加元素到集合中\nzrem key member 删除指定元素\nzcard key返回集合中的元素\nzincrby key num member 将member上的分值增加num\nzrank key member返回指定元素在集合中的排名 score从小到大排列\nzrange key start end 获取集合中指定区间的元素\n```\n\n## 持久化\n### 原理\nredis定期的将内存中的数据转存储到磁盘上，如果一旦出现重启情况，redis会自动的将磁盘中备份数据还原到内存中\n\n###snap shotting快照方式(默认方式)\n#### 实现1\nredis默认开启快照备份功能，能够将数据存储到默认是存储到dump.rdb文件中\n\n>参数描述\n```\nsave 900 1:表示在900秒之内(以上一次备份的时间)有一个key发生变化，就会触发备份操作\nsave 300 10:表示在300秒之内(以上一次备份的时间)有10个key发生变化，就会触发备份操作\nsave 60 10000:表示在60秒之内(以上一次备份的时间)有10000个key发生变化，就会触发备份操作\n注意：只要有一个条件满足就会执行备份\n问题：例如16:25这个时间点发生了一次备份，下次备份将会法师在16:40这个时间，然后16:30突然服务器重启了。还原过程中只能讲数据还原到16:25这个时间点上，因此数据丢失。\n```\n\n#### 实现2\n手动备份可以通过在客户端上执行save或者bgsave命令备份\nsave：表示前台备份，该方式会阻塞其他请求。\nbgsave：后台备份方式，此方式不会阻塞其他请求。\n阻塞过程中其他客户端不能正常操作数据\n\n### AOF备份\n#### 原理\naof备份会将每一个写入操作的命令都记录到某一个文件中，当redis重新运行起来之后，会把文件中记录的命令重新执行一遍，因此就能还原数据\n\n#### 开启aof备份\nAOF备份默认是关闭的，通过配置项appendonle参数控制(注意：开启aof会清空所有的数据)\n```\n此三个参数是用于控制redis将命名写入文件中的速度\nalways：每写入一个命名刷新缓冲区的内容到文件中，即每写入一个命令就将命令写入到文件中\neverysec:表示每秒钟写入一次\nno：由系统决定什么时候写入\n```\n\n#### aof备份文件压缩\n随着时间变长，redis中的aof备份文件会越来越大，有很多写入命名，在重复操作占用了空间，因此可以使用压缩功能将文件大小减少\n在客户端命令行下使用bgrewriteaof\n\n## 主从复制\n192.168.34.101：作为主服务器也叫master服务器\n192.168.153.128：作为从服务器，去同步主服务器中的数据，也叫slave服务器\n\n### 实现步骤\n1. 设置从服务器\n2. 重启Redis服务\n3. 验证从服务器数据\n\n>主服务器关闭防火墙\n\n\n## 权限验证\n在redis中有权限验证的，验证方式只有密码，没有用户名，密码是存储在配置文件中，并且是明文存储，使用配置项requirepass指定密码。\nredis数据存储在内存，速度比较快可以暴力破解密码，因此建议可以不使用密码。通过服务器安全防护\n1. 修改配置文件中密码\n2. 重启Redis服务\n3. 进入Redis客户端\n4. 密码校验\n\n\n## PHP操作Redis\n1. 开启Redis扩展\n查看phpinfo中Thread Safety：enabled -> TS版本 线程是否安全选择ts或者nts版本\n如果为5.3以上的版本有2个dll文件，并且顺序要是redis.dll的引入在下\n\n2. PHP操作Redis数据\n```php\n<?php \n\t// 实例化对象\n\t$redis = new Redis();\n\t$redis->connect('192.168.153.132',6379);\n\n\t// 密码验证\n\t$redis->auth('123456');\n\n\t// 赋值操作\n\t$res = $redis->set('user','uiste');\n\tvar_dump($res);\n\n\t// 取值操作\n\t$content = $redis->get('user');\n\tvar_dump($content);\n\n ?>\n ```\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpk00aepgwirebix64i"},{"layout":"post","title":"Mongodb","date":"2015-11-18T17:46:13.000Z","_content":"NOSQL：非关系型数据库\n\n## 特性\n1. 读写速度特别快\n>原因内存映射机制：先将数据写入内存，写入完成后通过异步方式将内存中的数据写入文档中\n查询部分使用频率较高的数据还停留在内存中。所需空间特别大\n\n2. 数据无规则\n>每一条数据都可以随意添加减少属性\n\n3. 支持主从复制\n>支持主从复制实现数据同步，故可以实现读写分离。自带监察模式，主服务器出现问题，自动在从如曲奇中选择一个服务器作为主服务器\n\n4. 支持数据分片\n>支持分布式存储\n\n5. 不受SQL注入影响\n\n## 适合储存的数据\n由于mongodb不支持事务处理，因此不适合存储业务逻辑比较强的数据\n适合存储数据量比较大，当时价值比较低的数据\n\n## Linux安装\n* 解压进入编译目录\n```\n[root@localhost mongodb]# tar zxvf mongodb-linux-i686-rhel57-2.3.0.tgz  -C /usr/local\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# pwd\n/usr/local\n```\n\n* 创建软链接或改名\n```\n[root@localhost local]# ln -sv mongodb-linux-i686-rhel57-2.3.0/ mongodb\n\"mongodb\" -> \"mongodb-linux-i686-rhel57-2.3.0/\"\n```\n\n* 进入到mongodb目录\n`[root@localhost local]# cd mongodb`\n\n* 创建数据存储目录及日志文件\n`[root@localhost mongodb]# mkdir data`\n`[root@localhost mongodb]# touch log.log`\n\n* 启动mongodb\n```\n[root@localhost mongodb]# cd bin\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/r/local/mongodb/data/ --fork\n\n[root@localhost bin]# netstat -tunple | grep 27017\ntcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          15697      2571/./mongod\n```\n\n>`--fork`后台启动\n\n* 使用配置文件启动\n```\n[root@localhost bin]# pkill mongo\n[root@localhost mongodb]# pwd\n/usr/local/mongodb\n[root@localhost mongodb]# vim mongo.conf\n\nlogpath=/usr/local/mongodb/log.log\ndbpath=/usr/local/mongodb/data/\nfork = true\n\n[root@localhost mongodb]# ./bin/mongod -f /usr/local/mongodb/mongo.conf\nforked process: 2662\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-18T21-15-30]\nchild process started successfully, parent exiting\n```\n\n* 检查启动状态并进入\n```\n[root@localhost bin]# netstat -tunple|grep 27017\ntcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          16183      2662/./bin/mongod\n[root@localhost bin]# ./mongo\nMongoDB shell version: 2.3.0\nconnecting to: test\n>\n```\n\n## mongodb结构体系\n\n数据库-》表-》记录\nMysql:`databases->table->row`\n\n数据库-》集合-》文档\nmongodb:`databases->collection->document`\n\n## 数据库基本操作\n* 创建数据库\n>隐式创建数据库,如果没有写入数据库，数据库则自动消失\n```\n> use uiste\nswitched to db uiste\n```\n\n* 查看数据库\n```\n> show dbs\nlocal\t(empty)\ntest\t(empty)\n```\n\n* 创建集合\n```\n手动创建集合\n> db.createCollection('student')\n{ \"ok\" : 1 }\n隐式创建集合\n> db.child.insert({name:123})\n```\n* 查看集合\n```\n> show collections\nchild\nstudent\n> show tables\nchild\nstudent\n```\n\n* 删除集合\n```\n> db.student.drop()\ntrue\n```\n\n* 删除数据库\n```\n> db.dropDatabase()\n{ \"dropped\" : \"uiste\", \"ok\" : 1 }\n```\n\n* 查看帮助\n`help`\n\n## 数据基本操作\n* 增加数据\n`db.集合.insert(数据)`\n`> db.student.insert({name:'dumin',age:33})`\n>数据采用bson格式\n\n* 删除数据\n`db.集合.remove(条件)`\n>justOne可选参数默认为全部删除`db.student.remove({age:23}),{justOne:1})`\n>操作符条件年龄大于24的：`db.student.remove({age:{'$gt':24}})``；$g:大于,$gte：大于等于，$lt：小于，$lte：小于等于\n```\n> db.student.remove({name:'dumin'})\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n```\n\n\n* 修改数据\n`db.集合.update(条件，新值，不存在是否添加:默认false，是否修改多条:默认false)`\n```\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n> db.student.update({name:'xiaozhang'},{'score':23})\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n> db.student.update({name:'xiaozhang'},{'score':23},1)\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n{ \"_id\" : ObjectId(\"582fa8636da1e09f672deb59\"), \"score\" : 23 }\n```\n>修改器\n>$set：修改某一个字段,如果该字段不存在就增这个字段，语法同操作符\n>$inc：自增\n\n* 查询数据\n```\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9ccf7943ef82a49db405\"), \"name\" : \"dumin\", \"age\" : 33 }\n> db.student.findOne({name:'xiaolan'})\n{\n\t\"_id\" : ObjectId(\"582f9f107943ef82a49db406\"),\n\t\"name\" : \"xiaolan\",\n\t\"age\" : 13\n}\n```\n\n## 主从复制\n### 作用\n1. 实现读写分离\n2. 同步数据作为热备服务器\n3. 可以进行后台的数据统计\n\n### 思路\n1. 确定谁是主服务器\n2. 确定谁是从服务器\n3. 从服务器从哪里获取数据\n\n### 实现\n1. 主服务器插入数据\n```\n> db.student.insert([{name:'dumin',sex:1,age:23},{name:'xiaolan',sex:0,age:28}])\n> db.student.find()\n{ \"_id\" : ObjectId(\"58330e07627dd4a28d28ca57\"), \"name\" : \"qiang\", \"sex\" : 1, \"age\" : 22 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc20\"), \"name\" : \"dumin\", \"sex\" : 1, \"age\" : 23 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc21\"), \"name\" : \"xiaolan\", \"sex\" : 0, \"age\" : 28 }\n```\n\n1. 关闭主服务器mongodb服务\n```\n[root@localhost ~]# pkill mongo\n[root@localhost ~]# netstat -tunple|grep mongo\n```\n\n2. 申明主服务器\n```\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --master\nforked process: 1303\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T14-59-32]\nchild process started successfully, parent exiting\n```\n\n3. 配置从服务器\n```\n[root@localhost mongodb]# pkill mongo\n[root@localhost mongodb]# ./bin/mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --slave --source=192.168.34.102\nforked process: 1744\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-14-45]\nchild process started successfully, parent exiting\n``` \n\n4. 进入客户端查看\n```\n[root@localhost mongodb]# ./bin/mongo\nMongoDB shell version: 2.3.0\nconnecting to: test\n> show dbs\nlocal\t0.0625GB\nuiste\t0.0625GB\n> use uiste\nswitched to db uiste\n> show collections\nstudent\nsystem.indexes\n> db.student.find();\n{ \"_id\" : ObjectId(\"58330e07627dd4a28d28ca57\"), \"name\" : \"qiang\", \"sex\" : 1, \"age\" : 22 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc20\"), \"name\" : \"dumin\", \"sex\" : 1, \"age\" : 23 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc21\"), \"name\" : \"xiaolan\", \"sex\" : 0, \"age\" : 28 }\n```\n\n## 权限控制\nmongodb中每一个数据库都会具备管理员有一个隐藏的admin数据库，此数据库时超级管理员相关的信息\n1. 创建超级管理员\n```\n> use admin\nswitched to db admin\n> db.addUser('root','123456')\n{\n\t\"user\" : \"root\",\n\t\"readOnly\" : false,\n\t\"pwd\" : \"34e5772aa66b703a319641d42a47d696\",\n\t\"_id\" : ObjectId(\"583310bc627dd4a28d28ca58\")\n}\n```\n\n2. 创建student用户\n```\n可读可写用户\n> use student\nswitched to db student\n> db.addUser('uiste','123456')\n{\n\t\"user\" : \"uiste\",\n\t\"readOnly\" : false,\n\t\"pwd\" : \"2f77d219f5631ed7c0c8c833317d1ff5\",\n\t\"_id\" : ObjectId(\"5833113c627dd4a28d28ca59\")\n}\n只读用户\n> db.addUser('dumin','123456',true)\n{\n\t\"user\" : \"dumin\",\n\t\"readOnly\" : true,\n\t\"pwd\" : \"36ad4172b50f7453498c00c80358d61a\",\n\t\"_id\" : ObjectId(\"58331195627dd4a28d28ca5a\")\n}\n```\n\n3. 启用mongodb密码\n```\n[root@localhost bin]# pkill mongo\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --auth\nforked process: 1408\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-26-12]\nchild process started successfully, parent exiting\n```\n\n4. 使用密码访问\n* 权限校验：需要先选择数据库，然后登陆校验\n* 如果直接使用db.auth()校验，不会通过\n```\nshow dbs\nuse uiste\ndb.auth('uiste','123456')\nshow dbs\nshow tables\ndb.student.insert({name:'zcc'})\ndb.student.find()\n```\n\n5. 删除用户\n```\ndb.system.users.find()\ndb.system.user.remove({user:'dumin'})\n```\n\n## PHP操作mongodb\nmongodb 客户端中的“.” 换成“->” bson格式的数据转化成数组\n```\n<?php \n/**\n * MongoClien实例化会自动执行构造方法进行连接\n * 一、$mongo = new MongoClient();//直接连接本机上的mongodb服务器\n * 二、$mongo = new MongoClient('192.168.34.102:27017');//连接自动的mongodb服务器\n * 三、$mongo = new MongoCLient('mongodb://root:123456@192.168.34.102:27017');\n */\n// 建立连接\n$mongo = new MongoCLient('mongodb://root:123456@192.168.34.102:27017');\n// 选择数据库\n$db = $mongo->uiste;\n$data = $db->student->find();\nforeach ($data as $key => $value) {\n\tvar_dump($value);\n}\n ?>\n```","source":"_posts/2015/201511/20151119-3.md","raw":"layout: post\ntitle: Mongodb\ndate: 2015-11-19 01:46:13\ntags:\n- 数据库优化\n---\nNOSQL：非关系型数据库\n\n## 特性\n1. 读写速度特别快\n>原因内存映射机制：先将数据写入内存，写入完成后通过异步方式将内存中的数据写入文档中\n查询部分使用频率较高的数据还停留在内存中。所需空间特别大\n\n2. 数据无规则\n>每一条数据都可以随意添加减少属性\n\n3. 支持主从复制\n>支持主从复制实现数据同步，故可以实现读写分离。自带监察模式，主服务器出现问题，自动在从如曲奇中选择一个服务器作为主服务器\n\n4. 支持数据分片\n>支持分布式存储\n\n5. 不受SQL注入影响\n\n## 适合储存的数据\n由于mongodb不支持事务处理，因此不适合存储业务逻辑比较强的数据\n适合存储数据量比较大，当时价值比较低的数据\n\n## Linux安装\n* 解压进入编译目录\n```\n[root@localhost mongodb]# tar zxvf mongodb-linux-i686-rhel57-2.3.0.tgz  -C /usr/local\n\n[root@localhost local]# cd /usr/local/\n[root@localhost local]# pwd\n/usr/local\n```\n\n* 创建软链接或改名\n```\n[root@localhost local]# ln -sv mongodb-linux-i686-rhel57-2.3.0/ mongodb\n\"mongodb\" -> \"mongodb-linux-i686-rhel57-2.3.0/\"\n```\n\n* 进入到mongodb目录\n`[root@localhost local]# cd mongodb`\n\n* 创建数据存储目录及日志文件\n`[root@localhost mongodb]# mkdir data`\n`[root@localhost mongodb]# touch log.log`\n\n* 启动mongodb\n```\n[root@localhost mongodb]# cd bin\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/r/local/mongodb/data/ --fork\n\n[root@localhost bin]# netstat -tunple | grep 27017\ntcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          15697      2571/./mongod\n```\n\n>`--fork`后台启动\n\n* 使用配置文件启动\n```\n[root@localhost bin]# pkill mongo\n[root@localhost mongodb]# pwd\n/usr/local/mongodb\n[root@localhost mongodb]# vim mongo.conf\n\nlogpath=/usr/local/mongodb/log.log\ndbpath=/usr/local/mongodb/data/\nfork = true\n\n[root@localhost mongodb]# ./bin/mongod -f /usr/local/mongodb/mongo.conf\nforked process: 2662\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-18T21-15-30]\nchild process started successfully, parent exiting\n```\n\n* 检查启动状态并进入\n```\n[root@localhost bin]# netstat -tunple|grep 27017\ntcp        0      0 0.0.0.0:27017               0.0.0.0:*                   LISTEN      0          16183      2662/./bin/mongod\n[root@localhost bin]# ./mongo\nMongoDB shell version: 2.3.0\nconnecting to: test\n>\n```\n\n## mongodb结构体系\n\n数据库-》表-》记录\nMysql:`databases->table->row`\n\n数据库-》集合-》文档\nmongodb:`databases->collection->document`\n\n## 数据库基本操作\n* 创建数据库\n>隐式创建数据库,如果没有写入数据库，数据库则自动消失\n```\n> use uiste\nswitched to db uiste\n```\n\n* 查看数据库\n```\n> show dbs\nlocal\t(empty)\ntest\t(empty)\n```\n\n* 创建集合\n```\n手动创建集合\n> db.createCollection('student')\n{ \"ok\" : 1 }\n隐式创建集合\n> db.child.insert({name:123})\n```\n* 查看集合\n```\n> show collections\nchild\nstudent\n> show tables\nchild\nstudent\n```\n\n* 删除集合\n```\n> db.student.drop()\ntrue\n```\n\n* 删除数据库\n```\n> db.dropDatabase()\n{ \"dropped\" : \"uiste\", \"ok\" : 1 }\n```\n\n* 查看帮助\n`help`\n\n## 数据基本操作\n* 增加数据\n`db.集合.insert(数据)`\n`> db.student.insert({name:'dumin',age:33})`\n>数据采用bson格式\n\n* 删除数据\n`db.集合.remove(条件)`\n>justOne可选参数默认为全部删除`db.student.remove({age:23}),{justOne:1})`\n>操作符条件年龄大于24的：`db.student.remove({age:{'$gt':24}})``；$g:大于,$gte：大于等于，$lt：小于，$lte：小于等于\n```\n> db.student.remove({name:'dumin'})\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n```\n\n\n* 修改数据\n`db.集合.update(条件，新值，不存在是否添加:默认false，是否修改多条:默认false)`\n```\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n> db.student.update({name:'xiaozhang'},{'score':23})\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n> db.student.update({name:'xiaozhang'},{'score':23},1)\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9f107943ef82a49db406\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa21c7943ef82a49db407\"), \"name\" : \"xiaolan\", \"age\" : 13 }\n{ \"_id\" : ObjectId(\"582fa2267943ef82a49db408\"), \"name\" : \"dumin\", \"age\" : 23 }\n{ \"_id\" : ObjectId(\"582fa8636da1e09f672deb59\"), \"score\" : 23 }\n```\n>修改器\n>$set：修改某一个字段,如果该字段不存在就增这个字段，语法同操作符\n>$inc：自增\n\n* 查询数据\n```\n> db.student.find()\n{ \"_id\" : ObjectId(\"582f9ccf7943ef82a49db405\"), \"name\" : \"dumin\", \"age\" : 33 }\n> db.student.findOne({name:'xiaolan'})\n{\n\t\"_id\" : ObjectId(\"582f9f107943ef82a49db406\"),\n\t\"name\" : \"xiaolan\",\n\t\"age\" : 13\n}\n```\n\n## 主从复制\n### 作用\n1. 实现读写分离\n2. 同步数据作为热备服务器\n3. 可以进行后台的数据统计\n\n### 思路\n1. 确定谁是主服务器\n2. 确定谁是从服务器\n3. 从服务器从哪里获取数据\n\n### 实现\n1. 主服务器插入数据\n```\n> db.student.insert([{name:'dumin',sex:1,age:23},{name:'xiaolan',sex:0,age:28}])\n> db.student.find()\n{ \"_id\" : ObjectId(\"58330e07627dd4a28d28ca57\"), \"name\" : \"qiang\", \"sex\" : 1, \"age\" : 22 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc20\"), \"name\" : \"dumin\", \"sex\" : 1, \"age\" : 23 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc21\"), \"name\" : \"xiaolan\", \"sex\" : 0, \"age\" : 28 }\n```\n\n1. 关闭主服务器mongodb服务\n```\n[root@localhost ~]# pkill mongo\n[root@localhost ~]# netstat -tunple|grep mongo\n```\n\n2. 申明主服务器\n```\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --master\nforked process: 1303\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T14-59-32]\nchild process started successfully, parent exiting\n```\n\n3. 配置从服务器\n```\n[root@localhost mongodb]# pkill mongo\n[root@localhost mongodb]# ./bin/mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --slave --source=192.168.34.102\nforked process: 1744\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-14-45]\nchild process started successfully, parent exiting\n``` \n\n4. 进入客户端查看\n```\n[root@localhost mongodb]# ./bin/mongo\nMongoDB shell version: 2.3.0\nconnecting to: test\n> show dbs\nlocal\t0.0625GB\nuiste\t0.0625GB\n> use uiste\nswitched to db uiste\n> show collections\nstudent\nsystem.indexes\n> db.student.find();\n{ \"_id\" : ObjectId(\"58330e07627dd4a28d28ca57\"), \"name\" : \"qiang\", \"sex\" : 1, \"age\" : 22 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc20\"), \"name\" : \"dumin\", \"sex\" : 1, \"age\" : 23 }\n{ \"_id\" : ObjectId(\"58330e60d1dae1108d07fc21\"), \"name\" : \"xiaolan\", \"sex\" : 0, \"age\" : 28 }\n```\n\n## 权限控制\nmongodb中每一个数据库都会具备管理员有一个隐藏的admin数据库，此数据库时超级管理员相关的信息\n1. 创建超级管理员\n```\n> use admin\nswitched to db admin\n> db.addUser('root','123456')\n{\n\t\"user\" : \"root\",\n\t\"readOnly\" : false,\n\t\"pwd\" : \"34e5772aa66b703a319641d42a47d696\",\n\t\"_id\" : ObjectId(\"583310bc627dd4a28d28ca58\")\n}\n```\n\n2. 创建student用户\n```\n可读可写用户\n> use student\nswitched to db student\n> db.addUser('uiste','123456')\n{\n\t\"user\" : \"uiste\",\n\t\"readOnly\" : false,\n\t\"pwd\" : \"2f77d219f5631ed7c0c8c833317d1ff5\",\n\t\"_id\" : ObjectId(\"5833113c627dd4a28d28ca59\")\n}\n只读用户\n> db.addUser('dumin','123456',true)\n{\n\t\"user\" : \"dumin\",\n\t\"readOnly\" : true,\n\t\"pwd\" : \"36ad4172b50f7453498c00c80358d61a\",\n\t\"_id\" : ObjectId(\"58331195627dd4a28d28ca5a\")\n}\n```\n\n3. 启用mongodb密码\n```\n[root@localhost bin]# pkill mongo\n[root@localhost bin]# ./mongod --logpath=/usr/local/mongodb/log.log --dbpath=/usr/local/mongodb/data/ --fork --auth\nforked process: 1408\nall output going to: /usr/local/mongodb/log.log\nlog file [/usr/local/mongodb/log.log] exists; copied to temporary file [/usr/local/mongodb/log.log.2016-11-21T15-26-12]\nchild process started successfully, parent exiting\n```\n\n4. 使用密码访问\n* 权限校验：需要先选择数据库，然后登陆校验\n* 如果直接使用db.auth()校验，不会通过\n```\nshow dbs\nuse uiste\ndb.auth('uiste','123456')\nshow dbs\nshow tables\ndb.student.insert({name:'zcc'})\ndb.student.find()\n```\n\n5. 删除用户\n```\ndb.system.users.find()\ndb.system.user.remove({user:'dumin'})\n```\n\n## PHP操作mongodb\nmongodb 客户端中的“.” 换成“->” bson格式的数据转化成数组\n```\n<?php \n/**\n * MongoClien实例化会自动执行构造方法进行连接\n * 一、$mongo = new MongoClient();//直接连接本机上的mongodb服务器\n * 二、$mongo = new MongoClient('192.168.34.102:27017');//连接自动的mongodb服务器\n * 三、$mongo = new MongoCLient('mongodb://root:123456@192.168.34.102:27017');\n */\n// 建立连接\n$mongo = new MongoCLient('mongodb://root:123456@192.168.34.102:27017');\n// 选择数据库\n$db = $mongo->uiste;\n$data = $db->student->find();\nforeach ($data as $key => $value) {\n\tvar_dump($value);\n}\n ?>\n```","slug":"3","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpm00agpgwi17eer4cn"},{"layout":"post","title":"Nginx 负载均衡","date":"2015-11-19T17:49:13.000Z","_content":"Nginx与Apache的区别\nApache：扩展模块众多，功能强大，并发性能表现一般\nNginx：功能相对于Apache较少，但并发性能特别好。异步非阻塞方式\n\n# 环境搭建\n## Linux网络配置\n```\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.34.102\nNETMASK=255.255.255.0\n```\n\n## yum源软件安装\n```\n[root@localhost ~]# mkdir /mnt/cdrom\n[root@localhost ~]# mount /dev/cdrom /mnt/cdrom/\n\n[root@localhost ~]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak\n[root@localhost yum.repos.d]# vi CentOS-Media.repo\n    name=CentOS-$releasever - Media\n    baseurl=file:///media/CentOS/\n            file:///mnt/cdrom/\n            file:///media/cdrecorder/\n    gpgcheck=1\n    enabled=1\n[root@localhost yum.repos.d]# yum install -y vim\n[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel\n```\n\n## 安装nginx\n1. 解压\n`[root@localhost LNMP]# tar -zxvf nginx-1.8.0.tar.gz`\n2. 编译\n`[root@localhost nginx-1.8.0]# ./configure --prefix=/usr/local/nginx`\n3. 安装\n`[root@localhost nginx-1.8.0]# make && make install`\n4. 启动\n`[root@localhost nginx-1.8.0]# /usr/local/nginx/sbin/nginx`\n5. 检查\n```\n[root@localhost nginx-1.8.0]# netstat -tunple|grep 80\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      0          24507      5148/nginx\n```\n\n图示：\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.33.00.png)\n\n## 安装PHP服务\n1. 解压\n`[root@localhost LNMP]# tar -zxvf php-5.3.28.tar.gz`\n2. 编译(服务)\n`[root@localhost php-5.3.28]# ./configure --prefix=/usr/local/php --enable-fpm`\n3. 安装\n`[root@localhost php-5.3.28]# make && make install`\n4. 配置文件\n`[root@localhost php-5.3.28]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf`\n`[root@localhost conf]# cp /home/LNMP/php-5.3.28/php.ini-development /usr/local/php/lib/php.ini`\n5. 启动/重启\n`[root@localhost php-5.3.28]# /usr/local/php/sbin/php-fpm`\n```\n[root@localhost conf]# ps -aux|grep php\nWarning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ\nroot      4749  0.0  0.2  16256  2052 ?        Ss   22:46   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)\nnobody    4750  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www\nnobody    4751  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www\nroot      4759  0.0  0.0   5980   740 pts/0    S+   22:53   0:00 grep php\n[root@localhost conf]# kill -USR2 4749\n```\n\n6. 检查\n```\n[root@localhost php-5.3.28]# netstat -tunple|grep 9000\ntcp        0      0 127.0.0.1:9000              0.0.0.0:*                   LISTEN      0          86848      4749/php-fpm\n```\n\n## nginx关联php\n```\n[root@localhost php-5.3.28]# cd /usr/local/nginx/conf/\n[root@localhost conf]# vim nginx.conf\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi.conf;\n        }\n[root@localhost conf]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n## nginx配置文件\n```\n#运行的用户\n#user  nobody;\n\n#工作进程数量，建议工作进程数等于cpu个数\nworker_processes  1;\n\n\n#错误日志\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#记录nginx的主进程号的文件位置\n#pid        logs/nginx.pid;\n\n\n#网络事件及连接数\nevents {\n    #每个工作进程最大的并发连接数，\t\n    worker_connections  1024;\n}\n\n#web相关的配置项\nhttp {\n    #nginx能够识别的文件类型\t\n    include       mime.types;\n\n    #默认的文件类型\n    default_type  application/octet-stream;\n\n\n    #日志文件格式\t\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    #访问日志\t\n    #access_log  logs/access.log  main;\n\n    #是否使用系统的sendfile函数输出\t\n    sendfile        on;\n    #tcp_nopush     on;\n    \n\n    #超时时间\t\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    #开启gzip压缩\t\n    #gzip  on;\n    \n    #虚拟主机配置，每一个sever就是一个虚拟主机\t\n    server {\n        #监听80端口 \n        listen       80;\n\t#域名\n        server_name  abc.com;\n\n        #charset koi8-r;\n         \n        #access_log  logs/host.access.log  main;\n        #默认的匹配规则\n        location / {\n            root   html; #web项目的根目录\n            index  index.html index.htm;\n        }\n        ...\n```\n\n## 配置虚拟主机\n1. 修改主配置文件\n```\n[root@localhost conf]# pwd\n/usr/local/nginx/conf\n[root@localhost conf]# vim nginx.conf\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    include /usr/local/nginx/conf/vhost/*.conf;\n}\n```\n\n2. 创建vhost目录\n```\n[root@localhost vhost]# vim uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        index  index.html index.htm;\n    }\n    location ~ \\.php$ {\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        include        fastcgi.conf;\n    }\n}\n[root@localhost vhost]# mkdir /usr/local/nginx/html/uiste\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n# 访问日志\nnginx下访问日志是由配置项中的log_format跟access_log两个参数控制\n1. log_format\n作用：申明一个日志文件格式\n语法：log_format 别名 具体的信息\n```\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n\n2. access_log\n作用：使用某种日志格式记录信息\n语法：access_log 存储地址 使用的别名\n`access_log  logs/access.log  main;`\n\n3. 访问日志中的参数\n```\n$remote_addr：客户端的IP地址\n$remote_user：客户端的用户信息 通过权限验证之后的用户信息\n$time_local：时间及时区信息\n$request：请求类型及协议请求的URL地址\n$status：状态码\n$body_bytes_sent：返回数据大小\n$http_referer：请求的来源\n$http_user_agent：客户的信息\n$http_x_forwarded_for：真实客户端的IP地址，使用透传才能获取到真实客户端的IP地址\n```\n\n>访问日志的申明只能写在http与sever之间，不能写在server配置中。访问日志可以申明多个。相对于server,http是全局设置，在虚拟主机设置使用访问日志，优先使用虚拟主机设置的格式，如果在虚拟主机中没有设置，但是在全局http中有开启使用访问日志，就会使用全局的格式记录\n\n# 日志分割\n## crontab\n```\n基本格式 : \n*　*　*　*　*　command 表示(分　时　日　月　周　命令) \n第1列表示分钟1～59 每分钟用*或者 */1表示 \n第2列表示小时1～23（0表示0点） \n第3列表示日期1～31 \n第4列表示月份1～12 \n第5列标识号星期0～6（0表示星期天） \n第6列要运行的命令\n```\n\n## 思路\n1. 一个脚本\n2. 一个容器能够定时执行脚本\n\n## 定时分割\n1. 创建cat_access.sh脚本\n```\n[root@localhost uiste]# vim cat_access.sh\n# /bin/bash\nlogs_path=\"/usr/local/nginx/logs/\"\n#以前的日志文件\nlog_name=\"access.log\"\n#指定nginx主进程号存储位置\npid_path=\"/usr/local/nginx/logs/nginx.pid\"\nmkdir -p ${logs_path}$(date -d \"yesterday\" +\"%Y\")/$(date -d \"yesterday\" +\"%m\")/\nmv ${logs_path}access.log ${logs_path}$(date -d \"yesterday\" +\"%Y\")/$(date -d \"yesterday\" +\"%m\")/access_$(date -d \"yesterday\" +\"%Y%m%d\").log\n\n#重新加载配置文件\nkill -USR1 `cat ${pid_path}`\n\n```\n\n2. 修改cat_access.sh脚本为可执行文件\n`[root@localhost uiste]# chmod -R 777 cat_access.sh`\n3. 测试cat_access.sh脚本运行情况\n`[root@localhost uiste]# ./cat_access.sh`\n4. 将脚本放入crontab中定时执行\n```\n[root@localhost uiste]# crontab -e\n* * * * * /usr/local/nginx/html/uiste/cat_access.sh\n```\n5. 查看结果\n`[root@localhost uiste]# tail -f /var/log/cron`\n\n# 反向代理\n1. 建立测试文件（略）\n2. 修改主服务器配置文件实现反向代理\n将其他的locatin都删除掉只留下一个 /的location\n```\n[root@localhost uiste]# cd /usr/local/nginx/conf/vhost\n[root@localhost vhost]# vim uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        proxy_pass http://192.168.34.101;\n        index  index.html index.htm;\n    }\n}\n\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n3. 测试\n截图\n\n# 负载均衡\n192.168.34.105作为反向代理服务器\n192.168.34.101真实处理请求的服务器\n192.168.34.102真实处理请求的服务器\n1. 配置nginx主配置文件\n```\n[root@localhost uiste]# vim /usr/local/nginx/conf/nginx.conf\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n    # 配置代理服务器\n    upstream web{\n        server 192.168.34.101;\n        server 192.168.34.102;\n    }\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    include /usr/local/nginx/conf/vhost/*.conf;\n}\n\n[root@localhost uiste]# vim /usr/local/nginx/conf/vhost/uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        proxy_pass http://web; #反向代理一组服务器\n        index  index.html index.htm;\n    }\n}\n\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n2. 测试效果\n\n**upstream语法说明**\n语法：\n```\nUpstream 别名{\n\tServer IP地址/域名 参数;\n} \n```\n\n参数：\n```\n1、down标注服务器为关闭状态，不参与负载均衡\n2、weight=number：权重按照轮循的方式依据权重实现不同的负载\n3、max_fails=number：最大失败次数\n4、fail_timeout=number：超时时间\n5、backup\t：表示为备用服务器。\n```\n\n负载均衡算法：\n1. 轮循\n2. 权重\n3. 最小连接\n4. ip_hash\n# nginx重启报错\n```\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\nnginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)\n#解决方法：\n`[root@localhost logs]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`\n```\n\n>使用nginx-c的参数指定nginx.conf文件的位置","source":"_posts/2015/201511/20151120-1.md","raw":"layout: post\ntitle: Nginx 负载均衡\ndate: 2015-11-20 01:49:13\ntags:\n- Nginx\n---\nNginx与Apache的区别\nApache：扩展模块众多，功能强大，并发性能表现一般\nNginx：功能相对于Apache较少，但并发性能特别好。异步非阻塞方式\n\n# 环境搭建\n## Linux网络配置\n```\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.34.102\nNETMASK=255.255.255.0\n```\n\n## yum源软件安装\n```\n[root@localhost ~]# mkdir /mnt/cdrom\n[root@localhost ~]# mount /dev/cdrom /mnt/cdrom/\n\n[root@localhost ~]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak\n[root@localhost yum.repos.d]# vi CentOS-Media.repo\n    name=CentOS-$releasever - Media\n    baseurl=file:///media/CentOS/\n            file:///mnt/cdrom/\n            file:///media/cdrecorder/\n    gpgcheck=1\n    enabled=1\n[root@localhost yum.repos.d]# yum install -y vim\n[root@localhost yum.repos.d]# yum -y install make gcc gcc-c++ openssl openssl-devel pcre-devel zlib-devel libxml2 libxml2-devel\n```\n\n## 安装nginx\n1. 解压\n`[root@localhost LNMP]# tar -zxvf nginx-1.8.0.tar.gz`\n2. 编译\n`[root@localhost nginx-1.8.0]# ./configure --prefix=/usr/local/nginx`\n3. 安装\n`[root@localhost nginx-1.8.0]# make && make install`\n4. 启动\n`[root@localhost nginx-1.8.0]# /usr/local/nginx/sbin/nginx`\n5. 检查\n```\n[root@localhost nginx-1.8.0]# netstat -tunple|grep 80\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      0          24507      5148/nginx\n```\n\n图示：\n![](http://7xwlfk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-23%2022.33.00.png)\n\n## 安装PHP服务\n1. 解压\n`[root@localhost LNMP]# tar -zxvf php-5.3.28.tar.gz`\n2. 编译(服务)\n`[root@localhost php-5.3.28]# ./configure --prefix=/usr/local/php --enable-fpm`\n3. 安装\n`[root@localhost php-5.3.28]# make && make install`\n4. 配置文件\n`[root@localhost php-5.3.28]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf`\n`[root@localhost conf]# cp /home/LNMP/php-5.3.28/php.ini-development /usr/local/php/lib/php.ini`\n5. 启动/重启\n`[root@localhost php-5.3.28]# /usr/local/php/sbin/php-fpm`\n```\n[root@localhost conf]# ps -aux|grep php\nWarning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ\nroot      4749  0.0  0.2  16256  2052 ?        Ss   22:46   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)\nnobody    4750  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www\nnobody    4751  0.0  0.2  16256  1724 ?        S    22:46   0:00 php-fpm: pool www\nroot      4759  0.0  0.0   5980   740 pts/0    S+   22:53   0:00 grep php\n[root@localhost conf]# kill -USR2 4749\n```\n\n6. 检查\n```\n[root@localhost php-5.3.28]# netstat -tunple|grep 9000\ntcp        0      0 127.0.0.1:9000              0.0.0.0:*                   LISTEN      0          86848      4749/php-fpm\n```\n\n## nginx关联php\n```\n[root@localhost php-5.3.28]# cd /usr/local/nginx/conf/\n[root@localhost conf]# vim nginx.conf\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n            include        fastcgi.conf;\n        }\n[root@localhost conf]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n## nginx配置文件\n```\n#运行的用户\n#user  nobody;\n\n#工作进程数量，建议工作进程数等于cpu个数\nworker_processes  1;\n\n\n#错误日志\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#记录nginx的主进程号的文件位置\n#pid        logs/nginx.pid;\n\n\n#网络事件及连接数\nevents {\n    #每个工作进程最大的并发连接数，\t\n    worker_connections  1024;\n}\n\n#web相关的配置项\nhttp {\n    #nginx能够识别的文件类型\t\n    include       mime.types;\n\n    #默认的文件类型\n    default_type  application/octet-stream;\n\n\n    #日志文件格式\t\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    #访问日志\t\n    #access_log  logs/access.log  main;\n\n    #是否使用系统的sendfile函数输出\t\n    sendfile        on;\n    #tcp_nopush     on;\n    \n\n    #超时时间\t\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    #开启gzip压缩\t\n    #gzip  on;\n    \n    #虚拟主机配置，每一个sever就是一个虚拟主机\t\n    server {\n        #监听80端口 \n        listen       80;\n\t#域名\n        server_name  abc.com;\n\n        #charset koi8-r;\n         \n        #access_log  logs/host.access.log  main;\n        #默认的匹配规则\n        location / {\n            root   html; #web项目的根目录\n            index  index.html index.htm;\n        }\n        ...\n```\n\n## 配置虚拟主机\n1. 修改主配置文件\n```\n[root@localhost conf]# pwd\n/usr/local/nginx/conf\n[root@localhost conf]# vim nginx.conf\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    include /usr/local/nginx/conf/vhost/*.conf;\n}\n```\n\n2. 创建vhost目录\n```\n[root@localhost vhost]# vim uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        index  index.html index.htm;\n    }\n    location ~ \\.php$ {\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        include        fastcgi.conf;\n    }\n}\n[root@localhost vhost]# mkdir /usr/local/nginx/html/uiste\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n# 访问日志\nnginx下访问日志是由配置项中的log_format跟access_log两个参数控制\n1. log_format\n作用：申明一个日志文件格式\n语法：log_format 别名 具体的信息\n```\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n\n2. access_log\n作用：使用某种日志格式记录信息\n语法：access_log 存储地址 使用的别名\n`access_log  logs/access.log  main;`\n\n3. 访问日志中的参数\n```\n$remote_addr：客户端的IP地址\n$remote_user：客户端的用户信息 通过权限验证之后的用户信息\n$time_local：时间及时区信息\n$request：请求类型及协议请求的URL地址\n$status：状态码\n$body_bytes_sent：返回数据大小\n$http_referer：请求的来源\n$http_user_agent：客户的信息\n$http_x_forwarded_for：真实客户端的IP地址，使用透传才能获取到真实客户端的IP地址\n```\n\n>访问日志的申明只能写在http与sever之间，不能写在server配置中。访问日志可以申明多个。相对于server,http是全局设置，在虚拟主机设置使用访问日志，优先使用虚拟主机设置的格式，如果在虚拟主机中没有设置，但是在全局http中有开启使用访问日志，就会使用全局的格式记录\n\n# 日志分割\n## crontab\n```\n基本格式 : \n*　*　*　*　*　command 表示(分　时　日　月　周　命令) \n第1列表示分钟1～59 每分钟用*或者 */1表示 \n第2列表示小时1～23（0表示0点） \n第3列表示日期1～31 \n第4列表示月份1～12 \n第5列标识号星期0～6（0表示星期天） \n第6列要运行的命令\n```\n\n## 思路\n1. 一个脚本\n2. 一个容器能够定时执行脚本\n\n## 定时分割\n1. 创建cat_access.sh脚本\n```\n[root@localhost uiste]# vim cat_access.sh\n# /bin/bash\nlogs_path=\"/usr/local/nginx/logs/\"\n#以前的日志文件\nlog_name=\"access.log\"\n#指定nginx主进程号存储位置\npid_path=\"/usr/local/nginx/logs/nginx.pid\"\nmkdir -p ${logs_path}$(date -d \"yesterday\" +\"%Y\")/$(date -d \"yesterday\" +\"%m\")/\nmv ${logs_path}access.log ${logs_path}$(date -d \"yesterday\" +\"%Y\")/$(date -d \"yesterday\" +\"%m\")/access_$(date -d \"yesterday\" +\"%Y%m%d\").log\n\n#重新加载配置文件\nkill -USR1 `cat ${pid_path}`\n\n```\n\n2. 修改cat_access.sh脚本为可执行文件\n`[root@localhost uiste]# chmod -R 777 cat_access.sh`\n3. 测试cat_access.sh脚本运行情况\n`[root@localhost uiste]# ./cat_access.sh`\n4. 将脚本放入crontab中定时执行\n```\n[root@localhost uiste]# crontab -e\n* * * * * /usr/local/nginx/html/uiste/cat_access.sh\n```\n5. 查看结果\n`[root@localhost uiste]# tail -f /var/log/cron`\n\n# 反向代理\n1. 建立测试文件（略）\n2. 修改主服务器配置文件实现反向代理\n将其他的locatin都删除掉只留下一个 /的location\n```\n[root@localhost uiste]# cd /usr/local/nginx/conf/vhost\n[root@localhost vhost]# vim uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        proxy_pass http://192.168.34.101;\n        index  index.html index.htm;\n    }\n}\n\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n3. 测试\n截图\n\n# 负载均衡\n192.168.34.105作为反向代理服务器\n192.168.34.101真实处理请求的服务器\n192.168.34.102真实处理请求的服务器\n1. 配置nginx主配置文件\n```\n[root@localhost uiste]# vim /usr/local/nginx/conf/nginx.conf\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n    # 配置代理服务器\n    upstream web{\n        server 192.168.34.101;\n        server 192.168.34.102;\n    }\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    include /usr/local/nginx/conf/vhost/*.conf;\n}\n\n[root@localhost uiste]# vim /usr/local/nginx/conf/vhost/uiste.conf\nserver {\n    #监听80端口\n    listen       80;\n    server_name  www.uiste.com;\n    root /usr/local/nginx/html/uiste; #虚拟主机站点根目录\n    #默认的匹配规则\n    location / {\n        proxy_pass http://web; #反向代理一组服务器\n        index  index.html index.htm;\n    }\n}\n\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\n```\n\n2. 测试效果\n\n**upstream语法说明**\n语法：\n```\nUpstream 别名{\n\tServer IP地址/域名 参数;\n} \n```\n\n参数：\n```\n1、down标注服务器为关闭状态，不参与负载均衡\n2、weight=number：权重按照轮循的方式依据权重实现不同的负载\n3、max_fails=number：最大失败次数\n4、fail_timeout=number：超时时间\n5、backup\t：表示为备用服务器。\n```\n\n负载均衡算法：\n1. 轮循\n2. 权重\n3. 最小连接\n4. ip_hash\n# nginx重启报错\n```\n[root@localhost vhost]# /usr/local/nginx/sbin/nginx -s reload\nnginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)\n#解决方法：\n`[root@localhost logs]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`\n```\n\n>使用nginx-c的参数指定nginx.conf文件的位置","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpo00ajpgwif2rwwr3o"},{"layout":"post","title":"PHP开发安全问题总结","date":"2016-05-22T17:35:21.000Z","_content":"## 安全保护一般性要点\n\n### 不相信表单\n\n对于一般的Javascript前台验证，由于无法得知用户的行为，例如关闭了浏览器的javascript引擎，这样通过POST恶意数据到服务器。需要在服务器端进行验证，对每个php脚本验证传递到的数据，防止XSS攻击和SQL注入\n\n### 不相信用户\n\n要假设你的网站接收的每一条数据都是存在恶意代码的，存在隐藏的威胁，要对每一条数据都进行清理\n\n### 关闭全局变量\n\n在php.ini文件中进行以下配置：\n\n`register_globals = Off`\n如果这个配置选项打开之后，会出现很大的安全隐患。例如有一个process.php的脚本文件，会将接收到的数据插入到数据库，接收用户输入数据的表单可能如下：\n\n`<input name=\"username\" type=\"text\" size=\"15\" maxlength=\"64\">`\n这样，当提交数据到process.php之后，php会注册一个$username变量，将这个变量数据提交到process.php，同时对于任何POST或GET请求参数，都会设置这样的变量。如果不是显示进行初始化那么就会出现下面的问题：\n```\n<?php\n// Define $authorized = true only if user is authenticated\nif (authenticated_user()) {\n    $authorized = true;\n}\n?>\n```\n\n此处，假设`authenticated_user`函数就是判断`$authorized`变量的值，如果开启了`register_globals`配置，那么任何用户都可以发送一个请求，来设置$authorized变量的值为任意值从而就能绕过这个验证。\n\n所有的这些提交数据都应该通过PHP预定义内置的全局数组来获取，包括`$_POST、$_GET、$_FILES、$_SERVER、$_REQUEST`等，其中`$_REQUEST`是一个`$_GET/$_POST/$_COOKIE`三个数组的联合变量，默认的顺序是`$_COOKIE、$_POST、$_GET`。\n\n### 推荐的安全配置选项\n`error_reporting`设置为Off：不要暴露错误信息给用户，开发的时候可以设置为ON\n\n`safe_mode`设置为Off\n\n`register_globals`设置为Off\n\n将以下函数禁用：`system、exec、passthru、shell_exec、proc_open、popen`\n\n`open_basedir`设置为 /tmp ，这样可以让session信息有存储权限，同时设置单独的网站根目录\n\n`expose_php`设置为Off\n\n`allow_url_fopen`设置为Off\n\n`allow_url_include`设置为Off\n\n## SQL注入攻击\n\n对于操作数据库的SQL语句，需要特别注意安全性，因为用户可能输入特定语句使得原有的SQL语句改变了功能。类似下面的例子：\n\n`$sql = \"select * from pinfo where product = '$product'\";`\n此时如果用户输入的$product参数为：\n\n`39'; DROP pinfo; SELECT 'FOO`\n那么最终SQL语句就变成了如下的样子：\n\n`select product from pinfo where product = '39'; DROP pinfo; SELECT 'FOO'`\n这样就会变成三条SQL语句，会造成pinfo表被删除，这样会造成严重的后果。\n\n这个问题可以简单的使用PHP的内置函数解决：\n\n`$sql = 'Select * from pinfo where product = '\"' `\n       `mysql_real_escape_string($product) . '\"';`\n防止SQL注入攻击需要做好两件事：\n\n对输入的参数总是进行类型验证\n\n对单引号、双引号、反引号等特殊字符总是使用`mysql_real_escape_string`函数进行转义\n\n但是，这里根据开发经验，不要开启php的Magic Quotes，这个特性在php6中已经废除，总是自己在需要的时候进行转义。\n\n## 防止基本的XSS攻击\n\nXSS攻击不像其他攻击，这种攻击在客户端进行，最基本的XSS工具就是防止一段javascript脚本在用户待提交的表单页面，将用户提交的数据和cookie偷取过来。\n\nXSS工具比SQL注入更加难以防护，各大公司网站都被XSS攻击过，虽然这种攻击与php语言无关，但可以使用php来筛选用户数据达到保护用户数据的目的，这里主要使用的是对用户的数据进行过滤，一般过滤掉HTML标签，特别是a标签。下面是一个普通的过滤方法：\n```\nfunction transform_HTML($string, $length = null) {\n// Helps prevent XSS attacks\n    // Remove dead space.\n    $string = trim($string);\n    // Prevent potential Unicode codec problems.\n    $string = utf8_decode($string);\n    // HTMLize HTML-specific characters.\n    $string = htmlentities($string, ENT_NOQUOTES);\n    $string = str_replace(\"#\", \"#\", $string);\n    $string = str_replace(\"%\", \"%\", $string);\n    $length = intval($length);\n    if ($length > 0) {\n        $string = substr($string, 0, $length);\n    }\n    return $string;\n}\n```\n\n这个函数将HTML的特殊字符转换为了HTML实体，浏览器在渲染这段文本的时候以纯文本形式显示。如<strong>bold</strong>会被显示为：\n\n&lt;STRONG&gt;BoldText&lt;/STRONG&gt;\n\n上述函数的核心就是htmlentities函数，这个函数将html特殊标签转换为html实体字符，这样可以过滤大部分的XSS攻击。\n\n但是对于有经验的XSS攻击者，有更加巧妙的办法进行攻击：将他们的恶意代码使用十六进制或者utf-8编码，而不是普通的ASCII文本，例如可以使用下面的方式进行：\n\n`<a href=\"http://host/a.php?variable=%22%3e %3c%53%43%52%49%50%54%3e%44%6f%73%6f%6d%65%74%68%69%6e%67%6d%61%6c%69%63%69%6f%75%73%3c%2f%53%43%52%49%50%54%3e\">`\n这样浏览器渲染的结果其实是：\n\n`<a href=\"http://host/a.php?variable=\"> <SCRIPT>Dosomethingmalicious</SCRIPT>`\n这样就达到了攻击的目的。为了防止这种情况，需要在transform_HTML函数的基础上再将#和%转换为他们对应的实体符号，同时加上了$length参数来限制提交的数据的最大长度。\n\n## 使用SafeHTML防止XSS攻击\n\n上述关于XSS攻击的防护非常简单，但是不包含用户的所有标记，同时有上百种绕过过滤函数提交javascript代码的方法，也没有办法能完全阻止这个情况。\n\n目前，没有一个单一的脚本能保证不被攻击突破，但是总有相对来说防护程度更好的。一共有两个安全防护的方式：白名单和黑名单。其中白名单更加简单和有效。\n\n一种白名单解决方案就是SafeHTML，它足够智能能够识别有效的HTML，然后就可以去除任何危险的标签。这个需要基于HTMLSax包来进行解析。\n\n安装使用SafeHTML的方法：\n\n1、前往http://pixel-apes.com/safehtml/?page=safehtml 下载最新的SafeHTML\n\n2、将文件放入服务器的classes 目录，这个目录包含所有的SafeHTML和HTMLSax库\n\n3、在自己的脚本中包含SafeHTML类文件\n\n4、建立一个SafeHTML对象\n\n5、使用parse方法进行过滤\n```\n<?php\n/* If you're storing the HTMLSax3.php in the /classes directory, along\n   with the safehtml.php script, define XML_HTMLSAX3 as a null string. */\ndefine(XML_HTMLSAX3, '');\n// Include the class file.\nrequire_once('classes/safehtml.php');\n// Define some sample bad code.\n$data = \"This data would raise an alert <script>alert('XSS Attack')</script>\";\n// Create a safehtml object.\n$safehtml = new safehtml();\n// Parse and sanitize the data.\n$safe_data = $safehtml->parse($data);\n// Display result.\necho 'The sanitized data is <br />' . $safe_data;\n?>\n```\n\nSafeHTML并不能完全防止XSS攻击，只是一个相对复杂的脚本来检验的方式。\n\n使用单向HASH加密方式来保护数据\n\n单向hash加密保证对每个用户的密码都是唯一的，而且不能被破译的，只有最终用户知道密码，系统也是不知道原始密码的。这样的一个好处是在系统被攻击后攻击者也无法知道原始密码数据。\n\n加密和Hash是不同的两个过程。与加密不同，Hash是无法被解密的，是单向的；同时两个不同的字符串可能会得到同一个hash值，并不能保证hash值的唯一性。\n\nMD5函数处理过的hash值基本不能被破解，但是总是有可能性的，而且网上也有MD5的hash字典。\n\n使用mcrypt加密数据\n\nMD5 hash函数可以在可读的表单中显示数据，但是对于存储用户的信用卡信息的时候，需要进行加密处理后存储，并且需要之后进行解密。\n\n最好的方法是使用mcrypt模块，这个模块包含了超过30中加密方式来保证只有加密者才能解密数据。\n```\n<?php\n$data = \"Stuff you want encrypted\";\n$key = \"Secret passphrase used to encrypt your data\";\n$cipher = \"MCRYPT_SERPENT_256\";\n$mode = \"MCRYPT_MODE_CBC\";\nfunction encrypt($data, $key, $cipher, $mode) {\n// Encrypt data\nreturn (string)\n            base64_encode\n                (\n                mcrypt_encrypt\n                    (\n                    $cipher,\n                    substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),\n                    $data,\n                    $mode,\n                    substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))\n                    )\n                );\n}\nfunction decrypt($data, $key, $cipher, $mode) {\n// Decrypt data\n    return (string)\n            mcrypt_decrypt\n                (\n                $cipher,\n                substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),\n                base64_decode($data),\n                $mode,\n                substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))\n                );\n}\n?>\n```\n\nmcrypt函数需要以下信息：\n\n1、待加密数据\n\n2、用来加密和解密数据的key\n\n3、用户选择的加密数据的特定算法（cipher：如 `MCRYPT_TWOFISH192,MCRYPT_SERPENT_256， MCRYPT_RC2, MCRYPT_DES, and MCRYPT_LOKI97`）\n\n4、用来加密的模式\n\n5、加密的种子，用来起始加密过程的数据，是一个额外的二进制数据用来初始化加密算法\n\n6、加密key和种子的长度，使用`mcrypt_get_key_size函数和mcrypt_get_block_size`函数可以获取\n\n如果数据和key都被盗取，那么攻击者可以遍历ciphers寻找开行的方式即可，因此我们需要将加密的key进行MD5一次后保证安全性。同时由于mcrypt函数返回的加密数据是一个二进制数据，这样保存到数据库字段中会引起其他错误，使用了base64encode将这些数据转换为了十六进制数方便保存。\n\n","source":"_posts/2016/201605/20160523-2.md","raw":"layout: post\ntitle: PHP开发安全问题总结\ndate: 2016-05-23 01:35:21\ntags:\n---\n## 安全保护一般性要点\n\n### 不相信表单\n\n对于一般的Javascript前台验证，由于无法得知用户的行为，例如关闭了浏览器的javascript引擎，这样通过POST恶意数据到服务器。需要在服务器端进行验证，对每个php脚本验证传递到的数据，防止XSS攻击和SQL注入\n\n### 不相信用户\n\n要假设你的网站接收的每一条数据都是存在恶意代码的，存在隐藏的威胁，要对每一条数据都进行清理\n\n### 关闭全局变量\n\n在php.ini文件中进行以下配置：\n\n`register_globals = Off`\n如果这个配置选项打开之后，会出现很大的安全隐患。例如有一个process.php的脚本文件，会将接收到的数据插入到数据库，接收用户输入数据的表单可能如下：\n\n`<input name=\"username\" type=\"text\" size=\"15\" maxlength=\"64\">`\n这样，当提交数据到process.php之后，php会注册一个$username变量，将这个变量数据提交到process.php，同时对于任何POST或GET请求参数，都会设置这样的变量。如果不是显示进行初始化那么就会出现下面的问题：\n```\n<?php\n// Define $authorized = true only if user is authenticated\nif (authenticated_user()) {\n    $authorized = true;\n}\n?>\n```\n\n此处，假设`authenticated_user`函数就是判断`$authorized`变量的值，如果开启了`register_globals`配置，那么任何用户都可以发送一个请求，来设置$authorized变量的值为任意值从而就能绕过这个验证。\n\n所有的这些提交数据都应该通过PHP预定义内置的全局数组来获取，包括`$_POST、$_GET、$_FILES、$_SERVER、$_REQUEST`等，其中`$_REQUEST`是一个`$_GET/$_POST/$_COOKIE`三个数组的联合变量，默认的顺序是`$_COOKIE、$_POST、$_GET`。\n\n### 推荐的安全配置选项\n`error_reporting`设置为Off：不要暴露错误信息给用户，开发的时候可以设置为ON\n\n`safe_mode`设置为Off\n\n`register_globals`设置为Off\n\n将以下函数禁用：`system、exec、passthru、shell_exec、proc_open、popen`\n\n`open_basedir`设置为 /tmp ，这样可以让session信息有存储权限，同时设置单独的网站根目录\n\n`expose_php`设置为Off\n\n`allow_url_fopen`设置为Off\n\n`allow_url_include`设置为Off\n\n## SQL注入攻击\n\n对于操作数据库的SQL语句，需要特别注意安全性，因为用户可能输入特定语句使得原有的SQL语句改变了功能。类似下面的例子：\n\n`$sql = \"select * from pinfo where product = '$product'\";`\n此时如果用户输入的$product参数为：\n\n`39'; DROP pinfo; SELECT 'FOO`\n那么最终SQL语句就变成了如下的样子：\n\n`select product from pinfo where product = '39'; DROP pinfo; SELECT 'FOO'`\n这样就会变成三条SQL语句，会造成pinfo表被删除，这样会造成严重的后果。\n\n这个问题可以简单的使用PHP的内置函数解决：\n\n`$sql = 'Select * from pinfo where product = '\"' `\n       `mysql_real_escape_string($product) . '\"';`\n防止SQL注入攻击需要做好两件事：\n\n对输入的参数总是进行类型验证\n\n对单引号、双引号、反引号等特殊字符总是使用`mysql_real_escape_string`函数进行转义\n\n但是，这里根据开发经验，不要开启php的Magic Quotes，这个特性在php6中已经废除，总是自己在需要的时候进行转义。\n\n## 防止基本的XSS攻击\n\nXSS攻击不像其他攻击，这种攻击在客户端进行，最基本的XSS工具就是防止一段javascript脚本在用户待提交的表单页面，将用户提交的数据和cookie偷取过来。\n\nXSS工具比SQL注入更加难以防护，各大公司网站都被XSS攻击过，虽然这种攻击与php语言无关，但可以使用php来筛选用户数据达到保护用户数据的目的，这里主要使用的是对用户的数据进行过滤，一般过滤掉HTML标签，特别是a标签。下面是一个普通的过滤方法：\n```\nfunction transform_HTML($string, $length = null) {\n// Helps prevent XSS attacks\n    // Remove dead space.\n    $string = trim($string);\n    // Prevent potential Unicode codec problems.\n    $string = utf8_decode($string);\n    // HTMLize HTML-specific characters.\n    $string = htmlentities($string, ENT_NOQUOTES);\n    $string = str_replace(\"#\", \"#\", $string);\n    $string = str_replace(\"%\", \"%\", $string);\n    $length = intval($length);\n    if ($length > 0) {\n        $string = substr($string, 0, $length);\n    }\n    return $string;\n}\n```\n\n这个函数将HTML的特殊字符转换为了HTML实体，浏览器在渲染这段文本的时候以纯文本形式显示。如<strong>bold</strong>会被显示为：\n\n&lt;STRONG&gt;BoldText&lt;/STRONG&gt;\n\n上述函数的核心就是htmlentities函数，这个函数将html特殊标签转换为html实体字符，这样可以过滤大部分的XSS攻击。\n\n但是对于有经验的XSS攻击者，有更加巧妙的办法进行攻击：将他们的恶意代码使用十六进制或者utf-8编码，而不是普通的ASCII文本，例如可以使用下面的方式进行：\n\n`<a href=\"http://host/a.php?variable=%22%3e %3c%53%43%52%49%50%54%3e%44%6f%73%6f%6d%65%74%68%69%6e%67%6d%61%6c%69%63%69%6f%75%73%3c%2f%53%43%52%49%50%54%3e\">`\n这样浏览器渲染的结果其实是：\n\n`<a href=\"http://host/a.php?variable=\"> <SCRIPT>Dosomethingmalicious</SCRIPT>`\n这样就达到了攻击的目的。为了防止这种情况，需要在transform_HTML函数的基础上再将#和%转换为他们对应的实体符号，同时加上了$length参数来限制提交的数据的最大长度。\n\n## 使用SafeHTML防止XSS攻击\n\n上述关于XSS攻击的防护非常简单，但是不包含用户的所有标记，同时有上百种绕过过滤函数提交javascript代码的方法，也没有办法能完全阻止这个情况。\n\n目前，没有一个单一的脚本能保证不被攻击突破，但是总有相对来说防护程度更好的。一共有两个安全防护的方式：白名单和黑名单。其中白名单更加简单和有效。\n\n一种白名单解决方案就是SafeHTML，它足够智能能够识别有效的HTML，然后就可以去除任何危险的标签。这个需要基于HTMLSax包来进行解析。\n\n安装使用SafeHTML的方法：\n\n1、前往http://pixel-apes.com/safehtml/?page=safehtml 下载最新的SafeHTML\n\n2、将文件放入服务器的classes 目录，这个目录包含所有的SafeHTML和HTMLSax库\n\n3、在自己的脚本中包含SafeHTML类文件\n\n4、建立一个SafeHTML对象\n\n5、使用parse方法进行过滤\n```\n<?php\n/* If you're storing the HTMLSax3.php in the /classes directory, along\n   with the safehtml.php script, define XML_HTMLSAX3 as a null string. */\ndefine(XML_HTMLSAX3, '');\n// Include the class file.\nrequire_once('classes/safehtml.php');\n// Define some sample bad code.\n$data = \"This data would raise an alert <script>alert('XSS Attack')</script>\";\n// Create a safehtml object.\n$safehtml = new safehtml();\n// Parse and sanitize the data.\n$safe_data = $safehtml->parse($data);\n// Display result.\necho 'The sanitized data is <br />' . $safe_data;\n?>\n```\n\nSafeHTML并不能完全防止XSS攻击，只是一个相对复杂的脚本来检验的方式。\n\n使用单向HASH加密方式来保护数据\n\n单向hash加密保证对每个用户的密码都是唯一的，而且不能被破译的，只有最终用户知道密码，系统也是不知道原始密码的。这样的一个好处是在系统被攻击后攻击者也无法知道原始密码数据。\n\n加密和Hash是不同的两个过程。与加密不同，Hash是无法被解密的，是单向的；同时两个不同的字符串可能会得到同一个hash值，并不能保证hash值的唯一性。\n\nMD5函数处理过的hash值基本不能被破解，但是总是有可能性的，而且网上也有MD5的hash字典。\n\n使用mcrypt加密数据\n\nMD5 hash函数可以在可读的表单中显示数据，但是对于存储用户的信用卡信息的时候，需要进行加密处理后存储，并且需要之后进行解密。\n\n最好的方法是使用mcrypt模块，这个模块包含了超过30中加密方式来保证只有加密者才能解密数据。\n```\n<?php\n$data = \"Stuff you want encrypted\";\n$key = \"Secret passphrase used to encrypt your data\";\n$cipher = \"MCRYPT_SERPENT_256\";\n$mode = \"MCRYPT_MODE_CBC\";\nfunction encrypt($data, $key, $cipher, $mode) {\n// Encrypt data\nreturn (string)\n            base64_encode\n                (\n                mcrypt_encrypt\n                    (\n                    $cipher,\n                    substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),\n                    $data,\n                    $mode,\n                    substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))\n                    )\n                );\n}\nfunction decrypt($data, $key, $cipher, $mode) {\n// Decrypt data\n    return (string)\n            mcrypt_decrypt\n                (\n                $cipher,\n                substr(md5($key),0,mcrypt_get_key_size($cipher, $mode)),\n                base64_decode($data),\n                $mode,\n                substr(md5($key),0,mcrypt_get_block_size($cipher, $mode))\n                );\n}\n?>\n```\n\nmcrypt函数需要以下信息：\n\n1、待加密数据\n\n2、用来加密和解密数据的key\n\n3、用户选择的加密数据的特定算法（cipher：如 `MCRYPT_TWOFISH192,MCRYPT_SERPENT_256， MCRYPT_RC2, MCRYPT_DES, and MCRYPT_LOKI97`）\n\n4、用来加密的模式\n\n5、加密的种子，用来起始加密过程的数据，是一个额外的二进制数据用来初始化加密算法\n\n6、加密key和种子的长度，使用`mcrypt_get_key_size函数和mcrypt_get_block_size`函数可以获取\n\n如果数据和key都被盗取，那么攻击者可以遍历ciphers寻找开行的方式即可，因此我们需要将加密的key进行MD5一次后保证安全性。同时由于mcrypt函数返回的加密数据是一个二进制数据，这样保存到数据库字段中会引起其他错误，使用了base64encode将这些数据转换为了十六进制数方便保存。\n\n","slug":"2","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpp00alpgwi7v39sthc"},{"layout":"post","title":"vagrant打造开发环境","date":"2017-04-04T16:52:42.000Z","_content":"## 下载安装\n```\nVirtualBox 5.1.8\n下载地址 https://www.virtualbox.org/wiki/Download_Old_Builds_5_1\nVagrant 1.8.6\n\n下载地址：https://releases.hashicorp.com/vagrant/1.8.6/\n切记根据自己的操作系统下载，同时分32位和64位\n```\n\n## vagrant常用命令\n* 查看vagrant list\n`uiste:box uiste$ vagrant box list`\n\n* 添加vagrant box\n`uiste:box uiste$ vagrant box add ubuntu1404 ubuntu1404.box`\n\n* 添加虚拟机\n```\nuiste:local_lamp_dev uiste$ pwd\n/Users/uiste/vagrant/local_lamp_dev\nuiste:local_lamp_dev uiste$ vagrant init ubuntu1404\n```\n\n* 启动虚拟机\n`uiste:local_lamp_dev uiste$ vagrant up`\n\n* 取得链接\n```\nuiste:local_lamp_dev uiste$ vagrant ssh\nvagrant@vagrant-ubuntu-trusty-64:~$\n```\n\n* 退出、挂起虚拟机\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ exit\nlogout\nConnection to 127.0.0.1 closed.\nuiste:local_lamp_dev uiste$ vagrant suspend\n```\n\n* 重启虚拟机\n```\nuiste:local_lamp_dev uiste$ vagrant reload\n```\n\n## 对虚拟机进行优化\n* 替换源\n```\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo vim /etc/apt/sources.list #修改源\n\ndeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\n\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get update #更新列表\n```\n\n## L(A|N)MP软件安装\n* 安装nginx\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install nginx -y\n// 安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ nginx -v\nnginx version: nginx/1.4.6 (Ubuntu)\nvagrant@vagrant-ubuntu-trusty-64:~$ curl -I 'http://127.0.0.1'\nHTTP/1.1 200 OK\nServer: nginx/1.4.6 (Ubuntu)\nDate: Tue, 04 Apr 2017 17:17:02 GMT\nContent-Type: text/html\nContent-Length: 612\nLast-Modified: Tue, 04 Mar 2014 11:46:45 GMT\nConnection: keep-alive\nETag: \"5315bd25-264\"\nAccept-Ranges: bytes\n```\n\n* 安装Apache\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install apache2 -y\n// 安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ apache2 -v\nServer version: Apache/2.4.7 (Ubuntu)\n// nginx 服务停止\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/nginx stop\n// 启动 apache2 服务\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 start\n * Starting web server apache2                                                  AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 10.0.2.15. Set the 'ServerName' directive globally to suppress this message\n *\n vagrant@vagrant-ubuntu-trusty-64:~$ curl -I 'http://127.0.0.1'\nHTTP/1.1 200 OK\nDate: Tue, 04 Apr 2017 17:24:09 GMT\nServer: Apache/2.4.7 (Ubuntu)\nLast-Modified: Tue, 04 Apr 2017 17:18:42 GMT\nETag: \"2cf6-54c5a77b221fa\"\nAccept-Ranges: bytes\nContent-Length: 11510\nVary: Accept-Encoding\nContent-Type: text/html\n#端口修改-Apache\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo vim  /etc/apache2/ports.conf\nListen 8888\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 restart\n#端口修改-Nginx\n#修改成9000端口 ，默认sock模式\ncd /etc/php5/fpm/pool.d\nsudo vim www.conf # search listen = 127.0.0.1:9000\nsudo /etc/init.d/php5-fpm restart\n```\n\n* 安装MySQL软件\n```\n#服务器端\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-server\n安装期间会提示输入为mysql设置root密码，我这边不操作，直接enter 不设置密码\n#客户端\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-client\n#测试连接库，上面安装服务端没有设置密码，这里直接enter进入\nvagrant@vagrant-ubuntu-trusty-64:~$ mysql -uroot -p\nEnter password:\n```\n\n* 安装PHP\n```\n#安装php\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cli -y\n#安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ php -v\nPHP 5.5.9-1ubuntu4.21 (cli) (built: Feb  9 2017 20:54:58)\n#安装php扩展\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-mcrypt php5-mysql php5-gd -y\n#支持apache2的php模块\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install libapache2-mod-php5\n#支持nginx fastcgi 启动php\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cgi php5-fpm\n#开发Apache文件.htaccess重写功能\nvagrant@vagrant-ubuntu-trusty-64:/$ sudo a2enmod rewrite\n```\n\n* 安装git\n```\nvagrant@vagrant-ubuntu-trusty-64:/home/www/code$ sudo apt-get install git -y\n```\n\n## Vagrant高级配置\n* 端口转发\n```\n配置\n\n config.vm.network \"forwarded_port\", guest: 80, host: 8888 \n config.vm.network \"forwarded_port\", guest: 8888, host: 8889\n测试效果\n\nhttp://127.0.0.1:8888/\nhttp://127.0.0.1:8889/\n```\n\n* 网络设置\n```\n配置\n\nconfig.vm.network \"private_network\", ip: \"192.168.199.101\"\n效果\n\nhttp://192.168.199.101/ 或者 http://192.168.199.101:80/\nhttp://192.168.199.101:8888/\n```\n\n*共享目录\n```\n配置\n\nconfig.vm.synced_folder \"/Users/uiste/www/code/\", \"/home/www\"\n```\n\n## 框架配置\n\n### tp5\n```\ngit clone https://github.com/top-think/think tp5\n然后切换到tp5目录下面，再克隆核心框架仓库：cd tp5 && git clone https://github.com/top-think/framework thinkphp\nnginx 配置\nserver {\n        server_name tp5.code.com;\n        root  /home/www/code/tp5/public;\n        index  index.php index.html;\n        location / {\n            if ( -f $request_filename) {\n                break;\n            }\n\n            if ( !-e $request_filename) {\n                rewrite ^/(.*)$ /index.php/$1 last;\n                break;\n            }\n        }\n\n        location ~ \\.php {\n            set $script $uri;\n            set $path_info \"\";\n            if ($uri ~ \"^(.+\\.php)(/.+)\") {\n                set $script $1;\n                set $path_info $2;\n            }\n            include   fastcgi_params;\n            fastcgi_index    index.php?IF_REWRITE=1;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_param    PATH_INFO    $path_info;\n            fastcgi_param    SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n            fastcgi_param    SCRIPT_NAME    $script;\n            try_files $uri =404;\n        }\n\n    }\n针对fasecgi要配置下php-fpm\nvim /etc/php5/fpm/pool.d/www.conf\n;listen = /var/run/php5-fpm.sock\nlisten = 127.0.0.1:9000\n无法查看日志 sudo chmod -R 755 /var/log/nginx\napache 配置\n    <VirtualHost *:8888>\n    \tServerName tp5.imooc.test\n    \tDocumentRoot /home/www/code/tp5/public/\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n无法查看日志sudo chmod -R 755 /var/log/apache2\nForbidden解决办法\ncd /etc/apache2\nsudo vim apache2.conf <Directory /> Options FollowSymLinks AllowOverride None #修改成AllowOverride ALL 打开rewrite #Require all denied #把这行屏蔽掉，拒绝一切链接 </Directory>\n测试效果\nhttp://tp5.code.com 或者 http://tp5.code.com:8888\n做个测试页面 http://tp5.code.com/index/index/test 或者 http://tp5.code.com:8000/index/index/test\n```\n\n### yii2\n```\n下载：github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\nnginx 配置\nserver {\n        charset utf-8;\n        client_max_body_size 128M;\n        listen 80;\n        server_name yii.code.com;\n\n        root  /home/www/code/yii2/web;\n        index  index.php;\n\n        location ~* \\.(eot|otf|ttf|woff)$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            include   fastcgi_params;\n            fastcgi_pass   127.0.0.1:9000;\n            try_files $uri =404;\n        }\n\n}\napache 配置\n    <VirtualHost *:8888>\n    \tServerName yii.code.com\n    \tDocumentRoot /home/www/code/yii2/web\n    \t#<Directory \"/home/www/code/yii2/web\">\n            #RewriteEngine on\n    \t    #RewriteCond %{REQUEST_FILENAME} !-f\n    \t    #RewriteCond %{REQUEST_FILENAME} !-d\n    \t    #RewriteRule . index.php\n    \t#</Directory>\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n测试效果 * http://yii.code.com 或者 http://yii.code.com:8888 * 做个测试页面 http://yii.code.com/site/test 或者 http://yii.code.com:8000/site/test\n问题\nruntime/logs\": mkdir(): Permission denied\n权限不够 chmod -R 777 runtime (如果在虚拟机不能修改文件权限，请使用nfs共享目录)\nyii\\web\\Request::cookieValidationKey must be configured with a secret key.\nconfig/web.php cookieValidationKey 赋值\n如果打不开 site/test ，请修改config/web.php 中urlManager 注释打开\n'db' => require(__DIR__ . '/db.php'),\n'urlManager' => [\n    'enablePrettyUrl' => true,\n    'showScriptName'  => false,\n    'rules' => [\n    ],\n],\nyii2/web/.htaccess\nRewriteEngine on\n#If a directory or a file exists, use it directly\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n#Otherwise forward it to index.php\nRewriteRule . index.php\n```\n\n### laravel5\n```\n下载： down.golaravel.com/laravel/laravel-v5.1.11.zip\nnginx 配置\nserver {\n        charset utf-8;\n        client_max_body_size 128M;\n        listen 80;\n        server_name laravel.code.com;\n\n        root  /home/www/code/laravel/public;\n        index  index.php;\n\n        location ~* \\.(eot|otf|ttf|woff)$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            include   fastcgi_params;\n            fastcgi_pass   127.0.0.1:9000;\n            try_files $uri =404;\n        }\n\n}\napache 配置\n    <VirtualHost *:8888>\n    \tServerName laravel.code.com\n    \tDocumentRoot /home/www/code/laravel/public/\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n测试效果\nhttp://laravel.code.com 或者 http://laravel.code.com:8888\n```\n\n## vagrant虚拟机配置\n虚拟机名称\n`vb.name = \"ubuntu_code\"`\n虚拟机主机名\n`config.vm.hostname = \"code\"`\n配置虚拟机内存和CPU\n`vb.memory = \"1024\"`\n`vb.cpus = 2`\n\n## 打包命令\n`vagrant package --output uiste.box`\n\n* 打包升级\n\n```\nconfig.vm.provision \"shell\", inline: <<-SHELL\n  #   apt-get update\n  #   apt-get install -y apache2\napt-get insatll -y redis-server\nSHELL\n\n#执行安装命令\nvagrant reload --provision\nuiste:box uiste$ vagrant box add new_uiste uiste.box\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2017/201704/20170405-1.md","raw":"layout: post\ntitle: vagrant打造开发环境\ndate: 2017-04-05 00:52:42\ntags:\n---\n## 下载安装\n```\nVirtualBox 5.1.8\n下载地址 https://www.virtualbox.org/wiki/Download_Old_Builds_5_1\nVagrant 1.8.6\n\n下载地址：https://releases.hashicorp.com/vagrant/1.8.6/\n切记根据自己的操作系统下载，同时分32位和64位\n```\n\n## vagrant常用命令\n* 查看vagrant list\n`uiste:box uiste$ vagrant box list`\n\n* 添加vagrant box\n`uiste:box uiste$ vagrant box add ubuntu1404 ubuntu1404.box`\n\n* 添加虚拟机\n```\nuiste:local_lamp_dev uiste$ pwd\n/Users/uiste/vagrant/local_lamp_dev\nuiste:local_lamp_dev uiste$ vagrant init ubuntu1404\n```\n\n* 启动虚拟机\n`uiste:local_lamp_dev uiste$ vagrant up`\n\n* 取得链接\n```\nuiste:local_lamp_dev uiste$ vagrant ssh\nvagrant@vagrant-ubuntu-trusty-64:~$\n```\n\n* 退出、挂起虚拟机\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ exit\nlogout\nConnection to 127.0.0.1 closed.\nuiste:local_lamp_dev uiste$ vagrant suspend\n```\n\n* 重启虚拟机\n```\nuiste:local_lamp_dev uiste$ vagrant reload\n```\n\n## 对虚拟机进行优化\n* 替换源\n```\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo vim /etc/apt/sources.list #修改源\n\ndeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\n\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get update #更新列表\n```\n\n## L(A|N)MP软件安装\n* 安装nginx\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install nginx -y\n// 安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ nginx -v\nnginx version: nginx/1.4.6 (Ubuntu)\nvagrant@vagrant-ubuntu-trusty-64:~$ curl -I 'http://127.0.0.1'\nHTTP/1.1 200 OK\nServer: nginx/1.4.6 (Ubuntu)\nDate: Tue, 04 Apr 2017 17:17:02 GMT\nContent-Type: text/html\nContent-Length: 612\nLast-Modified: Tue, 04 Mar 2014 11:46:45 GMT\nConnection: keep-alive\nETag: \"5315bd25-264\"\nAccept-Ranges: bytes\n```\n\n* 安装Apache\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install apache2 -y\n// 安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ apache2 -v\nServer version: Apache/2.4.7 (Ubuntu)\n// nginx 服务停止\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/nginx stop\n// 启动 apache2 服务\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 start\n * Starting web server apache2                                                  AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 10.0.2.15. Set the 'ServerName' directive globally to suppress this message\n *\n vagrant@vagrant-ubuntu-trusty-64:~$ curl -I 'http://127.0.0.1'\nHTTP/1.1 200 OK\nDate: Tue, 04 Apr 2017 17:24:09 GMT\nServer: Apache/2.4.7 (Ubuntu)\nLast-Modified: Tue, 04 Apr 2017 17:18:42 GMT\nETag: \"2cf6-54c5a77b221fa\"\nAccept-Ranges: bytes\nContent-Length: 11510\nVary: Accept-Encoding\nContent-Type: text/html\n#端口修改-Apache\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo vim  /etc/apache2/ports.conf\nListen 8888\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo /etc/init.d/apache2 restart\n#端口修改-Nginx\n#修改成9000端口 ，默认sock模式\ncd /etc/php5/fpm/pool.d\nsudo vim www.conf # search listen = 127.0.0.1:9000\nsudo /etc/init.d/php5-fpm restart\n```\n\n* 安装MySQL软件\n```\n#服务器端\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-server\n安装期间会提示输入为mysql设置root密码，我这边不操作，直接enter 不设置密码\n#客户端\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install mysql-client\n#测试连接库，上面安装服务端没有设置密码，这里直接enter进入\nvagrant@vagrant-ubuntu-trusty-64:~$ mysql -uroot -p\nEnter password:\n```\n\n* 安装PHP\n```\n#安装php\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cli -y\n#安装成功测试\nvagrant@vagrant-ubuntu-trusty-64:~$ php -v\nPHP 5.5.9-1ubuntu4.21 (cli) (built: Feb  9 2017 20:54:58)\n#安装php扩展\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-mcrypt php5-mysql php5-gd -y\n#支持apache2的php模块\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install libapache2-mod-php5\n#支持nginx fastcgi 启动php\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt-get install php5-cgi php5-fpm\n#开发Apache文件.htaccess重写功能\nvagrant@vagrant-ubuntu-trusty-64:/$ sudo a2enmod rewrite\n```\n\n* 安装git\n```\nvagrant@vagrant-ubuntu-trusty-64:/home/www/code$ sudo apt-get install git -y\n```\n\n## Vagrant高级配置\n* 端口转发\n```\n配置\n\n config.vm.network \"forwarded_port\", guest: 80, host: 8888 \n config.vm.network \"forwarded_port\", guest: 8888, host: 8889\n测试效果\n\nhttp://127.0.0.1:8888/\nhttp://127.0.0.1:8889/\n```\n\n* 网络设置\n```\n配置\n\nconfig.vm.network \"private_network\", ip: \"192.168.199.101\"\n效果\n\nhttp://192.168.199.101/ 或者 http://192.168.199.101:80/\nhttp://192.168.199.101:8888/\n```\n\n*共享目录\n```\n配置\n\nconfig.vm.synced_folder \"/Users/uiste/www/code/\", \"/home/www\"\n```\n\n## 框架配置\n\n### tp5\n```\ngit clone https://github.com/top-think/think tp5\n然后切换到tp5目录下面，再克隆核心框架仓库：cd tp5 && git clone https://github.com/top-think/framework thinkphp\nnginx 配置\nserver {\n        server_name tp5.code.com;\n        root  /home/www/code/tp5/public;\n        index  index.php index.html;\n        location / {\n            if ( -f $request_filename) {\n                break;\n            }\n\n            if ( !-e $request_filename) {\n                rewrite ^/(.*)$ /index.php/$1 last;\n                break;\n            }\n        }\n\n        location ~ \\.php {\n            set $script $uri;\n            set $path_info \"\";\n            if ($uri ~ \"^(.+\\.php)(/.+)\") {\n                set $script $1;\n                set $path_info $2;\n            }\n            include   fastcgi_params;\n            fastcgi_index    index.php?IF_REWRITE=1;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_param    PATH_INFO    $path_info;\n            fastcgi_param    SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n            fastcgi_param    SCRIPT_NAME    $script;\n            try_files $uri =404;\n        }\n\n    }\n针对fasecgi要配置下php-fpm\nvim /etc/php5/fpm/pool.d/www.conf\n;listen = /var/run/php5-fpm.sock\nlisten = 127.0.0.1:9000\n无法查看日志 sudo chmod -R 755 /var/log/nginx\napache 配置\n    <VirtualHost *:8888>\n    \tServerName tp5.imooc.test\n    \tDocumentRoot /home/www/code/tp5/public/\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n无法查看日志sudo chmod -R 755 /var/log/apache2\nForbidden解决办法\ncd /etc/apache2\nsudo vim apache2.conf <Directory /> Options FollowSymLinks AllowOverride None #修改成AllowOverride ALL 打开rewrite #Require all denied #把这行屏蔽掉，拒绝一切链接 </Directory>\n测试效果\nhttp://tp5.code.com 或者 http://tp5.code.com:8888\n做个测试页面 http://tp5.code.com/index/index/test 或者 http://tp5.code.com:8000/index/index/test\n```\n\n### yii2\n```\n下载：github.com/yiisoft/yii2/releases/download/2.0.10/yii-basic-app-2.0.10.tgz\nnginx 配置\nserver {\n        charset utf-8;\n        client_max_body_size 128M;\n        listen 80;\n        server_name yii.code.com;\n\n        root  /home/www/code/yii2/web;\n        index  index.php;\n\n        location ~* \\.(eot|otf|ttf|woff)$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            include   fastcgi_params;\n            fastcgi_pass   127.0.0.1:9000;\n            try_files $uri =404;\n        }\n\n}\napache 配置\n    <VirtualHost *:8888>\n    \tServerName yii.code.com\n    \tDocumentRoot /home/www/code/yii2/web\n    \t#<Directory \"/home/www/code/yii2/web\">\n            #RewriteEngine on\n    \t    #RewriteCond %{REQUEST_FILENAME} !-f\n    \t    #RewriteCond %{REQUEST_FILENAME} !-d\n    \t    #RewriteRule . index.php\n    \t#</Directory>\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n测试效果 * http://yii.code.com 或者 http://yii.code.com:8888 * 做个测试页面 http://yii.code.com/site/test 或者 http://yii.code.com:8000/site/test\n问题\nruntime/logs\": mkdir(): Permission denied\n权限不够 chmod -R 777 runtime (如果在虚拟机不能修改文件权限，请使用nfs共享目录)\nyii\\web\\Request::cookieValidationKey must be configured with a secret key.\nconfig/web.php cookieValidationKey 赋值\n如果打不开 site/test ，请修改config/web.php 中urlManager 注释打开\n'db' => require(__DIR__ . '/db.php'),\n'urlManager' => [\n    'enablePrettyUrl' => true,\n    'showScriptName'  => false,\n    'rules' => [\n    ],\n],\nyii2/web/.htaccess\nRewriteEngine on\n#If a directory or a file exists, use it directly\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n#Otherwise forward it to index.php\nRewriteRule . index.php\n```\n\n### laravel5\n```\n下载： down.golaravel.com/laravel/laravel-v5.1.11.zip\nnginx 配置\nserver {\n        charset utf-8;\n        client_max_body_size 128M;\n        listen 80;\n        server_name laravel.code.com;\n\n        root  /home/www/code/laravel/public;\n        index  index.php;\n\n        location ~* \\.(eot|otf|ttf|woff)$ {\n            add_header Access-Control-Allow-Origin *;\n        }\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            include   fastcgi_params;\n            fastcgi_pass   127.0.0.1:9000;\n            try_files $uri =404;\n        }\n\n}\napache 配置\n    <VirtualHost *:8888>\n    \tServerName laravel.code.com\n    \tDocumentRoot /home/www/code/laravel/public/\n    \tErrorLog ${APACHE_LOG_DIR}/error.log\n    \tCustomLog ${APACHE_LOG_DIR}/access.log combined\n    </VirtualHost>\n测试效果\nhttp://laravel.code.com 或者 http://laravel.code.com:8888\n```\n\n## vagrant虚拟机配置\n虚拟机名称\n`vb.name = \"ubuntu_code\"`\n虚拟机主机名\n`config.vm.hostname = \"code\"`\n配置虚拟机内存和CPU\n`vb.memory = \"1024\"`\n`vb.cpus = 2`\n\n## 打包命令\n`vagrant package --output uiste.box`\n\n* 打包升级\n\n```\nconfig.vm.provision \"shell\", inline: <<-SHELL\n  #   apt-get update\n  #   apt-get install -y apache2\napt-get insatll -y redis-server\nSHELL\n\n#执行安装命令\nvagrant reload --provision\nuiste:box uiste$ vagrant box add new_uiste uiste.box\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjpr00aopgwi570haijr"},{"layout":"post","title":"lnmp环境 (centos7+nginx+MySQL5.7.9+PHP7)","date":"2018-02-19T07:30:50.000Z","_content":"\n## 安装nginx\n** 首先更新系统软件 **\n```\n# yum update\n```\n\n### 安装\n1. 安装nginx源\n```\n# yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n\n2. 安装nginx\n```\nyum install nginx\n```\n\n3. 启动nginx\n```\n# service nginx start\nRedirecting to /bin/systemctl start  nginx.service\n```\n\n4. 访问http://你的ip/\n\n### 配置\n```\nvim /etc/nginx/conf.d/service.conf\n\n# api-doc.xxx.com\nserver {\nlisten 80; #默认监听 80 端口\nserver_name api-doc.xxx.com; #配置域名或者公网 ip\nlocation / {\n   proxy_pass http://127.0.0.1:4000;\n   }\n}\n\n# api-doc.xxx.com\nserver {\n    listen       80;\n    server_name  api-doc.xxx.com;\n\n    location / {\n        root   /data/web/blackuser-api-doc/_book;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    location ~ /\\.ht {\n        deny  all;\n    }\n}\n\n# admin.xxx.com\nserver{\n    listen 80;\n    server_name admin.xxx.com;\n    root /data/web/xxx/backend/web; # 该项要修改为你准备存放相关网页的路径\n    location / {\n        index  index.php index.html index.htm;\n         #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则\n         if (!-e $request_filename)\n         {\n            #地址作为将参数rewrite到index.php上。\n            rewrite ^/(.*)$ /index.php/$1;\n            #若是子目录则使用下面这句，将subdir改成目录名称即可。\n            #rewrite ^/subdir/(.*)$ /subdir/index.php/$1;\n         }\n\t#deny all;\n    }\n    #proxy the php scripts to php-fpm\n    location ~ \\.php {\n            include fastcgi_params;\n            ##pathinfo支持start\n            #定义变量 $path_info ，用于存放pathinfo信息\n            set $path_info \"\";\n            #定义变量 $real_script_name，用于存放真实地址\n            set $real_script_name $fastcgi_script_name;\n            #如果地址与引号内的正则表达式匹配\n            if ($fastcgi_script_name ~ \"^(.+?\\.php)(/.+)$\") {\n                    #将文件地址赋值给变量 $real_script_name\n                    set $real_script_name $1;\n                    #将文件地址后的参数赋值给变量 $path_info\n                    set $path_info $2;\n            }\n            #配置fastcgi的一些参数\n            fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;\n            fastcgi_param SCRIPT_NAME $real_script_name;\n            fastcgi_param PATH_INFO $path_info;\n            ###pathinfo支持end\n        fastcgi_intercept_errors on;\n        fastcgi_pass   127.0.0.1:9000;\n    }\n\n    location ^~ /data/runtime {\n    return 404;\n    }\n\n    location ^~ /application {\n    return 404;\n    }\n\n    location ^~ /simplewind {\n    return 404;\n    }\n}\n\n```\n\n## 安装MySQL5.7.*\n\n### 安裝\n\n1. 安装mysql源\n```\n# yum localinstall  http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\n```\n\n2. 安装mysql\n```\nyum install mysql-community-server\n```\n\n3. 安装mysql的开发包，以后会有用\n```\nyum install mysql-community-devel\n```\n\n4. 启动mysql\n```\nservice mysqld start\n```\n\n5. 查看mysql启动状态\n```\n# service mysqld status\n出现pid\n\n证明启动成功\n```\n\n6. 获取mysql默认生成的密码\n```\n# grep 'temporary password' /var/log/mysqld.log\n选中的就是密码。\n```\n\n7. 换成自己的密码\n```\n# mysql -uroot -p\nmysql>  set global validate_password_policy=0; # 默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。\nmysql>  set global validate_password_length=1; # validate_password_number_count指定了密码中数据的长度，validate_password_special_char_count指定了密码中特殊字符的长度，validate_password_mixed_case_count指定了密码中大小字母的长度。这些参数，默认值均为1，所以validate_password_length最小值为4，如果你显性指定validate_password_length的值小于4，尽管不会报错，但validate_password_length的值将设为4。\nmysql>  ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPasdfs4!';\nmysql> quit;\n\n# mysql -uroot -p\n```\n\n## 编译安装php7.0.1\n### 安装\n1. 下载php7源码包\n```\n# cd /root & wget -O php7.tar.gz http://cn2.php.net/get/php-7.1.2.tar.gz/from/this/mirror\n```\n\n2. 解压源码包\n```\n# tar -xvf php7.tar.gz\n```\n\n3. 进入目录\n```\n# cd php-7.0.1\n```\n\n4. 安装php依赖包　\n```\n# yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel\n```\n\n5. 编译配置，这里如果上一步的某些依赖包没有安装好，就会遇到很多configure error，我们一一解决，安装上相关软件开发包就可以\n```\n# ./configure \\\n--prefix=/usr/local/php \\\n--with-config-file-path=/etc \\\n--enable-fpm \\\n--with-fpm-user=www  \\\n--with-fpm-group=www \\\n--enable-inline-optimization \\\n--disable-debug \\\n--disable-rpath \\\n--enable-shared  \\\n--enable-soap \\\n--with-libxml-dir \\\n--with-xmlrpc \\\n--with-openssl \\\n--with-mcrypt \\\n--with-mhash \\\n--with-pcre-regex \\\n--with-sqlite3 \\\n--with-zlib \\\n--enable-bcmath \\\n--with-iconv \\\n--with-bz2 \\\n--enable-calendar \\\n--with-curl \\\n--with-cdb \\\n--enable-dom \\\n--enable-exif \\\n--enable-fileinfo \\\n--enable-filter \\\n--with-pcre-dir \\\n--enable-ftp \\\n--with-gd \\\n--with-openssl-dir \\\n--with-jpeg-dir \\\n--with-png-dir \\\n--with-zlib-dir  \\\n--with-freetype-dir \\\n--enable-gd-native-ttf \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-mbregex-backtrack \\\n--with-libmbfl \\\n--with-onig \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-zlib-dir \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets  \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--enable-wddx \\\n--with-libxml-dir \\\n--with-xsl \\\n--enable-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n\n6. 编译与安装\n```\n# make && make install\n```\n\n7. 添加 PHP 命令到环境变量\n```\n# vim /etc/profile\n\n在末尾加入\n\nPATH=$PATH:/usr/local/php/bin\nexport PATH\n\n要使改动立即生效执行\n# source /etc/profile\n```\n\n8. 查看环境变量\n```\n# echo $PATH\n# php -v\n```\n\n### 配置\n1. 配置php-fpm\n```\n# cp php.ini-production /etc/php.ini\n# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n\n# cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\n# cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n# chmod +x /etc/init.d/php-fpm\n```\n\n2. 启动php-fpm\n```\n# /etc/init.d/php-fpm start\n```\n\n** 异常处理 **\n```\nconfigure error:\n\n1.configure: error: xml2-config not found. Please check your libxml2 installation.\n\n解决：\n\n# yum install libxml2 libxml2-devel</span>\n \n\n2.configure: error: Cannot find OpenSSL's <evp.h>\n\n解决：\n\n# yum install openssl openssl-devel</span>\n \n\n3.configure: error: Please reinstall the BZip2 distribution\n\n解决：\n\n# yum install bzip2 bzip2-devel</span>\n \n\n4.configure: error: Please reinstall the libcurl distribution - easy.h should be in <curl-dir>/include/curl/\n\n解决：\n\n# yum install libcurl libcurl-devel</span>\n \n\n5.If configure fails try --with-webp-dir=<DIR> configure: error: jpeglib.h not found.\n\n \n\n解决：\n\n# yum install libjpeg libjpeg-devel</span>\n\n6.If configure fails try --with-webp-dir=<DIR>\n\nchecking for jpeg_read_header in -ljpeg... yes\n\nconfigure: error: png.h not found.\n\n解决：\n\n# yum install libpng libpng-devel</span>\n \n\n7.If configure fails try --with-webp-dir=<DIR>\n\nchecking for jpeg_read_header in -ljpeg... yes\n\nchecking for png_write_image in -lpng... yes\n\nIf configure fails try --with-xpm-dir=<DIR>\n\nconfigure: error: freetype-config not found.\n\n解决：\n\n# yum install freetype freetype-devel</span>\n8.configure: error: Unable to locate gmp.h\n\n解决：\n\n# yum install gmp gmp-devel</span>\n9.configure: error: mcrypt.h not found. Please reinstall libmcrypt.\n\n解决：\n\n# yum install libmcrypt libmcrypt-devel\n\n10.configure: error: Please reinstall readline - I cannot find readline.h\n\n解决：\n\n# yum install readline readline-devel</span>\n11.configure: error: xslt-config not found. Please reinstall the libxslt >= 1.1.0 distribution\n\n解决：\n\n# yum install libxslt libxslt-devel</span>\n```\n\n\n## 修改服务运行用户\n### 修改nginx的运行角色\n```\ncd /etc/nginx\nsudo vi nginx.conf\n# 头部是这样\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\n# 修改为\nuser test;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\n#重启nginx\nsudo service nginx restart\n```\n\n### 修改php的运行角色\n```\ncd /etc/php/7.0/fpm/pool.d/\nsudo vi www.conf\n# 找到\nuser = www-data\ngroup = www-data\n\n# 改为\nuser = test\ngroup = test\n\ncd /run/php/\nls -al\n# 这个目录下面有两个文件\n# php7.0-fpm.pid和php7.0-fpm.sock\n# 修改这两个文件的权限\nsudo chown test:test php7.0-fpm.pid\nsudo chown test:test php7.0-fpm.sock\n\n# 重启php-fpm\nsudo service php7-fpm restart\n```\n\n>test用户是杜撰出来的根据自己的当前用户修改\n\n\n## 重启服务\n```\nservice nginx restart\nservice php-fpm restart\n```\n\n## 配置服务开启启动\n开机自启动nginx，php-fpm（其他服务类似）\ncentos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。\nSystemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令systemcel enable nginx.service设置开机启动即可。\n```\nsystemcel enable nginx.service\n```\n\n\n源码安装的手动建立nginx.service服务文件\n在系统服务目录里创建nginx.service文件\n`vi /lib/systemd/system/nginx.service`\n\n写入以下内容（路径改成自己的）\n```\n[Unit]\nDescription=nginx\nAfter=network.target\n[Service]\nType=forking\nExecStart=/www/lnmp/nginx/sbin/nginx -c /www/lnmp/nginx/conf/nginx.conf\nExecReload=/www/lnmp/nginx/sbin/nginx -s reload\nExecStop=/www/lnmp/nginx/sbin/nginx -s quit\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n\n在系统服务目录里创建php-fpm.service文件\n`vi /lib/systemd/system/php-fpm.service`\n\n写入以下内容（路径改成自己的）\n```\n[Unit]\nDescription=php-fpm\nAfter=network.target\n[Service]\nType=forking\nExecStart=/www/lnmp/php/sbin/php-fpm\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n\n>Description:描述服务\nAfter:描述服务类别\n[Service]服务运行参数的设置\nType=forking是后台运行的形式\nExecStart为服务的具体运行命令\nExecReload为重启命令\nExecStop为停止命令\nPrivateTmp=True表示给服务分配独立的临时空间\n注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\n测试并加入开机自启\n先关闭nginx，php-fpm\n使用以下命令开启\n`systemctl start nginx.service`             #如果服务是开启状态，使用此命令会启动失败。\n`systemctl start php-fpm.service`\n\n开启成功，将服务加入开机自启\n```\nsystemctl enable nginx.service                #注意后面不能跟空格\nsystemctl enable php-fpm.service\n```\n\n重启服务器，查看是否启动\n```\nshutdown -r now        #重启\n\nsystemctl list-units --type=service           #查看运行的服务\n```\n\n其他命令\n```\nsystemctl start nginx.service              #启动nginx服务\nsystemctl enable nginx.service             #设置开机自启动\nsystemctl disable nginx.service            #停止开机自启动\nsystemctl status nginx.service             #查看服务当前状态\nsystemctl restart nginx.service　          #重新启动服务\nsystemctl list-units --type=service        #查看所有已启动的服务\n```","source":"_posts/2018/201802/20180219-1.md","raw":"---\nlayout: post\ntitle: lnmp环境 (centos7+nginx+MySQL5.7.9+PHP7)\ndate: 2018-02-19 15:30:50\ntags:\n- lnmp\n---\n\n## 安装nginx\n** 首先更新系统软件 **\n```\n# yum update\n```\n\n### 安装\n1. 安装nginx源\n```\n# yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n\n2. 安装nginx\n```\nyum install nginx\n```\n\n3. 启动nginx\n```\n# service nginx start\nRedirecting to /bin/systemctl start  nginx.service\n```\n\n4. 访问http://你的ip/\n\n### 配置\n```\nvim /etc/nginx/conf.d/service.conf\n\n# api-doc.xxx.com\nserver {\nlisten 80; #默认监听 80 端口\nserver_name api-doc.xxx.com; #配置域名或者公网 ip\nlocation / {\n   proxy_pass http://127.0.0.1:4000;\n   }\n}\n\n# api-doc.xxx.com\nserver {\n    listen       80;\n    server_name  api-doc.xxx.com;\n\n    location / {\n        root   /data/web/blackuser-api-doc/_book;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    location ~ /\\.ht {\n        deny  all;\n    }\n}\n\n# admin.xxx.com\nserver{\n    listen 80;\n    server_name admin.xxx.com;\n    root /data/web/xxx/backend/web; # 该项要修改为你准备存放相关网页的路径\n    location / {\n        index  index.php index.html index.htm;\n         #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则\n         if (!-e $request_filename)\n         {\n            #地址作为将参数rewrite到index.php上。\n            rewrite ^/(.*)$ /index.php/$1;\n            #若是子目录则使用下面这句，将subdir改成目录名称即可。\n            #rewrite ^/subdir/(.*)$ /subdir/index.php/$1;\n         }\n\t#deny all;\n    }\n    #proxy the php scripts to php-fpm\n    location ~ \\.php {\n            include fastcgi_params;\n            ##pathinfo支持start\n            #定义变量 $path_info ，用于存放pathinfo信息\n            set $path_info \"\";\n            #定义变量 $real_script_name，用于存放真实地址\n            set $real_script_name $fastcgi_script_name;\n            #如果地址与引号内的正则表达式匹配\n            if ($fastcgi_script_name ~ \"^(.+?\\.php)(/.+)$\") {\n                    #将文件地址赋值给变量 $real_script_name\n                    set $real_script_name $1;\n                    #将文件地址后的参数赋值给变量 $path_info\n                    set $path_info $2;\n            }\n            #配置fastcgi的一些参数\n            fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;\n            fastcgi_param SCRIPT_NAME $real_script_name;\n            fastcgi_param PATH_INFO $path_info;\n            ###pathinfo支持end\n        fastcgi_intercept_errors on;\n        fastcgi_pass   127.0.0.1:9000;\n    }\n\n    location ^~ /data/runtime {\n    return 404;\n    }\n\n    location ^~ /application {\n    return 404;\n    }\n\n    location ^~ /simplewind {\n    return 404;\n    }\n}\n\n```\n\n## 安装MySQL5.7.*\n\n### 安裝\n\n1. 安装mysql源\n```\n# yum localinstall  http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm\n```\n\n2. 安装mysql\n```\nyum install mysql-community-server\n```\n\n3. 安装mysql的开发包，以后会有用\n```\nyum install mysql-community-devel\n```\n\n4. 启动mysql\n```\nservice mysqld start\n```\n\n5. 查看mysql启动状态\n```\n# service mysqld status\n出现pid\n\n证明启动成功\n```\n\n6. 获取mysql默认生成的密码\n```\n# grep 'temporary password' /var/log/mysqld.log\n选中的就是密码。\n```\n\n7. 换成自己的密码\n```\n# mysql -uroot -p\nmysql>  set global validate_password_policy=0; # 默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。\nmysql>  set global validate_password_length=1; # validate_password_number_count指定了密码中数据的长度，validate_password_special_char_count指定了密码中特殊字符的长度，validate_password_mixed_case_count指定了密码中大小字母的长度。这些参数，默认值均为1，所以validate_password_length最小值为4，如果你显性指定validate_password_length的值小于4，尽管不会报错，但validate_password_length的值将设为4。\nmysql>  ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPasdfs4!';\nmysql> quit;\n\n# mysql -uroot -p\n```\n\n## 编译安装php7.0.1\n### 安装\n1. 下载php7源码包\n```\n# cd /root & wget -O php7.tar.gz http://cn2.php.net/get/php-7.1.2.tar.gz/from/this/mirror\n```\n\n2. 解压源码包\n```\n# tar -xvf php7.tar.gz\n```\n\n3. 进入目录\n```\n# cd php-7.0.1\n```\n\n4. 安装php依赖包　\n```\n# yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel\n```\n\n5. 编译配置，这里如果上一步的某些依赖包没有安装好，就会遇到很多configure error，我们一一解决，安装上相关软件开发包就可以\n```\n# ./configure \\\n--prefix=/usr/local/php \\\n--with-config-file-path=/etc \\\n--enable-fpm \\\n--with-fpm-user=www  \\\n--with-fpm-group=www \\\n--enable-inline-optimization \\\n--disable-debug \\\n--disable-rpath \\\n--enable-shared  \\\n--enable-soap \\\n--with-libxml-dir \\\n--with-xmlrpc \\\n--with-openssl \\\n--with-mcrypt \\\n--with-mhash \\\n--with-pcre-regex \\\n--with-sqlite3 \\\n--with-zlib \\\n--enable-bcmath \\\n--with-iconv \\\n--with-bz2 \\\n--enable-calendar \\\n--with-curl \\\n--with-cdb \\\n--enable-dom \\\n--enable-exif \\\n--enable-fileinfo \\\n--enable-filter \\\n--with-pcre-dir \\\n--enable-ftp \\\n--with-gd \\\n--with-openssl-dir \\\n--with-jpeg-dir \\\n--with-png-dir \\\n--with-zlib-dir  \\\n--with-freetype-dir \\\n--enable-gd-native-ttf \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-mbregex-backtrack \\\n--with-libmbfl \\\n--with-onig \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-zlib-dir \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets  \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--enable-wddx \\\n--with-libxml-dir \\\n--with-xsl \\\n--enable-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n\n6. 编译与安装\n```\n# make && make install\n```\n\n7. 添加 PHP 命令到环境变量\n```\n# vim /etc/profile\n\n在末尾加入\n\nPATH=$PATH:/usr/local/php/bin\nexport PATH\n\n要使改动立即生效执行\n# source /etc/profile\n```\n\n8. 查看环境变量\n```\n# echo $PATH\n# php -v\n```\n\n### 配置\n1. 配置php-fpm\n```\n# cp php.ini-production /etc/php.ini\n# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n\n# cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\n# cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n# chmod +x /etc/init.d/php-fpm\n```\n\n2. 启动php-fpm\n```\n# /etc/init.d/php-fpm start\n```\n\n** 异常处理 **\n```\nconfigure error:\n\n1.configure: error: xml2-config not found. Please check your libxml2 installation.\n\n解决：\n\n# yum install libxml2 libxml2-devel</span>\n \n\n2.configure: error: Cannot find OpenSSL's <evp.h>\n\n解决：\n\n# yum install openssl openssl-devel</span>\n \n\n3.configure: error: Please reinstall the BZip2 distribution\n\n解决：\n\n# yum install bzip2 bzip2-devel</span>\n \n\n4.configure: error: Please reinstall the libcurl distribution - easy.h should be in <curl-dir>/include/curl/\n\n解决：\n\n# yum install libcurl libcurl-devel</span>\n \n\n5.If configure fails try --with-webp-dir=<DIR> configure: error: jpeglib.h not found.\n\n \n\n解决：\n\n# yum install libjpeg libjpeg-devel</span>\n\n6.If configure fails try --with-webp-dir=<DIR>\n\nchecking for jpeg_read_header in -ljpeg... yes\n\nconfigure: error: png.h not found.\n\n解决：\n\n# yum install libpng libpng-devel</span>\n \n\n7.If configure fails try --with-webp-dir=<DIR>\n\nchecking for jpeg_read_header in -ljpeg... yes\n\nchecking for png_write_image in -lpng... yes\n\nIf configure fails try --with-xpm-dir=<DIR>\n\nconfigure: error: freetype-config not found.\n\n解决：\n\n# yum install freetype freetype-devel</span>\n8.configure: error: Unable to locate gmp.h\n\n解决：\n\n# yum install gmp gmp-devel</span>\n9.configure: error: mcrypt.h not found. Please reinstall libmcrypt.\n\n解决：\n\n# yum install libmcrypt libmcrypt-devel\n\n10.configure: error: Please reinstall readline - I cannot find readline.h\n\n解决：\n\n# yum install readline readline-devel</span>\n11.configure: error: xslt-config not found. Please reinstall the libxslt >= 1.1.0 distribution\n\n解决：\n\n# yum install libxslt libxslt-devel</span>\n```\n\n\n## 修改服务运行用户\n### 修改nginx的运行角色\n```\ncd /etc/nginx\nsudo vi nginx.conf\n# 头部是这样\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\n# 修改为\nuser test;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\n#重启nginx\nsudo service nginx restart\n```\n\n### 修改php的运行角色\n```\ncd /etc/php/7.0/fpm/pool.d/\nsudo vi www.conf\n# 找到\nuser = www-data\ngroup = www-data\n\n# 改为\nuser = test\ngroup = test\n\ncd /run/php/\nls -al\n# 这个目录下面有两个文件\n# php7.0-fpm.pid和php7.0-fpm.sock\n# 修改这两个文件的权限\nsudo chown test:test php7.0-fpm.pid\nsudo chown test:test php7.0-fpm.sock\n\n# 重启php-fpm\nsudo service php7-fpm restart\n```\n\n>test用户是杜撰出来的根据自己的当前用户修改\n\n\n## 重启服务\n```\nservice nginx restart\nservice php-fpm restart\n```\n\n## 配置服务开启启动\n开机自启动nginx，php-fpm（其他服务类似）\ncentos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。\nSystemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令systemcel enable nginx.service设置开机启动即可。\n```\nsystemcel enable nginx.service\n```\n\n\n源码安装的手动建立nginx.service服务文件\n在系统服务目录里创建nginx.service文件\n`vi /lib/systemd/system/nginx.service`\n\n写入以下内容（路径改成自己的）\n```\n[Unit]\nDescription=nginx\nAfter=network.target\n[Service]\nType=forking\nExecStart=/www/lnmp/nginx/sbin/nginx -c /www/lnmp/nginx/conf/nginx.conf\nExecReload=/www/lnmp/nginx/sbin/nginx -s reload\nExecStop=/www/lnmp/nginx/sbin/nginx -s quit\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n\n在系统服务目录里创建php-fpm.service文件\n`vi /lib/systemd/system/php-fpm.service`\n\n写入以下内容（路径改成自己的）\n```\n[Unit]\nDescription=php-fpm\nAfter=network.target\n[Service]\nType=forking\nExecStart=/www/lnmp/php/sbin/php-fpm\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n\n>Description:描述服务\nAfter:描述服务类别\n[Service]服务运行参数的设置\nType=forking是后台运行的形式\nExecStart为服务的具体运行命令\nExecReload为重启命令\nExecStop为停止命令\nPrivateTmp=True表示给服务分配独立的临时空间\n注意：[Service]的启动、重启、停止命令全部要求使用绝对路径\n[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3\n测试并加入开机自启\n先关闭nginx，php-fpm\n使用以下命令开启\n`systemctl start nginx.service`             #如果服务是开启状态，使用此命令会启动失败。\n`systemctl start php-fpm.service`\n\n开启成功，将服务加入开机自启\n```\nsystemctl enable nginx.service                #注意后面不能跟空格\nsystemctl enable php-fpm.service\n```\n\n重启服务器，查看是否启动\n```\nshutdown -r now        #重启\n\nsystemctl list-units --type=service           #查看运行的服务\n```\n\n其他命令\n```\nsystemctl start nginx.service              #启动nginx服务\nsystemctl enable nginx.service             #设置开机自启动\nsystemctl disable nginx.service            #停止开机自启动\nsystemctl status nginx.service             #查看服务当前状态\nsystemctl restart nginx.service　          #重新启动服务\nsystemctl list-units --type=service        #查看所有已启动的服务\n```","slug":"1","published":1,"updated":"2019-04-02T04:21:29.730Z","comments":1,"photos":[],"link":"","_id":"ck39ugjps00aqpgwiaxtjdclk"},{"layout":"post","title":"MySQL 数据类型、列属性、数据完整性","date":"2015-08-30T09:18:51.000Z","_content":"### 数据类型\n#### 数据类型——值类型\n##### 整型\n\n|  整型  | 占用字节   | 范围  |  范围   |\n| ------ | :-----:  | :----:  | :------:|\n|  tinyint   | 1 \t|  -2^7~2^7-1   |-128~127|\n|  smallint  |   2   |  -2^15~2^15-1  |\t-32768~32767\t|\n|  mediumint |    3   |  -2^23~2^23-1  |\t-8388608~8388607|\n|  int      |   4  |  -2^31~2^31-1 |\t-2147483648~2147483647\t|\n|  bigint |    8   |  -2^63~2^63-1  |   -   |\n\n>一个字节=8位，8位就是8个二进制数\n\n- 整型支持显示宽度：最小的显示位数，比如int(5)，如果数值的位数小于5位，前面加上前导0。比如输入12，显示00012；大于5位就不添加前导0\n\n```\nmysql> describe student;\n+-------+--------------------------+------+-----+---------+----------------+\n| Field | Type                     | Null | Key | Default | Extra          |\n+-------+--------------------------+------+-----+---------+----------------+\n| id    | int(11)                  | NO   | PRI | NULL    | auto_increment |\n| name  | char(1)                  | YES  |     | NULL    |                |\n| num   | int(8) unsigned zerofill | YES  |     | NULL    |                |\n+-------+--------------------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n\nmysql> select * from student;\n+----+------+------------+\n| id | name | num        |\n+----+------+------------+\n|  1 | a    |   00002485 |\n|  2 | b    |   03678928 |\n|  3 | c    | 1234567890 |\n+----+------+------------+\n3 rows in set (0.00 sec)\n\n```\n\n>脚下留心：必须结合zerofill才起作用\n显示宽度不决定显示范围，只是在数值不够指定位数时用0做前导\n\n```\nmysql> alter table student add num2 tinyint;\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> insert into student values (null,'d','1',128);\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+----+------+------------+------+\n| id | name | num        | num2 |\n+----+------+------------+------+\n|  1 | a    |   00002485 | NULL |\n|  2 | b    |   03678928 | NULL |\n|  3 | c    | 1234567890 | NULL |\n|  4 | d    |   00000001 |  127 |\n+----+------+------------+------+\n4 rows in set (0.00 sec)\n```\n\n>超出最大范围会有警告提示，同时值保存最大范围值\n\n- 无符号整数（unsigned）：无符号数没有负数，正数部分是有符号的两倍\n\n```\nmysql> insert into student values (null,666);\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+----+------+\n| id | num  |\n+----+------+\n|  7 |  255 |\n+----+------+\n1 row in set (0.00 sec)\n```\n\n##### 浮点型（保存近似值小数）\n\n|  浮点型        | 占用字节   | 范围  | \n| ------        | :-----:  | :----:  | \n|  float（单精度）|   4\t   | -3.4E+38~3.4E+38  |\n|  double（双精度）  |   8  |  -1.8E+308~1.8E+308  |\n\n- 浮点数声明:  float(M,D)   double(M,D)\nM：总位数\nD：小数位数\n\n>浮点数也是支持显示宽度和无符号数\n\n- 浮点数支持科学计数法\n``insert into uiste values (5E2,4E-1);``\n\n```\nmysql> insert into student values (null,5E2,4E-1);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------------+------+\n| id | num1         | num2 |\n+----+--------------+------+\n|  7 |         NULL | NULL |\n|  8 | 000000000500 | 00.4 |\n+----+--------------+------+\n2 rows in set (0.00 sec)\n```\n\n- 浮点的精度可能会丢失【指的是小数】\n``insert into uiste values (99.999999999);``\n\n```\nmysql> insert into student values (null,9.99999999999999,1.1111111111111);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+----+--------------+------+\n| id | num1         | num2 |\n+----+--------------+------+\n|  7 |         NULL | NULL |\n|  8 | 000000000500 | 00.4 |\n|  9 | 000000000010 | 01.1 |\n+----+--------------+------+\n3 rows in set (0.00 sec)\n```\n\n>小数部分如果超过D的限制会四舍五入，整数部分不能超过M-D的限制\n\n- 定点数\n语法：decimal(M,D)\n\n>定点数是变长的，大致每9个数字用4个字节来存储。定点数之所以能保存精确的小数，因为整数和小数是分开存储的。占用的资源比浮点数要多。\n定点数和浮点数都支持显示宽度和无符号数\n\n#### 数据类型——字符型\n\n|  数据类型       | 描述   | \n| ------        | :-----:  | \n|  char(L)      |   定长\t   | \n|  varchar(L)   |  变长    |  \n|  tinytext     |   2^8-1=255\t   | \n|  text        |  2^16-1=65535    |  \n|  mediumtext     |   2^24-1\t | \n|  longtext     |  2^32-1    |  \n\n>char(10)和varchar(10)的区别？\n答：相同点：它们最多只能保存10个字符；\n不同点：char不回收富余的字符，varchar会回收富余的字符。\nchar效率高，浪费空间，varchar节省空间，效率比char低。\n\n>char的最大长度是255。varchar理论长度是65535字节,实际根本达不到。具体长度与字符编码有关\n\n>大块文本（text）不计算在总长度中,一个大块文本只占用10个字节来保存文本的地址。\n\n#### 数据类型——枚举（enum）\n从集合中选择一个数据（单选）\n\n```\nmysql> create database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> create table student(\n    -> name varchar(20),\n    -> sex enum('男','女','保密')\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> insert into student values ('杜敏','男');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into student values ('钟程程','男或女');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+-----------+------+\n| name      | sex  |\n+-----------+------+\n| 杜敏      | 男   |\n| 钟程程    |      |\n+-----------+------+\n2 rows in set (0.00 sec)\n```\n\n>使用枚举进行数据选择的时候，没有屏蔽错误信息只是提示了警告信息\n\n>MySQL的枚举类型是通过整数来管理的，第一个值是1，第二个值是2，以此类推\n既然枚举在数据库内部存储的是整数，那么可以直接插入数字\n\n```\nmysql> select sex+0 from student;\n+-------+\n| sex+0 |\n+-------+\n|     1 |\n|     0 |\n+-------+\n2 rows in set (0.01 sec)\n\nmysql> insert into student values ('赵哥',2);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+-----------+------+\n| name      | sex  |\n+-----------+------+\n| 杜敏      | 男   |\n| 钟程程    |      |\n| 赵哥      | 女   |\n+-----------+------+\n3 rows in set (0.00 sec)\n```\n\n**枚举的优点：**\n1、\t运行速度快（数字比字符串运算速度快）\n2、\t限制数据\n3、\t节省空间\n\n>已知枚举占用2个字节，请问最多有多少个枚举值？\n答：2个字节=16位，可以保存216个数字（0-65535），枚举是从1开始，所以枚举最多可以有65535个枚举值\n\n#### 数据类型——集合（set)\n从集合中选择一些数据（多选）\n\n```\nmysql> create table student(\n    -> name char,\n    -> hobby set('看书','玩游戏','敲代码','看电视')\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n插入集合的值\n\n```\nmysql> insert into student values ('杜敏','玩游戏');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\nmysql> insert into student values ('小兰','看书,敲代码');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\nmysql> insert into student values ('兰','敲代码,看书');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+------+------------------+\n| name | hobby            |\n+------+------------------+\n| 杜   | 玩游戏           |\n| 小   | 看书,敲代码      |\n| 兰   | 看书,敲代码      |\n+------+------------------+\n3 rows in set (0.00 sec)\n```\n\n>插入的顺序不一样，但是显示的顺序是一样的\n\n>集合和枚举一样，每个集合的元素都分配一个固定的值，分配的方式从左往右按2的0、1、2、…次方\n\n如果是多选，他们的关系是按位或\n按位与：相同的位上都是1，结果才为1，只要有一个为0，结果为0。\n按位或：相同的位上只要有一个为1结果就是1。\n\n```\nmysql> select hobby+0 from student;\n+---------+\n| hobby+0 |\n+---------+\n|       2 |\n|       5 |\n|       5 |\n+---------+\n3 rows in set (0.01 sec)\n```\n\n>思考：已知集合占用8个字节，最多可以表示几个选项？\n答：8个字节=64位，一个位表示1个选项，最多可以表示64个选项。\n\n#### 数据类型——日期类型\n\n|  数据类型   | 描述   | \n| ------     | :-----:  | \n|  datetime  |   日期时间，占用8个字节\t   | \n|  date    | 日期  |  \n|  time    |   时间  | \n|  timestamp      | 时间戳   占用4个字节 |  \n|  year    |  年份   占用1个字节 | \n\n+ datetime\t格式：年-月-日 小时:分钟:秒\n\n测试\n\n```\nmysql> insert into test10 values ('2015-6-24 15:15:15');\t--正确\nmysql> insert into test10 values ('100-6-24 15:15:15');\t\t--正确\nmysql> insert into test10 values ('9999-6-24 15:15:15');\t--正确\nmysql> insert into test10 values ('10000-6-24 15:15:15');\t--错误\n```\n\n>datetime保存范围是：1~9999年\n\n+ timestamp：时间戳\n\n```\nmysql> insert into test11 values ('2015-6-24 15:15:15');\t--正确的\nmysql> insert into test11 values ('1969-12-31 23:59:59');\t--超过范围\nmysql> insert into test11 values ('2038-01-19 11:14:08');\t--超出范围\nmysql> insert into test11 values ('2038-01-19 11:14:07');\t--正确\n```\n\n>datetime类型timestamp类型在表现上是一样的。他们的区别：\ndatetime是从1到9999，而timestamp从1970年~2038年，2038年01月19日11:14:07秒以后就超出timestamp范围了。\n\n+ year\n因为只占用1个字节，最多只能表示255个年份，范围是1901-2155之间的年份\n\n+ time\t\n表示时间或时间间隔，范围是-838:59:59~838:59:59\n\n```\nmysql> insert into test13 values (12:12:12);\t--正确\nmysql> insert into test13 values ('212:12:12');\t--正确\nmysql> insert into test13 values ('-838:59:59');--正确\nmysql> insert into test13 values ('838:59:59');\t--正确\nmysql> insert into test13 values ('839:00:00');\t--错误\n```\n\n>time支持以天的方式插入\n\n``insert into student values ('10 12:12:12');``\n\n#### 数据类型——boolean\n\nMySQL不支持boolean类型，true和false在数据库中对应1和0。\n\n```\nmysql> create table test1(\n    -> `field` boolean\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> describe test1;\n+-------+------------+------+-----+---------+-------+\n| Field | Type       | Null | Key | Default | Extra |\n+-------+------------+------+-----+---------+-------+\n| field | tinyint(1) | YES  |     | NULL    |       |\n+-------+------------+------+-----+---------+-------+\n1 row in set (0.01 sec)\n```\n\n#### 创建数据表的数据类型\n\n>手机号码一般使用什么数据类型存储?\t\t\tchar\n性别一般使用什么数据类型存储?\t\t\t\tchar    enum\n年龄信息一般使用什么数据类型存储?\t\t\ttinyint\n照片信息一般使用什么数据类型存储?\t\t\tbinary(二进制)\n薪水一般使用什么数据类型存储?\t\t\t\tdecimal\n\n**一个字段到底选数字还是字符，取决于有没有计算的可能，如果没有计算的可能即使是数字也要用字符类型，比如手机号、QQ号，…**\n\n### 列属性-是否为空(null | not null)\nnull：可以为空\nnot null：不可以为空\n\n#### 列属性——默认值（default）\n>如果一个字段没有插入值，可以默认插入一个指定的值\n没有插入的字段插入默认值\ndefault关键字用来插入默认值\n\n#### 列属性——自动增长（auto_increment）\n字段的值从1开始，每次递增1，特点就在字段中的数据不可能重复，适合为记录生成唯一的id\n\n>在MySQL中，auto_increment必须是主键。但是主键不一定是自动增长的\n\n**既然从1开始，每次递增1，所以一般自动增长都是无符号整数**\n\n>如果要给自动增长列插入数据，使用null关键字。\n自动增长列上的数据被删除，默认情况下此记录的编号不再使用。\n\n>思考题：在一个自动增长列上，插入三行，删除两行，插入三行，删除两行，插入三行，删除两行，再插入一个记录编号是多少？\n答：编号从10开始。删除记录与自动增长的编号没有关系\n\n#### 列属性——主键（primary key）\n主键：唯一标识表中记录的一个或一组列\n主键的特点：不能重复，不能为空\n一个表只能有一个主键，主键可以有多个字段组成\n\n主键的作用：\n+ 保证数据完整性\n+ 加快查询速度\n\n##### 添加主键：方法一【创建表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int primary key,\n    -> name varchar(20)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n##### 添加主键：方法二【创建表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20),\n    -> primary key(id)\n    -> );\n```\n\n##### 添加主键：方法三【更改表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> alter table stu add primary key (id)\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 查看主键\n``mysql>desc stu;``\n\n##### 创建组合键\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20),\n    -> primary key(id,name)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n>也可以通过更改表的方式来创建组合键\nalter table stu add primary key(id,name)\n\n##### 删除主键\n``mysql>alter table stu drop primary key;``\n\n##### 选择主键的原则\n1、\t最少性：尽量选择一个字段做主键\n2、\t稳定性：尽量选择更新少的列做主键\n3、\t尽量选择数字型的列做主键\n\n##### 主键思考题\n>在主键列输入的数值，允许为空吗?\t\t\t\t不能为空\n一个表可以有多个主键吗?\t\t\t\t\t\t\t不能\n在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？可以\n标识列（自动增长列）允许为字符数据类型吗？\t\t不允许\n表中没有合适的列作为主键怎么办？\t\t\t\t添加一个自动增长列\n   如果标识列A的初始值为1，增长量为1，则输入三行数据以后，再删除两行，下次再输入数据行的时候，标识值从多少开始？  从4开始\n\n#### 列属性——唯一键\n特点：不能重复，可以为空\n一个表可以有多个唯一键\n作用：\n1、\t保证数据完整性\n2、\t加快数据访问\n\n##### 添加唯一键【创建表的时候添加唯一键】\nunique key\nunique \n\n##### 添加唯一键【创建表的时候添加唯一键】\nunique key(stuname)\nunique(stuadd)\n\n##### 设置名字的唯一键\n``unique key `name` (`stuname`)``\nname：唯一键名字\nstuname：字段名字\n\n##### 添加唯一键【修改表的时候添加唯一键】\n\n```\nmysql> create table stu(\n    -> id int primary key,\n    -> stuname varchar(20),\n    -> stuadd varchar(100)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n添加唯一键\n\n```\nmysql> alter table stu add unique key(stuname);   --key可以省略\nmysql> alter table stu add unique (stuadd);\n```\n\n一次添加多个唯一键\n``mysql>alter table stu add unique(stuname),add unique(stuadd);``\n\n##### 查看唯一键\n``mysql>show create talbe stu\\G``\n\n##### 添加组合唯一键\n\n##### 删除唯一键\n通过唯一键的名字来删除唯一键\n语法：``alter table 表名 drop index 唯一键名称``\n``mysql>alter talbe stu drop index stuname;``\n\n##### 列属性——备注（comment）\n\n##### SQL注释\n单行注释：--或#\n多行注释：/*    */\n\n#### 数据完整性\n##### 保证实体完整性\n1、\t主键约束\n2、\t唯一约束\n3、\t自动增长列\n\n##### 保证域完整性\n1、\t数据类型约束\n2、\t非空约束\n3、\t默认值约束\n##### 保证引用完整性\n1、外键约束：从表中的公共字段是主表的外键\n##### 保证自定义完整性\n1、\t存储过程\n2、\t触发器\n##### 主表和从表\n两个表建立关系（两个表只要有公共字段就有关系），一个表称为主表，一个表称为从表。\n外键约束可以实现：\n1、\t主表中没有的从表中不允许插入\n2、\t从表中有的主表中不允许删除\n3、\t不能更改主表中的值而导致从表中的记录孤立存在。\n4、\t先删除从表，再删除主表\n\n#### 外键（foreign key）\n1、\t外键：从表中的公共字段，公共字段的名字可以不一样，但是数据类型必须一样。\n2、\t外键约束用来保证引用完整性\n\n##### 添加外键\n**foreign key (id) references stuinfo(stuno);**\n方法一：创建表的时候添加外键\n\nreferences：参照\n\n测试：\n\n+ 主表中没有的，从表中不允许插入\n\n```\n先插主表，在插从表\n\nmysql> insert into stuinfo values (1,'tom');\nQuery OK, 1 row affected (0.00 sec)\nmysql> insert into stumarks values (1,77);\nQuery OK, 1 row affected (0.00 sec)\n```\n\n+ 从表中有的，主表中不能删除\n\n+ 不能更改主表的数据后使得从表的数据孤立\n\n方法二：修改表的时候添加外键\n语法：``alter table stumarks add foreign key (id) references stuinfo(stuno);``\n\n```\nmysql> create table stuinfo(\n    -> stuno char(4) primary key,\n    -> stuname varchar(20) not null\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> create table stumarks(\n    -> id char(4) primary key,\n    -> score int\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> alter table stumarks add foreign key (id) references stuinfo(stuno);\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>要创建外键必须是innodb引擎，myisam不支持外键约束\n\n**创建外键的时候，给外键取名**\n``alter table stumarks add constraint `FK1` foreign key(id) references stuinfo(stuno);``\n>constraint：约束\n\n##### 删除外键\n\n通过外键的名字删除外键\n语法：``alter table 表名 drop foreign key `外键名` ``\n\n```\nmysql>alter talbe stumarks drop foreign key `FK1` \n```\n\n>如果要在某个字段上添加外键约束，改字段必须要有索引才可以。如果该字段已经存在索引，则直接使用，否则MySQL自动生成索引。\n\n##### 外键操作\n1、\t严格操作（前面讲的是严格操作）\n2、\t置空操作（set null）：如果主表记录删除或更新，从表置空\n3、\t级联操作（cascade）：如果主表记录删除或更新，从表级联\n>一般来说：主表删除的时候，从表置空操作，主表更新的时候，从表级联操作。\n语法：foreign key(外键) references 主表(关键字段) [主表删除时候的动作] [主表更新时候的动作]\n\n```\nmysql> create table stumarks(\n    -> id int auto_increment primary key,\n    -> stuno char(4),\n    -> stuscore tinyint(3),\n    -> foreign key(stuno) references stuinfo(stuno) on delete set null on update cascade\n    -> );\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n```\n--错误案例--\ncreate table stuinfo(\nstuno char(4) primary key,\nstuname varchar(20) not null\n);\n\ncreate table stumarks(\nid char(4) primary key,\nscore int\n);\n\nalter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;\n\n--正确案例--\ncreate table stuinfo(\nstuno char(4) primary key,\nstuname varchar(20) not null\n);\n\ncreate table stumarks(\nid1 char(4) primary key,\nid char(4),\nscore int\n);\n\nalter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;\n```\n\n>使用alter修改表 去创建外键时，是否不能够同时指定制空约束和级联约束？\n主键不能set null ,所以外键表中新增主键，将外键作为非主键，此问题与alter的设置无关\n``foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade;``\n\n```\nmysql> create table stuinfo(\n    -> stuno char(4) primary key,\n    -> stuname varchar(20) not null\n    -> );\nQuery OK, 0 rows affected (0.02 sec)\n//主键与非主键之间的关系，主键是不能set null的，所有使用非主键作为外键\nmysql> create table stumarks(\n    -> id int auto_increment primary key,\n    -> stuno char(4),\n\t    -> score int,\n\t    -> foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into stuinfo values ('1001','tom'),('1002','berry');\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> insert into stumarks values (null,'1001',88),(null,'1002',99);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | 1001  |    88 |\n|  2 | 1002  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n\nmysql> select * from stuinfo;\n+-------+---------+\n| stuno | stuname |\n+-------+---------+\n| 1001  | tom     |\n| 1002  | berry   |\n+-------+---------+\n2 rows in set (0.00 sec)\n\nmysql> delete from stuinfo where stuno='1001';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | NULL  |    88 |\n|  2 | 1002  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n\nmysql> update stuinfo set stuno='1003' where stuno='1002';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | NULL  |    88 |\n|  2 | 1003  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n```\n\n### 再来一戳，外键级联\n```\nALTER TABLE stumarks DROP FOREIGN KEY `FK1`;\n\nDROP TABLE\nIF EXISTS stuinfo;\n\nDROP TABLE\nIF EXISTS stumarks;\n\nCREATE TABLE stuinfo(\n    stuno CHAR(4) PRIMARY KEY ,\n    stuname VARCHAR(10)\n);\n\nCREATE TABLE stumarks(\n    id INT auto_increment PRIMARY KEY ,\n    stuno CHAR(4) UNIQUE KEY,\n    stuscore TINYINT(3) ,\n    CONSTRAINT `FK1` FOREIGN KEY(stuno) REFERENCES stuinfo(stuno) ON DELETE\nSET NULL ON UPDATE CASCADE\n);\n```\n\n>经验总结：设置级联外键由于 on delete set null 的原因不能设置外键为主键，解决外键数据完整的方法是给外键增加为一件 unique key;\n\n","source":"_posts/2015/201508/20150830-1.md","raw":"layout: post\ntitle: MySQL 数据类型、列属性、数据完整性\ndate: 2015-08-30 17:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### 数据类型\n#### 数据类型——值类型\n##### 整型\n\n|  整型  | 占用字节   | 范围  |  范围   |\n| ------ | :-----:  | :----:  | :------:|\n|  tinyint   | 1 \t|  -2^7~2^7-1   |-128~127|\n|  smallint  |   2   |  -2^15~2^15-1  |\t-32768~32767\t|\n|  mediumint |    3   |  -2^23~2^23-1  |\t-8388608~8388607|\n|  int      |   4  |  -2^31~2^31-1 |\t-2147483648~2147483647\t|\n|  bigint |    8   |  -2^63~2^63-1  |   -   |\n\n>一个字节=8位，8位就是8个二进制数\n\n- 整型支持显示宽度：最小的显示位数，比如int(5)，如果数值的位数小于5位，前面加上前导0。比如输入12，显示00012；大于5位就不添加前导0\n\n```\nmysql> describe student;\n+-------+--------------------------+------+-----+---------+----------------+\n| Field | Type                     | Null | Key | Default | Extra          |\n+-------+--------------------------+------+-----+---------+----------------+\n| id    | int(11)                  | NO   | PRI | NULL    | auto_increment |\n| name  | char(1)                  | YES  |     | NULL    |                |\n| num   | int(8) unsigned zerofill | YES  |     | NULL    |                |\n+-------+--------------------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n\nmysql> select * from student;\n+----+------+------------+\n| id | name | num        |\n+----+------+------------+\n|  1 | a    |   00002485 |\n|  2 | b    |   03678928 |\n|  3 | c    | 1234567890 |\n+----+------+------------+\n3 rows in set (0.00 sec)\n\n```\n\n>脚下留心：必须结合zerofill才起作用\n显示宽度不决定显示范围，只是在数值不够指定位数时用0做前导\n\n```\nmysql> alter table student add num2 tinyint;\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> insert into student values (null,'d','1',128);\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+----+------+------------+------+\n| id | name | num        | num2 |\n+----+------+------------+------+\n|  1 | a    |   00002485 | NULL |\n|  2 | b    |   03678928 | NULL |\n|  3 | c    | 1234567890 | NULL |\n|  4 | d    |   00000001 |  127 |\n+----+------+------------+------+\n4 rows in set (0.00 sec)\n```\n\n>超出最大范围会有警告提示，同时值保存最大范围值\n\n- 无符号整数（unsigned）：无符号数没有负数，正数部分是有符号的两倍\n\n```\nmysql> insert into student values (null,666);\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+----+------+\n| id | num  |\n+----+------+\n|  7 |  255 |\n+----+------+\n1 row in set (0.00 sec)\n```\n\n##### 浮点型（保存近似值小数）\n\n|  浮点型        | 占用字节   | 范围  | \n| ------        | :-----:  | :----:  | \n|  float（单精度）|   4\t   | -3.4E+38~3.4E+38  |\n|  double（双精度）  |   8  |  -1.8E+308~1.8E+308  |\n\n- 浮点数声明:  float(M,D)   double(M,D)\nM：总位数\nD：小数位数\n\n>浮点数也是支持显示宽度和无符号数\n\n- 浮点数支持科学计数法\n``insert into uiste values (5E2,4E-1);``\n\n```\nmysql> insert into student values (null,5E2,4E-1);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from student;\n+----+--------------+------+\n| id | num1         | num2 |\n+----+--------------+------+\n|  7 |         NULL | NULL |\n|  8 | 000000000500 | 00.4 |\n+----+--------------+------+\n2 rows in set (0.00 sec)\n```\n\n- 浮点的精度可能会丢失【指的是小数】\n``insert into uiste values (99.999999999);``\n\n```\nmysql> insert into student values (null,9.99999999999999,1.1111111111111);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+----+--------------+------+\n| id | num1         | num2 |\n+----+--------------+------+\n|  7 |         NULL | NULL |\n|  8 | 000000000500 | 00.4 |\n|  9 | 000000000010 | 01.1 |\n+----+--------------+------+\n3 rows in set (0.00 sec)\n```\n\n>小数部分如果超过D的限制会四舍五入，整数部分不能超过M-D的限制\n\n- 定点数\n语法：decimal(M,D)\n\n>定点数是变长的，大致每9个数字用4个字节来存储。定点数之所以能保存精确的小数，因为整数和小数是分开存储的。占用的资源比浮点数要多。\n定点数和浮点数都支持显示宽度和无符号数\n\n#### 数据类型——字符型\n\n|  数据类型       | 描述   | \n| ------        | :-----:  | \n|  char(L)      |   定长\t   | \n|  varchar(L)   |  变长    |  \n|  tinytext     |   2^8-1=255\t   | \n|  text        |  2^16-1=65535    |  \n|  mediumtext     |   2^24-1\t | \n|  longtext     |  2^32-1    |  \n\n>char(10)和varchar(10)的区别？\n答：相同点：它们最多只能保存10个字符；\n不同点：char不回收富余的字符，varchar会回收富余的字符。\nchar效率高，浪费空间，varchar节省空间，效率比char低。\n\n>char的最大长度是255。varchar理论长度是65535字节,实际根本达不到。具体长度与字符编码有关\n\n>大块文本（text）不计算在总长度中,一个大块文本只占用10个字节来保存文本的地址。\n\n#### 数据类型——枚举（enum）\n从集合中选择一个数据（单选）\n\n```\nmysql> create database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> create table student(\n    -> name varchar(20),\n    -> sex enum('男','女','保密')\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> insert into student values ('杜敏','男');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> insert into student values ('钟程程','男或女');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nmysql> select * from student;\n+-----------+------+\n| name      | sex  |\n+-----------+------+\n| 杜敏      | 男   |\n| 钟程程    |      |\n+-----------+------+\n2 rows in set (0.00 sec)\n```\n\n>使用枚举进行数据选择的时候，没有屏蔽错误信息只是提示了警告信息\n\n>MySQL的枚举类型是通过整数来管理的，第一个值是1，第二个值是2，以此类推\n既然枚举在数据库内部存储的是整数，那么可以直接插入数字\n\n```\nmysql> select sex+0 from student;\n+-------+\n| sex+0 |\n+-------+\n|     1 |\n|     0 |\n+-------+\n2 rows in set (0.01 sec)\n\nmysql> insert into student values ('赵哥',2);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+-----------+------+\n| name      | sex  |\n+-----------+------+\n| 杜敏      | 男   |\n| 钟程程    |      |\n| 赵哥      | 女   |\n+-----------+------+\n3 rows in set (0.00 sec)\n```\n\n**枚举的优点：**\n1、\t运行速度快（数字比字符串运算速度快）\n2、\t限制数据\n3、\t节省空间\n\n>已知枚举占用2个字节，请问最多有多少个枚举值？\n答：2个字节=16位，可以保存216个数字（0-65535），枚举是从1开始，所以枚举最多可以有65535个枚举值\n\n#### 数据类型——集合（set)\n从集合中选择一些数据（多选）\n\n```\nmysql> create table student(\n    -> name char,\n    -> hobby set('看书','玩游戏','敲代码','看电视')\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n插入集合的值\n\n```\nmysql> insert into student values ('杜敏','玩游戏');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\nmysql> insert into student values ('小兰','看书,敲代码');\nQuery OK, 1 row affected, 1 warning (0.01 sec)\nmysql> insert into student values ('兰','敲代码,看书');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from student;\n+------+------------------+\n| name | hobby            |\n+------+------------------+\n| 杜   | 玩游戏           |\n| 小   | 看书,敲代码      |\n| 兰   | 看书,敲代码      |\n+------+------------------+\n3 rows in set (0.00 sec)\n```\n\n>插入的顺序不一样，但是显示的顺序是一样的\n\n>集合和枚举一样，每个集合的元素都分配一个固定的值，分配的方式从左往右按2的0、1、2、…次方\n\n如果是多选，他们的关系是按位或\n按位与：相同的位上都是1，结果才为1，只要有一个为0，结果为0。\n按位或：相同的位上只要有一个为1结果就是1。\n\n```\nmysql> select hobby+0 from student;\n+---------+\n| hobby+0 |\n+---------+\n|       2 |\n|       5 |\n|       5 |\n+---------+\n3 rows in set (0.01 sec)\n```\n\n>思考：已知集合占用8个字节，最多可以表示几个选项？\n答：8个字节=64位，一个位表示1个选项，最多可以表示64个选项。\n\n#### 数据类型——日期类型\n\n|  数据类型   | 描述   | \n| ------     | :-----:  | \n|  datetime  |   日期时间，占用8个字节\t   | \n|  date    | 日期  |  \n|  time    |   时间  | \n|  timestamp      | 时间戳   占用4个字节 |  \n|  year    |  年份   占用1个字节 | \n\n+ datetime\t格式：年-月-日 小时:分钟:秒\n\n测试\n\n```\nmysql> insert into test10 values ('2015-6-24 15:15:15');\t--正确\nmysql> insert into test10 values ('100-6-24 15:15:15');\t\t--正确\nmysql> insert into test10 values ('9999-6-24 15:15:15');\t--正确\nmysql> insert into test10 values ('10000-6-24 15:15:15');\t--错误\n```\n\n>datetime保存范围是：1~9999年\n\n+ timestamp：时间戳\n\n```\nmysql> insert into test11 values ('2015-6-24 15:15:15');\t--正确的\nmysql> insert into test11 values ('1969-12-31 23:59:59');\t--超过范围\nmysql> insert into test11 values ('2038-01-19 11:14:08');\t--超出范围\nmysql> insert into test11 values ('2038-01-19 11:14:07');\t--正确\n```\n\n>datetime类型timestamp类型在表现上是一样的。他们的区别：\ndatetime是从1到9999，而timestamp从1970年~2038年，2038年01月19日11:14:07秒以后就超出timestamp范围了。\n\n+ year\n因为只占用1个字节，最多只能表示255个年份，范围是1901-2155之间的年份\n\n+ time\t\n表示时间或时间间隔，范围是-838:59:59~838:59:59\n\n```\nmysql> insert into test13 values (12:12:12);\t--正确\nmysql> insert into test13 values ('212:12:12');\t--正确\nmysql> insert into test13 values ('-838:59:59');--正确\nmysql> insert into test13 values ('838:59:59');\t--正确\nmysql> insert into test13 values ('839:00:00');\t--错误\n```\n\n>time支持以天的方式插入\n\n``insert into student values ('10 12:12:12');``\n\n#### 数据类型——boolean\n\nMySQL不支持boolean类型，true和false在数据库中对应1和0。\n\n```\nmysql> create table test1(\n    -> `field` boolean\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> describe test1;\n+-------+------------+------+-----+---------+-------+\n| Field | Type       | Null | Key | Default | Extra |\n+-------+------------+------+-----+---------+-------+\n| field | tinyint(1) | YES  |     | NULL    |       |\n+-------+------------+------+-----+---------+-------+\n1 row in set (0.01 sec)\n```\n\n#### 创建数据表的数据类型\n\n>手机号码一般使用什么数据类型存储?\t\t\tchar\n性别一般使用什么数据类型存储?\t\t\t\tchar    enum\n年龄信息一般使用什么数据类型存储?\t\t\ttinyint\n照片信息一般使用什么数据类型存储?\t\t\tbinary(二进制)\n薪水一般使用什么数据类型存储?\t\t\t\tdecimal\n\n**一个字段到底选数字还是字符，取决于有没有计算的可能，如果没有计算的可能即使是数字也要用字符类型，比如手机号、QQ号，…**\n\n### 列属性-是否为空(null | not null)\nnull：可以为空\nnot null：不可以为空\n\n#### 列属性——默认值（default）\n>如果一个字段没有插入值，可以默认插入一个指定的值\n没有插入的字段插入默认值\ndefault关键字用来插入默认值\n\n#### 列属性——自动增长（auto_increment）\n字段的值从1开始，每次递增1，特点就在字段中的数据不可能重复，适合为记录生成唯一的id\n\n>在MySQL中，auto_increment必须是主键。但是主键不一定是自动增长的\n\n**既然从1开始，每次递增1，所以一般自动增长都是无符号整数**\n\n>如果要给自动增长列插入数据，使用null关键字。\n自动增长列上的数据被删除，默认情况下此记录的编号不再使用。\n\n>思考题：在一个自动增长列上，插入三行，删除两行，插入三行，删除两行，插入三行，删除两行，再插入一个记录编号是多少？\n答：编号从10开始。删除记录与自动增长的编号没有关系\n\n#### 列属性——主键（primary key）\n主键：唯一标识表中记录的一个或一组列\n主键的特点：不能重复，不能为空\n一个表只能有一个主键，主键可以有多个字段组成\n\n主键的作用：\n+ 保证数据完整性\n+ 加快查询速度\n\n##### 添加主键：方法一【创建表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int primary key,\n    -> name varchar(20)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n##### 添加主键：方法二【创建表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20),\n    -> primary key(id)\n    -> );\n```\n\n##### 添加主键：方法三【更改表的时候添加主键】\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> alter table stu add primary key (id)\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 查看主键\n``mysql>desc stu;``\n\n##### 创建组合键\n\n```\nmysql> create table stu(\n    -> id int,\n    -> name varchar(20),\n    -> primary key(id,name)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n>也可以通过更改表的方式来创建组合键\nalter table stu add primary key(id,name)\n\n##### 删除主键\n``mysql>alter table stu drop primary key;``\n\n##### 选择主键的原则\n1、\t最少性：尽量选择一个字段做主键\n2、\t稳定性：尽量选择更新少的列做主键\n3、\t尽量选择数字型的列做主键\n\n##### 主键思考题\n>在主键列输入的数值，允许为空吗?\t\t\t\t不能为空\n一个表可以有多个主键吗?\t\t\t\t\t\t\t不能\n在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？可以\n标识列（自动增长列）允许为字符数据类型吗？\t\t不允许\n表中没有合适的列作为主键怎么办？\t\t\t\t添加一个自动增长列\n   如果标识列A的初始值为1，增长量为1，则输入三行数据以后，再删除两行，下次再输入数据行的时候，标识值从多少开始？  从4开始\n\n#### 列属性——唯一键\n特点：不能重复，可以为空\n一个表可以有多个唯一键\n作用：\n1、\t保证数据完整性\n2、\t加快数据访问\n\n##### 添加唯一键【创建表的时候添加唯一键】\nunique key\nunique \n\n##### 添加唯一键【创建表的时候添加唯一键】\nunique key(stuname)\nunique(stuadd)\n\n##### 设置名字的唯一键\n``unique key `name` (`stuname`)``\nname：唯一键名字\nstuname：字段名字\n\n##### 添加唯一键【修改表的时候添加唯一键】\n\n```\nmysql> create table stu(\n    -> id int primary key,\n    -> stuname varchar(20),\n    -> stuadd varchar(100)\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n添加唯一键\n\n```\nmysql> alter table stu add unique key(stuname);   --key可以省略\nmysql> alter table stu add unique (stuadd);\n```\n\n一次添加多个唯一键\n``mysql>alter table stu add unique(stuname),add unique(stuadd);``\n\n##### 查看唯一键\n``mysql>show create talbe stu\\G``\n\n##### 添加组合唯一键\n\n##### 删除唯一键\n通过唯一键的名字来删除唯一键\n语法：``alter table 表名 drop index 唯一键名称``\n``mysql>alter talbe stu drop index stuname;``\n\n##### 列属性——备注（comment）\n\n##### SQL注释\n单行注释：--或#\n多行注释：/*    */\n\n#### 数据完整性\n##### 保证实体完整性\n1、\t主键约束\n2、\t唯一约束\n3、\t自动增长列\n\n##### 保证域完整性\n1、\t数据类型约束\n2、\t非空约束\n3、\t默认值约束\n##### 保证引用完整性\n1、外键约束：从表中的公共字段是主表的外键\n##### 保证自定义完整性\n1、\t存储过程\n2、\t触发器\n##### 主表和从表\n两个表建立关系（两个表只要有公共字段就有关系），一个表称为主表，一个表称为从表。\n外键约束可以实现：\n1、\t主表中没有的从表中不允许插入\n2、\t从表中有的主表中不允许删除\n3、\t不能更改主表中的值而导致从表中的记录孤立存在。\n4、\t先删除从表，再删除主表\n\n#### 外键（foreign key）\n1、\t外键：从表中的公共字段，公共字段的名字可以不一样，但是数据类型必须一样。\n2、\t外键约束用来保证引用完整性\n\n##### 添加外键\n**foreign key (id) references stuinfo(stuno);**\n方法一：创建表的时候添加外键\n\nreferences：参照\n\n测试：\n\n+ 主表中没有的，从表中不允许插入\n\n```\n先插主表，在插从表\n\nmysql> insert into stuinfo values (1,'tom');\nQuery OK, 1 row affected (0.00 sec)\nmysql> insert into stumarks values (1,77);\nQuery OK, 1 row affected (0.00 sec)\n```\n\n+ 从表中有的，主表中不能删除\n\n+ 不能更改主表的数据后使得从表的数据孤立\n\n方法二：修改表的时候添加外键\n语法：``alter table stumarks add foreign key (id) references stuinfo(stuno);``\n\n```\nmysql> create table stuinfo(\n    -> stuno char(4) primary key,\n    -> stuname varchar(20) not null\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> create table stumarks(\n    -> id char(4) primary key,\n    -> score int\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> alter table stumarks add foreign key (id) references stuinfo(stuno);\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>要创建外键必须是innodb引擎，myisam不支持外键约束\n\n**创建外键的时候，给外键取名**\n``alter table stumarks add constraint `FK1` foreign key(id) references stuinfo(stuno);``\n>constraint：约束\n\n##### 删除外键\n\n通过外键的名字删除外键\n语法：``alter table 表名 drop foreign key `外键名` ``\n\n```\nmysql>alter talbe stumarks drop foreign key `FK1` \n```\n\n>如果要在某个字段上添加外键约束，改字段必须要有索引才可以。如果该字段已经存在索引，则直接使用，否则MySQL自动生成索引。\n\n##### 外键操作\n1、\t严格操作（前面讲的是严格操作）\n2、\t置空操作（set null）：如果主表记录删除或更新，从表置空\n3、\t级联操作（cascade）：如果主表记录删除或更新，从表级联\n>一般来说：主表删除的时候，从表置空操作，主表更新的时候，从表级联操作。\n语法：foreign key(外键) references 主表(关键字段) [主表删除时候的动作] [主表更新时候的动作]\n\n```\nmysql> create table stumarks(\n    -> id int auto_increment primary key,\n    -> stuno char(4),\n    -> stuscore tinyint(3),\n    -> foreign key(stuno) references stuinfo(stuno) on delete set null on update cascade\n    -> );\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n```\n--错误案例--\ncreate table stuinfo(\nstuno char(4) primary key,\nstuname varchar(20) not null\n);\n\ncreate table stumarks(\nid char(4) primary key,\nscore int\n);\n\nalter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;\n\n--正确案例--\ncreate table stuinfo(\nstuno char(4) primary key,\nstuname varchar(20) not null\n);\n\ncreate table stumarks(\nid1 char(4) primary key,\nid char(4),\nscore int\n);\n\nalter table stumarks add constraint FK1 foreign key (id) references stuinfo(stuno) on delete set null on update cascade;\n```\n\n>使用alter修改表 去创建外键时，是否不能够同时指定制空约束和级联约束？\n主键不能set null ,所以外键表中新增主键，将外键作为非主键，此问题与alter的设置无关\n``foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade;``\n\n```\nmysql> create table stuinfo(\n    -> stuno char(4) primary key,\n    -> stuname varchar(20) not null\n    -> );\nQuery OK, 0 rows affected (0.02 sec)\n//主键与非主键之间的关系，主键是不能set null的，所有使用非主键作为外键\nmysql> create table stumarks(\n    -> id int auto_increment primary key,\n    -> stuno char(4),\n\t    -> score int,\n\t    -> foreign key (stuno) references stuinfo(stuno) on delete set null on update cascade\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into stuinfo values ('1001','tom'),('1002','berry');\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> insert into stumarks values (null,'1001',88),(null,'1002',99);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | 1001  |    88 |\n|  2 | 1002  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n\nmysql> select * from stuinfo;\n+-------+---------+\n| stuno | stuname |\n+-------+---------+\n| 1001  | tom     |\n| 1002  | berry   |\n+-------+---------+\n2 rows in set (0.00 sec)\n\nmysql> delete from stuinfo where stuno='1001';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | NULL  |    88 |\n|  2 | 1002  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n\nmysql> update stuinfo set stuno='1003' where stuno='1002';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from stumarks;\n+----+-------+-------+\n| id | stuno | score |\n+----+-------+-------+\n|  1 | NULL  |    88 |\n|  2 | 1003  |    99 |\n+----+-------+-------+\n2 rows in set (0.00 sec)\n```\n\n### 再来一戳，外键级联\n```\nALTER TABLE stumarks DROP FOREIGN KEY `FK1`;\n\nDROP TABLE\nIF EXISTS stuinfo;\n\nDROP TABLE\nIF EXISTS stumarks;\n\nCREATE TABLE stuinfo(\n    stuno CHAR(4) PRIMARY KEY ,\n    stuname VARCHAR(10)\n);\n\nCREATE TABLE stumarks(\n    id INT auto_increment PRIMARY KEY ,\n    stuno CHAR(4) UNIQUE KEY,\n    stuscore TINYINT(3) ,\n    CONSTRAINT `FK1` FOREIGN KEY(stuno) REFERENCES stuinfo(stuno) ON DELETE\nSET NULL ON UPDATE CASCADE\n);\n```\n\n>经验总结：设置级联外键由于 on delete set null 的原因不能设置外键为主键，解决外键数据完整的方法是给外键增加为一件 unique key;\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq000aupgwi2gevhrod"},{"layout":"post","title":"异步的JavaScript和XML","date":"2015-10-05T14:07:14.000Z","_content":"# 概念介绍\nAJAX的全称\nAsynchronous JavaScript and XML\n异步的JavaScript和XML\n\n作用：在无需重新加载整个网页的情况下，能够更新部分网页的技术\n通过少量数据交换，实现异部局部更新\n\n应用：社交软件，地图\n\n操作步骤：\n1、利用html+css来实现页面，表达信息；\n2、用XMLHttpRequest和web服务器进行数据的异步交换\n3、运营js操作DOM，实现动态局部刷新；\n\nXMLHttpRequest对象的出现分割了同步和异步。XMLHttpRequest出现之前是同步的，出现之后是异步的。\n同步：页面请求实时传给服务器，导致必填数据没有填的时候，要回到页面上重新从头填写，耗时长、客户体验差。\n异步：在页面必填项写上必填选项，不用通过传给服务器判断必填内容是否已经填写完整，耗时短、用户体验强。\n\n# HTTP请求\n一个完整地HTTP请求过程，通常有7个步骤\n1.建立TCP连接\n2.Web浏览器向Web服务器发送请求命令\n3.Web浏览器发送请求头信息\n4.Web服务器应答\n5.Web服务器发送应答头信息\n6.Web服务器向浏览器发送数据\n7.Web服务器关闭TCP连接\n\n一个HTTP请求一般由四部分组成\n1.HTTP请求的方法或动作，比如是GET还是POST请求\n2.正在请求的URL，总得知道请求的地址是什么吧\n3.请求头，包含一些客户端环境信息，身份验证信息等\n4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等\n\n一个HTTP响应一般由三部分组成\n1.一个数字和文字组成的状态码，用来显示请求是成功还是失败\n2.响应头，响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等\n3.响应体，也就是响应正文\n\nGET：\n+ 一般用于信息获取\n+ 使用URL传递参数\n+ 对所发送信息的数量也有限制，一般在2000个字符\n\nPOST：\n+ 一般用于修改服务器上的资源\n+ 对所发送信息的数量无限制\n\n\n# HTTP状态码\nHTTP状态码由3位数字构成，其中首位数字定义了状态码的类型：\n1XX：信息类，表示收到Web浏览器请求，正在进一步的处理中。\n2XX：成功，表示用户请求被正确接收，理解和处理，例如：200 OK\n3XX：重定向，表示请求没有成功，客户必须采取进一步的动作\n4XX：客户端错误，表示客户端提交的请求有错误，例如：400 NOT FOUND 意味着请求中所引起的文档不存在\n5XX：服务器错误，表示服务器不能完成对请求的处理：如500\n\n# XMLHttpRequest发送请求\nvar request = new XMLHttpRequset();\n`open(method,url,async)`\n`send(string)`\n\nGET 发送请求\n\n```\nrequest.open('GET','get.php?id=55',true);\nrequest.send();\n```\n\nPOST 发送请求\n\n```\nrequest.open(\"POST\",\"create.php\",true);\nrequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\nrequest.send(\"name=uiste&sex=man\");\n```\n\n# XMLHttpRequset取得响应\nresponseText：获得字符串形式的响应数据\nresponseXML： 获得XML形式的响应数据\nstatus和statusText：以数字和文本形式返回HTTP状态码\ngetAllResponseHeader()：获取所有的响应报头\ngetResponseHeader()：查询响应中的某个字段的值\n\n# readyState属性\n0：请求未初始化，open还没有调用\n1：服务器连接已建立，open已经调用了\n2：请求已接收，也就是接收到头信息了\n3：请求处理中，也就是接收到响应主体了\n4：请求已完成，且响应已就绪，也就是响应完成了\n\n# 源码案例\n![AJAX](http://7xwlfk.com1.z0.glb.clouddn.com/AJAX.png)\n\n---\n## json\n\n```javascript\n<script>\ndocument.getElementById(\"search\").onclick = function() { \n\tvar request = new XMLHttpRequest();\n\trequest.open(\"GET\", \"serverjson.php?number=\" + document.getElementById(\"keyword\").value);\n\trequest.send();\n\trequest.onreadystatechange = function() {\n\t\tif (request.readyState===4) {\n\t\t\tif (request.status===200) { \n\t\t\t\tvar data = JSON.parse(request.responseText);\n\t\t\t\tif (data.success) { \n\t\t\t\t\tdocument.getElementById(\"searchResult\").innerHTML = data.msg;\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById(\"searchResult\").innerHTML = \"出现错误：\" + data.msg;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talert(\"发生错误：\" + request.status);\n\t\t\t}\n\t\t} \n\t}\n}\n\ndocument.getElementById(\"save\").onclick = function() { \n\tvar request = new XMLHttpRequest();\n\trequest.open(\"POST\", \"serverjson.php\");\n\tvar data = \"name=\" + document.getElementById(\"staffName\").value \n\t                  + \"&number=\" + document.getElementById(\"staffNumber\").value \n\t                  + \"&sex=\" + document.getElementById(\"staffSex\").value \n\t                  + \"&job=\" + document.getElementById(\"staffJob\").value;\n\trequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\trequest.send(data);\n\trequest.onreadystatechange = function() {\n\t\tif (request.readyState===4) {\n\t\t\tif (request.status===200) { \n\t\t\t\tvar data = JSON.parse(request.responseText);\n\t\t\t\tif (data.success) { \n\t\t\t\t\tdocument.getElementById(\"createResult\").innerHTML = data.msg;\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById(\"createResult\").innerHTML = \"出现错误：\" + data.msg;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talert(\"发生错误：\" + request.status);\n\t\t\t}\n\t\t} \n\t}\n}\n</script>\n```\n\n```php\n<?php\n//设置页面内容是html编码格式是utf-8\nheader(\"Content-Type: text/plain;charset=utf-8\"); \n//header(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误\"}';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = '{\"success\":false,\"msg\":\"没有找到员工。\"}';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = '{\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] . \n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"}';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n---\n## jQuery\n\n```javascript\n<script>\n$(document).ready(function(){ \n\t$(\"#search\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"GET\", \t\n\t\t\turl: \"http://127.0.0.1:8080/ajaxdemo/serverjson2.php?number=\" + $(\"#keyword\").val(),\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data) {\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#searchResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#searchResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n\t$(\"#save\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"POST\", \t\n\t\t\turl: \"serverjson.php\",\n\t\t\tdata: {\n\t\t\t\tname: $(\"#staffName\").val(), \n\t\t\t\tnumber: $(\"#staffNumber\").val(), \n\t\t\t\tsex: $(\"#staffSex\").val(), \n\t\t\t\tjob: $(\"#staffJob\").val()\n\t\t\t},\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data){\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#createResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#createResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n});\n</script>\n```\n\n```\n<?php\n//设置页面内容是html编码格式是utf-8\n//header(\"Content-Type: text/plain;charset=utf-8\"); \nheader('Access-Control-Allow-Origin:*');\nheader('Access-Control-Allow-Methods:POST,GET');\nheader('Access-Control-Allow-Credentials:true'); \nheader(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误\"}';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = '{\"success\":false,\"msg\":\"没有找到员工。\"}';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = '{\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] . \n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"}';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n---\n## jQuery-json\n\n```\n<script>\n$(document).ready(function(){ \n\t$(\"#search\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"GET\", \t\n\t\t\turl: \"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php?number=\" + $(\"#keyword\").val(),\n\t\t\tdataType: \"jsonp\",\n\t\t\tjsonp: \"callback\",\n\t\t\tsuccess: function(data) {\n\t\t\t\tif (data.success) {\n\t\t\t\t\t$(\"#searchResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#searchResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n\t\n\t$(\"#save\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"POST\", \t\n\t\t\turl: \"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php\",\n\t\t\tdata: {\n\t\t\t\tname: $(\"#staffName\").val(), \n\t\t\t\tnumber: $(\"#staffNumber\").val(), \n\t\t\t\tsex: $(\"#staffSex\").val(), \n\t\t\t\tjob: $(\"#staffJob\").val()\n\t\t\t},\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data){\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#createResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#createResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n});\n</script>\n```\n\n```\n<?php\n//设置页面内容是html编码格式是utf-8\n//header(\"Content-Type: text/plain;charset=utf-8\"); \nheader(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t$jsonp = $_GET[\"callback\"];\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo $jsonp . '({\"success\":false,\"msg\":\"参数错误\"})';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = $jsonp . '({\"success\":false,\"msg\":\"没有找到员工。\"})';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = $jsonp . '({\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] .\n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"})';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n","source":"_posts/2015/201510/20151005-1.md","raw":"layout: post\ntitle: 异步的JavaScript和XML\ndate: 2015-10-05 22:07:14\ntags:\n- AJAX\n---\n# 概念介绍\nAJAX的全称\nAsynchronous JavaScript and XML\n异步的JavaScript和XML\n\n作用：在无需重新加载整个网页的情况下，能够更新部分网页的技术\n通过少量数据交换，实现异部局部更新\n\n应用：社交软件，地图\n\n操作步骤：\n1、利用html+css来实现页面，表达信息；\n2、用XMLHttpRequest和web服务器进行数据的异步交换\n3、运营js操作DOM，实现动态局部刷新；\n\nXMLHttpRequest对象的出现分割了同步和异步。XMLHttpRequest出现之前是同步的，出现之后是异步的。\n同步：页面请求实时传给服务器，导致必填数据没有填的时候，要回到页面上重新从头填写，耗时长、客户体验差。\n异步：在页面必填项写上必填选项，不用通过传给服务器判断必填内容是否已经填写完整，耗时短、用户体验强。\n\n# HTTP请求\n一个完整地HTTP请求过程，通常有7个步骤\n1.建立TCP连接\n2.Web浏览器向Web服务器发送请求命令\n3.Web浏览器发送请求头信息\n4.Web服务器应答\n5.Web服务器发送应答头信息\n6.Web服务器向浏览器发送数据\n7.Web服务器关闭TCP连接\n\n一个HTTP请求一般由四部分组成\n1.HTTP请求的方法或动作，比如是GET还是POST请求\n2.正在请求的URL，总得知道请求的地址是什么吧\n3.请求头，包含一些客户端环境信息，身份验证信息等\n4.请求体，也就是请求正文，请求正文中可以包含客户提交的查询字符串信息，表单信息等等\n\n一个HTTP响应一般由三部分组成\n1.一个数字和文字组成的状态码，用来显示请求是成功还是失败\n2.响应头，响应头也和请求头一样包含许多有用的信息，例如服务器类型、日期时间、内容类型和长度等\n3.响应体，也就是响应正文\n\nGET：\n+ 一般用于信息获取\n+ 使用URL传递参数\n+ 对所发送信息的数量也有限制，一般在2000个字符\n\nPOST：\n+ 一般用于修改服务器上的资源\n+ 对所发送信息的数量无限制\n\n\n# HTTP状态码\nHTTP状态码由3位数字构成，其中首位数字定义了状态码的类型：\n1XX：信息类，表示收到Web浏览器请求，正在进一步的处理中。\n2XX：成功，表示用户请求被正确接收，理解和处理，例如：200 OK\n3XX：重定向，表示请求没有成功，客户必须采取进一步的动作\n4XX：客户端错误，表示客户端提交的请求有错误，例如：400 NOT FOUND 意味着请求中所引起的文档不存在\n5XX：服务器错误，表示服务器不能完成对请求的处理：如500\n\n# XMLHttpRequest发送请求\nvar request = new XMLHttpRequset();\n`open(method,url,async)`\n`send(string)`\n\nGET 发送请求\n\n```\nrequest.open('GET','get.php?id=55',true);\nrequest.send();\n```\n\nPOST 发送请求\n\n```\nrequest.open(\"POST\",\"create.php\",true);\nrequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\nrequest.send(\"name=uiste&sex=man\");\n```\n\n# XMLHttpRequset取得响应\nresponseText：获得字符串形式的响应数据\nresponseXML： 获得XML形式的响应数据\nstatus和statusText：以数字和文本形式返回HTTP状态码\ngetAllResponseHeader()：获取所有的响应报头\ngetResponseHeader()：查询响应中的某个字段的值\n\n# readyState属性\n0：请求未初始化，open还没有调用\n1：服务器连接已建立，open已经调用了\n2：请求已接收，也就是接收到头信息了\n3：请求处理中，也就是接收到响应主体了\n4：请求已完成，且响应已就绪，也就是响应完成了\n\n# 源码案例\n![AJAX](http://7xwlfk.com1.z0.glb.clouddn.com/AJAX.png)\n\n---\n## json\n\n```javascript\n<script>\ndocument.getElementById(\"search\").onclick = function() { \n\tvar request = new XMLHttpRequest();\n\trequest.open(\"GET\", \"serverjson.php?number=\" + document.getElementById(\"keyword\").value);\n\trequest.send();\n\trequest.onreadystatechange = function() {\n\t\tif (request.readyState===4) {\n\t\t\tif (request.status===200) { \n\t\t\t\tvar data = JSON.parse(request.responseText);\n\t\t\t\tif (data.success) { \n\t\t\t\t\tdocument.getElementById(\"searchResult\").innerHTML = data.msg;\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById(\"searchResult\").innerHTML = \"出现错误：\" + data.msg;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talert(\"发生错误：\" + request.status);\n\t\t\t}\n\t\t} \n\t}\n}\n\ndocument.getElementById(\"save\").onclick = function() { \n\tvar request = new XMLHttpRequest();\n\trequest.open(\"POST\", \"serverjson.php\");\n\tvar data = \"name=\" + document.getElementById(\"staffName\").value \n\t                  + \"&number=\" + document.getElementById(\"staffNumber\").value \n\t                  + \"&sex=\" + document.getElementById(\"staffSex\").value \n\t                  + \"&job=\" + document.getElementById(\"staffJob\").value;\n\trequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\trequest.send(data);\n\trequest.onreadystatechange = function() {\n\t\tif (request.readyState===4) {\n\t\t\tif (request.status===200) { \n\t\t\t\tvar data = JSON.parse(request.responseText);\n\t\t\t\tif (data.success) { \n\t\t\t\t\tdocument.getElementById(\"createResult\").innerHTML = data.msg;\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById(\"createResult\").innerHTML = \"出现错误：\" + data.msg;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\talert(\"发生错误：\" + request.status);\n\t\t\t}\n\t\t} \n\t}\n}\n</script>\n```\n\n```php\n<?php\n//设置页面内容是html编码格式是utf-8\nheader(\"Content-Type: text/plain;charset=utf-8\"); \n//header(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误\"}';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = '{\"success\":false,\"msg\":\"没有找到员工。\"}';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = '{\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] . \n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"}';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n---\n## jQuery\n\n```javascript\n<script>\n$(document).ready(function(){ \n\t$(\"#search\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"GET\", \t\n\t\t\turl: \"http://127.0.0.1:8080/ajaxdemo/serverjson2.php?number=\" + $(\"#keyword\").val(),\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data) {\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#searchResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#searchResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n\t$(\"#save\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"POST\", \t\n\t\t\turl: \"serverjson.php\",\n\t\t\tdata: {\n\t\t\t\tname: $(\"#staffName\").val(), \n\t\t\t\tnumber: $(\"#staffNumber\").val(), \n\t\t\t\tsex: $(\"#staffSex\").val(), \n\t\t\t\tjob: $(\"#staffJob\").val()\n\t\t\t},\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data){\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#createResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#createResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n});\n</script>\n```\n\n```\n<?php\n//设置页面内容是html编码格式是utf-8\n//header(\"Content-Type: text/plain;charset=utf-8\"); \nheader('Access-Control-Allow-Origin:*');\nheader('Access-Control-Allow-Methods:POST,GET');\nheader('Access-Control-Allow-Credentials:true'); \nheader(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误\"}';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = '{\"success\":false,\"msg\":\"没有找到员工。\"}';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = '{\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] . \n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"}';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n---\n## jQuery-json\n\n```\n<script>\n$(document).ready(function(){ \n\t$(\"#search\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"GET\", \t\n\t\t\turl: \"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php?number=\" + $(\"#keyword\").val(),\n\t\t\tdataType: \"jsonp\",\n\t\t\tjsonp: \"callback\",\n\t\t\tsuccess: function(data) {\n\t\t\t\tif (data.success) {\n\t\t\t\t\t$(\"#searchResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#searchResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n\t\n\t$(\"#save\").click(function(){ \n\t\t$.ajax({ \n\t\t    type: \"POST\", \t\n\t\t\turl: \"http://127.0.0.1:8000/ajaxdemo/serverjsonp.php\",\n\t\t\tdata: {\n\t\t\t\tname: $(\"#staffName\").val(), \n\t\t\t\tnumber: $(\"#staffNumber\").val(), \n\t\t\t\tsex: $(\"#staffSex\").val(), \n\t\t\t\tjob: $(\"#staffJob\").val()\n\t\t\t},\n\t\t\tdataType: \"json\",\n\t\t\tsuccess: function(data){\n\t\t\t\tif (data.success) { \n\t\t\t\t\t$(\"#createResult\").html(data.msg);\n\t\t\t\t} else {\n\t\t\t\t\t$(\"#createResult\").html(\"出现错误：\" + data.msg);\n\t\t\t\t}  \n\t\t\t},\n\t\t\terror: function(jqXHR){     \n\t\t\t   alert(\"发生错误：\" + jqXHR.status);  \n\t\t\t},     \n\t\t});\n\t});\n});\n</script>\n```\n\n```\n<?php\n//设置页面内容是html编码格式是utf-8\n//header(\"Content-Type: text/plain;charset=utf-8\"); \nheader(\"Content-Type: application/json;charset=utf-8\"); \n//header(\"Content-Type: text/xml;charset=utf-8\"); \n//header(\"Content-Type: text/html;charset=utf-8\"); \n//header(\"Content-Type: application/javascript;charset=utf-8\"); \n\n//定义一个多维数组，包含员工的信息，每条员工信息为一个数组\n$staff = array\n\t(\n\t\tarray(\"name\" => \"洪七\", \"number\" => \"101\", \"sex\" => \"男\", \"job\" => \"总经理\"),\n\t\tarray(\"name\" => \"郭靖\", \"number\" => \"102\", \"sex\" => \"男\", \"job\" => \"开发工程师\"),\n\t\tarray(\"name\" => \"黄蓉\", \"number\" => \"103\", \"sex\" => \"女\", \"job\" => \"产品经理\")\n\t);\n\n//判断如果是get请求，则进行搜索；如果是POST请求，则进行新建\n//$_SERVER是一个超全局变量，在一个脚本的全部作用域中都可用，不用使用global关键字\n//$_SERVER[\"REQUEST_METHOD\"]返回访问页面使用的请求方法\nif ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") {\n\tsearch();\n} elseif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n\tcreate();\n}\n\n//通过员工编号搜索员工\nfunction search(){\n\t$jsonp = $_GET[\"callback\"];\n\t//检查是否有员工编号的参数\n\t//isset检测变量是否设置；empty判断值为否为空\n\t//超全局变量 $_GET 和 $_POST 用于收集表单数据\n\tif (!isset($_GET[\"number\"]) || empty($_GET[\"number\"])) {\n\t\techo $jsonp . '({\"success\":false,\"msg\":\"参数错误\"})';\n\t\treturn;\n\t}\n\t//函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n\t//global 关键词用于访问函数内的全局变量\n\tglobal $staff;\n\t//获取number参数\n\t$number = $_GET[\"number\"];\n\t$result = $jsonp . '({\"success\":false,\"msg\":\"没有找到员工。\"})';\n\t\n\t//遍历$staff多维数组，查找key值为number的员工是否存在，如果存在，则修改返回结果\n\tforeach ($staff as $value) {\n\t\tif ($value[\"number\"] == $number) {\n\t\t\t$result = $jsonp . '({\"success\":true,\"msg\":\"找到员工：员工编号：' . $value[\"number\"] .\n\t\t\t\t\t\t\t'，员工姓名：' . $value[\"name\"] . \n\t\t\t\t\t\t\t'，员工性别：' . $value[\"sex\"] . \n\t\t\t\t\t\t\t'，员工职位：' . $value[\"job\"] . '\"})';\n\t\t\tbreak;\n\t\t}\n\t}\n    echo $result;\n}\n\n//创建员工\nfunction create(){\n\t//判断信息是否填写完全\n\tif (!isset($_POST[\"name\"]) || empty($_POST[\"name\"])\n\t\t|| !isset($_POST[\"number\"]) || empty($_POST[\"number\"])\n\t\t|| !isset($_POST[\"sex\"]) || empty($_POST[\"sex\"])\n\t\t|| !isset($_POST[\"job\"]) || empty($_POST[\"job\"])) {\n\t\techo '{\"success\":false,\"msg\":\"参数错误，员工信息填写不全\"}';\n\t\treturn;\n\t}\n\t//TODO: 获取POST表单数据并保存到数据库\n\t\n\t//提示保存成功\n\techo '{\"success\":true,\"msg\":\"员工：' . $_POST[\"name\"] . ' 信息保存成功！\"}';\n}\n\n?>\n```\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq100avpgwic732twac"},{"layout":"post","title":"反射 | PDO","date":"2015-10-18T12:52:51.000Z","_content":"# 反射、PDO\n##  反射\n\n反射是指获取类、方法、属性、参数、注释等封闭信息的方法。\n主要用来了解类方法、等内部的代码，反射是通过一系列的类实现的。\n反射：Reflection\n>ReflectionClass 报告类中的信息\nReflectionFunction 报告函数的信息\nRefectionException 报告异常类\nRefectionMethod 报告方法中的信息\n\n\n```php\n<?php\necho '<pre>';\nReflectionClass::export('Exception');\n\nReflectionClass::export('stdClass'); //所有类的父类\n?>\n```\n\n## 通过反射获取类中的属性、方法、常量\n```\nclass Student{\n\tconst PI=3.14;\n\tprivate $name;\n\tpublic static $national='中国'：\n\tpublic function show(){\n\t\techo 'aa';\n\t}\n\tpublic static function test(){\n\t\techo 'bb';\n\t}\n}\n\n//通过反射获取类的信息\n//实例化反射对象\n$reflection new ReflectionClass('Student');//反射Student类的信息\n$consts = $reflection->getConstants();//获取所有常量\n$props = $reflection->getProperties();//获取所有属性\n$methods = $reflection->getMethods();//获取所有方法\n```\n\n>自定义修改的类，方便修改\n\n## 通过反射获取代理类的对象\n通过调用反射类的newInstance()对象，返回反射\n\n`$reflection = new ReflectionClass('Student');`\n`$str $reflection->newInstance();`  //返回类的实例\n\n## 反射可以通过`反向代理`来调用方法\n### 正向代理\n在运行过程中，如果感知到代理服务器存在就是正向代理。（比如：从局域网进入到外网）\n### 反向代理\n在运行过程中，不能感受到代理服务器存在。（比如京东、淘宝，服务器的请求分发我们是不知道的）\n1. 通过ReflectionMethod的invoke()反向调用\n2. 如果反向调用的是静态方法，invoke()参数为null\n```php\n<?php\nclass Student{\n\tprivate $name;\n\tpublic  __construct($name){\n\t\t$this->name = $name;\n\t}\n\tpublic  function show(){\n\techo $this->name,'<br>';\n\t}\n\tpublic static function test(){\n\techo 'i am a boy!<br>';\n\t}\n}\n$reflection = new ReflectionClass('Student');//反射Student类的信息\n$stu = $reflection->new Instance('tom');//实例化Student对象，并传递参数\n$method = new ReflectionMethod('Student','show');//获取关于show()方法的信息\n$method->invoke($stu);//方向代理调用\n$method = new Reflection('Student','test');\n$method->invoke(NULL);\n?>\n```\n\n>反射是为了了解系统类或不知道内部结构的类而使用\n\n# PDO\n## 连接MySQL的方法\n方法一：`mysql_*组` 开启`extension = php_mysql.dll`扩展\n`mysql_connect('localhost','root','aa');`  //链接\n方法二：`mysqli_*组`开启`extension = php_mysqli.dll`扩展\n`$link = mysqli_connect('localhost','root','aa','data');`\n>mysqli是mysql的升级版\n\n## PDO简介\nPDO（PHP data object） PHP数据对象,PDO也是PHP内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口。操作数据库。\nPDO是PHP5以上才支持的特性\n开启相应拓展`extension =  php_pdo_xxx.dll`\n\n## PDO的核心类：PDO、PDOStatement、PDOException\n1. PDO：表示PHP程序和数据库直接的一个连接\n2. PDOStatement：表示一条SQL处理语句，在该语句执行完成时，会返回执行结果\n3. PDOException：表示PDO产生的异常\n## 实例化PDO对象\n### (dsn data source name) 数据源名称\ndsn 的组成结构：`$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;`\n语法：`$pdo = new PDO($dsn,数据库用户名,数据库密码);`\n```\n$dsn = 'mysql:host=127.0.0.1;port=3306;dbname=php6;charset=utf8';\n$pdo = new PDO($dsn,'root','aa');\nvar_dump($pdo);\n```\n\n>本地主机可以省略，端口号是默认值时可以省略，dbname也是可以省略的，如果dbname省略，表示连接上服务器当时没有选择数据库。\n>但是数据库类型(`mysql:`)不可以省略\n>***数据库类型必须小写***\n\n## 使用PDO对象\n$pdo->exec();执行数据操作语句，执行成功返回受影响的记录数，否则返回false；\n$pdo->query();//数据查询语句，返回PDOStatement对象\n### 操作数据\n```php\n<?php\n$dsn = \"mysql:host=127.0.0.1;port=3306;dbname=php06;charset=utf8\";\n$pdo = new PDO($dsn,'root','aa');\n$sql = \"insert into admin values(2,'aa','aa',0,0)\";\n$rs = $pdo->exec($sql);\nif($rs)\n\techo '插入成功<br>生成的编号是：'.$pdo->lastInsertId();\nelseif($rs===0)\n\techo '没有数据变化';\nelseif($rs===false){\n\techo 'SQL语句执行失败';\n\t$error = $pdo->errorInfo();\n\techo '错误码：'.$pdo->errorCode(),'<br>';\n\techo '错误信息：'.$error[2];\n}\n?>\n```\n\n### 查询数据\n```php\n<?php\n$dsn = 'mysqy:host=127.0.0.1;port=3306;dbname=php06;charset=utf8';\n$pdo = new PDO($dsn,'root','aa');\n$sql = \"select * from admin\";\n$stmt = $pdo->query($sql);//返回PDOStatement对象\n//数据输出,array();\n$rows = $stmt->fetch();\n$rows = $stmt->fetch(PDO::FETCH_BOTH);//同上\n$rows = $stmt->fetch(PDO::FETCH_ASSOC);//匹配成关联数组\n$rows = $stmt->fetch(PDO::FETCH_NUM);//匹配成索引数组\n$rows = $stmt->fetch(PDO::FETCH_OBJ);//匹配成对象\n/*************************************/\n$rs = $stmt->fetchALL();//匹配所有数据\n$rs = $stmt->fetchALL(PDO::FETCH_ASSOC);//匹配所有数据为关联数组\n/*************************************/\necho $stmt->rowCount(),'<br>';//获取总行数\necho $stmt->columnCount(),'<br>';//获取总列数\n/*************************************/\n//获取一条数据，匹配成类的对象\n$obj = $stmt->fetchObject();\nvar_dump($obj);//PHP顶级父类stdClass类\nclass Person{}\n$obj = $stmt->fetchObject('Person');\n/*************************************/\n$col = $stmt->fetchColumn();//匹配某一行的第0列\n$col = $stmt->fetchCOlumn(1);//匹配某一行的第1列\n/*************************************/\n//将列绑定到变量上，绑定列的时候，列的编号是从1开始\n$stmt->bindColumn(1,$id);//将第一列绑定到$id变量上\n$stmt->bindColumn(2,$admin);//bindColumn('admin',$admin);将admin列绑定到$admin变量上\n$stmt->fetch();\necho $id,'-',$admin;\n$stmt->fetch();\necho $id,'-',$admin;\n?>\n```\n\n>以上测试，均为单行或单模块测试。其它位注释状态\n\n脚下留心\n>可以通过列的索引和列的名称来绑定到变量上\n>绑定列和变量的时候，列的索引从1开始\n\n### 取出全部数据\n```php\n<?php\n//通过循环获取所以数据\nwhile($rows = $stmt->fetch(PDO::FETCH_ASSOC)){\n\techo $rows['id'],'-',$rows['admin'],'<br>';\n}\n//通过内置迭代器遍历\nforeach($stmt as $rows){\n\techo $rows['id'],'-',$rows['admin'],'<br>';\n}\n?>\n```\n\n### PDO事物处理\n```php\n<?php\n$pdo->beginTransaction();//开启事务模式\necho $pdo->exec(\"insert into admin values(null,'11','11',0,0)\");\necho $pdo->lastInsertId();\n$pdo->rollBack(); //回滚事务\n$pdo->commit();//提交事务\n?>\n```\n\n### 预处理语句\n```php\n<?php\n$sql = \"insert into admin values(null,?,?,0,0)\";//?是占位符\n$stmt = $pdo->prepare($sql);//返回PDOStatement对象\n//执行预处理语句\n$stu = array(\n\tarray('aa','aa'),\n\tarray('bb','bb')\n);\n/**********************************/\n//绑定参数并执行（方法一）\nforeach($stu as $s){\n\t$stmt->bindValue(1,$s[0]);\n\t$stmt->bindValue(2,$s[1]);\n\t$stmt->execute();//返回bool值\n}\n/**********************************/\n//绑定参数并执行（方法二）\nforeach($stu as $s){\n\t$stmt->bindParam(1,$s[0]);\n\t$stmt->bindParam(2,$s[1]);\n\t$stmt->execute();//返回bool值\n\t\n}\n/**********************************/\n//绑定参数并执行（方法三）\nforeach($stu as $s){\n\t$stmt->execute($s);//返回bool值\n}\n?>\n```\n\n>词法分析—>语法分析->编译->执行\n>如果一个sql语句要被多次执行，词法分析、语法分析、编译会多次执行，这样效率低下。\n>使用预处理语句，对预处理语句编译后传递不同的参数即可。\n\nbindParam 与 bindValue 的区别\n>bindParam第二个参数是取地址，所以只能传递变量\n>bindValue第二个参数可以传递值也可以传递变量\n\n直接给预处理传递数组的时候要注意\n>数组中值的个数和顺序要和占位符的顺序一致\n\n### 参数占位符\n```php\n<?php\n$sql = \"insert into admin values(null,:p1,:p2,0,0)\";//参数占位符\n$stmt->$pdo->prepare($sql)//预处理语句\n//执行预处理语句\n$stu = array(\n\tarray('aa','aa'),\n\tarray('bb','bb')8\n);\nforeach($stu as $s){\n\t$stmt->bindParam(':p1',$s[0]);\n\t$stmt->bindParam(':p2',$s[1]);\n\t$stmt->execute();\n}\n?>\n```\n\n### PDO 属性\n`$pdo->setAttribute(键,值)；//设置PDO属性`\n`$pdo->getAttribute(键,值)；//获取PDO属性`\n```php\n<?php\n$dsn = 'mysql:dbname=php6';\n$pdo = new PDO($dsn,'root','aa');\n\necho $pdo->getAttribute(PDO::ATTR_AUTOCOMMIT);//自动提交 \n$pdo->setAttribute(PDO::ATTR_CASE,PDO::CASE::UPPER);//强制将列明转换为大写\n$pdo->setAttribute(PDO::ATTR_ERRORMODE,PDO::ERRMODE_WARNING);//错误报告为警告模式\n\n$stmt = $pdo->query('select * from admin');\n$rows = $stmt->fetch(PDO::FETCH_ASSOC);\necho '<pre>';\nvar_dump($rows);\n?>\n```\n\n### PDO异常抛出\nPDO 会自动抛出异常\n```php\n<?php\ntry{\n\t$dsn = 'mysql:dbname=php6';\n\t$pdo = new PDO($dsn,'root','aa');//PDO会自动抛出异常\n\t$pdo -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);//有错误就抛出异常\n\t$stmt = $pdo->query('select * from admin');\n\tvar_dump($Stmt-fetch());\n\t$age =60;\n\tif($age>30)\n\t\tthrow new PDOException('年龄不能超过30');\n}catch(PDOException $e){\n\techo '错误信息：'.$e->getmessage(),'<br>';\n\techo '错误行号：'.$e->getLine(),'<br>';\n}\n?>\n```\n\n## 单例模式实现MyPDO类的封装\n```php\n<?php\nclass MyPDO{\n    private $type;//数据库类型\n    private $host;//主机地址\n    private $port;//端口号\n    private $dbname;//数据库名\n    private $charset;//字符编码\n    private $user;//数据库用户名\n    private $pwd;//数据库密码\n    private $pdo;//PDO对象\n    private static $instance;//当前类的实例\n    //使用的构造函数用来阻止在类的外部实例化\n    private function __construct($param){\n        $this->initParam($param);\n        $this->initPDO();\n    }\n    //私有的__clone()用来阻止在类的外部克隆对象\n    private function __clone(){}\n    //公有的静态方法用来获取当前类的实例\n    public static function getInstance($param=array()){\n        if(!self::$instance instanceof self)\n            self::$instance = new self($param);\n        return self::$instance;\n    }\n    //初始化成员变量\n    private function initParam($param){\n        $this->type = isset($param['type'])?$param['type']:'mysql';\n        $this->host = isset($param['host'])?$param['host']:'localhost';\n        $this->port = isset($param['port'])?$param['port']:'3306';\n        $this->dbname = isset($param['dbname'])?$param['dbname']:'uiste';\n        $this->charset = isset($param['charset'])?$param['charset']:'utf8';\n        $this->user = isset($param['user'])?$param['user']:'root';\n        $this->pwd = isset($param['pwd'])?$param['pwd']:'123456';\n    }\n    //创建PDO对象\n    private function initPDO(){\n        $dsn = \"{$this->type}:host={$this->host};port={$this->port};dbname={$this->dbname};charset={$this->charset}\";\n        $this->pdo = new PDO($dsn,$this->user,$this->pwd);\n    }\n    //执行sql语句,返回PDOStatement对象\n    private function getPDOStatement($sql){\n        return $this->pdo->query($sql);\n    }\n    //判断匹配的类型\n    private function getFetchType($type){\n        $allow_type = array('assoc','num','both');\n        if(!in_array($type,$allow_type))\n            $type='assoc';\n        switch($type){\n            case 'assoc':\n                return PDO::FETCH_ASSOC;\n            case 'num':\n                return PDO::FETCH_NUM;\n            case 'both':\n                return PDO::FETCH_BOTH;\n        }\n    }\n    //获取所有记录，返回二位数组\n    public function getAll($sql,$type='assoc'){\n        $stmt = $this->getPDOStatement($sql);\n        $fetch_type = $this->getFetchType($type);\n        return $stmt->fetchAll($fetch_type);\n    }\n    public function getOne($sql,$type='assoc'){\n        $stmt = $this->getPDOStatement($sql);\n        $fetch_type = $this->getFetchType($type);\n        return $stmt->fetchAll($fetch_type);\n    }\n    public function getColumn($sql){\n        $stmt = $this->getPDOStatement($sql);\n        return $stmt->fetColumn();\n    }\n    //数据库增、删、改,返回受影响的行数\n    public function exec($sql){\n        $result = $this->pdo->exec($sql);\n        if(false!==$result)\n            return $result;\n        else{\n        \t$errorinfo_arr = $this->pdo->errorInfo();\n            echo 'SQL 语句执行失败<br>';\n            echo 'Error SQL：'.$sql.'<br>';\n            echo 'SQLSTATE error code：'.$errorinfo_arr[0].'<br>';\n            echo 'Driver-specific error code：'.$errorinfo_arr[1].'<br>';\n            echo 'Driver-specific error message：'.$errorinfo_arr[2].'<br>';\n        }\n    }\n}\n?>\n```\n\n---\n1. PDO的作用\nPHP数据对象，内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口，操作数据库。\n2. PDO的加载\nPDO是PHP5以上才支持的特性\n需要开启相应拓展`extension =  php_pdo_xxx.dll`\n3. PDO技术中的PDO对象\ndsn 的组成结构：`$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;`\n语法：`$pdo = new PDO($dsn,数据库用户名,数据库密码);`\n4. PDO技术中的PDOStatement对象\n代表一条预处理语句，并在该语句被执行后代表一个相关的结果集。\n`PDOStatement::bindColumn` — 绑定一列到一个 PHP 变量\n`PDOStatement::bindParam` — 绑定一个参数到指定的变量名\n`PDOStatement::bindValue` — 把一个值绑定到一个参数\n`PDOStatement::closeCursor` — 关闭游标，使语句能再次被执行。\n`PDOStatement::columnCount` — 返回结果集中的列数\n`PDOStatement::debugDumpParams` — 打印一条 SQL 预处理命令\n`PDOStatement::errorCode` — 获取跟上一次语句句柄操作相关的 SQLSTATE\n`PDOStatement::errorInfo` — 获取跟上一次语句句柄操作相关的扩展错误信息\n`PDOStatement::execute` — 执行一条预处理语句\n`PDOStatement::fetch` — 从结果集中获取下一行\n`PDOStatement::fetchAll` — 返回一个包含结果集中所有行的数组\n`PDOStatement::fetchColumn` — 从结果集中的下一行返回单独的一列。\n`PDOStatement::fetchObject` — 获取下一行并作为一个对象返回。\n`PDOStatement::getAttribute` — 检索一个语句属性\n`PDOStatement::getColumnMeta` — 返回结果集中一列的元数据\n`PDOStatement::nextRowset` — 在一个多行集语句句柄中推进到下一个行集\n`PDOStatement::rowCount` — 返回受上一个 SQL 语句影响的行数\n`PDOStatement::setAttribute` — 设置一个语句属性\n`PDOStatement::setFetchMode` — 为语句设置默认的获取模式。\n5. PDO技术中的PDOException对象\n代表一个由 PDO 产生的错误。在自己的代码不应抛出一个 PDOException 异常\n6. PDO的操作——插入操作\n$pdo->exec();   //执行数据操作语句，执行成功返回受影响的记录数，否则返回false。\n7. 掌握PDO的操作——写操作\n？？？\n8. 掌握PDO的操作——查询操作\n$pdo->query();  //数据查询语句，返回PDOStatement对象\n9. 掌握PDO的事务操作\n$pdo->beginTransaction(); //开启事务\n$pdo->rollBack(); //回滚事务\n$pdo->commit();//提交事务\n10. 掌握PDO的预处理\n\n```php\n<?php\n$dsn='mysql:host=localhost;port=3306;dbname=php6;charset=utf8';\n$pdo=new PDO($dsn,'root','aa');\n//预处理语句\n$sql=\"insert into admin values (null,?,?,0,0)\"; //?是占位符\n$stmt=$pdo->prepare($sql);  //返回PDOStatement对象\n//执行预处理语句\n$stu=array(\n    array('aa','aa'),\n    array('bb','bb')\n);\n//绑定参数并执行（方法一）\n/*\nforeach($stu as $s){\n    $stmt->bindValue(1, $s[0]);\n    $stmt->bindValue(2, $s[1]);\n    $stmt->execute();   //返回bool值\n}\n */\n//绑定参数并执行（方法二）\n/*\nforeach($stu as $s){\n    $stmt->bindParam(1, $s[0]);\n    $stmt->bindParam(2, $s[1]);\n    $stmt->execute();   //返回bool值\n}\n */\n//绑定参数并执行（方法三）,直接传递数组\nforeach($stu as $s){\n    $stmt->execute($s);   //返回bool值\n}\n?>\n```\n\n```php\n$sql=\"insert into admin values (null,:p1,:p2,0,0)\"; //参数占位符\nforeach ($stu as $s){\n    $stmt->bindParam(':p1', $s[0]); //绑定参数\n    $stmt->bindParam(':p2', $s[1]);\n    $stmt->execute();\n}\n```\n\n11. PDO的属性操作\n$pdo->getAttribute(键)：获取PDO属性\n$pdo->getAttribute(键)：获取PDO属性\n12. PDO的异常处理机制\nPDO会自动抛出异常，其他的地方不能自动抛出\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);设置为自动抛出异常\n\n# 总\n反射：获取类中方法、属性、参数、注释等封闭信息的方法\n发射的父类（reflection）\nReflectionClass:export()：反射出类的内部结构\ngetMethods()：获取所有方法、getProterties()：获取所有属性\ngetConstants()：获取常量\n通过反射类可以创建代理类的对象  newInstance()\n发射通过反向代理调用对象的方法\nPDO（PHP data object）提供了一组一致性的接口，用来访问不同的数据库。\n要使用pdo之前必须开启pdo扩展\nPDO核心类\nPDO：表示PHP和数据库的链接对象\nPDOStatement类，PDO执行sql语句返回的结果\nPDOException：PDO异常\n实例化PDO:\n$dsn=’mysql:host=主机;port=端口号;dbname=数据库名;charset=字符编码’\nPDO($dsn,用户名,密码)\n脚下留心：数据类型要小写\n使用PDO\n$pdo->exec()：执行数据操作语句，返回的受影响的记录数或false\n$pdo->query()：执行数据查询语句，返回的是PDOStatement对象\n$pdo->lastInsertId()：获取生成的id编号\n获取PDOStatement对象中的数据\n$pdo->fetch()：获取一条数据\n$pdo->fetchAll()：获取所有数据\n$pdo->fetchColumn()：获取列\n$pdo->fetchObject()：获取一行数据，并匹配成对象\n$pdo->rowCount()：总行数\n$pdo->columnCount()：总列数\n$pdo->bindColumn()：将列绑定到变量上\n匹配的类型：\nPDO::FETCH_BOTH\nPDO::FETCH_ASSOC\nPDO::FETCH_NUM\nPDO事务\n$pdo->beginTransaction()\n$pdo->rollback()\n$pdo->commit()\n预处理\n$pdo->prepare()\n位置占位符（？）\n参数占位符（:参数名）\n绑定参数\nbindValue()\nbindParam()\n操作数据\n$pdo->getAttribute()\n$pdo->setAttribute()\n异常处理\n默认情况下，如果有错误就报错，不会抛出异常，设置如下语句使得自动抛出异常：$pdo->setAttribute(PDO::ERRMODE,PDO::ERRMODE_EXCEPTION)","source":"_posts/2015/201510/20151018-1.md","raw":"layout: post\ntitle: 反射 | PDO\ndate: 2015-10-18 20:52:51\ntags:\n- 反射\n- PDO\n---\n# 反射、PDO\n##  反射\n\n反射是指获取类、方法、属性、参数、注释等封闭信息的方法。\n主要用来了解类方法、等内部的代码，反射是通过一系列的类实现的。\n反射：Reflection\n>ReflectionClass 报告类中的信息\nReflectionFunction 报告函数的信息\nRefectionException 报告异常类\nRefectionMethod 报告方法中的信息\n\n\n```php\n<?php\necho '<pre>';\nReflectionClass::export('Exception');\n\nReflectionClass::export('stdClass'); //所有类的父类\n?>\n```\n\n## 通过反射获取类中的属性、方法、常量\n```\nclass Student{\n\tconst PI=3.14;\n\tprivate $name;\n\tpublic static $national='中国'：\n\tpublic function show(){\n\t\techo 'aa';\n\t}\n\tpublic static function test(){\n\t\techo 'bb';\n\t}\n}\n\n//通过反射获取类的信息\n//实例化反射对象\n$reflection new ReflectionClass('Student');//反射Student类的信息\n$consts = $reflection->getConstants();//获取所有常量\n$props = $reflection->getProperties();//获取所有属性\n$methods = $reflection->getMethods();//获取所有方法\n```\n\n>自定义修改的类，方便修改\n\n## 通过反射获取代理类的对象\n通过调用反射类的newInstance()对象，返回反射\n\n`$reflection = new ReflectionClass('Student');`\n`$str $reflection->newInstance();`  //返回类的实例\n\n## 反射可以通过`反向代理`来调用方法\n### 正向代理\n在运行过程中，如果感知到代理服务器存在就是正向代理。（比如：从局域网进入到外网）\n### 反向代理\n在运行过程中，不能感受到代理服务器存在。（比如京东、淘宝，服务器的请求分发我们是不知道的）\n1. 通过ReflectionMethod的invoke()反向调用\n2. 如果反向调用的是静态方法，invoke()参数为null\n```php\n<?php\nclass Student{\n\tprivate $name;\n\tpublic  __construct($name){\n\t\t$this->name = $name;\n\t}\n\tpublic  function show(){\n\techo $this->name,'<br>';\n\t}\n\tpublic static function test(){\n\techo 'i am a boy!<br>';\n\t}\n}\n$reflection = new ReflectionClass('Student');//反射Student类的信息\n$stu = $reflection->new Instance('tom');//实例化Student对象，并传递参数\n$method = new ReflectionMethod('Student','show');//获取关于show()方法的信息\n$method->invoke($stu);//方向代理调用\n$method = new Reflection('Student','test');\n$method->invoke(NULL);\n?>\n```\n\n>反射是为了了解系统类或不知道内部结构的类而使用\n\n# PDO\n## 连接MySQL的方法\n方法一：`mysql_*组` 开启`extension = php_mysql.dll`扩展\n`mysql_connect('localhost','root','aa');`  //链接\n方法二：`mysqli_*组`开启`extension = php_mysqli.dll`扩展\n`$link = mysqli_connect('localhost','root','aa','data');`\n>mysqli是mysql的升级版\n\n## PDO简介\nPDO（PHP data object） PHP数据对象,PDO也是PHP内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口。操作数据库。\nPDO是PHP5以上才支持的特性\n开启相应拓展`extension =  php_pdo_xxx.dll`\n\n## PDO的核心类：PDO、PDOStatement、PDOException\n1. PDO：表示PHP程序和数据库直接的一个连接\n2. PDOStatement：表示一条SQL处理语句，在该语句执行完成时，会返回执行结果\n3. PDOException：表示PDO产生的异常\n## 实例化PDO对象\n### (dsn data source name) 数据源名称\ndsn 的组成结构：`$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;`\n语法：`$pdo = new PDO($dsn,数据库用户名,数据库密码);`\n```\n$dsn = 'mysql:host=127.0.0.1;port=3306;dbname=php6;charset=utf8';\n$pdo = new PDO($dsn,'root','aa');\nvar_dump($pdo);\n```\n\n>本地主机可以省略，端口号是默认值时可以省略，dbname也是可以省略的，如果dbname省略，表示连接上服务器当时没有选择数据库。\n>但是数据库类型(`mysql:`)不可以省略\n>***数据库类型必须小写***\n\n## 使用PDO对象\n$pdo->exec();执行数据操作语句，执行成功返回受影响的记录数，否则返回false；\n$pdo->query();//数据查询语句，返回PDOStatement对象\n### 操作数据\n```php\n<?php\n$dsn = \"mysql:host=127.0.0.1;port=3306;dbname=php06;charset=utf8\";\n$pdo = new PDO($dsn,'root','aa');\n$sql = \"insert into admin values(2,'aa','aa',0,0)\";\n$rs = $pdo->exec($sql);\nif($rs)\n\techo '插入成功<br>生成的编号是：'.$pdo->lastInsertId();\nelseif($rs===0)\n\techo '没有数据变化';\nelseif($rs===false){\n\techo 'SQL语句执行失败';\n\t$error = $pdo->errorInfo();\n\techo '错误码：'.$pdo->errorCode(),'<br>';\n\techo '错误信息：'.$error[2];\n}\n?>\n```\n\n### 查询数据\n```php\n<?php\n$dsn = 'mysqy:host=127.0.0.1;port=3306;dbname=php06;charset=utf8';\n$pdo = new PDO($dsn,'root','aa');\n$sql = \"select * from admin\";\n$stmt = $pdo->query($sql);//返回PDOStatement对象\n//数据输出,array();\n$rows = $stmt->fetch();\n$rows = $stmt->fetch(PDO::FETCH_BOTH);//同上\n$rows = $stmt->fetch(PDO::FETCH_ASSOC);//匹配成关联数组\n$rows = $stmt->fetch(PDO::FETCH_NUM);//匹配成索引数组\n$rows = $stmt->fetch(PDO::FETCH_OBJ);//匹配成对象\n/*************************************/\n$rs = $stmt->fetchALL();//匹配所有数据\n$rs = $stmt->fetchALL(PDO::FETCH_ASSOC);//匹配所有数据为关联数组\n/*************************************/\necho $stmt->rowCount(),'<br>';//获取总行数\necho $stmt->columnCount(),'<br>';//获取总列数\n/*************************************/\n//获取一条数据，匹配成类的对象\n$obj = $stmt->fetchObject();\nvar_dump($obj);//PHP顶级父类stdClass类\nclass Person{}\n$obj = $stmt->fetchObject('Person');\n/*************************************/\n$col = $stmt->fetchColumn();//匹配某一行的第0列\n$col = $stmt->fetchCOlumn(1);//匹配某一行的第1列\n/*************************************/\n//将列绑定到变量上，绑定列的时候，列的编号是从1开始\n$stmt->bindColumn(1,$id);//将第一列绑定到$id变量上\n$stmt->bindColumn(2,$admin);//bindColumn('admin',$admin);将admin列绑定到$admin变量上\n$stmt->fetch();\necho $id,'-',$admin;\n$stmt->fetch();\necho $id,'-',$admin;\n?>\n```\n\n>以上测试，均为单行或单模块测试。其它位注释状态\n\n脚下留心\n>可以通过列的索引和列的名称来绑定到变量上\n>绑定列和变量的时候，列的索引从1开始\n\n### 取出全部数据\n```php\n<?php\n//通过循环获取所以数据\nwhile($rows = $stmt->fetch(PDO::FETCH_ASSOC)){\n\techo $rows['id'],'-',$rows['admin'],'<br>';\n}\n//通过内置迭代器遍历\nforeach($stmt as $rows){\n\techo $rows['id'],'-',$rows['admin'],'<br>';\n}\n?>\n```\n\n### PDO事物处理\n```php\n<?php\n$pdo->beginTransaction();//开启事务模式\necho $pdo->exec(\"insert into admin values(null,'11','11',0,0)\");\necho $pdo->lastInsertId();\n$pdo->rollBack(); //回滚事务\n$pdo->commit();//提交事务\n?>\n```\n\n### 预处理语句\n```php\n<?php\n$sql = \"insert into admin values(null,?,?,0,0)\";//?是占位符\n$stmt = $pdo->prepare($sql);//返回PDOStatement对象\n//执行预处理语句\n$stu = array(\n\tarray('aa','aa'),\n\tarray('bb','bb')\n);\n/**********************************/\n//绑定参数并执行（方法一）\nforeach($stu as $s){\n\t$stmt->bindValue(1,$s[0]);\n\t$stmt->bindValue(2,$s[1]);\n\t$stmt->execute();//返回bool值\n}\n/**********************************/\n//绑定参数并执行（方法二）\nforeach($stu as $s){\n\t$stmt->bindParam(1,$s[0]);\n\t$stmt->bindParam(2,$s[1]);\n\t$stmt->execute();//返回bool值\n\t\n}\n/**********************************/\n//绑定参数并执行（方法三）\nforeach($stu as $s){\n\t$stmt->execute($s);//返回bool值\n}\n?>\n```\n\n>词法分析—>语法分析->编译->执行\n>如果一个sql语句要被多次执行，词法分析、语法分析、编译会多次执行，这样效率低下。\n>使用预处理语句，对预处理语句编译后传递不同的参数即可。\n\nbindParam 与 bindValue 的区别\n>bindParam第二个参数是取地址，所以只能传递变量\n>bindValue第二个参数可以传递值也可以传递变量\n\n直接给预处理传递数组的时候要注意\n>数组中值的个数和顺序要和占位符的顺序一致\n\n### 参数占位符\n```php\n<?php\n$sql = \"insert into admin values(null,:p1,:p2,0,0)\";//参数占位符\n$stmt->$pdo->prepare($sql)//预处理语句\n//执行预处理语句\n$stu = array(\n\tarray('aa','aa'),\n\tarray('bb','bb')8\n);\nforeach($stu as $s){\n\t$stmt->bindParam(':p1',$s[0]);\n\t$stmt->bindParam(':p2',$s[1]);\n\t$stmt->execute();\n}\n?>\n```\n\n### PDO 属性\n`$pdo->setAttribute(键,值)；//设置PDO属性`\n`$pdo->getAttribute(键,值)；//获取PDO属性`\n```php\n<?php\n$dsn = 'mysql:dbname=php6';\n$pdo = new PDO($dsn,'root','aa');\n\necho $pdo->getAttribute(PDO::ATTR_AUTOCOMMIT);//自动提交 \n$pdo->setAttribute(PDO::ATTR_CASE,PDO::CASE::UPPER);//强制将列明转换为大写\n$pdo->setAttribute(PDO::ATTR_ERRORMODE,PDO::ERRMODE_WARNING);//错误报告为警告模式\n\n$stmt = $pdo->query('select * from admin');\n$rows = $stmt->fetch(PDO::FETCH_ASSOC);\necho '<pre>';\nvar_dump($rows);\n?>\n```\n\n### PDO异常抛出\nPDO 会自动抛出异常\n```php\n<?php\ntry{\n\t$dsn = 'mysql:dbname=php6';\n\t$pdo = new PDO($dsn,'root','aa');//PDO会自动抛出异常\n\t$pdo -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);//有错误就抛出异常\n\t$stmt = $pdo->query('select * from admin');\n\tvar_dump($Stmt-fetch());\n\t$age =60;\n\tif($age>30)\n\t\tthrow new PDOException('年龄不能超过30');\n}catch(PDOException $e){\n\techo '错误信息：'.$e->getmessage(),'<br>';\n\techo '错误行号：'.$e->getLine(),'<br>';\n}\n?>\n```\n\n## 单例模式实现MyPDO类的封装\n```php\n<?php\nclass MyPDO{\n    private $type;//数据库类型\n    private $host;//主机地址\n    private $port;//端口号\n    private $dbname;//数据库名\n    private $charset;//字符编码\n    private $user;//数据库用户名\n    private $pwd;//数据库密码\n    private $pdo;//PDO对象\n    private static $instance;//当前类的实例\n    //使用的构造函数用来阻止在类的外部实例化\n    private function __construct($param){\n        $this->initParam($param);\n        $this->initPDO();\n    }\n    //私有的__clone()用来阻止在类的外部克隆对象\n    private function __clone(){}\n    //公有的静态方法用来获取当前类的实例\n    public static function getInstance($param=array()){\n        if(!self::$instance instanceof self)\n            self::$instance = new self($param);\n        return self::$instance;\n    }\n    //初始化成员变量\n    private function initParam($param){\n        $this->type = isset($param['type'])?$param['type']:'mysql';\n        $this->host = isset($param['host'])?$param['host']:'localhost';\n        $this->port = isset($param['port'])?$param['port']:'3306';\n        $this->dbname = isset($param['dbname'])?$param['dbname']:'uiste';\n        $this->charset = isset($param['charset'])?$param['charset']:'utf8';\n        $this->user = isset($param['user'])?$param['user']:'root';\n        $this->pwd = isset($param['pwd'])?$param['pwd']:'123456';\n    }\n    //创建PDO对象\n    private function initPDO(){\n        $dsn = \"{$this->type}:host={$this->host};port={$this->port};dbname={$this->dbname};charset={$this->charset}\";\n        $this->pdo = new PDO($dsn,$this->user,$this->pwd);\n    }\n    //执行sql语句,返回PDOStatement对象\n    private function getPDOStatement($sql){\n        return $this->pdo->query($sql);\n    }\n    //判断匹配的类型\n    private function getFetchType($type){\n        $allow_type = array('assoc','num','both');\n        if(!in_array($type,$allow_type))\n            $type='assoc';\n        switch($type){\n            case 'assoc':\n                return PDO::FETCH_ASSOC;\n            case 'num':\n                return PDO::FETCH_NUM;\n            case 'both':\n                return PDO::FETCH_BOTH;\n        }\n    }\n    //获取所有记录，返回二位数组\n    public function getAll($sql,$type='assoc'){\n        $stmt = $this->getPDOStatement($sql);\n        $fetch_type = $this->getFetchType($type);\n        return $stmt->fetchAll($fetch_type);\n    }\n    public function getOne($sql,$type='assoc'){\n        $stmt = $this->getPDOStatement($sql);\n        $fetch_type = $this->getFetchType($type);\n        return $stmt->fetchAll($fetch_type);\n    }\n    public function getColumn($sql){\n        $stmt = $this->getPDOStatement($sql);\n        return $stmt->fetColumn();\n    }\n    //数据库增、删、改,返回受影响的行数\n    public function exec($sql){\n        $result = $this->pdo->exec($sql);\n        if(false!==$result)\n            return $result;\n        else{\n        \t$errorinfo_arr = $this->pdo->errorInfo();\n            echo 'SQL 语句执行失败<br>';\n            echo 'Error SQL：'.$sql.'<br>';\n            echo 'SQLSTATE error code：'.$errorinfo_arr[0].'<br>';\n            echo 'Driver-specific error code：'.$errorinfo_arr[1].'<br>';\n            echo 'Driver-specific error message：'.$errorinfo_arr[2].'<br>';\n        }\n    }\n}\n?>\n```\n\n---\n1. PDO的作用\nPHP数据对象，内置的一组类（有三个），在与PDO相关的三个类中提供了一组访问数据库的轻量级，一致性的接口，无论使用什么数据库，都可以通过一致性的接口，操作数据库。\n2. PDO的加载\nPDO是PHP5以上才支持的特性\n需要开启相应拓展`extension =  php_pdo_xxx.dll`\n3. PDO技术中的PDO对象\ndsn 的组成结构：`$dsn = 数据库类型:host=主机地址;port=端口号;dbname=数据库;charset=字符编码;`\n语法：`$pdo = new PDO($dsn,数据库用户名,数据库密码);`\n4. PDO技术中的PDOStatement对象\n代表一条预处理语句，并在该语句被执行后代表一个相关的结果集。\n`PDOStatement::bindColumn` — 绑定一列到一个 PHP 变量\n`PDOStatement::bindParam` — 绑定一个参数到指定的变量名\n`PDOStatement::bindValue` — 把一个值绑定到一个参数\n`PDOStatement::closeCursor` — 关闭游标，使语句能再次被执行。\n`PDOStatement::columnCount` — 返回结果集中的列数\n`PDOStatement::debugDumpParams` — 打印一条 SQL 预处理命令\n`PDOStatement::errorCode` — 获取跟上一次语句句柄操作相关的 SQLSTATE\n`PDOStatement::errorInfo` — 获取跟上一次语句句柄操作相关的扩展错误信息\n`PDOStatement::execute` — 执行一条预处理语句\n`PDOStatement::fetch` — 从结果集中获取下一行\n`PDOStatement::fetchAll` — 返回一个包含结果集中所有行的数组\n`PDOStatement::fetchColumn` — 从结果集中的下一行返回单独的一列。\n`PDOStatement::fetchObject` — 获取下一行并作为一个对象返回。\n`PDOStatement::getAttribute` — 检索一个语句属性\n`PDOStatement::getColumnMeta` — 返回结果集中一列的元数据\n`PDOStatement::nextRowset` — 在一个多行集语句句柄中推进到下一个行集\n`PDOStatement::rowCount` — 返回受上一个 SQL 语句影响的行数\n`PDOStatement::setAttribute` — 设置一个语句属性\n`PDOStatement::setFetchMode` — 为语句设置默认的获取模式。\n5. PDO技术中的PDOException对象\n代表一个由 PDO 产生的错误。在自己的代码不应抛出一个 PDOException 异常\n6. PDO的操作——插入操作\n$pdo->exec();   //执行数据操作语句，执行成功返回受影响的记录数，否则返回false。\n7. 掌握PDO的操作——写操作\n？？？\n8. 掌握PDO的操作——查询操作\n$pdo->query();  //数据查询语句，返回PDOStatement对象\n9. 掌握PDO的事务操作\n$pdo->beginTransaction(); //开启事务\n$pdo->rollBack(); //回滚事务\n$pdo->commit();//提交事务\n10. 掌握PDO的预处理\n\n```php\n<?php\n$dsn='mysql:host=localhost;port=3306;dbname=php6;charset=utf8';\n$pdo=new PDO($dsn,'root','aa');\n//预处理语句\n$sql=\"insert into admin values (null,?,?,0,0)\"; //?是占位符\n$stmt=$pdo->prepare($sql);  //返回PDOStatement对象\n//执行预处理语句\n$stu=array(\n    array('aa','aa'),\n    array('bb','bb')\n);\n//绑定参数并执行（方法一）\n/*\nforeach($stu as $s){\n    $stmt->bindValue(1, $s[0]);\n    $stmt->bindValue(2, $s[1]);\n    $stmt->execute();   //返回bool值\n}\n */\n//绑定参数并执行（方法二）\n/*\nforeach($stu as $s){\n    $stmt->bindParam(1, $s[0]);\n    $stmt->bindParam(2, $s[1]);\n    $stmt->execute();   //返回bool值\n}\n */\n//绑定参数并执行（方法三）,直接传递数组\nforeach($stu as $s){\n    $stmt->execute($s);   //返回bool值\n}\n?>\n```\n\n```php\n$sql=\"insert into admin values (null,:p1,:p2,0,0)\"; //参数占位符\nforeach ($stu as $s){\n    $stmt->bindParam(':p1', $s[0]); //绑定参数\n    $stmt->bindParam(':p2', $s[1]);\n    $stmt->execute();\n}\n```\n\n11. PDO的属性操作\n$pdo->getAttribute(键)：获取PDO属性\n$pdo->getAttribute(键)：获取PDO属性\n12. PDO的异常处理机制\nPDO会自动抛出异常，其他的地方不能自动抛出\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);设置为自动抛出异常\n\n# 总\n反射：获取类中方法、属性、参数、注释等封闭信息的方法\n发射的父类（reflection）\nReflectionClass:export()：反射出类的内部结构\ngetMethods()：获取所有方法、getProterties()：获取所有属性\ngetConstants()：获取常量\n通过反射类可以创建代理类的对象  newInstance()\n发射通过反向代理调用对象的方法\nPDO（PHP data object）提供了一组一致性的接口，用来访问不同的数据库。\n要使用pdo之前必须开启pdo扩展\nPDO核心类\nPDO：表示PHP和数据库的链接对象\nPDOStatement类，PDO执行sql语句返回的结果\nPDOException：PDO异常\n实例化PDO:\n$dsn=’mysql:host=主机;port=端口号;dbname=数据库名;charset=字符编码’\nPDO($dsn,用户名,密码)\n脚下留心：数据类型要小写\n使用PDO\n$pdo->exec()：执行数据操作语句，返回的受影响的记录数或false\n$pdo->query()：执行数据查询语句，返回的是PDOStatement对象\n$pdo->lastInsertId()：获取生成的id编号\n获取PDOStatement对象中的数据\n$pdo->fetch()：获取一条数据\n$pdo->fetchAll()：获取所有数据\n$pdo->fetchColumn()：获取列\n$pdo->fetchObject()：获取一行数据，并匹配成对象\n$pdo->rowCount()：总行数\n$pdo->columnCount()：总列数\n$pdo->bindColumn()：将列绑定到变量上\n匹配的类型：\nPDO::FETCH_BOTH\nPDO::FETCH_ASSOC\nPDO::FETCH_NUM\nPDO事务\n$pdo->beginTransaction()\n$pdo->rollback()\n$pdo->commit()\n预处理\n$pdo->prepare()\n位置占位符（？）\n参数占位符（:参数名）\n绑定参数\nbindValue()\nbindParam()\n操作数据\n$pdo->getAttribute()\n$pdo->setAttribute()\n异常处理\n默认情况下，如果有错误就报错，不会抛出异常，设置如下语句使得自动抛出异常：$pdo->setAttribute(PDO::ERRMODE,PDO::ERRMODE_EXCEPTION)","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq200axpgwikur6ioom"},{"layout":"post","title":"MySQL 知识、数据库、数据表","date":"2015-08-29T09:18:51.000Z","_content":"### SQL DML 和 DDL\n可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。\nSQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。\n查询和更新指令构成了 SQL 的 DML 部分：\nSELECT - 从数据库表中获取数据\nUPDATE - 更新数据库表中的数据\nDELETE - 从数据库表中删除数据\nINSERT INTO - 向数据库表中插入数据\nSQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。\nSQL 中最重要的 DDL 语句:\nCREATE DATABASE - 创建新数据库\nALTER DATABASE - 修改数据库\nCREATE TABLE - 创建新表\nALTER TABLE - 变更（改变）数据库表\nDROP TABLE - 删除表\nCREATE INDEX - 创建索引（搜索键）\nDROP INDEX - 删除索引\n\n### 数据库发展史\n文件系统-》层次模型-》网状模型-》关系型数据库\n优点：解决了导航的问题、数据完整性得到了解决\n\n缺点：多表查询效率低\n解决方法：使用NOSQL（非关系型数据库，Redis、mongodb等等），在数据库中按照键值对来存储。\n\n### SQL\n结构化查询语言，标准SQL，也叫SQL-92\n\naccess\t微软\tSQL\nSQL Server\t微软\tT-SQL\nOracle\t甲骨文\tPL/SQL\nMySQL\t被甲骨文收购\tMySQL\n\n### windows 服务开启\nwin+R    services.msc 打开服务面板\nnet start    查看已经开启的服务\n\n`net start mysql`      启动服务\n`net stop mysql`     关闭服务\n\n### MySQL客户端连接服务器\n安装文件目录下的：`MySQL 5.5 Command Line Client`\nnavicat 客户端\nPHPmyadmin 客户端\n设置环境变量后：`mysql  -hlocalhost  -uroot -proot  -P3306`   (如果MySQL服务器在本地，IP地址可以省略；如果MySQL服务器用的是3306端口，-P也是可以省略的)\n\n### 退出登录\nexit;\nquit;\n\\q;\nMySQL中的命令后面要加分号，windows命令行的命令后面不用加分号\n\n### 数据库基本概念\n数据库：数据库中存放的是表，一个数据库中可以存放多个表\n表：用来存放数据\n关系：两个表的公共字段\n行：记录，也是实体\n列：字段，也是属性\n表结构\t行\t列\n表数据\t记录\t字段\n面向对象\t实体\t属性\n>表的冗余只能减少，不能杜绝\n\n数据完整性：正确的数据类型，准确的数据范围\n\n### 数据库操作\n\n#### 连接数据库\n`Mac xampp ：$ /Applications/XAMPP/xamppfiles/bin/mysql -hlocalhost -uroot -p -P3306`\n密码初始为空；\n\n#### 创建数据库\n语法：`create database [if not exists] 数据名`\n\n```\nmysql> create database if not exists uiste;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n问题一：\n>如果创建的数据库已存在，就会报错\n解决：创建数据库的时候判断一下数据库是否存在，如果不存在再创建\n\n问题二：\n>如果数据库名是关键字和特殊字符要报错\n解决：在特殊字符、关键字行加上反引号\n``create database `$@%`;``\n\n**为了创建数据库时万无一失，我们可以在所有的数据库名上加上反引号**\n\n#### MySQL数据库的目录\n数据库文件保存的路径在安装MySQL的时候就配置好。\n也可以在`my.ini`配置文件中更改\n\n```\n#Path to the database root\ndatadir = \"F:/wamp/mysql/Data/\"\n```\n\nMac xampp 数据库文件夹：\n`/Applications /XAMPP/xamppfiles/var/mysql`\n\n创建一个数据库，就对应一个文件夹，在文件夹中有一个db.opt文件。在此文件中设置数据库的字符集和校对集\n\n```\ndefault-character-set = utf8\ndefault-collation = utf_general_ci\n```\n\n#### 显示所有数据库【show databases】\n\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| cdcol              |\n| dedecms            |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n| uiste              |\n+--------------------+\n8 rows in set (0.00 sec)\n```\n\n>information_schema：存储了MySQL服务器管理数据库的信息。比如：数据库名、表、字段名、数据类型及访问权限等等\nperformance_schema：MySQL5.5新增的表，用来保存数据库服务器性能的参数\nmysql：MySQL系统数据库，保存的登录用户名，密码，以及每个用户的权限等等\ntest：给用户学习和测试的数据库。\n\n#### 删除数据库\n语法：``drop database [if exists] `数据库名` ``\n\n```\nmysql> drop database if exists uiste;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| cdcol              |\n| dedecms            |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n+--------------------+\n7 rows in set (0.00 sec)\n```\n\n问题：\n>如果删除的数据库不存在，会报错\n解决：删除之前判断一下，如果存在就删除\n\n#### 显示创建数据库的语句\n语法：``show create database 数据库名``\n\n```\nmysql> show create database uiste;\n+----------+------------------------------------------------------------------+\n| Database | Create Database                                                  |\n+----------+------------------------------------------------------------------+\n| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n#### 修改数据库字符编码\n语法：``alter database `数据库名` charset=字符编码``\n\n```\nmysql> alter database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> show create database uiste;\n+----------+----------------------------------------------------------------+\n| Database | Create Database                                                |\n+----------+----------------------------------------------------------------+\n| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET utf8 */ |\n+----------+----------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n#### 选择数据库\n语法：`` use `数据库名 ``\n\n```\nmysql> use uiste;\nDatabase changed\n```\n\n### 表的操作\n#### 创建表\n\n```\ncreate table [if not exists] `表名`(\n\t`字段名` 数据类型 [null|not null] [default] [auto_increment] [primary key] [comment],\n\t字段名 数据类型 …\n)[engine=存储引擎] [charset=字符编码]\n\nnull|not null\t\t是否为空\ndefault:\t\t\t默认值\nauto_increment\t自动增长\nprimary key\t\t主键\ncomment:\t\t\t备注\nengine\t\t\t\t引擎\n```\n\n>表名和字段名如果用了关键字，要用反引号引起来。\n\n创建简单的表\n\n```\nmysql> create table student(\n    -> id int not null auto_increment primary key comment '学生编号',\n    -> name varchar(10) not null comment '学生姓名',\n    -> sex char(4) default '男');\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n创建复杂的表\n\n```\nmysql> create table `goods`(\n    -> `id` int auto_increment primary key comment '商品编号',\n    -> `name` varchar(20) not null comment '商品名称',\n    -> `add` varchar(100) not null default '地址不详' comment '商品产地'\n    -> )engine=innodb charset=utf8 comment '商品表';\nQuery OK, 0 rows affected (0.05 sec)\n```\n\n>create table 数据库名.表名，用于给指定的数据库创建表\n\n```\nmysql> create table uiste.teacher(\n    -> id int auto_increment primary key,\n    -> name varchar(16) not null);\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n#### 数据表文件\n- 一个数据库对应一个文件夹\n- 一个表对应一个或多个文件夹\n引擎是myisam，一个表对应三个文件(不支持外键约束)\n>t1.frm  表结构\nt1.MYD  表数据\nt1.MYI  表索引\n引擎是innodb,一个表对应一个表结构文件\n\n>所有的innodb引擎的数据统一的存放在data\\ibdata1文件中。如果数据量很大，MySQL会自动的创建ibdata2，ibdata3，…，目的就是为了便于管理。\n\nconstraint：约束\n\n#### 显示所有表\n语法：``show tables;``\n\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| student         |\n| teacher         |\n+-----------------+\n2 rows in set (0.00 sec)\n```\n\n#### 显示创建表的语句\n语法：``show create table `表名` ``\n\n```\nmysql> show create table student;\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table   | Create Table                                                                                                                                                                                                                           |\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| student | CREATE TABLE `student` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学生编号',\n  `name` varchar(10) NOT NULL COMMENT '学生姓名',\n  `sex` char(4) DEFAULT '男',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8          |\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n\n```\n\n**将两个字段竖着排列**\n语法：``show create table `表名`\\G ``\n\n```\nmysql> show create table student \\G\n*************************** 1. row ***************************\n       Table: student\nCreate Table: CREATE TABLE `student` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学生编号',\n  `name` varchar(10) NOT NULL COMMENT '学生姓名',\n  `sex` char(4) DEFAULT '男',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n```\n\n#### 查看表结构\n语法：``desc[ribe] `表名` ``\n\n```\nmysql> desc student;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10) | NO   |     | NULL    |                |\n| sex   | char(4)     | YES  |     | 男      |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n\nmysql> describe student;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10) | NO   |     | NULL    |                |\n| sex   | char(4)     | YES  |     | 男      |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n```\n\n>desc 是 describe 的简写\n\n#### 复制表\n语法一：`` create table 新表 select 字段 from 旧表 ``\n\n```\nmysql> create table student2 select * from student;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>特点：不能复制父表的键，能够复制父表的数据\n\n语法二：create table 新表 like 旧表\n\n```\nmysql> create table student3 like student;\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n>特点：只能复制表结构，不能复制表数据\n\n#### 删除表\n语法：``drop table [if exists] 表1，表2,… ``\n\n```\nmysql> drop table if exists student2;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n>如果删除一个不存在的表就会报错，删除的时候可以判断一下，存在就删除\n\n可以一次删除多个表\n\n```\nmysql> drop tables if exists student2,student3;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 修改表\n语法：`` alter table 表名 ``\n\n##### 添加字段\n语法：`` alter table 表名add [column] 字段名 数据类型 [位置] ``\n\n```\nmysql> alter table student add age int(8) after name;\nQuery OK, 0 rows affected (0.20 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>默认字段放在表的最后\n添加 `first` 字段放在表的第一位\n添加 `after name` 放在 name 字段之后\n\n##### 删除字段\n语法：``alter table 表 drop [column] 字段名``\n\n```\nmysql> alter table student drop age;\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改字段(改名)\n语法：``alter table 表 change [column] 原字段名 新字段名 数据类型 …``\n\n```\nmysql> alter table student change sex age int(8);\nQuery OK, 0 rows affected (0.32 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n同时修改多个字段\n\n```\nmysql> alter table student change age myage int(8) comment '我的学生年龄',change name myname varchar(16) not null comment '我的学生姓名';\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改字段（不改名）\n语法：``alter table 表 modify 字段名 字段属性…``\n\n```\nmysql> alter table student modify myage int(3) not null default 18 comment '如果你没 有设置年龄，我就是永远的18岁';\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>只更改字段属性\n\n##### 修改引擎\n语法：``alter table 表名 engine=引擎名``\n\n```\nmysql> alter table student engine=myisam;\nQuery OK, 0 rows affected (0.18 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改表名\n语法：``alter table 表名 rename to 新表名``\n\n```\nmysql> alter table student rename to student2;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n##### 将表移动到其他数据库\n语法：``alter table 表名 rename to 数据库名.数据表名 ``\n\n```\nalter table student2 rename to test.student3;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 数据操作\n##### 插入数据\n语法：``insert into 表名 (字段名, 字段名,…) values (值1, 值1,…)``\n- 插入一条数据\n\n```\nmysql> insert into student (id,name,age) values (1,'小兰',25);\nQuery OK, 1 row affected (0.01 sec)\n```\n\n>1. 插入字段名的顺序和数据库字段名的顺序可以不一致\n2. 插入值的个数、顺序必须和插入字段名的个数、顺序要一致\n\n- 简写方式：\n\n```\nmysql> insert into student values (2,'杜总',24);\nQuery OK, 1 row affected (0.02 sec)\n```\n\n>3. 自动增长列，可以直接插入null。\n\n- 插入默认值和空值\n\n```\nmysql> insert into student values (null,'张宝',null);\nQuery OK, 1 row affected (0.01 sec)\n```\n\n>自动增长列，可以直接插入null\ndefault关键字用来插入默认值，null用来插入空值\n\n- 插入多条数据\n\n```\nmysql> insert into student values (null,'小张',18),(null,'圆哥',18);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n```\n\n- 使用insert…set…插入数据\n\n```\nmysql> insert into student set name='赵哥',age=54;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n##### 更新数据\n语法：``update 表名 set 字段=值 [where 条件] [order by 排序] [limit 限制]``\n\n- 将id为三的年龄改为30\n\n```\nmysql> update student set age=30 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```\n\n>需要更改多个内容的时候将需要变更的内容用逗号连接；\n\n- 将id 从大到小数前3名的学生年龄改为16岁\n\n```\nmysql> update student set age=16 order by id desc limit 3;\nQuery OK, 3 rows affected (0.01 sec)\nRows matched: 3  Changed: 3  Warnings: 0\n```\n\n##### 删除数据\n语法：``delete from 表名 [where 条件] [order by 排序] [limit 限制]``\n\n```\nmysql> delete from student where id=9;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n删除id <=7;\n\n```\nmysql> delete from student where id<=7;\nQuery OK, 7 rows affected (0.00 sec)\n```\n\n清空表\n\n```\nmysql> delete from student;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n清空表：truncate table 表名\n\n```\nmysql> truncate table student;\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n>delete from 表和truncate table 表区别？\ndelete from 表：遍历表记录，一条一条的删除\ntruncate table：将原表销毁，再创建一个同结构的新表。就清空表而言，这种方法效率高。\n\n#### 字符集\n字符集：字符在保存和传输时对应的二进制编码集合\n\n##### 数据存储时使用字符集\nMySQL可以在服务器上、数据库、表、字段上设置字符集\n>脚下留心：一般在数据库和表上设置字符集，每个字段设置字符集太麻烦。\n\n##### 数据传输时使用字符集\n发现：在插入数据的时候，如果有中文会报错\n\n```\nmysql> insert into student values (null,'李白');\nERROR 1366 (HY000):Incorrect string value :'\\xC0\\xEE\\xB0\\xD7' for column 'name'\n```\n\n>分析：客户端编码和服务器连接层编码必须一致，如果不一致就会报错。\n\n查看客户端的字符编码\n>客户端发送某种编码给服务器，由客户端决定\n客户端编码不能改变\n客户端右键——属性——选项——可以查看当前客户端的字符编码（GBK）\n\n查看服务器的字符编码\n\n```\nmysql> show variables like 'character_set_%';\n+--------------------------+------------------------------------------------+\n| Variable_name            | Value                                          |\n+--------------------------+------------------------------------------------+\n| character_set_client     | utf8                                           |\n| character_set_connection | utf8                                           |\n| character_set_database   | utf8                                           |\n| character_set_filesystem | binary                                         |\n| character_set_results    | utf8                                           |\n| character_set_server     | latin1                                         |\n| character_set_system     | utf8                                           |\n| character_sets_dir       | /Applications/XAMPP/xamppfiles/share/charsets/ |\n+--------------------------+------------------------------------------------+\n8 rows in set (0.01 sec)\n```\n\n>解决：只要将服务器的编码设置成gbk就可以解决\n\n测试：插入中文\n查询：插入中文\n\n原因：结果返回的是utf8，客户端用gbk来解析，所以乱码\n解决：服务器按gbk返回即可\n\n```\nmysql>set character_set_results=gbk;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n查询：结果\n>总结：客户端编码、``character_set_client``、``character_set_results``三个编码的值一致即可操作中文。\n多学一招：我们只要设置``“set names 字符编码”``，就可以更改``character_set_client``、``character_set_results``的值。\n\n##### 查看所有字符集\n\n```\n\nmysql> show character set;\n+----------+-----------------------------+---------------------+--------+\n| Charset  | Description                 | Default collation   | Maxlen |\n+----------+-----------------------------+---------------------+--------+\n| big5     | Big5 Traditional Chinese    | big5_chinese_ci     |      2 |\n| dec8     | DEC West European           | dec8_swedish_ci     |      1 |\n| cp850    | DOS West European           | cp850_general_ci    |      1 |\n| hp8      | HP West European            | hp8_english_ci      |      1 |\n| koi8r    | KOI8-R Relcom Russian       | koi8r_general_ci    |      1 |\n| latin1   | cp1252 West European        | latin1_swedish_ci   |      1 |\n| latin2   | ISO 8859-2 Central European | latin2_general_ci   |      1 |\n| swe7     | 7bit Swedish                | swe7_swedish_ci     |      1 |\n| ascii    | US ASCII                    | ascii_general_ci    |      1 |\n| ujis     | EUC-JP Japanese             | ujis_japanese_ci    |      3 |\n| sjis     | Shift-JIS Japanese          | sjis_japanese_ci    |      2 |\n| hebrew   | ISO 8859-8 Hebrew           | hebrew_general_ci   |      1 |\n| tis620   | TIS620 Thai                 | tis620_thai_ci      |      1 |\n| euckr    | EUC-KR Korean               | euckr_korean_ci     |      2 |\n| koi8u    | KOI8-U Ukrainian            | koi8u_general_ci    |      1 |\n| gb2312   | GB2312 Simplified Chinese   | gb2312_chinese_ci   |      2 |\n| greek    | ISO 8859-7 Greek            | greek_general_ci    |      1 |\n| cp1250   | Windows Central European    | cp1250_general_ci   |      1 |\n| gbk      | GBK Simplified Chinese      | gbk_chinese_ci      |      2 |\n| latin5   | ISO 8859-9 Turkish          | latin5_turkish_ci   |      1 |\n| armscii8 | ARMSCII-8 Armenian          | armscii8_general_ci |      1 |\n| utf8     | UTF-8 Unicode               | utf8_general_ci     |      3 |\n| ucs2     | UCS-2 Unicode               | ucs2_general_ci     |      2 |\n| cp866    | DOS Russian                 | cp866_general_ci    |      1 |\n| keybcs2  | DOS Kamenicky Czech-Slovak  | keybcs2_general_ci  |      1 |\n| macce    | Mac Central European        | macce_general_ci    |      1 |\n| macroman | Mac West European           | macroman_general_ci |      1 |\n| cp852    | DOS Central European        | cp852_general_ci    |      1 |\n| latin7   | ISO 8859-13 Baltic          | latin7_general_ci   |      1 |\n| utf8mb4  | UTF-8 Unicode               | utf8mb4_general_ci  |      4 |\n| cp1251   | Windows Cyrillic            | cp1251_general_ci   |      1 |\n| utf16    | UTF-16 Unicode              | utf16_general_ci    |      4 |\n| utf16le  | UTF-16LE Unicode            | utf16le_general_ci  |      4 |\n| cp1256   | Windows Arabic              | cp1256_general_ci   |      1 |\n| cp1257   | Windows Baltic              | cp1257_general_ci   |      1 |\n| utf32    | UTF-32 Unicode              | utf32_general_ci    |      4 |\n| binary   | Binary pseudo charset       | binary              |      1 |\n| geostd8  | GEOSTD8 Georgian            | geostd8_general_ci  |      1 |\n| cp932    | SJIS for Windows Japanese   | cp932_japanese_ci   |      2 |\n| eucjpms  | UJIS for Windows Japanese   | eucjpms_japanese_ci |      3 |\n+----------+-----------------------------+---------------------+--------+\n40 rows in set (0.01 sec)\n```\n\n#### 校对集\n在某种特定的字符集下，字符和字符的大小关系。比如a和B的大小关系：如果不区分大小写a<B；如果区分大小写a>B。\n脚下留心：不同的校对集他们的比较结果是不一样的\n语法：``collate=校对集``\n创建两个表\n\n```\ncreate table stu1(\nname varchar(20)\n)charset=utf8 collate=utf8_general_ci;\n\ncreate table stu2(\nname varchar(20)\n)charset=utf8 collate=utf8_bin;\n–插入测试数据\ninsert into stu1 values ('a'),('B');\ninsert into stu2 values ('a'),('B');\n```\n\n测试\n\n```\nmysql> select * from stu1 order by name;\n+------+\n| name |\n+------+\n| a    |\n| B    |\n+------+\n2 rows in set (0.01 sec)\n\nmysql> select * from stu2 order by name;\n+------+\n| name |\n+------+\n| B    |\n| a    |\n+------+\n2 rows in set (0.00 sec)\n```\n\n校对集的规则：\n1、_bin:按二进制编码进行比较\n2、_ci:不区分大小写进行比较\n\n**查看所有的校对集**\n\n```\nmysql> show collation;\n+--------------------------+----------+-----+---------+----------+---------+\n| Collation                | Charset  | Id  | Default | Compiled | Sortlen |\n+--------------------------+----------+-----+---------+----------+---------+\n| big5_chinese_ci          | big5     |   1 | Yes     | Yes      |       1 |\n| big5_bin                 | big5     |  84 |         | Yes      |       1 |\n| dec8_swedish_ci          | dec8     |   3 | Yes     | Yes      |       1 |\n| dec8_bin                 | dec8     |  69 |         | Yes      |       1 |\n\n此处省略200多行...\n```\n\n[常用操作命令文件下载](http://oamgu5mjf.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.docx)\n","source":"_posts/2015/201508/20150829-1.md","raw":"layout: post\ntitle: MySQL 知识、数据库、数据表\ndate: 2015-08-29 17:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### SQL DML 和 DDL\n可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。\nSQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。\n查询和更新指令构成了 SQL 的 DML 部分：\nSELECT - 从数据库表中获取数据\nUPDATE - 更新数据库表中的数据\nDELETE - 从数据库表中删除数据\nINSERT INTO - 向数据库表中插入数据\nSQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。\nSQL 中最重要的 DDL 语句:\nCREATE DATABASE - 创建新数据库\nALTER DATABASE - 修改数据库\nCREATE TABLE - 创建新表\nALTER TABLE - 变更（改变）数据库表\nDROP TABLE - 删除表\nCREATE INDEX - 创建索引（搜索键）\nDROP INDEX - 删除索引\n\n### 数据库发展史\n文件系统-》层次模型-》网状模型-》关系型数据库\n优点：解决了导航的问题、数据完整性得到了解决\n\n缺点：多表查询效率低\n解决方法：使用NOSQL（非关系型数据库，Redis、mongodb等等），在数据库中按照键值对来存储。\n\n### SQL\n结构化查询语言，标准SQL，也叫SQL-92\n\naccess\t微软\tSQL\nSQL Server\t微软\tT-SQL\nOracle\t甲骨文\tPL/SQL\nMySQL\t被甲骨文收购\tMySQL\n\n### windows 服务开启\nwin+R    services.msc 打开服务面板\nnet start    查看已经开启的服务\n\n`net start mysql`      启动服务\n`net stop mysql`     关闭服务\n\n### MySQL客户端连接服务器\n安装文件目录下的：`MySQL 5.5 Command Line Client`\nnavicat 客户端\nPHPmyadmin 客户端\n设置环境变量后：`mysql  -hlocalhost  -uroot -proot  -P3306`   (如果MySQL服务器在本地，IP地址可以省略；如果MySQL服务器用的是3306端口，-P也是可以省略的)\n\n### 退出登录\nexit;\nquit;\n\\q;\nMySQL中的命令后面要加分号，windows命令行的命令后面不用加分号\n\n### 数据库基本概念\n数据库：数据库中存放的是表，一个数据库中可以存放多个表\n表：用来存放数据\n关系：两个表的公共字段\n行：记录，也是实体\n列：字段，也是属性\n表结构\t行\t列\n表数据\t记录\t字段\n面向对象\t实体\t属性\n>表的冗余只能减少，不能杜绝\n\n数据完整性：正确的数据类型，准确的数据范围\n\n### 数据库操作\n\n#### 连接数据库\n`Mac xampp ：$ /Applications/XAMPP/xamppfiles/bin/mysql -hlocalhost -uroot -p -P3306`\n密码初始为空；\n\n#### 创建数据库\n语法：`create database [if not exists] 数据名`\n\n```\nmysql> create database if not exists uiste;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n问题一：\n>如果创建的数据库已存在，就会报错\n解决：创建数据库的时候判断一下数据库是否存在，如果不存在再创建\n\n问题二：\n>如果数据库名是关键字和特殊字符要报错\n解决：在特殊字符、关键字行加上反引号\n``create database `$@%`;``\n\n**为了创建数据库时万无一失，我们可以在所有的数据库名上加上反引号**\n\n#### MySQL数据库的目录\n数据库文件保存的路径在安装MySQL的时候就配置好。\n也可以在`my.ini`配置文件中更改\n\n```\n#Path to the database root\ndatadir = \"F:/wamp/mysql/Data/\"\n```\n\nMac xampp 数据库文件夹：\n`/Applications /XAMPP/xamppfiles/var/mysql`\n\n创建一个数据库，就对应一个文件夹，在文件夹中有一个db.opt文件。在此文件中设置数据库的字符集和校对集\n\n```\ndefault-character-set = utf8\ndefault-collation = utf_general_ci\n```\n\n#### 显示所有数据库【show databases】\n\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| cdcol              |\n| dedecms            |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n| uiste              |\n+--------------------+\n8 rows in set (0.00 sec)\n```\n\n>information_schema：存储了MySQL服务器管理数据库的信息。比如：数据库名、表、字段名、数据类型及访问权限等等\nperformance_schema：MySQL5.5新增的表，用来保存数据库服务器性能的参数\nmysql：MySQL系统数据库，保存的登录用户名，密码，以及每个用户的权限等等\ntest：给用户学习和测试的数据库。\n\n#### 删除数据库\n语法：``drop database [if exists] `数据库名` ``\n\n```\nmysql> drop database if exists uiste;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| cdcol              |\n| dedecms            |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n+--------------------+\n7 rows in set (0.00 sec)\n```\n\n问题：\n>如果删除的数据库不存在，会报错\n解决：删除之前判断一下，如果存在就删除\n\n#### 显示创建数据库的语句\n语法：``show create database 数据库名``\n\n```\nmysql> show create database uiste;\n+----------+------------------------------------------------------------------+\n| Database | Create Database                                                  |\n+----------+------------------------------------------------------------------+\n| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n#### 修改数据库字符编码\n语法：``alter database `数据库名` charset=字符编码``\n\n```\nmysql> alter database uiste charset=utf8;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> show create database uiste;\n+----------+----------------------------------------------------------------+\n| Database | Create Database                                                |\n+----------+----------------------------------------------------------------+\n| uiste    | CREATE DATABASE `uiste` /*!40100 DEFAULT CHARACTER SET utf8 */ |\n+----------+----------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n#### 选择数据库\n语法：`` use `数据库名 ``\n\n```\nmysql> use uiste;\nDatabase changed\n```\n\n### 表的操作\n#### 创建表\n\n```\ncreate table [if not exists] `表名`(\n\t`字段名` 数据类型 [null|not null] [default] [auto_increment] [primary key] [comment],\n\t字段名 数据类型 …\n)[engine=存储引擎] [charset=字符编码]\n\nnull|not null\t\t是否为空\ndefault:\t\t\t默认值\nauto_increment\t自动增长\nprimary key\t\t主键\ncomment:\t\t\t备注\nengine\t\t\t\t引擎\n```\n\n>表名和字段名如果用了关键字，要用反引号引起来。\n\n创建简单的表\n\n```\nmysql> create table student(\n    -> id int not null auto_increment primary key comment '学生编号',\n    -> name varchar(10) not null comment '学生姓名',\n    -> sex char(4) default '男');\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n创建复杂的表\n\n```\nmysql> create table `goods`(\n    -> `id` int auto_increment primary key comment '商品编号',\n    -> `name` varchar(20) not null comment '商品名称',\n    -> `add` varchar(100) not null default '地址不详' comment '商品产地'\n    -> )engine=innodb charset=utf8 comment '商品表';\nQuery OK, 0 rows affected (0.05 sec)\n```\n\n>create table 数据库名.表名，用于给指定的数据库创建表\n\n```\nmysql> create table uiste.teacher(\n    -> id int auto_increment primary key,\n    -> name varchar(16) not null);\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n#### 数据表文件\n- 一个数据库对应一个文件夹\n- 一个表对应一个或多个文件夹\n引擎是myisam，一个表对应三个文件(不支持外键约束)\n>t1.frm  表结构\nt1.MYD  表数据\nt1.MYI  表索引\n引擎是innodb,一个表对应一个表结构文件\n\n>所有的innodb引擎的数据统一的存放在data\\ibdata1文件中。如果数据量很大，MySQL会自动的创建ibdata2，ibdata3，…，目的就是为了便于管理。\n\nconstraint：约束\n\n#### 显示所有表\n语法：``show tables;``\n\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| student         |\n| teacher         |\n+-----------------+\n2 rows in set (0.00 sec)\n```\n\n#### 显示创建表的语句\n语法：``show create table `表名` ``\n\n```\nmysql> show create table student;\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table   | Create Table                                                                                                                                                                                                                           |\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| student | CREATE TABLE `student` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学生编号',\n  `name` varchar(10) NOT NULL COMMENT '学生姓名',\n  `sex` char(4) DEFAULT '男',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8          |\n+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n\n```\n\n**将两个字段竖着排列**\n语法：``show create table `表名`\\G ``\n\n```\nmysql> show create table student \\G\n*************************** 1. row ***************************\n       Table: student\nCreate Table: CREATE TABLE `student` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '学生编号',\n  `name` varchar(10) NOT NULL COMMENT '学生姓名',\n  `sex` char(4) DEFAULT '男',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n```\n\n#### 查看表结构\n语法：``desc[ribe] `表名` ``\n\n```\nmysql> desc student;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10) | NO   |     | NULL    |                |\n| sex   | char(4)     | YES  |     | 男      |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n\nmysql> describe student;\n+-------+-------------+------+-----+---------+----------------+\n| Field | Type        | Null | Key | Default | Extra          |\n+-------+-------------+------+-----+---------+----------------+\n| id    | int(11)     | NO   | PRI | NULL    | auto_increment |\n| name  | varchar(10) | NO   |     | NULL    |                |\n| sex   | char(4)     | YES  |     | 男      |                |\n+-------+-------------+------+-----+---------+----------------+\n3 rows in set (0.01 sec)\n```\n\n>desc 是 describe 的简写\n\n#### 复制表\n语法一：`` create table 新表 select 字段 from 旧表 ``\n\n```\nmysql> create table student2 select * from student;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>特点：不能复制父表的键，能够复制父表的数据\n\n语法二：create table 新表 like 旧表\n\n```\nmysql> create table student3 like student;\nQuery OK, 0 rows affected (0.03 sec)\n```\n\n>特点：只能复制表结构，不能复制表数据\n\n#### 删除表\n语法：``drop table [if exists] 表1，表2,… ``\n\n```\nmysql> drop table if exists student2;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n>如果删除一个不存在的表就会报错，删除的时候可以判断一下，存在就删除\n\n可以一次删除多个表\n\n```\nmysql> drop tables if exists student2,student3;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 修改表\n语法：`` alter table 表名 ``\n\n##### 添加字段\n语法：`` alter table 表名add [column] 字段名 数据类型 [位置] ``\n\n```\nmysql> alter table student add age int(8) after name;\nQuery OK, 0 rows affected (0.20 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>默认字段放在表的最后\n添加 `first` 字段放在表的第一位\n添加 `after name` 放在 name 字段之后\n\n##### 删除字段\n语法：``alter table 表 drop [column] 字段名``\n\n```\nmysql> alter table student drop age;\nQuery OK, 0 rows affected (0.05 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改字段(改名)\n语法：``alter table 表 change [column] 原字段名 新字段名 数据类型 …``\n\n```\nmysql> alter table student change sex age int(8);\nQuery OK, 0 rows affected (0.32 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n同时修改多个字段\n\n```\nmysql> alter table student change age myage int(8) comment '我的学生年龄',change name myname varchar(16) not null comment '我的学生姓名';\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改字段（不改名）\n语法：``alter table 表 modify 字段名 字段属性…``\n\n```\nmysql> alter table student modify myage int(3) not null default 18 comment '如果你没 有设置年龄，我就是永远的18岁';\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n>只更改字段属性\n\n##### 修改引擎\n语法：``alter table 表名 engine=引擎名``\n\n```\nmysql> alter table student engine=myisam;\nQuery OK, 0 rows affected (0.18 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```\n\n##### 修改表名\n语法：``alter table 表名 rename to 新表名``\n\n```\nmysql> alter table student rename to student2;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n##### 将表移动到其他数据库\n语法：``alter table 表名 rename to 数据库名.数据表名 ``\n\n```\nalter table student2 rename to test.student3;\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n#### 数据操作\n##### 插入数据\n语法：``insert into 表名 (字段名, 字段名,…) values (值1, 值1,…)``\n- 插入一条数据\n\n```\nmysql> insert into student (id,name,age) values (1,'小兰',25);\nQuery OK, 1 row affected (0.01 sec)\n```\n\n>1. 插入字段名的顺序和数据库字段名的顺序可以不一致\n2. 插入值的个数、顺序必须和插入字段名的个数、顺序要一致\n\n- 简写方式：\n\n```\nmysql> insert into student values (2,'杜总',24);\nQuery OK, 1 row affected (0.02 sec)\n```\n\n>3. 自动增长列，可以直接插入null。\n\n- 插入默认值和空值\n\n```\nmysql> insert into student values (null,'张宝',null);\nQuery OK, 1 row affected (0.01 sec)\n```\n\n>自动增长列，可以直接插入null\ndefault关键字用来插入默认值，null用来插入空值\n\n- 插入多条数据\n\n```\nmysql> insert into student values (null,'小张',18),(null,'圆哥',18);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n```\n\n- 使用insert…set…插入数据\n\n```\nmysql> insert into student set name='赵哥',age=54;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n##### 更新数据\n语法：``update 表名 set 字段=值 [where 条件] [order by 排序] [limit 限制]``\n\n- 将id为三的年龄改为30\n\n```\nmysql> update student set age=30 where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```\n\n>需要更改多个内容的时候将需要变更的内容用逗号连接；\n\n- 将id 从大到小数前3名的学生年龄改为16岁\n\n```\nmysql> update student set age=16 order by id desc limit 3;\nQuery OK, 3 rows affected (0.01 sec)\nRows matched: 3  Changed: 3  Warnings: 0\n```\n\n##### 删除数据\n语法：``delete from 表名 [where 条件] [order by 排序] [limit 限制]``\n\n```\nmysql> delete from student where id=9;\nQuery OK, 1 row affected (0.00 sec)\n```\n\n删除id <=7;\n\n```\nmysql> delete from student where id<=7;\nQuery OK, 7 rows affected (0.00 sec)\n```\n\n清空表\n\n```\nmysql> delete from student;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n清空表：truncate table 表名\n\n```\nmysql> truncate table student;\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n>delete from 表和truncate table 表区别？\ndelete from 表：遍历表记录，一条一条的删除\ntruncate table：将原表销毁，再创建一个同结构的新表。就清空表而言，这种方法效率高。\n\n#### 字符集\n字符集：字符在保存和传输时对应的二进制编码集合\n\n##### 数据存储时使用字符集\nMySQL可以在服务器上、数据库、表、字段上设置字符集\n>脚下留心：一般在数据库和表上设置字符集，每个字段设置字符集太麻烦。\n\n##### 数据传输时使用字符集\n发现：在插入数据的时候，如果有中文会报错\n\n```\nmysql> insert into student values (null,'李白');\nERROR 1366 (HY000):Incorrect string value :'\\xC0\\xEE\\xB0\\xD7' for column 'name'\n```\n\n>分析：客户端编码和服务器连接层编码必须一致，如果不一致就会报错。\n\n查看客户端的字符编码\n>客户端发送某种编码给服务器，由客户端决定\n客户端编码不能改变\n客户端右键——属性——选项——可以查看当前客户端的字符编码（GBK）\n\n查看服务器的字符编码\n\n```\nmysql> show variables like 'character_set_%';\n+--------------------------+------------------------------------------------+\n| Variable_name            | Value                                          |\n+--------------------------+------------------------------------------------+\n| character_set_client     | utf8                                           |\n| character_set_connection | utf8                                           |\n| character_set_database   | utf8                                           |\n| character_set_filesystem | binary                                         |\n| character_set_results    | utf8                                           |\n| character_set_server     | latin1                                         |\n| character_set_system     | utf8                                           |\n| character_sets_dir       | /Applications/XAMPP/xamppfiles/share/charsets/ |\n+--------------------------+------------------------------------------------+\n8 rows in set (0.01 sec)\n```\n\n>解决：只要将服务器的编码设置成gbk就可以解决\n\n测试：插入中文\n查询：插入中文\n\n原因：结果返回的是utf8，客户端用gbk来解析，所以乱码\n解决：服务器按gbk返回即可\n\n```\nmysql>set character_set_results=gbk;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n查询：结果\n>总结：客户端编码、``character_set_client``、``character_set_results``三个编码的值一致即可操作中文。\n多学一招：我们只要设置``“set names 字符编码”``，就可以更改``character_set_client``、``character_set_results``的值。\n\n##### 查看所有字符集\n\n```\n\nmysql> show character set;\n+----------+-----------------------------+---------------------+--------+\n| Charset  | Description                 | Default collation   | Maxlen |\n+----------+-----------------------------+---------------------+--------+\n| big5     | Big5 Traditional Chinese    | big5_chinese_ci     |      2 |\n| dec8     | DEC West European           | dec8_swedish_ci     |      1 |\n| cp850    | DOS West European           | cp850_general_ci    |      1 |\n| hp8      | HP West European            | hp8_english_ci      |      1 |\n| koi8r    | KOI8-R Relcom Russian       | koi8r_general_ci    |      1 |\n| latin1   | cp1252 West European        | latin1_swedish_ci   |      1 |\n| latin2   | ISO 8859-2 Central European | latin2_general_ci   |      1 |\n| swe7     | 7bit Swedish                | swe7_swedish_ci     |      1 |\n| ascii    | US ASCII                    | ascii_general_ci    |      1 |\n| ujis     | EUC-JP Japanese             | ujis_japanese_ci    |      3 |\n| sjis     | Shift-JIS Japanese          | sjis_japanese_ci    |      2 |\n| hebrew   | ISO 8859-8 Hebrew           | hebrew_general_ci   |      1 |\n| tis620   | TIS620 Thai                 | tis620_thai_ci      |      1 |\n| euckr    | EUC-KR Korean               | euckr_korean_ci     |      2 |\n| koi8u    | KOI8-U Ukrainian            | koi8u_general_ci    |      1 |\n| gb2312   | GB2312 Simplified Chinese   | gb2312_chinese_ci   |      2 |\n| greek    | ISO 8859-7 Greek            | greek_general_ci    |      1 |\n| cp1250   | Windows Central European    | cp1250_general_ci   |      1 |\n| gbk      | GBK Simplified Chinese      | gbk_chinese_ci      |      2 |\n| latin5   | ISO 8859-9 Turkish          | latin5_turkish_ci   |      1 |\n| armscii8 | ARMSCII-8 Armenian          | armscii8_general_ci |      1 |\n| utf8     | UTF-8 Unicode               | utf8_general_ci     |      3 |\n| ucs2     | UCS-2 Unicode               | ucs2_general_ci     |      2 |\n| cp866    | DOS Russian                 | cp866_general_ci    |      1 |\n| keybcs2  | DOS Kamenicky Czech-Slovak  | keybcs2_general_ci  |      1 |\n| macce    | Mac Central European        | macce_general_ci    |      1 |\n| macroman | Mac West European           | macroman_general_ci |      1 |\n| cp852    | DOS Central European        | cp852_general_ci    |      1 |\n| latin7   | ISO 8859-13 Baltic          | latin7_general_ci   |      1 |\n| utf8mb4  | UTF-8 Unicode               | utf8mb4_general_ci  |      4 |\n| cp1251   | Windows Cyrillic            | cp1251_general_ci   |      1 |\n| utf16    | UTF-16 Unicode              | utf16_general_ci    |      4 |\n| utf16le  | UTF-16LE Unicode            | utf16le_general_ci  |      4 |\n| cp1256   | Windows Arabic              | cp1256_general_ci   |      1 |\n| cp1257   | Windows Baltic              | cp1257_general_ci   |      1 |\n| utf32    | UTF-32 Unicode              | utf32_general_ci    |      4 |\n| binary   | Binary pseudo charset       | binary              |      1 |\n| geostd8  | GEOSTD8 Georgian            | geostd8_general_ci  |      1 |\n| cp932    | SJIS for Windows Japanese   | cp932_japanese_ci   |      2 |\n| eucjpms  | UJIS for Windows Japanese   | eucjpms_japanese_ci |      3 |\n+----------+-----------------------------+---------------------+--------+\n40 rows in set (0.01 sec)\n```\n\n#### 校对集\n在某种特定的字符集下，字符和字符的大小关系。比如a和B的大小关系：如果不区分大小写a<B；如果区分大小写a>B。\n脚下留心：不同的校对集他们的比较结果是不一样的\n语法：``collate=校对集``\n创建两个表\n\n```\ncreate table stu1(\nname varchar(20)\n)charset=utf8 collate=utf8_general_ci;\n\ncreate table stu2(\nname varchar(20)\n)charset=utf8 collate=utf8_bin;\n–插入测试数据\ninsert into stu1 values ('a'),('B');\ninsert into stu2 values ('a'),('B');\n```\n\n测试\n\n```\nmysql> select * from stu1 order by name;\n+------+\n| name |\n+------+\n| a    |\n| B    |\n+------+\n2 rows in set (0.01 sec)\n\nmysql> select * from stu2 order by name;\n+------+\n| name |\n+------+\n| B    |\n| a    |\n+------+\n2 rows in set (0.00 sec)\n```\n\n校对集的规则：\n1、_bin:按二进制编码进行比较\n2、_ci:不区分大小写进行比较\n\n**查看所有的校对集**\n\n```\nmysql> show collation;\n+--------------------------+----------+-----+---------+----------+---------+\n| Collation                | Charset  | Id  | Default | Compiled | Sortlen |\n+--------------------------+----------+-----+---------+----------+---------+\n| big5_chinese_ci          | big5     |   1 | Yes     | Yes      |       1 |\n| big5_bin                 | big5     |  84 |         | Yes      |       1 |\n| dec8_swedish_ci          | dec8     |   3 | Yes     | Yes      |       1 |\n| dec8_bin                 | dec8     |  69 |         | Yes      |       1 |\n\n此处省略200多行...\n```\n\n[常用操作命令文件下载](http://oamgu5mjf.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.docx)\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq700b4pgwidej3o2x3"},{"layout":"post","title":"MySQL 数据库设计及步骤","date":"2015-09-01T09:18:51.000Z","_content":"### 实体和实体之间的关系\n#### 一对多 1：N（多对一 N：1）\n主表中的一条记录对应从表中的多条记录\n\n1、\t主键和非主键之间的关系就能实现一对多。\n2、\t一对多和多对一是一样的。\n>问题：几个一对多的关系？\n1、\t客户和订单\n2、\t省和市的关系\n3、\t商品类别和商品\n\n#### 一对一（1:1）\n主表中的一条记录对应从表中的一条记录\n\n**主键和主键建关系就能实现一对一。**\n>思考：一对一两个表完全可以用一个表实现，为什么还要分成两个表？\n答：在字段数量很多情况下，数据量也就很大，每次查询都需要检索大量数据，这样效率低下。我们可以将所有字段分成两个部分，“常用字段”和“不常用字段”，这样对大部分查询者来说效率提高了。【表的垂直分割】\n\n#### 多对多（N：M）\n班级和讲师的关系\n科目和学生的关系\n\n>只要是多对多，必须有第三张关系表来保存关系\n\n### 数据库设计的步骤\n目的：\n数据冗余、空间浪费---》节省数据的存储空间\n内存空间浪费、数据不完整--》保证数据的完整性\n数据更新与插入异常--》方便进行数据库应用系统的开发\n\n**需求分析=>建模=>模型转换=>规范化**\n\n需求分析阶段：分析客户的业务和数据处理需求;\n概要设计阶段：设计数据库的**E-R模型图**，确认需求信息的正确和完整;\n详细设计阶段：将E-R图转换为多张表，进行逻辑设计，并应用数据库设计的三大范式进行审核;\n代码编写阶段：选择具体数据库进行物理实现，并编写代码实现前端应用;\n软件测试阶段：……\n安装部署：……\n\n#### 数据库设计具体步骤\n1、\t收集信息：与该系统有关人员进行交流、坐谈，充分理解数据库需要完成的任务\n2、\t标识对象（实体－Entity）标识数据库要管理的关键对象或实体 \n3、\t标识每个实体的属性（Attribute）\n4、\t标识对象之间的关系（Relationship）\n\n**项目需求**\nBBS论坛的基本功能：\n1、**用户**注册和登录，后台数据库需要存放用户的注册信息和在线状态信息；\n2、用户**发贴**，后台数据库需要存放贴子相关信息，如贴子内容、标题等；\n3、用户可以对发帖进行回复【**跟帖**】；\n4、论坛**版块**管理：后台数据库需要存放各个版块信息，如版主、版块名称、贴子数等；\n\n**标识实体**\n实体一般是名词：\n**用户**：论坛普通用户、各版块的版主。\n用户发的**主贴**\n用户发的**跟贴**（回贴）\n**版块**：论坛的各个版块信息\n\n**标识实体的属性**\n论坛用户：\n昵称、密码、邮件、生日、性别、等级、备注、注册日期、状态、积分\n主贴：\n发帖人、发帖表情、回复数量、标题、正文、发帖时间、点击数、状态\n回帖：\n帖子编号、回帖人、表情、标题、正文、回帖时间、点击数\n板块：\n板块名称、版主、本版格言、点击率、发帖数\n\n**标识实体和实体之间的关系**\n一个版块有多个主贴\n一个主贴有多个跟帖\n一个用户可以管理多个版块\n一个用户可以发多个主贴\n一个用户可以回复多个跟帖\n\n#### 绘制E-R图\nE-R（Entity－Relationship）实体关系图 \n\nE-R图的语法\n方形：实体，一般是名词\n椭圆：属性，一般是名词\n菱形：关系，一般是动词\n\n将E-R图转成表\n1、\t实体转成表，属性转成字段\n2、\t如果没有合适的字段做主键，给表添加一个自动增长列做主键。\n\n### 数据规范化\nCodd博士定义了6个范式来规范化数据库，范式由小到大来约束，范式越高冗余越小，但表的个数也越多。实验证明，三范式是性价比最高的\n\n#### 第一范式确保每个字段不可再分\n\n说明：Address由country和city构成，将Address分成country和city。\n>思考：地址包含省、市、县、地区是否需要拆分？\n答：如果仅仅起地址的作用，不需要统计，可以不拆分；如果有按地区统计的功能需要拆分。\n在实际项目中拆分!\n\n#### 第二范式：非键字段必须依赖于键字段\n一个表只能描述一件事\n非键字段必须依赖于键字段\n\n#### 第三范式：消除传递依赖\n在所有的非键字段中，不能有传递依赖\n>例如在非主键中，“学号”和”姓名“有依赖，将”姓名“删除\n例如顾客编号依赖于顾客姓名\n总分数依赖于语文和数学的分数\n在非主键字段中，要消除传递依赖\n\n>上面的设计不满足第三范式，但是高考分数表就是这样设计的，为什么？\n答：高考分数峰值访问量非常大，这时候就是性能更重要。当性能和规范化冲突的时候，我们首选性能。这就是“反三范式”。\n\n### 例题演练\n#### 需求\n假设某建筑公司要设计一个数据库。公司的业务规则概括说明如下：\n1、公司承担多个工程项目，每一项工程有：工程号、工程名称、施工人员等\n2、公司有多名职工，每一名职工有：职工号、姓名、性别、职务（工程师、技术员）等\n3、公司按照工时和小时工资率支付工资，小时工资率由职工的职务决定（例如，技术员的小时工资率与工程师不同）\n\n#### 设计异常\n1、\t插入异常：一个职工入职，由于“工程名称”不能为空，所以必须虚拟一个工程名称。\n2、\t更新异常：“李思岐”从“技术员”升级“工程师”，结果“小时工资率”没有从60调整到65。\n3、\t删除异常：“李思岐”和“葛宇洪”离职，将二人删除，结果把“临江饭店”这个工程也删除了。\n\n#### 优化表结构\n工程表：工程号、项目名称\n员工表：职工号、姓名、职务\n职务表：职务、小时工资\n工时表：工程号、职工号、工时\n\n### 查询语句\n语法：``select [选项] 字段名 from 表名 [where 条件] [group by 分组] [having 条件] [order by 排序] [limit 限制]``\n\n```\nmysql> create table student(\n    -> id int auto_increment primary key,\n    -> name char(16) not null,\n    -> `语文` int(5),\n    -> `数学` int(5)\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into student values(null,'张宝',56,67),(null,'李青霞',89,92),(null,'兰丁丁',29,96);\nQuery OK, 3 rows affected (0.01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n```\n\n#### 字段表达式\n\n```\nmysql> select 20;\n+----+\n| 20 |\n+----+\n| 20 |\n+----+\n1 row in set (0.00 sec)\n\nmysql> select 20*20;\n+-------+\n| 20*20 |\n+-------+\n|   400 |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> select id,name,`语文`,`数学`,(`语文`+`数学`) from student;\n+----+-----------+--------+--------+---------------------+\n| id | name      | 语文   | 数学   | (`语文`+`数学`)     |\n+----+-----------+--------+--------+---------------------+\n|  1 | 张宝      |     56 |     67 |                 123 |\n|  2 | 李青霞    |     89 |     92 |                 181 |\n|  3 | 兰丁丁    |     29 |     96 |                 125 |\n+----+-----------+--------+--------+---------------------+\n3 rows in set (0.01 sec)\n```\n\n时间戳\n\n```\nmysql> select unix_timestamp();\n+------------------+\n| unix_timestamp() |\n+------------------+\n|       1472347068 |\n+------------------+\n1 row in set (0.01 sec)\n```\n\n随机数\n\n```\nmysql> select rand();\n+--------------------+\n| rand()             |\n+--------------------+\n| 0.8859497913028578 |\n+--------------------+\n1 row in set (0.00 sec)\n```\n\n通过as给字段取别名\n\n```\nmysql> select unix_timestamp() as '时间戳',rand() as '随机数';\n+------------+--------------------+\n| 时间戳     | 随机数             |\n+------------+--------------------+\n| 1472347205 | 0.8530956766131294 |\n+------------+--------------------+\n1 row in set (0.01 sec)\n```\n\n>as可以省略\n\n```\nmysql> select unix_timestamp() '时间戳',rand() '随机数';\n+------------+--------------------+\n| 时间戳     | 随机数             |\n+------------+--------------------+\n| 1472347268 | 0.6076290398907187 |\n+------------+--------------------+\n1 row in set (0.00 sec)\n```\n\n#### from 子句\nfrom：来自，from后面跟的是数据源。数据源可以有多个。返回笛卡尔积(排列组合)\n\n```\nmysql> create table teacher(\n    -> id int auto_increment primary key,\n    -> name char(16) not null,\n    -> `评分` int(3) zerofill\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into teacher values (null,'贾老师',98),(null,'杜老师',59);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> select * from student,teacher;\n+----+-----------+--------+--------+----+-----------+--------+\n| id | name      | 语文   | 数学   | id | name      | 评分   |\n+----+-----------+--------+--------+----+-----------+--------+\n|  1 | 张宝      |     56 |     67 |  1 | 贾老师    |    098 |\n|  1 | 张宝      |     56 |     67 |  2 | 杜老师    |    059 |\n|  2 | 李青霞    |     89 |     92 |  1 | 贾老师    |    098 |\n|  2 | 李青霞    |     89 |     92 |  2 | 杜老师    |    059 |\n|  3 | 兰丁丁    |     29 |     96 |  1 | 贾老师    |    098 |\n|  3 | 兰丁丁    |     29 |     96 |  2 | 杜老师    |    059 |\n+----+-----------+--------+--------+----+-----------+--------+\n6 rows in set (0.01 sec)\n```\n\n>返回笛卡尔积\n\n可以通过as给表取别名(给表取别名，as可以省略)\n\n```\nmysql> select i.name,m.name from student as i,teacher as m;\n+-----------+-----------+\n| name      | name      |\n+-----------+-----------+\n| 张宝      | 贾老师    |\n| 张宝      | 杜老师    |\n| 李青霞    | 贾老师    |\n| 李青霞    | 杜老师    |\n| 兰丁丁    | 贾老师    |\n| 兰丁丁    | 杜老师    |\n+-----------+-----------+\n6 rows in set (0.01 sec)\n```\n\n#### dual表（伪表）\ndual表是一个伪表。在有些特定情况下，没有具体的表的参与，但是为了保证select语句的完整又必须要一个表名，这时候就使用伪表。\ndual表是用来保证select语句的完整性\n\n```\nmysql> select 20*30 as `积` from dual;\n+-----+\n| 积  |\n+-----+\n| 600 |\n+-----+\n1 row in set (0.00 sec)\n```\n\n\n```\nmysql> select * from student where `语文`>59;\nmysql> select * from student where 1;\t--返回所有数据\nmysql> select * from student where 0;\t--返回空\n```\n\n>思考：数据库中的表是一个二维表，返回的结果是一张二维表，既然能在数据库的二维表中进行查询，能否在结果集的二维表上继续进行查询？\n答：可以，使用having条件就是在结果集上继续进行筛选。\n\n```\nmysql> select * from student where name in ('兰丁丁','张宝');\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  1 | 张宝      |     56 |     67 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.02 sec)\n```\n\n>查询名字是兰丁丁和张宝的信息\n\n```\nmysql> select * from teacher where name not in ('杜老师');\n+----+-----------+--------+\n| id | name      | 评分   |\n+----+-----------+--------+\n|  1 | 贾老师    |    098 |\n+----+-----------+--------+\n1 row in set (0.00 sec)\n```\n\n>查询不包含杜老师的信息\n\nin：在…里面\nnot in：不在…里面\n\n#### between…and|not between…and\nbetween…and：在…之间\n\n```\nmysql> select * from student where id between 2 and 3;\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  2 | 李青霞    |     89 |     92 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n>id在2和之间包含2和3\n\nnot between …and 不在…之间\n\n```\nmysql> select * from student where id not between 2 and 2;\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  1 | 张宝      |     56 |     67 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.01 sec)\n```\n\n>id不在2和2之间\n\n#### is null | is not null\n\n```\nmysql> insert into student values (null,'赵哥',null,89);\nQuery OK, 1 row affected (0.01 sec)\n\n +----+--------+--------+--------+\n| id | name   | 语文   | 数学   |\n+----+--------+--------+--------+\n|  4 | 赵哥   |   NULL |     89 |\n+----+--------+--------+--------+\n1 row in set (0.00 sec)\n```\n\n>查询语文或数学为空的信息；\n\n**查询一个为空的字段不能用等于，必须用is null**\n\n#### 标量子查询\n= ：结果就是一个字\n``select * from stu where id=(select id from class where name='jack');``\n#### 列子查询\nin ：一个字段对应多个值\n``select * from stu where id in(select id from class where name in('php','java'));``\n#### 行子查询\n= ：n个字段名对n个值\n``select * from stu where(id,name)=(select id,name from class where name='php');``\n#### 聚合函数\n\n| 聚合函数 | 描述       | \n| ------  | :--------: | \n|  sum()  |   求和\t   | \n|  avg()  | 求平均值    |  \n|  max()  | 求最大值    | \n|  min()  | 求最小值    |  \n|  count()  |  求记录数 | \n\n```\nmysql> select sum(`语文`) as `语文总分`,avg(`语文`) as `语文平均分`,max(`语文`) as `语文最高分`,min(`语文`) as `语文最低分`,count(*) as `总人数` from student;\n+--------------+-----------------+-----------------+-----------------+-----------+\n| 语文总分     | 语文平均分      | 语文最高分      | 语文最低分      | 总人数    |\n+--------------+-----------------+-----------------+-----------------+-----------+\n|          174 |         58.0000 |              89 |              29 |         4 |\n+--------------+-----------------+-----------------+-----------------+-----------+\n1 row in set (0.01 sec)\n```\n\n#### 通配符\n\n| 通配符        | 描述             | \n| ------       | :--------:       | \n|  _  [下划线]  | 表示任意一个字符   | \n|  %           | 表示任意字符      |  \n\n>练习\n1、满足“T_m”的有（A、C）\nA：Tom\t\tB：Toom\t\tC：Tam\t\tD：Tm\tE：Tmo\n2、满足“T_m_”的有（B、C）\nA:Tmom\tB:Tmmm\tC:T1m2\tD:Tmm\tE:Tm\n3、满足“张%”的是（A、B、C、D）\nA:张三\tB：张三丰\tC：张牙舞爪\t\tD：张\t\tE：小张\n4、满足“%诺基亚%”的是（A、B、C、D）\nA：诺基亚2100   B：2100诺基亚\tC：把我的诺基亚拿过来   D：诺基亚\n\n**如果要匹配6个字符，且已ing结尾则使用“___ing” 3个下划线**\n\n使用“\\”转移特殊字符 “\\%”;\n\n#### 模糊查询（like）\n\n```\nmysql> select * from student where name like '兰%';\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n1 row in set (0.01 sec)\n```\n\n>查询兰姓小伙伴\n\n#### group by 【分组查询】\n\n将查询的结果分组，分组查询目的在于统计数据\n\n```\nmysql> select id,name,sex,avg(`数学`) as `数学平均分数` from student group by sex;\n+----+-----------+------+--------------------+\n| id | name      | sex  | 数学平均分数       |\n+----+-----------+------+--------------------+\n|  2 | 李青霞    | 女   |            92.0000 |\n|  1 | 张宝      | 男   |            84.0000 |\n+----+-----------+------+--------------------+\n2 rows in set (0.01 sec)\n```\n\n>分组查询中，字段有普通字段会怎么样？\n只显示分组后第一条记录的字段值\n\n>注意内容插入的时候使用引号 '' ，查询字段信息时使用 `` ;\n\n通过group_concat()函数将同一组的值连接起来显示\n\n```\nmysql> select group_concat(id),group_concat(name),sex,avg(`语文`) as `语文平均分`,avg(`数学`) as `数学平均分` from student group by sex;\n+------------------+-------------------------+------+-----------------+-----------------+\n| group_concat(id) | group_concat(name)      | sex  | 语文平均分      | 数学平均分      |\n+------------------+-------------------------+------+-----------------+-----------------+\n| 2                | 李青霞                  | 女   |         89.0000 |         92.0000 |\n| 1,3,4            | 张宝,兰丁丁,赵哥        | 男   |         42.5000 |         84.0000 |\n+------------------+-------------------------+------+-----------------+-----------------+\n2 rows in set (0.01 sec)\n```\n\n实现分组后按降序排列\n\n```\nmysql> select * from student group by `语文` desc;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  2 | 李青霞    | 女   |     89 |     92 |\n|  1 | 张宝      | 男   |     56 |     67 |\n|  3 | 兰丁丁    | 男   |     29 |     96 |\n|  4 | 赵哥      | 男   |   NULL |     89 |\n+----+-----------+------+--------+--------+\n4 rows in set (0.00 sec)\n```\n\n>分组后降序排列\n\n多列分组(注意：聚合函数\\*号的位置->count(*))\n\n```\nmysql> select group_concat(name),sex,count(*) from student group by sex;\n+-------------------------+------+----------+\n| group_concat(name)      | sex  | count(*) |\n+-------------------------+------+----------+\n| 李青霞                  | 女   |        1 |\n| 张宝,兰丁丁,赵哥        | 男   |        3 |\n+-------------------------+------+----------+\n2 rows in set (0.01 sec)\n```\n\n#### 回溯统计【with rollup】\n在分组统计的基础上再进行相同的统计\n\n```\nmysql> update student set sex=null where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  1 | 张宝      | 男   |     56 |     67 |\n|  2 | 李青霞    | 女   |     89 |     92 |\n|  3 | 兰丁丁    | NULL |     29 |     96 |\n|  4 | 赵哥      | 男   |   NULL |     89 |\n+----+-----------+------+--------+--------+\n4 rows in set (0.00 sec)\n\nmysql> select group_concat(name),sex,count(*) from student group by sex with rollup;\n+-----------------------------------+------+----------+\n| group_concat(name)                | sex  | count(*) |\n+-----------------------------------+------+----------+\n| 兰丁丁                            | NULL |        1 |\n| 李青霞                            | 女   |        1 |\n| 张宝,赵哥                         | 男   |        2 |\n| 兰丁丁,李青霞,张宝,赵哥           | NULL |        4 |\n+-----------------------------------+------+----------+\n4 rows in set (0.00 sec)\n```\n\n>在分组统计的基础上再进行相同的统计\n\n#### having条件\n**having和where的区别：**\n**where**是对原始数据进行筛选，**having**是对记录集(结果集)进行筛选。\n\n```\nmysql> select * from student having `语文`<59;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  1 | 张宝      | 男   |     56 |     67 |\n|  3 | 兰丁丁    | NULL |     29 |     96 |\n+----+-----------+------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n```\nmysql> select name from student where `数学`>80;\n+-----------+\n| name      |\n+-----------+\n| 李青霞    |\n| 兰丁丁    |\n| 赵哥      |\n+-----------+\n3 rows in set (0.00 sec)\n\nmysql> select name from student having `数学`>80;\nERROR 1054 (42S22): Unknown column '数学' in 'having clause'\n```\n\n>因为在表中查询，表中有 \\`数学` ，所以where可以查到结果，反之having是查询不到结果的；\n\n```\nmysql> select group_concat(name),sex,count(*) as total from student group by sex having total>1; \n+--------------------+------+-------+\n| group_concat(name) | sex  | total |\n+--------------------+------+-------+\n| 张宝,赵哥          | 男   |     2 |\n+--------------------+------+-------+\n1 row in set (0.00 sec)\n```\n\n>对select出的数据，使用having进行条件设置\n\n####【where子句】\n\t主要是用于根据一个条件表达式从硬盘上将数据读到内存中时筛选记录。\n既然where根据条件表达式进行记录的筛选，where的运算符\n=\t\t判断两个值是否相等\n=\t\t判断n个字段与n个值是否相等\n\n#### order by排序\n**asc：升序【默认】**\n**desc：降序**\n\n```\nmysql> select * from student order by \\`语文`;\t\t\t--按语文升序\nmysql> select * from student order by \\`语文` asc;\t\t--按语文升序\nmysql> select * from student order by \\`语文` desc;\t\t--按语文降序\n```\n\n#### limit\n``语法：limit 起始位置，显示长度``\n起始位置可以省略，默认是从0开始\n\n找出班级总分前两名\n\n```\nmysql> select name,(`语文`+`数学`) as total from student order by (`语文`+`数学`) desc limit 2;\n+-----------+-------+\n| name      | total |\n+-----------+-------+\n| 李青霞    |   181 |\n| 兰丁丁    |   125 |\n+-----------+-------+\n2 rows in set (0.00 sec)\n```\n\n#### 查询语句中的选项\n查询语句中的选项有两个：\n1、\tall：显示所有数据 【默认】\n2、\tdistinct：去除结果集中重复的数据\n\n```\nmysql> select all sex from student;\n+------+\n| sex  |\n+------+\n| 男   |\n| 女   |\n| NULL |\n| 男   |\n+------+\n4 rows in set (0.00 sec)\n\nmysql> select distinct sex from student;\n+------+\n| sex  |\n+------+\n| 男   |\n| 女   |\n| NULL |\n+------+\n3 rows in set (0.01 sec)\n```\n\n### insert…select…\n选择一个表的数据插入到另外的表中\n\n```\nmysql> create table stu_boy like student;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into stu_boy select * from student where sex='男';\nQuery OK, 2 rows affected (0.02 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> select * from stu_boy;\n+----+--------+------+--------+--------+\n| id | name   | sex  | 语文   | 数学   |\n+----+--------+------+--------+--------+\n|  1 | 张宝   | 男   |     56 |     67 |\n|  4 | 赵哥   | 男   |   NULL |     89 |\n+----+--------+------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n### on duplicate key update\n在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。\n测试数据\n\n```\n 1\t–创建表\n 2\tcreate table emp(\n 3\tid int primary key,\n 4\tname varchar(20) unique\n 5\t);\n 6\t– 插入测试数据\n 7\tinsert into emp values (1,'tom');\n```\n\n``mysql>insert into emp values (1,'berry') on duplicate key update name='berry'``\n\n>编号1和主键冲突，将name改成berry\n\n``mysql>insert into emp values (2,'berry') on duplicate key update id=2;``\n\n>berry 和唯一键冲突，将id改为2\n\n### union\n\n作用：将多个select语句结果集纵向联合起来\n语法：``select 语句 union [选项] select 语句 union [选项] select 语句``\n\n例题：查找上海的男生和北京的女生\n\n```\n--方法一：\nmysql> select * from stu where (stuaddress='上海' and stusex='男') or (stuaddress='北京' and stusex='女');\n\n--方法二：\nmysql> select * from stu where (stuaddress='上海' and stusex='男') union select * from stu where (stuaddress='北京' and stusex='女');\n```\n\n例题：联合多个表的数据\n``mysql> select stuname from stu union select name from stu_info;``\n\n例题：将多个表的数据插入到新表中\n``mysql> create table stu2 like stu;\t\t--创建和stu一样的表结构``\n\n--将上海的男生和北京的女生插入到stu2表中\n\n``insert into stu2 select * from stu where (stuaddress='上海' and stusex='男') union select * from stu where (stuaddress='北京' and stusex='女');``\n\n#### union的选项\n\nunion的选项有两个\n1、\tall：显示所有数据\n2、\tdistinct：去除重复的数据【默认】\n\n>默认情况下，取出重复的记录\nunion all 显示联合的数据，不去重\n\n#### union的注意事项\n\n- union两边的select语句的字段个数必须一致\n\n```\nmysql> select name from student union select name,sex from stu_boy;\nERROR 1222 (21000): The used SELECT statements have a different number of columns\n```\n\n- union两边的select语句的字段名可以不一致，最终按第一个select语句的字段名。\n\n```\nmysql> select id,name from student union select name,sex from stu_boy;\n+--------+-----------+\n| id     | name      |\n+--------+-----------+\n| 1      | 张宝      |\n| 2      | 李青霞    |\n| 3      | 兰丁丁    |\n| 4      | 赵哥      |\n| 张宝   | 男        |\n| 赵哥   | 男        |\n+--------+-----------+\n6 rows in set (0.00 sec)\n```\n\n- union两边的select语句中的数据类型可以不一致。\n\n#### union和order by一起使用\n\n1、\t每条select语句必须用括号括起来。\n2、\t每条select语句的order by必须配合limit才能生效。\n\n例题：男生按数学的降序，女生按语文的升序排列\n\n```\nmysql> (select * from student where sex='男' order by 数学 desc limit 999) union (select * from student where sex='女' order by 语文 asc limit 999);\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  4 | 赵哥      | 男   |   NULL |     89 |\n|  1 | 张宝      | 男   |     56 |     67 |\n|  2 | 李青霞    | 女   |     89 |     92 |\n+----+-----------+------+--------+--------+\n3 rows in set (0.00 sec)\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015/201509/20150901-1.md","raw":"layout: post\ntitle: MySQL 数据库设计及步骤\ndate: 2015-09-01 17:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### 实体和实体之间的关系\n#### 一对多 1：N（多对一 N：1）\n主表中的一条记录对应从表中的多条记录\n\n1、\t主键和非主键之间的关系就能实现一对多。\n2、\t一对多和多对一是一样的。\n>问题：几个一对多的关系？\n1、\t客户和订单\n2、\t省和市的关系\n3、\t商品类别和商品\n\n#### 一对一（1:1）\n主表中的一条记录对应从表中的一条记录\n\n**主键和主键建关系就能实现一对一。**\n>思考：一对一两个表完全可以用一个表实现，为什么还要分成两个表？\n答：在字段数量很多情况下，数据量也就很大，每次查询都需要检索大量数据，这样效率低下。我们可以将所有字段分成两个部分，“常用字段”和“不常用字段”，这样对大部分查询者来说效率提高了。【表的垂直分割】\n\n#### 多对多（N：M）\n班级和讲师的关系\n科目和学生的关系\n\n>只要是多对多，必须有第三张关系表来保存关系\n\n### 数据库设计的步骤\n目的：\n数据冗余、空间浪费---》节省数据的存储空间\n内存空间浪费、数据不完整--》保证数据的完整性\n数据更新与插入异常--》方便进行数据库应用系统的开发\n\n**需求分析=>建模=>模型转换=>规范化**\n\n需求分析阶段：分析客户的业务和数据处理需求;\n概要设计阶段：设计数据库的**E-R模型图**，确认需求信息的正确和完整;\n详细设计阶段：将E-R图转换为多张表，进行逻辑设计，并应用数据库设计的三大范式进行审核;\n代码编写阶段：选择具体数据库进行物理实现，并编写代码实现前端应用;\n软件测试阶段：……\n安装部署：……\n\n#### 数据库设计具体步骤\n1、\t收集信息：与该系统有关人员进行交流、坐谈，充分理解数据库需要完成的任务\n2、\t标识对象（实体－Entity）标识数据库要管理的关键对象或实体 \n3、\t标识每个实体的属性（Attribute）\n4、\t标识对象之间的关系（Relationship）\n\n**项目需求**\nBBS论坛的基本功能：\n1、**用户**注册和登录，后台数据库需要存放用户的注册信息和在线状态信息；\n2、用户**发贴**，后台数据库需要存放贴子相关信息，如贴子内容、标题等；\n3、用户可以对发帖进行回复【**跟帖**】；\n4、论坛**版块**管理：后台数据库需要存放各个版块信息，如版主、版块名称、贴子数等；\n\n**标识实体**\n实体一般是名词：\n**用户**：论坛普通用户、各版块的版主。\n用户发的**主贴**\n用户发的**跟贴**（回贴）\n**版块**：论坛的各个版块信息\n\n**标识实体的属性**\n论坛用户：\n昵称、密码、邮件、生日、性别、等级、备注、注册日期、状态、积分\n主贴：\n发帖人、发帖表情、回复数量、标题、正文、发帖时间、点击数、状态\n回帖：\n帖子编号、回帖人、表情、标题、正文、回帖时间、点击数\n板块：\n板块名称、版主、本版格言、点击率、发帖数\n\n**标识实体和实体之间的关系**\n一个版块有多个主贴\n一个主贴有多个跟帖\n一个用户可以管理多个版块\n一个用户可以发多个主贴\n一个用户可以回复多个跟帖\n\n#### 绘制E-R图\nE-R（Entity－Relationship）实体关系图 \n\nE-R图的语法\n方形：实体，一般是名词\n椭圆：属性，一般是名词\n菱形：关系，一般是动词\n\n将E-R图转成表\n1、\t实体转成表，属性转成字段\n2、\t如果没有合适的字段做主键，给表添加一个自动增长列做主键。\n\n### 数据规范化\nCodd博士定义了6个范式来规范化数据库，范式由小到大来约束，范式越高冗余越小，但表的个数也越多。实验证明，三范式是性价比最高的\n\n#### 第一范式确保每个字段不可再分\n\n说明：Address由country和city构成，将Address分成country和city。\n>思考：地址包含省、市、县、地区是否需要拆分？\n答：如果仅仅起地址的作用，不需要统计，可以不拆分；如果有按地区统计的功能需要拆分。\n在实际项目中拆分!\n\n#### 第二范式：非键字段必须依赖于键字段\n一个表只能描述一件事\n非键字段必须依赖于键字段\n\n#### 第三范式：消除传递依赖\n在所有的非键字段中，不能有传递依赖\n>例如在非主键中，“学号”和”姓名“有依赖，将”姓名“删除\n例如顾客编号依赖于顾客姓名\n总分数依赖于语文和数学的分数\n在非主键字段中，要消除传递依赖\n\n>上面的设计不满足第三范式，但是高考分数表就是这样设计的，为什么？\n答：高考分数峰值访问量非常大，这时候就是性能更重要。当性能和规范化冲突的时候，我们首选性能。这就是“反三范式”。\n\n### 例题演练\n#### 需求\n假设某建筑公司要设计一个数据库。公司的业务规则概括说明如下：\n1、公司承担多个工程项目，每一项工程有：工程号、工程名称、施工人员等\n2、公司有多名职工，每一名职工有：职工号、姓名、性别、职务（工程师、技术员）等\n3、公司按照工时和小时工资率支付工资，小时工资率由职工的职务决定（例如，技术员的小时工资率与工程师不同）\n\n#### 设计异常\n1、\t插入异常：一个职工入职，由于“工程名称”不能为空，所以必须虚拟一个工程名称。\n2、\t更新异常：“李思岐”从“技术员”升级“工程师”，结果“小时工资率”没有从60调整到65。\n3、\t删除异常：“李思岐”和“葛宇洪”离职，将二人删除，结果把“临江饭店”这个工程也删除了。\n\n#### 优化表结构\n工程表：工程号、项目名称\n员工表：职工号、姓名、职务\n职务表：职务、小时工资\n工时表：工程号、职工号、工时\n\n### 查询语句\n语法：``select [选项] 字段名 from 表名 [where 条件] [group by 分组] [having 条件] [order by 排序] [limit 限制]``\n\n```\nmysql> create table student(\n    -> id int auto_increment primary key,\n    -> name char(16) not null,\n    -> `语文` int(5),\n    -> `数学` int(5)\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into student values(null,'张宝',56,67),(null,'李青霞',89,92),(null,'兰丁丁',29,96);\nQuery OK, 3 rows affected (0.01 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n```\n\n#### 字段表达式\n\n```\nmysql> select 20;\n+----+\n| 20 |\n+----+\n| 20 |\n+----+\n1 row in set (0.00 sec)\n\nmysql> select 20*20;\n+-------+\n| 20*20 |\n+-------+\n|   400 |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> select id,name,`语文`,`数学`,(`语文`+`数学`) from student;\n+----+-----------+--------+--------+---------------------+\n| id | name      | 语文   | 数学   | (`语文`+`数学`)     |\n+----+-----------+--------+--------+---------------------+\n|  1 | 张宝      |     56 |     67 |                 123 |\n|  2 | 李青霞    |     89 |     92 |                 181 |\n|  3 | 兰丁丁    |     29 |     96 |                 125 |\n+----+-----------+--------+--------+---------------------+\n3 rows in set (0.01 sec)\n```\n\n时间戳\n\n```\nmysql> select unix_timestamp();\n+------------------+\n| unix_timestamp() |\n+------------------+\n|       1472347068 |\n+------------------+\n1 row in set (0.01 sec)\n```\n\n随机数\n\n```\nmysql> select rand();\n+--------------------+\n| rand()             |\n+--------------------+\n| 0.8859497913028578 |\n+--------------------+\n1 row in set (0.00 sec)\n```\n\n通过as给字段取别名\n\n```\nmysql> select unix_timestamp() as '时间戳',rand() as '随机数';\n+------------+--------------------+\n| 时间戳     | 随机数             |\n+------------+--------------------+\n| 1472347205 | 0.8530956766131294 |\n+------------+--------------------+\n1 row in set (0.01 sec)\n```\n\n>as可以省略\n\n```\nmysql> select unix_timestamp() '时间戳',rand() '随机数';\n+------------+--------------------+\n| 时间戳     | 随机数             |\n+------------+--------------------+\n| 1472347268 | 0.6076290398907187 |\n+------------+--------------------+\n1 row in set (0.00 sec)\n```\n\n#### from 子句\nfrom：来自，from后面跟的是数据源。数据源可以有多个。返回笛卡尔积(排列组合)\n\n```\nmysql> create table teacher(\n    -> id int auto_increment primary key,\n    -> name char(16) not null,\n    -> `评分` int(3) zerofill\n    -> )charset=utf8;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into teacher values (null,'贾老师',98),(null,'杜老师',59);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> select * from student,teacher;\n+----+-----------+--------+--------+----+-----------+--------+\n| id | name      | 语文   | 数学   | id | name      | 评分   |\n+----+-----------+--------+--------+----+-----------+--------+\n|  1 | 张宝      |     56 |     67 |  1 | 贾老师    |    098 |\n|  1 | 张宝      |     56 |     67 |  2 | 杜老师    |    059 |\n|  2 | 李青霞    |     89 |     92 |  1 | 贾老师    |    098 |\n|  2 | 李青霞    |     89 |     92 |  2 | 杜老师    |    059 |\n|  3 | 兰丁丁    |     29 |     96 |  1 | 贾老师    |    098 |\n|  3 | 兰丁丁    |     29 |     96 |  2 | 杜老师    |    059 |\n+----+-----------+--------+--------+----+-----------+--------+\n6 rows in set (0.01 sec)\n```\n\n>返回笛卡尔积\n\n可以通过as给表取别名(给表取别名，as可以省略)\n\n```\nmysql> select i.name,m.name from student as i,teacher as m;\n+-----------+-----------+\n| name      | name      |\n+-----------+-----------+\n| 张宝      | 贾老师    |\n| 张宝      | 杜老师    |\n| 李青霞    | 贾老师    |\n| 李青霞    | 杜老师    |\n| 兰丁丁    | 贾老师    |\n| 兰丁丁    | 杜老师    |\n+-----------+-----------+\n6 rows in set (0.01 sec)\n```\n\n#### dual表（伪表）\ndual表是一个伪表。在有些特定情况下，没有具体的表的参与，但是为了保证select语句的完整又必须要一个表名，这时候就使用伪表。\ndual表是用来保证select语句的完整性\n\n```\nmysql> select 20*30 as `积` from dual;\n+-----+\n| 积  |\n+-----+\n| 600 |\n+-----+\n1 row in set (0.00 sec)\n```\n\n\n```\nmysql> select * from student where `语文`>59;\nmysql> select * from student where 1;\t--返回所有数据\nmysql> select * from student where 0;\t--返回空\n```\n\n>思考：数据库中的表是一个二维表，返回的结果是一张二维表，既然能在数据库的二维表中进行查询，能否在结果集的二维表上继续进行查询？\n答：可以，使用having条件就是在结果集上继续进行筛选。\n\n```\nmysql> select * from student where name in ('兰丁丁','张宝');\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  1 | 张宝      |     56 |     67 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.02 sec)\n```\n\n>查询名字是兰丁丁和张宝的信息\n\n```\nmysql> select * from teacher where name not in ('杜老师');\n+----+-----------+--------+\n| id | name      | 评分   |\n+----+-----------+--------+\n|  1 | 贾老师    |    098 |\n+----+-----------+--------+\n1 row in set (0.00 sec)\n```\n\n>查询不包含杜老师的信息\n\nin：在…里面\nnot in：不在…里面\n\n#### between…and|not between…and\nbetween…and：在…之间\n\n```\nmysql> select * from student where id between 2 and 3;\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  2 | 李青霞    |     89 |     92 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n>id在2和之间包含2和3\n\nnot between …and 不在…之间\n\n```\nmysql> select * from student where id not between 2 and 2;\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  1 | 张宝      |     56 |     67 |\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n2 rows in set (0.01 sec)\n```\n\n>id不在2和2之间\n\n#### is null | is not null\n\n```\nmysql> insert into student values (null,'赵哥',null,89);\nQuery OK, 1 row affected (0.01 sec)\n\n +----+--------+--------+--------+\n| id | name   | 语文   | 数学   |\n+----+--------+--------+--------+\n|  4 | 赵哥   |   NULL |     89 |\n+----+--------+--------+--------+\n1 row in set (0.00 sec)\n```\n\n>查询语文或数学为空的信息；\n\n**查询一个为空的字段不能用等于，必须用is null**\n\n#### 标量子查询\n= ：结果就是一个字\n``select * from stu where id=(select id from class where name='jack');``\n#### 列子查询\nin ：一个字段对应多个值\n``select * from stu where id in(select id from class where name in('php','java'));``\n#### 行子查询\n= ：n个字段名对n个值\n``select * from stu where(id,name)=(select id,name from class where name='php');``\n#### 聚合函数\n\n| 聚合函数 | 描述       | \n| ------  | :--------: | \n|  sum()  |   求和\t   | \n|  avg()  | 求平均值    |  \n|  max()  | 求最大值    | \n|  min()  | 求最小值    |  \n|  count()  |  求记录数 | \n\n```\nmysql> select sum(`语文`) as `语文总分`,avg(`语文`) as `语文平均分`,max(`语文`) as `语文最高分`,min(`语文`) as `语文最低分`,count(*) as `总人数` from student;\n+--------------+-----------------+-----------------+-----------------+-----------+\n| 语文总分     | 语文平均分      | 语文最高分      | 语文最低分      | 总人数    |\n+--------------+-----------------+-----------------+-----------------+-----------+\n|          174 |         58.0000 |              89 |              29 |         4 |\n+--------------+-----------------+-----------------+-----------------+-----------+\n1 row in set (0.01 sec)\n```\n\n#### 通配符\n\n| 通配符        | 描述             | \n| ------       | :--------:       | \n|  _  [下划线]  | 表示任意一个字符   | \n|  %           | 表示任意字符      |  \n\n>练习\n1、满足“T_m”的有（A、C）\nA：Tom\t\tB：Toom\t\tC：Tam\t\tD：Tm\tE：Tmo\n2、满足“T_m_”的有（B、C）\nA:Tmom\tB:Tmmm\tC:T1m2\tD:Tmm\tE:Tm\n3、满足“张%”的是（A、B、C、D）\nA:张三\tB：张三丰\tC：张牙舞爪\t\tD：张\t\tE：小张\n4、满足“%诺基亚%”的是（A、B、C、D）\nA：诺基亚2100   B：2100诺基亚\tC：把我的诺基亚拿过来   D：诺基亚\n\n**如果要匹配6个字符，且已ing结尾则使用“___ing” 3个下划线**\n\n使用“\\”转移特殊字符 “\\%”;\n\n#### 模糊查询（like）\n\n```\nmysql> select * from student where name like '兰%';\n+----+-----------+--------+--------+\n| id | name      | 语文   | 数学   |\n+----+-----------+--------+--------+\n|  3 | 兰丁丁    |     29 |     96 |\n+----+-----------+--------+--------+\n1 row in set (0.01 sec)\n```\n\n>查询兰姓小伙伴\n\n#### group by 【分组查询】\n\n将查询的结果分组，分组查询目的在于统计数据\n\n```\nmysql> select id,name,sex,avg(`数学`) as `数学平均分数` from student group by sex;\n+----+-----------+------+--------------------+\n| id | name      | sex  | 数学平均分数       |\n+----+-----------+------+--------------------+\n|  2 | 李青霞    | 女   |            92.0000 |\n|  1 | 张宝      | 男   |            84.0000 |\n+----+-----------+------+--------------------+\n2 rows in set (0.01 sec)\n```\n\n>分组查询中，字段有普通字段会怎么样？\n只显示分组后第一条记录的字段值\n\n>注意内容插入的时候使用引号 '' ，查询字段信息时使用 `` ;\n\n通过group_concat()函数将同一组的值连接起来显示\n\n```\nmysql> select group_concat(id),group_concat(name),sex,avg(`语文`) as `语文平均分`,avg(`数学`) as `数学平均分` from student group by sex;\n+------------------+-------------------------+------+-----------------+-----------------+\n| group_concat(id) | group_concat(name)      | sex  | 语文平均分      | 数学平均分      |\n+------------------+-------------------------+------+-----------------+-----------------+\n| 2                | 李青霞                  | 女   |         89.0000 |         92.0000 |\n| 1,3,4            | 张宝,兰丁丁,赵哥        | 男   |         42.5000 |         84.0000 |\n+------------------+-------------------------+------+-----------------+-----------------+\n2 rows in set (0.01 sec)\n```\n\n实现分组后按降序排列\n\n```\nmysql> select * from student group by `语文` desc;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  2 | 李青霞    | 女   |     89 |     92 |\n|  1 | 张宝      | 男   |     56 |     67 |\n|  3 | 兰丁丁    | 男   |     29 |     96 |\n|  4 | 赵哥      | 男   |   NULL |     89 |\n+----+-----------+------+--------+--------+\n4 rows in set (0.00 sec)\n```\n\n>分组后降序排列\n\n多列分组(注意：聚合函数\\*号的位置->count(*))\n\n```\nmysql> select group_concat(name),sex,count(*) from student group by sex;\n+-------------------------+------+----------+\n| group_concat(name)      | sex  | count(*) |\n+-------------------------+------+----------+\n| 李青霞                  | 女   |        1 |\n| 张宝,兰丁丁,赵哥        | 男   |        3 |\n+-------------------------+------+----------+\n2 rows in set (0.01 sec)\n```\n\n#### 回溯统计【with rollup】\n在分组统计的基础上再进行相同的统计\n\n```\nmysql> update student set sex=null where id=3;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from student;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  1 | 张宝      | 男   |     56 |     67 |\n|  2 | 李青霞    | 女   |     89 |     92 |\n|  3 | 兰丁丁    | NULL |     29 |     96 |\n|  4 | 赵哥      | 男   |   NULL |     89 |\n+----+-----------+------+--------+--------+\n4 rows in set (0.00 sec)\n\nmysql> select group_concat(name),sex,count(*) from student group by sex with rollup;\n+-----------------------------------+------+----------+\n| group_concat(name)                | sex  | count(*) |\n+-----------------------------------+------+----------+\n| 兰丁丁                            | NULL |        1 |\n| 李青霞                            | 女   |        1 |\n| 张宝,赵哥                         | 男   |        2 |\n| 兰丁丁,李青霞,张宝,赵哥           | NULL |        4 |\n+-----------------------------------+------+----------+\n4 rows in set (0.00 sec)\n```\n\n>在分组统计的基础上再进行相同的统计\n\n#### having条件\n**having和where的区别：**\n**where**是对原始数据进行筛选，**having**是对记录集(结果集)进行筛选。\n\n```\nmysql> select * from student having `语文`<59;\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  1 | 张宝      | 男   |     56 |     67 |\n|  3 | 兰丁丁    | NULL |     29 |     96 |\n+----+-----------+------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n```\nmysql> select name from student where `数学`>80;\n+-----------+\n| name      |\n+-----------+\n| 李青霞    |\n| 兰丁丁    |\n| 赵哥      |\n+-----------+\n3 rows in set (0.00 sec)\n\nmysql> select name from student having `数学`>80;\nERROR 1054 (42S22): Unknown column '数学' in 'having clause'\n```\n\n>因为在表中查询，表中有 \\`数学` ，所以where可以查到结果，反之having是查询不到结果的；\n\n```\nmysql> select group_concat(name),sex,count(*) as total from student group by sex having total>1; \n+--------------------+------+-------+\n| group_concat(name) | sex  | total |\n+--------------------+------+-------+\n| 张宝,赵哥          | 男   |     2 |\n+--------------------+------+-------+\n1 row in set (0.00 sec)\n```\n\n>对select出的数据，使用having进行条件设置\n\n####【where子句】\n\t主要是用于根据一个条件表达式从硬盘上将数据读到内存中时筛选记录。\n既然where根据条件表达式进行记录的筛选，where的运算符\n=\t\t判断两个值是否相等\n=\t\t判断n个字段与n个值是否相等\n\n#### order by排序\n**asc：升序【默认】**\n**desc：降序**\n\n```\nmysql> select * from student order by \\`语文`;\t\t\t--按语文升序\nmysql> select * from student order by \\`语文` asc;\t\t--按语文升序\nmysql> select * from student order by \\`语文` desc;\t\t--按语文降序\n```\n\n#### limit\n``语法：limit 起始位置，显示长度``\n起始位置可以省略，默认是从0开始\n\n找出班级总分前两名\n\n```\nmysql> select name,(`语文`+`数学`) as total from student order by (`语文`+`数学`) desc limit 2;\n+-----------+-------+\n| name      | total |\n+-----------+-------+\n| 李青霞    |   181 |\n| 兰丁丁    |   125 |\n+-----------+-------+\n2 rows in set (0.00 sec)\n```\n\n#### 查询语句中的选项\n查询语句中的选项有两个：\n1、\tall：显示所有数据 【默认】\n2、\tdistinct：去除结果集中重复的数据\n\n```\nmysql> select all sex from student;\n+------+\n| sex  |\n+------+\n| 男   |\n| 女   |\n| NULL |\n| 男   |\n+------+\n4 rows in set (0.00 sec)\n\nmysql> select distinct sex from student;\n+------+\n| sex  |\n+------+\n| 男   |\n| 女   |\n| NULL |\n+------+\n3 rows in set (0.01 sec)\n```\n\n### insert…select…\n选择一个表的数据插入到另外的表中\n\n```\nmysql> create table stu_boy like student;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> insert into stu_boy select * from student where sex='男';\nQuery OK, 2 rows affected (0.02 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> select * from stu_boy;\n+----+--------+------+--------+--------+\n| id | name   | sex  | 语文   | 数学   |\n+----+--------+------+--------+--------+\n|  1 | 张宝   | 男   |     56 |     67 |\n|  4 | 赵哥   | 男   |   NULL |     89 |\n+----+--------+------+--------+--------+\n2 rows in set (0.00 sec)\n```\n\n### on duplicate key update\n在插入数据的时候，如果插入的数据不满足主键约束或唯一约束则执行更新操作。\n测试数据\n\n```\n 1\t–创建表\n 2\tcreate table emp(\n 3\tid int primary key,\n 4\tname varchar(20) unique\n 5\t);\n 6\t– 插入测试数据\n 7\tinsert into emp values (1,'tom');\n```\n\n``mysql>insert into emp values (1,'berry') on duplicate key update name='berry'``\n\n>编号1和主键冲突，将name改成berry\n\n``mysql>insert into emp values (2,'berry') on duplicate key update id=2;``\n\n>berry 和唯一键冲突，将id改为2\n\n### union\n\n作用：将多个select语句结果集纵向联合起来\n语法：``select 语句 union [选项] select 语句 union [选项] select 语句``\n\n例题：查找上海的男生和北京的女生\n\n```\n--方法一：\nmysql> select * from stu where (stuaddress='上海' and stusex='男') or (stuaddress='北京' and stusex='女');\n\n--方法二：\nmysql> select * from stu where (stuaddress='上海' and stusex='男') union select * from stu where (stuaddress='北京' and stusex='女');\n```\n\n例题：联合多个表的数据\n``mysql> select stuname from stu union select name from stu_info;``\n\n例题：将多个表的数据插入到新表中\n``mysql> create table stu2 like stu;\t\t--创建和stu一样的表结构``\n\n--将上海的男生和北京的女生插入到stu2表中\n\n``insert into stu2 select * from stu where (stuaddress='上海' and stusex='男') union select * from stu where (stuaddress='北京' and stusex='女');``\n\n#### union的选项\n\nunion的选项有两个\n1、\tall：显示所有数据\n2、\tdistinct：去除重复的数据【默认】\n\n>默认情况下，取出重复的记录\nunion all 显示联合的数据，不去重\n\n#### union的注意事项\n\n- union两边的select语句的字段个数必须一致\n\n```\nmysql> select name from student union select name,sex from stu_boy;\nERROR 1222 (21000): The used SELECT statements have a different number of columns\n```\n\n- union两边的select语句的字段名可以不一致，最终按第一个select语句的字段名。\n\n```\nmysql> select id,name from student union select name,sex from stu_boy;\n+--------+-----------+\n| id     | name      |\n+--------+-----------+\n| 1      | 张宝      |\n| 2      | 李青霞    |\n| 3      | 兰丁丁    |\n| 4      | 赵哥      |\n| 张宝   | 男        |\n| 赵哥   | 男        |\n+--------+-----------+\n6 rows in set (0.00 sec)\n```\n\n- union两边的select语句中的数据类型可以不一致。\n\n#### union和order by一起使用\n\n1、\t每条select语句必须用括号括起来。\n2、\t每条select语句的order by必须配合limit才能生效。\n\n例题：男生按数学的降序，女生按语文的升序排列\n\n```\nmysql> (select * from student where sex='男' order by 数学 desc limit 999) union (select * from student where sex='女' order by 语文 asc limit 999);\n+----+-----------+------+--------+--------+\n| id | name      | sex  | 语文   | 数学   |\n+----+-----------+------+--------+--------+\n|  4 | 赵哥      | 男   |   NULL |     89 |\n|  1 | 张宝      | 男   |     56 |     67 |\n|  2 | 李青霞    | 女   |     89 |     92 |\n+----+-----------+------+--------+--------+\n3 rows in set (0.00 sec)\n```\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq800b5pgwicjfdfnaq"},{"layout":"post","title":"PHP细节-03","date":"2018-04-01T00:55:26.000Z","_content":"# 时间复杂度\n>时间复杂度的算法具体步骤是：\n⑴ 找出算法中的基本语句；\n算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。\n⑵ 计算基本语句的执行次数的数量级；\n只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。\n⑶ 用大Ο记号表示算法的时间性能。\n将基本语句执行次数的数量级放入大Ο记号中。\n如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。例如：\n```\nfor (i=1; i<=n; i++)  \n       x++;  \nfor (i=1; i<=n; i++)  \n    　for (j=1; j<=n; j++)  \n          x++;\n```\n\n>第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n2)，则整个算法的时间复杂度为Ο(n+n2)=Ο(n2)。\nΟ(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。\n\n\n# try catch finally\n\ntry内部正常执行try的内部逻辑，异常则执行catch的内部逻辑结构，但是不管执行的哪个都会执行完try catch的内部逻辑（非return）后执行finally的内部逻辑。\n\n如果try catch都有return，按照正常执行，然后执行finally的逻辑，再返回对应的try 或者catch里执行return。\n\n如果try catch finally都有return，执行完finally的逻辑后，会调用finally的return。\n\n```\n<?php\n\nclass test\n{\n    public function testTry()\n    {\n        $i = 0;\n        try {\n            $i = $i + 1;\n            return $i;\n        } catch (Exception $e) {\n            echo \"wc\";\n        } finally {\n            $i = $i + 2;\n            // print_r($i);\n            return \"1111\";//当finally有return的时候 返回这个，当注销后，返回try 或者是 catch的内容。\n        }\n\n    }\n}\n \n$b = new test();\necho $b->testTry();\n\n# 1111[Finished in 0.4s]\n```\n\n# set_error_handle\n捕获 notice waring 等错误，放置回调函数处理\n\n>E_ERROR,E_PARSE 等拦截不了的。使用 register_shutdown_function()回调函数处理任意类型错误。\n\n# trait 是一个新的特性\nTrait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题\n```\n<?php\n\nnamespace AlibabaCloud\\Client\\Regions;\n\nuse AlibabaCloud\\Client\\Traits\\EndpointTrait;\n\n/**\n * Class EndpointProvider\n *\n * @package    AlibabaCloud\\Client\\Regions\n *\n * @deprecated deprecated since version 2.0, Use AlibabaCloud instead.\n */\nclass EndpointProvider\n{\n    use EndpointTrait;\n}\n```\n\n# 预定义接口\n## Iterator 迭代器\n## Aggregate 集合体\n## Yield\t生成器\n## IteratorAggregate\n\n# 魔术常量\n```\n(1). __FILE__                当前文件路径\n(2). __DIR__                  当前文件目录\n(3). __LINE__                 在文件文件的那一行 \n(4). __FUNCTION__       在当前文件的那个函数中       返回 函数名\n(5). __CLASS__             在当前文件中的那个类中       返回 类名\n(6). __METHOD__          在当前文件的类中的那个方法中 返回 类名::方法名\n```\n\n# 魔术方法\n```\n__construct()，类的构造函数\n__destruct()，类的析构函数\n__call()，在对象中调用一个不可访问方法时调用\n__callStatic()，用静态方式中调用一个不可访问方法时调用\n__get()，获得一个类的成员变量时调用\n__set()，设置一个类的成员变量时调用\n__isset()，当对不可访问属性调用isset()或empty()时调用\n__unset()，当对不可访问属性调用unset()时被调用。\n__sleep()，执行serialize()时，先会调用这个函数\n__wakeup()，执行unserialize()时，先会调用这个函数\n__toString()，类被当成字符串时的回应方法\n__invoke()，调用函数的方式调用一个对象时的回应方法\n__set_state()，调用var_export()导出类时，此静态方法会被调用。\n__clone()，当对象复制完成时调用\n__autoload()，尝试加载未定义的类\n__debugInfo()，打印所需调试信息\n```\n\n范例\n下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。\n\n一、 `__construct()`，类的构造函数\n\nphp中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。\n\n1、 构造方法的作用\n\n通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。\n\n2、 构造方法的在类中的声明格式\n```\nfunction __constrct([参数列表]){\n \n  方法体 //通常用来对成员属性进行初始化赋值\n}\n```\n\n3、 在类中声明构造方法需要注意的事项\n\n1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。\n\n2、构造方法名称是以两个下画线开始的`__construct()`\n下面是它的例子：\n```\n<?php\n  class Person\n  {                                   \n      public $name;    \n      public $age;    \n      public $sex;    \n                                  \n    /**\n     * 显示声明一个构造方法且带参数\n     */                                           \n    public function __construct($name=\"\", $sex=\"男\", $age=22)\n    {   \n      $this->name = $name;\n      $this->sex = $sex;\n      $this->age = $age;\n    }\n     \n    /**\n     * say 方法\n     */\n    public function say()\n    { \n      echo \"我叫：\" . $this->name . \"，性别：\" . $this->sex . \"，年龄：\" . $this->age;\n    }  \n                                               \n  }\n```\n\n创建对象$Person1且不带任参数\n```\n$Person1 = new Person();\necho $Person1->say(); //输出:我叫：，性别：男，年龄：27\n```\n\n创建对象$Person2且带参数“小明”\n\n```\n$Person2 = new Person(\"小明\");\necho $Person2->say(); //输出：我叫：张三，性别：男，年龄：27\n```\n\n创建对象$Person3且带三个参数\n\n```\n$Person3 = new Person(\"李四\",\"男\",25);\necho $Person3->say(); //输出：我叫：李四，性别：男，年龄：25\n```\n\n二、`__destruct()`，类的析构函数\n通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。\n\n析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。\n\n析构方法是PHP5才引进的新内容。\n\n析造方法的声明格式与构造方法 `__construct()` 比较类似，也是以两个下划线开始的方法 `__destruct()` ，这种析构方法名称也是固定的。\n\n1、 析构方法的声明格式\n```\nfunction __destruct()\n{\n //方法体\n}\n```\n\n注意：析构函数不能带有任何参数。\n\n2、 析构方法的作用\n\n一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。\n举例演示，如下：\n```\n<?php\nclass Person{   \n                             \n  public $name;     \n  public $age;     \n  public $sex;     \n                                   \n  public function __construct($name=\"\", $sex=\"男\", $age=22)\n  {  \n    $this->name = $name;\n    $this->sex = $sex;\n    $this->age = $age;\n  }\n   \n  /**\n   * say 说话方法\n   */\n  public function say()\n  { \n    echo \"我叫：\".$this->name.\"，性别：\".$this->sex.\"，年龄：\".$this->age;\n  }  \n   \n  /**\n   * 声明一个析构方法\n   */\n  public function __destruct()\n  {\n      echo \"我觉得我还可以再抢救一下，我的名字叫\".$this->name;\n  }\n}\n\n \n$Person = new Person(\"小明\");\nunset($Person); //销毁上面创建的对象$Person\n```\n\n上面的程序运行时输出：\n\n我觉得我还可以再抢救一下，我的名字叫小明\n三、 `__call()`，在对象中调用一个不可访问方法时调用。\n该方法有两个参数，第一个参数 $function_name 会自动接收不存在的方法名，第二个 $arguments 则以数组的方式接收不存在方法的多个参数。\n\n1、 `__call()` 方法的格式：\n\n```\nfunction __call(string $function_name, array $arguments)\n{\n  // 方法体\n}\n```\n\n2、 `__call()` 方法的作用：\n\n为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 `__call()` 方法来避免。\n\n该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。\n请参考如下代码：\n```\n<?php\nclass Person\n{               \n  function say()\n  { \n                \n      echo \"Hello, world!<br>\"; \n  }   \n     \n  /**\n   * 声明此方法用来处理调用对象中不存在的方法\n   */\n  function __call($funName, $arguments)\n  { \n     echo \"你所调用的函数：\" . $funName . \"(参数：\" ; // 输出调用不存在的方法名\n     print_r($arguments); // 输出调用不存在的方法时的参数列表\n     echo \")不存在！<br>\\n\"; // 结束换行           \n  }                     \n}\n$Person = new Person();      \n$Person->run(\"teacher\"); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法\n$Person->eat(\"小明\", \"苹果\");       \n$Person->say();\n运行结果：\n\n你所调用的函数：run(参数：Array ( [0] => teacher ) )不存在！\n\n你所调用的函数：eat(参数：Array ( [0] => 小明 [1] => 苹果 ) )不存在！\n\nHello, world!\n```\n\n四、 `__callStatic()`，用静态方式中调用一个不可访问方法时调用\n此方法与上面所说的 `__call()` 功能除了 `__callStatic()` 是未静态方法准备的之外，其它都是一样的。\n\n请看下面代码：\n```\n<?php\nclass Person\n{\n  function say()\n  {\n \n    echo \"Hello, world!<br>\";\n  }\n \n  /**\n   * 声明此方法用来处理调用对象中不存在的方法\n   */\n  public static function __callStatic($funName, $arguments)\n  {\n    echo \"你所调用的静态方法：\" . $funName . \"(参数：\" ; // 输出调用不存在的方法名\n    print_r($arguments); // 输出调用不存在的方法时的参数列表\n    echo \")不存在！<br>\\n\"; // 结束换行\n  }\n}\n$Person = new Person();\n$Person::run(\"teacher\"); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法\n$Person::eat(\"小明\", \"苹果\");\n$Person->say();\n运行结果如下：\n\n你所调用的静态方法：run(参数：Array ( [0] => teacher ) )不存在！\n你所调用的静态方法：eat(参数：Array ( [0] => 小明 [1] => 苹果 ) )不存在！\nHello, world!\n```\n\n五、 `__get()`，获得一个类的成员变量时调用\n在 php 面向对象编程中，类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 `__get()`。\n\n魔术方法`__get()`的作用\n在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。\n我们通过下面的 `__get()` 的实例来更进一步的连接它吧：\n```\n<?php\nclass Person\n{\n  private $name;\n  private $age;\n \n  function __construct($name=\"\", $age=1)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n \n  /**\n   * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理\n   * @param $propertyName\n   *\n   * @return int\n   */\n  public function __get($propertyName)\n  {  \n    if ($propertyName == \"age\") {\n      if ($this->age > 30) {\n        return $this->age - 10;\n      } else {\n        return $this->$propertyName;\n      }\n    } else {\n      return $this->$propertyName;\n    }\n  }\n}\n$Person = new Person(\"小明\", 60);  // 通过Person类实例化的对象，并通过构造方法为属性赋初值\necho \"姓名：\" . $Person->name . \"<br>\";  // 直接访问私有属性name，自动调用了__get()方法可以间接获取\necho \"年龄：\" . $Person->age . \"<br>\";  // 自动调用了__get()方法，根据对象本身的情况会返回不同的值\n运行结果：\n\n姓名：小明\n年龄：50\n```\n\n六、 `__set()`，设置一个类的成员变量时调用\n`__set()` 的作用：\n`__set( $property, $value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。\n\n请看下面的演示代码：\n```\n<?php\nclass Person\n{\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n \n  /**\n   * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值\n   * @param $property\n   * @param $value\n   */\n  public function __set($property, $value) {\n    if ($property==\"age\")\n    {\n      if ($value > 150 || $value < 0) {\n        return;\n      }\n    }\n    $this->$property = $value;\n  }\n \n  /**\n   * 在类中声明说话的方法，将所有的私有属性说出\n   */\n  public function say(){\n    echo \"我叫\".$this->name.\"，今年\".$this->age.\"岁了\";\n  }\n}\n \n$Person=new Person(\"小明\", 25); //注意，初始值将被下面所改变\n//自动调用了__set()函数，将属性名name传给第一个参数，将属性值”李四”传给第二个参数\n$Person->name = \"小红\";   //赋值成功。如果没有__set()，则出错。\n//自动调用了__set()函数，将属性名age传给第一个参数，将属性值26传给第二个参数\n$Person->age = 16; //赋值成功\n$Person->age = 160; //160是一个非法值，赋值失效\n$Person->say(); //输出：我叫小红，今年16岁了\n运行结果：\n\n我叫小红，今年16岁了\n```\n\n七、 `__isset()`，当对不可访问属性调用isset()或empty()时调用\n在看这个方法之前我们看一下isset()函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。\n\n那么如果在一个对象外面使用isset()这个函数去测定对象里面的成员是否被设定可不可以用它呢？\n\n分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用isset()函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个__isset()方法就可以了，当在类外部使用isset()函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的__isset()方法了帮我们完成这样的操作。\n\n`__isset()`的作用：当对不可访问属性调用 isset() 或 empty() 时，`__isset()` 会被调用。\n请看下面代码演示：\n```\n<?php\nclass Person\n{\n  public $sex;\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @param $content\n   *\n   * @return bool\n   */\n  public function __isset($content) {\n    echo \"当在类外部使用isset()函数测定私有成员{$content}时，自动调用<br>\";\n    echo isset($this->$content);\n  }\n}\n \n$person = new Person(\"小明\", 25); // 初始赋值\necho isset($person->sex),\"<br>\";\necho isset($person->name),\"<br>\";\necho isset($person->age),\"<br>\";\n运行结果如下：\n\n1 // public 可以 isset()\n当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo\n1 // __isset() 内第二个echo\n当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo\n1 // __isset() 内第二个echo\n```\n\n八、 `__unset()`，当对不可访问属性调用unset()时被调用。\n看这个方法之前呢，我们也先来看一下 unset() 函数，unset()这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。\n\n那么如果在一个对象外部去删除对象内部的成员属性用unset()函数可以吗？\n\n这里自然也是分两种情况：\n\n1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。\n\n2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。\n\n虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上`__unset()`这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了__unset()这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用`__unset()`函数来帮我们删除对象内部的私有成员属性。\n\n请看如下代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @param $content\n   *\n   * @return bool\n   */\n  public function __unset($content) {\n    echo \"当在类外部使用unset()函数来删除私有成员时自动调用的<br>\";\n    echo isset($this->$content);\n  }\n}\n \n$person = new Person(\"小明\", 25); // 初始赋值\nunset($person->sex);\nunset($person->name);\nunset($person->age);\n运行结果：\n\n当在类外部使用unset()函数来删除私有成员时自动调用的\n1当在类外部使用unset()函数来删除私有成员时自动调用的\n```\n\n九、 `__sleep()`，执行serialize()时，先会调用这个函数\nserialize() 函数会检查类中是否存在一个魔术方法 `__sleep()`。如果存在，则该方法会优先被调用，然后才执行序列化操作。\n\n此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。\n\n如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。\n\n注意：\n\n`__sleep()` 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。\n作用：\n\n`__sleep()` 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。\n具体请参考如下代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @return array\n   */\n  public function __sleep() {\n    echo \"当在类外部使用serialize()时会调用这里的__sleep()方法<br>\";\n    $this->name = base64_encode($this->name);\n    return array('name', 'age'); // 这里必须返回一个数值，里边的元素表示返回的属性名称\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\necho serialize($person);\necho '<br/>';\n代码运行结果：\n\n当在类外部使用serialize()时会调用这里的__sleep()方法\nO:6:\"Person\":2:{s:4:\"name\";s:8:\"5bCP5piO\";s:3:\"age\";i:25;}\n```\n\n十、 `__wakeup()`，执行unserialize()时，先会调用这个函数\n如果说 `__sleep()` 是白的，那么 `__wakeup()` 就是黑的了。\n\n那么为什么呢？\n\n因为：\n\n与之相反，`unserialize()` 会检查是否存在一个 `__wakeup()` 方法。如果存在，则会先调用 `__wakeup` 方法，预先准备对象需要的资源。\n作用：\n`__wakeup()` 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。\n还是看代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @return array\n   */\n  public function __sleep() {\n    echo \"当在类外部使用serialize()时会调用这里的__sleep()方法<br>\";\n    $this->name = base64_encode($this->name);\n    return array('name', 'age'); // 这里必须返回一个数值，里边的元素表示返回的属性名称\n  }\n \n  /**\n   * __wakeup\n   */\n  public function __wakeup() {\n    echo \"当在类外部使用unserialize()时会调用这里的__wakeup()方法<br>\";\n    $this->name = 2;\n    $this->sex = '男';\n    // 这里不需要返回数组\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\nvar_dump(serialize($person));\nvar_dump(unserialize(serialize($person)));\n运行结果：\n\n当在类外部使用serialize()时会调用这里的__sleep()方法\nstring(58) \"O:6:\"Person\":2:{s:4:\"name\";s:8:\"5bCP5piO\";s:3:\"age\";i:25;}\" 当在类外部使用serialize()时会调用这里的__sleep()方法\n当在类外部使用unserialize()时会调用这里的__wakeup()方法\nobject(Person)#2 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> int(2) [\"age\"]=> int(25) }\n```\n\n十一、 `__toString()`，类被当成字符串时的回应方法\n作用：\n\n`__toString()` 方法用于一个类被当成字符串时应怎样回应。例如 `echo $obj;` 应该显示些什么。\n注意：\n\n此方法必须返回一个字符串，否则将发出一条 `E_RECOVERABLE_ERROR` 级别的致命错误。\n警告：\n\n不能在 `__toString()` 方法中抛出异常。这么做会导致致命错误。\n代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __toString()\n  {\n    return 'go go go';\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\necho $person;\n结果：\n\ngo go go\n```\n\n那么如果类中没有 `__toString()` 这个魔术方法运行会发生什么呢？让我们来测试下：\n\n代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n   \n}\n \n$person = new Person('小明'); // 初始赋值\necho $person;\n结果：\n\nCatchable fatal error: Object of class Person could not be converted to string in D:\\phpStudy\\WWW\\test\\index.php on line 18\n很明显，页面报了一个致命错误，这是语法所不允许的。\n```\n\n十二、 `__invoke()`，调用函数的方式调用一个对象时的回应方法\n\n作用：\n\n当尝试以调用函数的方式调用一个对象时，`__invoke()` 方法会被自动调用。\n注意：\n\n本特性只在 PHP 5.3.0 及以上版本有效。\n直接上代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __invoke() {\n    echo '这可是一个对象哦';\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person();\n查看运行结果：\n\n这可是一个对象哦\n当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：\n\nFatal error: Function name must be a string in D:\\phpStudy\\WWW\\test\\index.php on line 18\n```\n\n十三、 `__set_state()`，调用var_export()导出类时，此静态方法会被调用。\n\n作用：\n\n自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。\n参数：\n\n本方法的唯一参数是一个数组，其中包含按 array('property' => value, ...) 格式排列的类属性。\n下面我们先来看看在没有加 `__set_state()` 情况按下，代码及运行结果如何：\n\n上代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\nvar_export($person);\n看结果：\n\nPerson::__set_state(array( 'sex' => '男', 'name' => '小明', 'age' => 25, ))\n很明显，将对象中的属性都打印出来了\n\n加了 __set_state() 之后：\n\n继续上代码：\n\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public static function __set_state($an_array)\n  {\n    $a = new Person();\n    $a->name = $an_array['name'];\n    return $a;\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person->name = '小红';\nvar_export($person);\n继续看结果：\n\nPerson::__set_state(array( 'sex' => '男', 'name' => '小红', 'age' => 25, ))\n```\n\n十四、 `__clone()`，当对象复制完成时调用\n在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。\n\n作用：\n\n对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 `__clone()` 方法）。对象中的 `__clone()` 方法不能被直接调用。\n\n语法：\n\n$copy_of_object = clone $object;\n注意：\n\n当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。\n\n当复制完成时，如果定义了 `__clone()` 方法，则新创建的对象（复制生成的对象）中的 `__clone()`方法会被调用，可用于修改属性的值（如果有必要的话）。\n看代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __clone()\n  {\n    echo __METHOD__.\"你正在克隆对象<br>\";\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person2 = clone $person;\n \nvar_dump('persion1:');\nvar_dump($person);\necho '<br>';\nvar_dump('persion2:');\nvar_dump($person2);\n看结果：\n\nPerson::__clone你正在克隆对象\nstring(9) \"persion1:\" object(Person)#1 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> string(6) \"小明\" [\"age\"]=> int(25) } \nstring(9) \"persion2:\" object(Person)#2 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> string(6) \"小明\" [\"age\"]=> int(25) }\n克隆成功。\n```\n\n十五、`__autoload()`，尝试加载未定义的类\n作用：\n\n你可以通过定义这个函数来启用类的自动加载。\n在魔术函数 `__autoload()` 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。\n\n但是有了 `__autoload()` 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。\n\n还是通过例子来看看吧：\n\n先看看以往的方式：\n\n```\n/** \n * 文件non_autoload.php \n */\n   \nrequire_once('project/class/A.php'); \nrequire_once('project/class/B.php'); \nrequire_once('project/class/C.php'); \n   \nif (条件A) { \n  $a = new A(); \n  $b = new B(); \n  $c = new C(); \n  // … 业务逻辑 \n} else if (条件B) { \n  $a = newA(); \n  $b = new B(); \n  // … 业务逻辑 \n}\n看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。\n\n那么如果使用 __autoload() 方式呢？\n\n/** \n * 文件autoload_demo.php \n */\nfunction __autoload($className) { \n  $filePath = “project/class/{$className}.php”; \n  if (is_readable($filePath)) { \n    require($filePath); \n  } \n} \n   \nif (条件A) { \n  $a = new A(); \n  $b = new B(); \n  $c = new C(); \n  // … 业务逻辑 \n} else if (条件B) { \n  $a = newA(); \n  $b = new B(); \n  // … 业务逻辑 \n}\n```\n\nok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。\n\n再来看看这里的效率如何，我们分析下：\n\n当php引擎第一次使用类A，但是找不到时，会自动调用 `__autoload`方法，并将类名“A”作为参数传入。所以，我们在 `__autoload()`中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。\n\n注意：\n\n这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用 `__autoload`，而是直接使用内存中的类A，不会导致多次包含。\n扩展：\n\n其实php发展到今天，已经有将 `spl_autoload_register` — 注册给定的函数作为 `__autoload`的实现了\n```\n<?php\n\nfunction classLoader($class)\n{\n    $path = str_replace('\\\\', DIRECTORY_SEPARATOR, $class);\n    $file = __DIR__ . '/src/' . $path . '.php';\n\n    if (file_exists($file)) {\n        require_once $file;\n    }\n}\nspl_autoload_register('classLoader');\n\nrequire_once  __DIR__ . '/src/Qiniu/functions.php';\n\n```\n\n\n十六、`__debugInfo()`，打印所需调试信息\n\n注意：\n\n该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。\n看代码：\n```\n<?php\nclass C {\n  private $prop;\n \n  public function __construct($val) {\n    $this->prop = $val;\n  }\n \n  /**\n   * @return array\n   */\n  public function __debugInfo() {\n    return [\n      'propSquared' => $this->prop ** 2,\n    ];\n  }\n}\n \nvar_dump(new C(42));\n结果：\n\nobject(C)#1 (1) { [\"propSquared\"]=> int(1764) }\n再次注意：\n\n这里的 `**` 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018/201804/20180401-1.md","raw":"---\nlayout: post\ntitle: PHP细节-03\ndate: 2018-04-01 08:55:26\ntags:\n---\n# 时间复杂度\n>时间复杂度的算法具体步骤是：\n⑴ 找出算法中的基本语句；\n算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。\n⑵ 计算基本语句的执行次数的数量级；\n只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。\n⑶ 用大Ο记号表示算法的时间性能。\n将基本语句执行次数的数量级放入大Ο记号中。\n如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。例如：\n```\nfor (i=1; i<=n; i++)  \n       x++;  \nfor (i=1; i<=n; i++)  \n    　for (j=1; j<=n; j++)  \n          x++;\n```\n\n>第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n2)，则整个算法的时间复杂度为Ο(n+n2)=Ο(n2)。\nΟ(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。\n\n\n# try catch finally\n\ntry内部正常执行try的内部逻辑，异常则执行catch的内部逻辑结构，但是不管执行的哪个都会执行完try catch的内部逻辑（非return）后执行finally的内部逻辑。\n\n如果try catch都有return，按照正常执行，然后执行finally的逻辑，再返回对应的try 或者catch里执行return。\n\n如果try catch finally都有return，执行完finally的逻辑后，会调用finally的return。\n\n```\n<?php\n\nclass test\n{\n    public function testTry()\n    {\n        $i = 0;\n        try {\n            $i = $i + 1;\n            return $i;\n        } catch (Exception $e) {\n            echo \"wc\";\n        } finally {\n            $i = $i + 2;\n            // print_r($i);\n            return \"1111\";//当finally有return的时候 返回这个，当注销后，返回try 或者是 catch的内容。\n        }\n\n    }\n}\n \n$b = new test();\necho $b->testTry();\n\n# 1111[Finished in 0.4s]\n```\n\n# set_error_handle\n捕获 notice waring 等错误，放置回调函数处理\n\n>E_ERROR,E_PARSE 等拦截不了的。使用 register_shutdown_function()回调函数处理任意类型错误。\n\n# trait 是一个新的特性\nTrait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题\n```\n<?php\n\nnamespace AlibabaCloud\\Client\\Regions;\n\nuse AlibabaCloud\\Client\\Traits\\EndpointTrait;\n\n/**\n * Class EndpointProvider\n *\n * @package    AlibabaCloud\\Client\\Regions\n *\n * @deprecated deprecated since version 2.0, Use AlibabaCloud instead.\n */\nclass EndpointProvider\n{\n    use EndpointTrait;\n}\n```\n\n# 预定义接口\n## Iterator 迭代器\n## Aggregate 集合体\n## Yield\t生成器\n## IteratorAggregate\n\n# 魔术常量\n```\n(1). __FILE__                当前文件路径\n(2). __DIR__                  当前文件目录\n(3). __LINE__                 在文件文件的那一行 \n(4). __FUNCTION__       在当前文件的那个函数中       返回 函数名\n(5). __CLASS__             在当前文件中的那个类中       返回 类名\n(6). __METHOD__          在当前文件的类中的那个方法中 返回 类名::方法名\n```\n\n# 魔术方法\n```\n__construct()，类的构造函数\n__destruct()，类的析构函数\n__call()，在对象中调用一个不可访问方法时调用\n__callStatic()，用静态方式中调用一个不可访问方法时调用\n__get()，获得一个类的成员变量时调用\n__set()，设置一个类的成员变量时调用\n__isset()，当对不可访问属性调用isset()或empty()时调用\n__unset()，当对不可访问属性调用unset()时被调用。\n__sleep()，执行serialize()时，先会调用这个函数\n__wakeup()，执行unserialize()时，先会调用这个函数\n__toString()，类被当成字符串时的回应方法\n__invoke()，调用函数的方式调用一个对象时的回应方法\n__set_state()，调用var_export()导出类时，此静态方法会被调用。\n__clone()，当对象复制完成时调用\n__autoload()，尝试加载未定义的类\n__debugInfo()，打印所需调试信息\n```\n\n范例\n下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。\n\n一、 `__construct()`，类的构造函数\n\nphp中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。\n\n1、 构造方法的作用\n\n通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。\n\n2、 构造方法的在类中的声明格式\n```\nfunction __constrct([参数列表]){\n \n  方法体 //通常用来对成员属性进行初始化赋值\n}\n```\n\n3、 在类中声明构造方法需要注意的事项\n\n1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。\n\n2、构造方法名称是以两个下画线开始的`__construct()`\n下面是它的例子：\n```\n<?php\n  class Person\n  {                                   \n      public $name;    \n      public $age;    \n      public $sex;    \n                                  \n    /**\n     * 显示声明一个构造方法且带参数\n     */                                           \n    public function __construct($name=\"\", $sex=\"男\", $age=22)\n    {   \n      $this->name = $name;\n      $this->sex = $sex;\n      $this->age = $age;\n    }\n     \n    /**\n     * say 方法\n     */\n    public function say()\n    { \n      echo \"我叫：\" . $this->name . \"，性别：\" . $this->sex . \"，年龄：\" . $this->age;\n    }  \n                                               \n  }\n```\n\n创建对象$Person1且不带任参数\n```\n$Person1 = new Person();\necho $Person1->say(); //输出:我叫：，性别：男，年龄：27\n```\n\n创建对象$Person2且带参数“小明”\n\n```\n$Person2 = new Person(\"小明\");\necho $Person2->say(); //输出：我叫：张三，性别：男，年龄：27\n```\n\n创建对象$Person3且带三个参数\n\n```\n$Person3 = new Person(\"李四\",\"男\",25);\necho $Person3->say(); //输出：我叫：李四，性别：男，年龄：25\n```\n\n二、`__destruct()`，类的析构函数\n通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。\n\n析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。\n\n析构方法是PHP5才引进的新内容。\n\n析造方法的声明格式与构造方法 `__construct()` 比较类似，也是以两个下划线开始的方法 `__destruct()` ，这种析构方法名称也是固定的。\n\n1、 析构方法的声明格式\n```\nfunction __destruct()\n{\n //方法体\n}\n```\n\n注意：析构函数不能带有任何参数。\n\n2、 析构方法的作用\n\n一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。\n举例演示，如下：\n```\n<?php\nclass Person{   \n                             \n  public $name;     \n  public $age;     \n  public $sex;     \n                                   \n  public function __construct($name=\"\", $sex=\"男\", $age=22)\n  {  \n    $this->name = $name;\n    $this->sex = $sex;\n    $this->age = $age;\n  }\n   \n  /**\n   * say 说话方法\n   */\n  public function say()\n  { \n    echo \"我叫：\".$this->name.\"，性别：\".$this->sex.\"，年龄：\".$this->age;\n  }  \n   \n  /**\n   * 声明一个析构方法\n   */\n  public function __destruct()\n  {\n      echo \"我觉得我还可以再抢救一下，我的名字叫\".$this->name;\n  }\n}\n\n \n$Person = new Person(\"小明\");\nunset($Person); //销毁上面创建的对象$Person\n```\n\n上面的程序运行时输出：\n\n我觉得我还可以再抢救一下，我的名字叫小明\n三、 `__call()`，在对象中调用一个不可访问方法时调用。\n该方法有两个参数，第一个参数 $function_name 会自动接收不存在的方法名，第二个 $arguments 则以数组的方式接收不存在方法的多个参数。\n\n1、 `__call()` 方法的格式：\n\n```\nfunction __call(string $function_name, array $arguments)\n{\n  // 方法体\n}\n```\n\n2、 `__call()` 方法的作用：\n\n为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 `__call()` 方法来避免。\n\n该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。\n请参考如下代码：\n```\n<?php\nclass Person\n{               \n  function say()\n  { \n                \n      echo \"Hello, world!<br>\"; \n  }   \n     \n  /**\n   * 声明此方法用来处理调用对象中不存在的方法\n   */\n  function __call($funName, $arguments)\n  { \n     echo \"你所调用的函数：\" . $funName . \"(参数：\" ; // 输出调用不存在的方法名\n     print_r($arguments); // 输出调用不存在的方法时的参数列表\n     echo \")不存在！<br>\\n\"; // 结束换行           \n  }                     \n}\n$Person = new Person();      \n$Person->run(\"teacher\"); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法\n$Person->eat(\"小明\", \"苹果\");       \n$Person->say();\n运行结果：\n\n你所调用的函数：run(参数：Array ( [0] => teacher ) )不存在！\n\n你所调用的函数：eat(参数：Array ( [0] => 小明 [1] => 苹果 ) )不存在！\n\nHello, world!\n```\n\n四、 `__callStatic()`，用静态方式中调用一个不可访问方法时调用\n此方法与上面所说的 `__call()` 功能除了 `__callStatic()` 是未静态方法准备的之外，其它都是一样的。\n\n请看下面代码：\n```\n<?php\nclass Person\n{\n  function say()\n  {\n \n    echo \"Hello, world!<br>\";\n  }\n \n  /**\n   * 声明此方法用来处理调用对象中不存在的方法\n   */\n  public static function __callStatic($funName, $arguments)\n  {\n    echo \"你所调用的静态方法：\" . $funName . \"(参数：\" ; // 输出调用不存在的方法名\n    print_r($arguments); // 输出调用不存在的方法时的参数列表\n    echo \")不存在！<br>\\n\"; // 结束换行\n  }\n}\n$Person = new Person();\n$Person::run(\"teacher\"); // 调用对象中不存在的方法，则自动调用了对象中的__call()方法\n$Person::eat(\"小明\", \"苹果\");\n$Person->say();\n运行结果如下：\n\n你所调用的静态方法：run(参数：Array ( [0] => teacher ) )不存在！\n你所调用的静态方法：eat(参数：Array ( [0] => 小明 [1] => 苹果 ) )不存在！\nHello, world!\n```\n\n五、 `__get()`，获得一个类的成员变量时调用\n在 php 面向对象编程中，类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 `__get()`。\n\n魔术方法`__get()`的作用\n在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。\n我们通过下面的 `__get()` 的实例来更进一步的连接它吧：\n```\n<?php\nclass Person\n{\n  private $name;\n  private $age;\n \n  function __construct($name=\"\", $age=1)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n \n  /**\n   * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理\n   * @param $propertyName\n   *\n   * @return int\n   */\n  public function __get($propertyName)\n  {  \n    if ($propertyName == \"age\") {\n      if ($this->age > 30) {\n        return $this->age - 10;\n      } else {\n        return $this->$propertyName;\n      }\n    } else {\n      return $this->$propertyName;\n    }\n  }\n}\n$Person = new Person(\"小明\", 60);  // 通过Person类实例化的对象，并通过构造方法为属性赋初值\necho \"姓名：\" . $Person->name . \"<br>\";  // 直接访问私有属性name，自动调用了__get()方法可以间接获取\necho \"年龄：\" . $Person->age . \"<br>\";  // 自动调用了__get()方法，根据对象本身的情况会返回不同的值\n运行结果：\n\n姓名：小明\n年龄：50\n```\n\n六、 `__set()`，设置一个类的成员变量时调用\n`__set()` 的作用：\n`__set( $property, $value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。\n\n请看下面的演示代码：\n```\n<?php\nclass Person\n{\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n \n  /**\n   * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值\n   * @param $property\n   * @param $value\n   */\n  public function __set($property, $value) {\n    if ($property==\"age\")\n    {\n      if ($value > 150 || $value < 0) {\n        return;\n      }\n    }\n    $this->$property = $value;\n  }\n \n  /**\n   * 在类中声明说话的方法，将所有的私有属性说出\n   */\n  public function say(){\n    echo \"我叫\".$this->name.\"，今年\".$this->age.\"岁了\";\n  }\n}\n \n$Person=new Person(\"小明\", 25); //注意，初始值将被下面所改变\n//自动调用了__set()函数，将属性名name传给第一个参数，将属性值”李四”传给第二个参数\n$Person->name = \"小红\";   //赋值成功。如果没有__set()，则出错。\n//自动调用了__set()函数，将属性名age传给第一个参数，将属性值26传给第二个参数\n$Person->age = 16; //赋值成功\n$Person->age = 160; //160是一个非法值，赋值失效\n$Person->say(); //输出：我叫小红，今年16岁了\n运行结果：\n\n我叫小红，今年16岁了\n```\n\n七、 `__isset()`，当对不可访问属性调用isset()或empty()时调用\n在看这个方法之前我们看一下isset()函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。\n\n那么如果在一个对象外面使用isset()这个函数去测定对象里面的成员是否被设定可不可以用它呢？\n\n分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用isset()函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个__isset()方法就可以了，当在类外部使用isset()函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的__isset()方法了帮我们完成这样的操作。\n\n`__isset()`的作用：当对不可访问属性调用 isset() 或 empty() 时，`__isset()` 会被调用。\n请看下面代码演示：\n```\n<?php\nclass Person\n{\n  public $sex;\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @param $content\n   *\n   * @return bool\n   */\n  public function __isset($content) {\n    echo \"当在类外部使用isset()函数测定私有成员{$content}时，自动调用<br>\";\n    echo isset($this->$content);\n  }\n}\n \n$person = new Person(\"小明\", 25); // 初始赋值\necho isset($person->sex),\"<br>\";\necho isset($person->name),\"<br>\";\necho isset($person->age),\"<br>\";\n运行结果如下：\n\n1 // public 可以 isset()\n当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo\n1 // __isset() 内第二个echo\n当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo\n1 // __isset() 内第二个echo\n```\n\n八、 `__unset()`，当对不可访问属性调用unset()时被调用。\n看这个方法之前呢，我们也先来看一下 unset() 函数，unset()这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。\n\n那么如果在一个对象外部去删除对象内部的成员属性用unset()函数可以吗？\n\n这里自然也是分两种情况：\n\n1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。\n\n2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。\n\n虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上`__unset()`这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了__unset()这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用`__unset()`函数来帮我们删除对象内部的私有成员属性。\n\n请看如下代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  private $name;\n  private $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @param $content\n   *\n   * @return bool\n   */\n  public function __unset($content) {\n    echo \"当在类外部使用unset()函数来删除私有成员时自动调用的<br>\";\n    echo isset($this->$content);\n  }\n}\n \n$person = new Person(\"小明\", 25); // 初始赋值\nunset($person->sex);\nunset($person->name);\nunset($person->age);\n运行结果：\n\n当在类外部使用unset()函数来删除私有成员时自动调用的\n1当在类外部使用unset()函数来删除私有成员时自动调用的\n```\n\n九、 `__sleep()`，执行serialize()时，先会调用这个函数\nserialize() 函数会检查类中是否存在一个魔术方法 `__sleep()`。如果存在，则该方法会优先被调用，然后才执行序列化操作。\n\n此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。\n\n如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。\n\n注意：\n\n`__sleep()` 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。\n作用：\n\n`__sleep()` 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。\n具体请参考如下代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @return array\n   */\n  public function __sleep() {\n    echo \"当在类外部使用serialize()时会调用这里的__sleep()方法<br>\";\n    $this->name = base64_encode($this->name);\n    return array('name', 'age'); // 这里必须返回一个数值，里边的元素表示返回的属性名称\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\necho serialize($person);\necho '<br/>';\n代码运行结果：\n\n当在类外部使用serialize()时会调用这里的__sleep()方法\nO:6:\"Person\":2:{s:4:\"name\";s:8:\"5bCP5piO\";s:3:\"age\";i:25;}\n```\n\n十、 `__wakeup()`，执行unserialize()时，先会调用这个函数\n如果说 `__sleep()` 是白的，那么 `__wakeup()` 就是黑的了。\n\n那么为什么呢？\n\n因为：\n\n与之相反，`unserialize()` 会检查是否存在一个 `__wakeup()` 方法。如果存在，则会先调用 `__wakeup` 方法，预先准备对象需要的资源。\n作用：\n`__wakeup()` 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。\n还是看代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  /**\n   * @return array\n   */\n  public function __sleep() {\n    echo \"当在类外部使用serialize()时会调用这里的__sleep()方法<br>\";\n    $this->name = base64_encode($this->name);\n    return array('name', 'age'); // 这里必须返回一个数值，里边的元素表示返回的属性名称\n  }\n \n  /**\n   * __wakeup\n   */\n  public function __wakeup() {\n    echo \"当在类外部使用unserialize()时会调用这里的__wakeup()方法<br>\";\n    $this->name = 2;\n    $this->sex = '男';\n    // 这里不需要返回数组\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\nvar_dump(serialize($person));\nvar_dump(unserialize(serialize($person)));\n运行结果：\n\n当在类外部使用serialize()时会调用这里的__sleep()方法\nstring(58) \"O:6:\"Person\":2:{s:4:\"name\";s:8:\"5bCP5piO\";s:3:\"age\";i:25;}\" 当在类外部使用serialize()时会调用这里的__sleep()方法\n当在类外部使用unserialize()时会调用这里的__wakeup()方法\nobject(Person)#2 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> int(2) [\"age\"]=> int(25) }\n```\n\n十一、 `__toString()`，类被当成字符串时的回应方法\n作用：\n\n`__toString()` 方法用于一个类被当成字符串时应怎样回应。例如 `echo $obj;` 应该显示些什么。\n注意：\n\n此方法必须返回一个字符串，否则将发出一条 `E_RECOVERABLE_ERROR` 级别的致命错误。\n警告：\n\n不能在 `__toString()` 方法中抛出异常。这么做会导致致命错误。\n代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __toString()\n  {\n    return 'go go go';\n  }\n}\n \n$person = new Person('小明'); // 初始赋值\necho $person;\n结果：\n\ngo go go\n```\n\n那么如果类中没有 `__toString()` 这个魔术方法运行会发生什么呢？让我们来测试下：\n\n代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n   \n}\n \n$person = new Person('小明'); // 初始赋值\necho $person;\n结果：\n\nCatchable fatal error: Object of class Person could not be converted to string in D:\\phpStudy\\WWW\\test\\index.php on line 18\n很明显，页面报了一个致命错误，这是语法所不允许的。\n```\n\n十二、 `__invoke()`，调用函数的方式调用一个对象时的回应方法\n\n作用：\n\n当尝试以调用函数的方式调用一个对象时，`__invoke()` 方法会被自动调用。\n注意：\n\n本特性只在 PHP 5.3.0 及以上版本有效。\n直接上代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __invoke() {\n    echo '这可是一个对象哦';\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person();\n查看运行结果：\n\n这可是一个对象哦\n当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：\n\nFatal error: Function name must be a string in D:\\phpStudy\\WWW\\test\\index.php on line 18\n```\n\n十三、 `__set_state()`，调用var_export()导出类时，此静态方法会被调用。\n\n作用：\n\n自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。\n参数：\n\n本方法的唯一参数是一个数组，其中包含按 array('property' => value, ...) 格式排列的类属性。\n下面我们先来看看在没有加 `__set_state()` 情况按下，代码及运行结果如何：\n\n上代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\nvar_export($person);\n看结果：\n\nPerson::__set_state(array( 'sex' => '男', 'name' => '小明', 'age' => 25, ))\n很明显，将对象中的属性都打印出来了\n\n加了 __set_state() 之后：\n\n继续上代码：\n\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public static function __set_state($an_array)\n  {\n    $a = new Person();\n    $a->name = $an_array['name'];\n    return $a;\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person->name = '小红';\nvar_export($person);\n继续看结果：\n\nPerson::__set_state(array( 'sex' => '男', 'name' => '小红', 'age' => 25, ))\n```\n\n十四、 `__clone()`，当对象复制完成时调用\n在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。\n\n作用：\n\n对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 `__clone()` 方法）。对象中的 `__clone()` 方法不能被直接调用。\n\n语法：\n\n$copy_of_object = clone $object;\n注意：\n\n当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。\n\n当复制完成时，如果定义了 `__clone()` 方法，则新创建的对象（复制生成的对象）中的 `__clone()`方法会被调用，可用于修改属性的值（如果有必要的话）。\n看代码：\n```\n<?php\nclass Person\n{\n  public $sex;\n  public $name;\n  public $age;\n \n  public function __construct($name=\"\", $age=25, $sex='男')\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->sex = $sex;\n  }\n \n  public function __clone()\n  {\n    echo __METHOD__.\"你正在克隆对象<br>\";\n  }\n \n}\n \n$person = new Person('小明'); // 初始赋值\n$person2 = clone $person;\n \nvar_dump('persion1:');\nvar_dump($person);\necho '<br>';\nvar_dump('persion2:');\nvar_dump($person2);\n看结果：\n\nPerson::__clone你正在克隆对象\nstring(9) \"persion1:\" object(Person)#1 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> string(6) \"小明\" [\"age\"]=> int(25) } \nstring(9) \"persion2:\" object(Person)#2 (3) { [\"sex\"]=> string(3) \"男\" [\"name\"]=> string(6) \"小明\" [\"age\"]=> int(25) }\n克隆成功。\n```\n\n十五、`__autoload()`，尝试加载未定义的类\n作用：\n\n你可以通过定义这个函数来启用类的自动加载。\n在魔术函数 `__autoload()` 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。\n\n但是有了 `__autoload()` 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。\n\n还是通过例子来看看吧：\n\n先看看以往的方式：\n\n```\n/** \n * 文件non_autoload.php \n */\n   \nrequire_once('project/class/A.php'); \nrequire_once('project/class/B.php'); \nrequire_once('project/class/C.php'); \n   \nif (条件A) { \n  $a = new A(); \n  $b = new B(); \n  $c = new C(); \n  // … 业务逻辑 \n} else if (条件B) { \n  $a = newA(); \n  $b = new B(); \n  // … 业务逻辑 \n}\n看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。\n\n那么如果使用 __autoload() 方式呢？\n\n/** \n * 文件autoload_demo.php \n */\nfunction __autoload($className) { \n  $filePath = “project/class/{$className}.php”; \n  if (is_readable($filePath)) { \n    require($filePath); \n  } \n} \n   \nif (条件A) { \n  $a = new A(); \n  $b = new B(); \n  $c = new C(); \n  // … 业务逻辑 \n} else if (条件B) { \n  $a = newA(); \n  $b = new B(); \n  // … 业务逻辑 \n}\n```\n\nok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。\n\n再来看看这里的效率如何，我们分析下：\n\n当php引擎第一次使用类A，但是找不到时，会自动调用 `__autoload`方法，并将类名“A”作为参数传入。所以，我们在 `__autoload()`中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。\n\n注意：\n\n这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用 `__autoload`，而是直接使用内存中的类A，不会导致多次包含。\n扩展：\n\n其实php发展到今天，已经有将 `spl_autoload_register` — 注册给定的函数作为 `__autoload`的实现了\n```\n<?php\n\nfunction classLoader($class)\n{\n    $path = str_replace('\\\\', DIRECTORY_SEPARATOR, $class);\n    $file = __DIR__ . '/src/' . $path . '.php';\n\n    if (file_exists($file)) {\n        require_once $file;\n    }\n}\nspl_autoload_register('classLoader');\n\nrequire_once  __DIR__ . '/src/Qiniu/functions.php';\n\n```\n\n\n十六、`__debugInfo()`，打印所需调试信息\n\n注意：\n\n该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。\n看代码：\n```\n<?php\nclass C {\n  private $prop;\n \n  public function __construct($val) {\n    $this->prop = $val;\n  }\n \n  /**\n   * @return array\n   */\n  public function __debugInfo() {\n    return [\n      'propSquared' => $this->prop ** 2,\n    ];\n  }\n}\n \nvar_dump(new C(42));\n结果：\n\nobject(C)#1 (1) { [\"propSquared\"]=> int(1764) }\n再次注意：\n\n这里的 `**` 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1","published":1,"updated":"2019-04-02T09:12:55.703Z","comments":1,"photos":[],"link":"","_id":"ck39ugjq800b7pgwis7owlzqo"},{"layout":"post","title":"MySQL 多表查询、视图、事物、索引","date":"2015-09-02T09:18:51.000Z","_content":"### 多表查询分类\n需求：在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。\n语法：\n\t``select * from 表A,表B 【where 子句】``\n说明：\n\t从多个表中获取where子句的匹配条件进行获取数据\n\t如果省略where子句，那么得到的结果是一个笛卡尔积\n笛卡尔积：\n\t得到的结果集的记录数是：两个表的记录数的乘积\n\t字段数：两个表的字段数的和\n#### union联合查询\n注意：\n>对同一个表的不同的部分进行不同的操作\n一般用于对比较大的表进行分表存储，联合查询\n\n```\nmysql> (select * from stu where sex=1 order by age limit 999)union(select * from stu where sex=0 order by age desc limit 999);\n+----+--------+----------+------+------+------+\n| id | s_num  | s_name   | sex  | age  | c_id |\n+----+--------+----------+------+------+------+\n|  7 | it007  | songjiu  | 1    |   18 |    2 |\n|  1 | it001  | zhangsan | 1    |   20 |    1 |\n|  6 | it006  | wangwang | 1    |   20 |    1 |\n|  9 | it009  | zhener   | 1    |   23 |    1 |\n| 11 | it0011 | wu       | 1    |   23 |    3 |\n|  2 | it002  | lisi     | 1    |   26 |    2 |\n| 10 | it0010 | qianqian | 1    |   26 |    1 |\n|  4 | it004  | zhaoliu  | 1    |   30 |    3 |\n| 13 | it0013 | deng     | 0    |   34 |    5 |\n|  5 | it005  | tianqi   | 0    |   28 |    1 |\n| 12 | it0012 | chen     | 0    |   26 |    3 |\n|  3 | it003  | wangwu   | 0    |   22 |    2 |\n|  8 | it008  | zhousan  | 0    |   19 |    2 |\n+----+--------+----------+------+------+------+\n13 rows in set (0.00 sec)\n```\n\n#### 内连接【inner join】\n语法一：``select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段``\n>inner是可以省略的\n\n```\nmysql> select * from stuinfo inner join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n语法二：``select 列名 from 表1,表2 where 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo,stuMarks where stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n>select * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 inner join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：一样的，因为内连接显示的是两个表的公共记录。\n\n>三个表的内连接如何实现？\n答：select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段 inner join 表3 on 表2.公共字段=表3.公共字段\n\n#### 左外连接【left join】\n以左边的表为标准，如果右边的表没有对应的记录，用NULL填充。\n语法：``select 列名 from 表1 left join 表2 on 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo left join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       | NULL    | NULL   |        NULL |    NULL |\n| s25319 | 梅超风       | 女     |     23 |       5 | 河北       | NULL    | NULL   |        NULL |    NULL |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n7 rows in set (0.00 sec)\n```\n\n>select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 left join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：不一样，第一个SQL语句以表1为准，第二个SQL语句以表2为准\n\n#### 右外连接【right join】\n以右边的表为标准，如果右边的表没有对应的记录，用NULL填充。\n语法：``select 列名 from 表1 right join 表2 on 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo right join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n\n```\n\n>思考：select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 right join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：一样。\n\n#### 交叉连接【cross join】\n1、如果没有连接表达式返回的是笛卡尔积\n``mysql> select * from stuinfo cross join stuMarks;``\n等价于\n``mysql> select * from stuinfo,stuMarks;``\n2、如果有连接表达式等价于内连接\n\n```\nmysql> select * from stuinfo cross join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n```\n\n#### 自然连接【natural】\n自动的判断连接条件，它是通过同名字段来判断的\n自然连接又分为：\n1、\t自然内连接\t\tnatural join\n``select * from stuinfo natural join stuMarks;``\n2、\t自然左外连接\t\tnatural left join\n``select * from stuinfo natural left join stuMarks;``\n3、\t自然右外连接\t\tnatural right join\n``select * from stuinfo natural rigth join stuMarks;``\n\n>自然连接结论：\n1、\t表连接通过同名的字段来连接的\n2、\t如果没有同名的字段返回笛卡尔积\n3、\t会对结果进行整理，整理的规则如下\na)\t连接字段保留一个\nb)\t连接字段放在最前面\n\n#### using()\n1、用来指定连接字段。\n2、using()也会对连接字段进行整理，整理方式和自然连接是一样的。\n``select * from stuinfo inner join stuMarks using(id);``\n\n### 子查询\n1、\t语法：select 语句 where 条件 (select … from 表)\n2、\t外面的查询称为父查询，括号中的查询称为子查询\n3、\t子查询为父查询提供查询条件\n#### =子查询\n使用表连接的方法\n\n```\nmysql> select stuName,writtenExam from stuinfo natural join stuMarks having writtenExam>60;\n+--------------+-------------+\n| stuName      | writtenExam |\n+--------------+-------------+\n| 李斯文       |          80 |\n| 欧阳俊雄     |          65 |\n| 张秋丽       |          77 |\n+--------------+-------------+\n3 rows in set (0.00 sec)\n```\n\n使用子查询方法\n\n```\nmysql> select * from stuinfo where stuNo in(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n```\n\n找出最高分\n\n```\nmysql> select * from stuinfo where stuNo=(select stuNo from stuMarks order by writtenExam desc limit 1);\n+--------+-----------+--------+--------+---------+------------+\n| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |\n+--------+-----------+--------+--------+---------+------------+\n| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |\n+--------+-----------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=(select stuNo from stuMarks where writtenExam=(select max(writtenExam) from stuMarks));\n+--------+-----------+--------+--------+---------+------------+\n| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |\n+--------+-----------+--------+--------+---------+------------+\n| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |\n+--------+-----------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n```\n\n#### in|not in子查询\n用于子查询的返回结果多个值\n\n#### some()、any()、all()\nsome:一些\nany:一些\t\t和some()是一样的  类似于in\nall:全部\n\n=some（=any） 等于其中任何一个\n!=some（!=any）不等于其中任何一个就可以了\n=all 等于其中的所有\n!=all 不等于其中的所有\n\n>思考：!=some()和not in一样吗？\n答：不一样；!=some()表示父查询的记录只要不等于some中的任意一条即可。\n!=all()才和not in一样\n\n```\nmysql> select * from stuinfo where stuNo=some(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=any(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=all(select stuNo from stuMarks where writtenExam>60);\nEmpty set (0.00 sec)\n```\n\n#### exists和not exists\n如果有人大于等于80分就显示所有的学生\n\n```\nmysql> select * from stuinfo where exists (select * from stuMarks where writtenExam>=80);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       |\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       |\n| s25319 | 梅超风       | 女     |     23 |       5 | 河北       |\n+--------+--------------+--------+--------+---------+------------+\n7 rows in set (0.00 sec)\n```\n\n如果没有人超过80分就显示所有的学生\n\n```\nmysql> select * from stuinfo where not exists (select * from stuMarks where writtenExam>=80);\nEmpty set (0.00 sec)\n```\n\n#### 子查询分类\n1、\t标量子查询：子查询返回的结果就一个\n2、\t列子查询：子查询返回的结果是一个列表\n3、\t行子查询：子查询返回的结果返回一行\n4、\t表子查询：子查询返回的结果当成一个表(一定要取别名)\n\n```\nmysql> select *,count(*) from (select * from stuinfo order by stuAge desc) as new1 group by stuSex;\n+--------+--------------+--------+--------+---------+------------+----------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | count(*) |\n+--------+--------------+--------+--------+---------+------------+----------+\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |        3 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       |        4 |\n+--------+--------------+--------+--------+---------+------------+----------+\n2 rows in set (0.00 sec)\n```\n\n>子查询一定要取别名\n\n### 视图【view】\n1、\t视图是一张虚拟表，它表示一张表的部分或多张表的综合的结构。\n2、\t视图仅仅是表结构，没有表数据。视图的结构和数据建立在表的基础上。\n\n#### 创建视图\n语法\n\ncreate [or replace] view 视图的名称\nas\n\tselect语句\n\n因为视图是一个表结构，所以创建视图后，会在数据库文件夹中多一个与视图名同名的.frm文件\n\n```\nmysql> create view vw_stu\n    -> as\n    ->   select * from stuinfo nutural join stumarks using(stuno);\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n#### 查询视图\n视图是一张虚拟表，视图的用法和表的用法一样\n\n```\nmysql> select * from vw_stu;\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n#### 查看视图的结构\n\n```\nmysql> desc vw_stu;\n+-------------+-------------+------+-----+---------+-------+\n| Field       | Type        | Null | Key | Default | Extra |\n+-------------+-------------+------+-----+---------+-------+\n| stuNo       | char(6)     | NO   |     | NULL    |       |\n| stuName     | varchar(10) | NO   |     | NULL    |       |\n| stuSex      | char(2)     | NO   |     | NULL    |       |\n| stuAge      | tinyint(4)  | NO   |     | NULL    |       |\n| stuSeat     | tinyint(4)  | NO   |     | NULL    |       |\n| stuAddress  | varchar(10) | NO   |     | NULL    |       |\n| examNo      | char(7)     | NO   |     | NULL    |       |\n| writtenExam | int(11)     | YES  |     | NULL    |       |\n| labExam     | int(11)     | YES  |     | NULL    |       |\n+-------------+-------------+------+-----+---------+-------+\n9 rows in set (0.02 sec)\n```\n\n#### 查看创建视图的语法\n\n```\nmysql> show create view vw_stu \\g\nn| View   | Create View                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | character_set_client | collation_connection |\n+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| vw_stu | CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_stu` AS select `nutural`.`stuNo` AS `stuNo`,`nutural`.`stuName` AS `stuName`,`nutural`.`stuSex` AS `stuSex`,`nutural`.`stuAge` AS `stuAge`,`nutural`.`stuSeat` AS `stuSeat`,`nutural`.`stuAddress` AS `stuAddress`,`stumarks`.`examNo` AS `examNo`,`stumarks`.`writtenExam` AS `writtenExam`,`stumarks`.`labExam` AS `labExam` from (`stuinfo` `nutural` join `stumarks` on((`nutural`.`stuNo` = `stumarks`.`stuNo`))) | utf8                 | utf8_general_ci      |\nn1 row in set (0.00 sec)\n```\n\n#### 显示所有视图\n\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| stuMarks        |\n| stuinfo         |\n| vw_stu          |\n+-----------------+\n3 rows in set (0.01 sec)\n```\n\n#### 精确查找视图\n方法一：information_schema中的views表保存的是视图信息\n\n```\nmysql> select table_name from information_schema.views;\n+------------+\n| table_name |\n+------------+\n| vw_stu     |\n+------------+\n1 row in set (0.12 sec)\n```\n\n方法二：show table status查看表的属性\n\n```\nmysql> show table status\\G\n*************************** 1. row ***************************\n           Name: stuMarks\n         Engine: InnoDB\n        Version: 10\n     Row_format: Compact\n           Rows: 5\n Avg_row_length: 3276\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2015-08-31 17:18:54\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options: \n        Comment: \n*************************** 2. row ***************************\n           Name: stuinfo\n         Engine: InnoDB\n        Version: 10\n     Row_format: Compact\n           Rows: 7\n Avg_row_length: 2340\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2015-08-31 17:18:54\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options: \n        Comment: \n*************************** 3. row ***************************\n           Name: vw_stu\n         Engine: NULL\n        Version: NULL\n     Row_format: NULL\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: NULL\n    Update_time: NULL\n     Check_time: NULL\n      Collation: NULL\n       Checksum: NULL\n Create_options: NULL\n        Comment: VIEW\n3 rows in set (0.00 sec)\n```\n\n显示所有视图的语法是\n\n```\nmysql> show table status where comment='view'\\G\n*************************** 1. row ***************************\n           Name: vw_stu\n         Engine: NULL\n        Version: NULL\n     Row_format: NULL\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: NULL\n    Update_time: NULL\n     Check_time: NULL\n      Collation: NULL\n       Checksum: NULL\n Create_options: NULL\n        Comment: VIEW\n1 row in set (0.00 sec)\n```\n\n#### 更改视图\n语法：\nalter view 视图名\nas\n\tselect 语句\n\n```\nmysql> alter view vw_stu\n    -> as\n    ->  select stuaddress,count(stuaddress) from stuinfo left join stumarks using(stuno) group by stusex;         Query OK, 0 rows affected (0.02 sec)\nmysql> select * from vw_stu;\n+------------+-------------------+\n| stuaddress | count(stuaddress) |\n+------------+-------------------+\n| 北京       |                 3 |\n| 上海       |                 4 |\n+------------+-------------------+\n2 rows in set (0.02 sec)\n```\n\n#### 删除视图\n语法：``drop view [if exists] 视图1,视图2,…``\n\n```\nmysql> drop view if exists vw_stu;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select table_name from information_schema.views;\nEmpty set (0.03 sec)\n```\n\n#### 视图的作用\t\n1、\t筛选数据，防止未经许可访问敏感数据\n2、\t增加表的兼容性\n3、\t隐藏表结构\n4、\t降低SQL语句的复杂度\n\n#### 视图的算法\n找出语文成绩最高的男生和女生\n既然子查询当成一个表，我们可以用视图来代替\n将子查询写法改为如下\n\n>结果不正确！原因：这是因为视图的算法造成的\n\n#### 视图的算法\n1、\tmerge：合并算法，将视图的语句和外层的语句合并后在执行。\n2、\ttemptable：临时表算法，将视图生成一个临时表，再执行外层语句\n3、\tundefined：未定义，MySQL到底用merge还是用temptable由MySQL决\n定，这是一个默认的算法，一般视图都会选择merge算法，因为merge效率高。\n\n#### 解决\n在创建视图的时候指定视图的算法\ncreate view algorithm=temptable 视图名\nas\n\tselect 语句\t\n\n重写视图\n\n重新执行查询\n\n### 事务安全【transaction】\n1、\t事务是一个不可分割的执行单元\n2、\t事务作为一个整体要么一起执行，要么一起回滚\n\n#### 开启事务1\n语法：``start transaction或begin [work]``\n\n#### 执行sql更新语句2\n``update 表名 set 字段名=字段内容 条件``\n\n#### 设置还原点3\n``savepoint sp1``\n\n#### 执行sql更新语句4\n\n#### 成功提交事务5\n语法：commit\n\n#### 失败回滚事务5\n语法：rollback\n\n\n```\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values (4,4);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> rollback;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values (4,4);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> commit;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n```\n\n>思考：事务什么时候产生？什么时候结束？\n答：开启的时候产生，提交事务或回滚事务都结束\n脚下留心：只有innodb和BDB才支持事务，myisam不支持事务。\n\n#### 事务的特性（ACID）\n1、\t原子性（Atomicity）：事务是一个整体，不可以再分，要么一起执行，要么一起不执行。\n2、\t一致性（Consistency）：事务完成时，数据必须处于一致的状态。\n3、\t隔离性（Isolation）：每个事务都是相互隔离的\n4、\t永久性（Durability）：事务完成后，对数据的修改是永久性的。\n\n#### 自动提交事务\n默认情况下，每个独立的SQL语句都在自动提交事务的。\n通过如下语句查看是否自动提交事务\n\n可以更改自动提交事务\nset autocommit=0 | 1；\n\n#### MySQL的锁的机制\n当在对数据表进行并发(同一时刻会有多个客户端操作同一条记录)操作时，就会触发MySQL的锁的机制\n①、表锁当某个客户端对一个表进行更改操作时会锁住整个表(其他客户端只能等待)非键值\n②、行锁--键值\n\n\n\n### 索引【index】\n索引的优点：查询速度快\n索引的缺点：\n1、\t增、删、改（数据操作语句）效率低了\n2、\t索引占用空间\n\n#### 索引的类型\n1、\t普通索引\n2、\t唯一索引（唯一键）\n3、\t主键索引：只要主键就自动创建主键索引，不需要手动创建。\n4、\t全文索引，搜索引擎使用，MySQL不支持中文的全文索引，我们通过sphinx去解决中文的全文索引。\n\n#### 创建普通索引【create index】\n语法：``create index 索引名 on 表名 （字段名）``\n\n创建索引\n查看索引\n\n#### 通过修改表的方式创建索引\n语法：``alter table 表名 add index [索引的名称] （列名）``\n创建索引\n\n#### 创建表的时候指定索引\n\n```\nmysql> create table temp(\n    -> id int,\n    -> name varchar(20),\n    -> age tinyint,\n    -> index ix_temp_name(name),\t\t--创建索引\n    -> key(age)\t\t\t\t--创建索引\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show create table temp\\G\n*************************** 1. row ***************************\n       Table: temp\nCreate Table: CREATE TABLE `temp` (\n  `id` int(11) DEFAULT NULL,\n  `name` varchar(20) DEFAULT NULL,\n  `age` tinyint(4) DEFAULT NULL,\n  KEY `ix_temp_name` (`name`),\n  KEY `age` (`age`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n```\n\n#### 创建唯一索引\n语法一：create unique index 索引名 on 表名 （字段名）\n语法二：alter table 表名 add unqiue index [索引的名称] （列名）\n语法三：创建表的时候添加唯一索引，和创建唯一键是一样的。\n\n#### 创建多列组合索引\n\n#### 删除索引\n语法：``drop index 索引名 on 表名``\n\n#### 创建索引的指导原则\n1、\t该列用于频繁搜索\n2、\t改列用于排序\n3、\t公共字段要创建索引\n4、\t如果表中的数据很少，不需要创建索引。MySQL搜索索引的时间比逐条搜索数据的时间要长。\n5、\t如果一个字段上的数据只有几个不同的值，改字段不适合做索引，比如性别。\n\n### 存储过程【procedure】\n#### 存储过程的优点\n1、\t存储过程可以减少网络流量\n2、\t允许模块化设计\n3、\t支持事务\n\n#### 创建存储过程\n语法：\ncreate procedure 存储过程名(参数)\nbegin\n\t//sql语句\nend;\n\n>脚下留心：由于过程中有很多SQL语句，每个语句的结束都要用（；）表示。默认情况下，分号既表示语句结束，又表示向服务器发送SQL语句。我们希望分号仅表示语句的结束，不要将SQL语句发送到服务器执行，通过delimiter来更改结束符。\n\n``mysql>delimiter //``\n\n#### 创建简单的存储过程\n\n#### 调用存储过程\n语法：``call 存储过程名()``\n\n#### 删除存储过程\n语法：``drop procedure [if exists] 存储过程名``\n\n#### 创建复杂的存储过程\n\n```\nmysql> create procedure proc(param char(6))\n    -> begin\n    ->      select * from stuinfo where stuno=param;\n    ->      select * from stumarks where stuno=param;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc('s25301') //\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n\n+---------+--------+-------------+---------+\n| examNo  | stuNo  | writtenExam | labExam |\n+---------+--------+-------------+---------+\n| s271816 | s25301 |          77 |      82 |\n+---------+--------+-------------+---------+\n1 row in set (0.01 sec)\n```\n\n#### 存储过程的参数\n存储过程不能使用return返回值，要返回值只能通过“输出参数”来向外传递值。\n存储过程的参数分为：输入参数（in）【默认】，输出参数（out），输入输出参数（inout）\n\n### 变量\n#### 局部变量\n1、\t通过declare关键字来声明变量\n2、\t语法：declare 变量名 数据类型 [default 默认值]\n3、\t使用set或select …into…给变量赋值\n\n使用select…into…给变量赋值\n```\nmysql> create procedure proc(in id char(6))\n    -> begin\n    ->      declare name varchar(20);\n    ->      declare sex char(1);\n    ->      select stuname,stusex into name,sex from stuinfo where stuno=id;\n    ->      select name,sex from dual;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc('s25301')//\n+--------+------+\n| name   | sex  |\n+--------+------+\n| 张秋丽       | 男     |\n+--------+------+\n1 row in set (0.00 sec)\n```\n\n例题：查找同桌\n例题：使用set赋值\n\n#### 全局变量\n在变量前面加一个@，就是全局变量\n全局变量是一个弱类型的变量，它的类型取决于付给变量的值\n\n#### 系统变量\n只要变量名前面有两个@@的肯定是系统变量\n\n### 带输出参数的存储过程【out】\n\n```\nmysql> create procedure proc(num int,out result int)\n    -> begin\n    ->      set result=num*num;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc(5,@result) //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select @result from dual //\n+---------+\n| @result |\n+---------+\n|      25 |\n+---------+\n\n```\n\n### 带输入输出参数的存储过程【inout】\n\n### 查看存储过程的信息\n\n\n\n\n\n\n\n---------------内连接----------------\n--语法一：\n``select i.stuno,stuname,writtenexam from stuinfo i inner join stumarks s on i.stuno=s.stuno;``\n--语法二：\n``select stuinfo.stuno,stuname,writtenexam from stuinfo,stumarks where stuinfo.stuno=stumarks.stuno;``\n--inner 可以省略\n``select i.stuno,stuname,writtenexam from stuinfo i join stumarks s on i.stuno=s.stuno;``\n--------------左外连接,右外连接----------\n``select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo left join stumarks on stuinfo.stuno=stumarks.stuno;``\n\n``select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo right join stumarks on stuinfo.stuno=stumarks.stuno;``\n\n--------------自然连接---------------\n--自然内连接\n``select * from t1 natural join t2;``\n--自然左外连接\n``select * from t1 natural left join t2;``\n--自然右外连接\n``select * from t1 natural right join t2;``\n\n----------------using()-------------------\n``select * from t1 inner join t2 using(id);``\n``select * from t1 left join t2 using(id);``\n\n-------------------子查询--------------------------\n--查找80分的学生\n--方法一\n``select stuname,writtenexam from stuinfo natural join stumarks where writtenexam=80;``\n--方法二\n``select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=80);``\n\n--找出最高分\n``select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=(select max(writtenexam) from stumarks));``\n\n--查找及格的学生\n``select * from stuinfo where stuno in (select stuno from stumarks where writtenexam>=60);``\n\n--查找不及格的学生\n``select * from stuinfo where stuno not in (select stuno from stumarks where writtenexam>=60);``\n\n--查找缺考的学生\n``select * from stuinfo where stuno in (select stuno)``\n\n\n``select * from stuinfo where stuno in (select stuno from stuinfo natural left join stumarks where writtenexam is null);``\n\n\n--some\n\n``select * from stuinfo where stuno=some(select stuno from stumarks where writtenexam>=60);``\n\n--exits\n``select * from stuinfo where exists (select * from stumarks where writtenexam>=80)``\n\n--行子查询\n``select * from stu where (stusex,ch) in (select stusex,max(ch) from stu group by stusex);``\n\n--表子查询\n``select * from (select * from stu order by ch desc) as t group by stusex; ``\n\n--示地区和每个地区参见考试的人数，并按人数降序排列\n``select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress order by c desc;``\n\n--显示有学生参见考试的地区\n``select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress having c>0;``\n\n``select distinct stuaddress from stuinfo natural right join stumarks where stuaddress is not null;``\n\n--显示男生和女生的人数\n``select stusex,count(*) from stuinfo where stusex='男' union select stusex,count(*) from stuinfo where stusex='女';``\n\n``select sum(stusex='男') 男,sum(stusex='女') 女 from stuinfo;``\n\n--显示每个地区的男生和女生，以及总人数\n``select stuaddress,count(*) 总人数,sum(stusex='男') 男,sum(stusex='女') 女 from stuinfo group by stuaddress;``\n\n\n-----------------------视图-----------------------\n\n```\ncreate view vw_stu\nas\n  select stuname,stusex,writtenexam from stuinfo inner join stumarks using (stuno);\n```\n\n\n``select * from (select * from stu order by ch desc) t group by stusex;``\n\n```\ncreate or replace algorithm=temptable view vw1\nas\nselect * from stu order by ch desc;\n```\n\n```\n--\ncreate table temp(\nid int,\nname varchar(20),\nage tinyint,\nindex ix_temp_name(name),\nkey(age)\n)\n```\n\n\n### 多表查询分类\n将多个表的数据横向的联合起来。\n1、\t内连接\n2、\t外连接\na)\t左外连接\nb)\t右外连接\n3、\t交叉连接\n4、\t自然连接\n\n","source":"_posts/2015/201509/20150902-1.md","raw":"layout: post\ntitle: MySQL 多表查询、视图、事物、索引\ndate: 2015-09-02 17:18:51\ntags:\n- MySQL\ncategories:\n- MySQL\n---\n### 多表查询分类\n需求：在设计数据表时，那么将现实中的一个实体设计为一个表，但在查询数据时，很多时候会将具有关系的不同实体表中的数据一同取出来。\n语法：\n\t``select * from 表A,表B 【where 子句】``\n说明：\n\t从多个表中获取where子句的匹配条件进行获取数据\n\t如果省略where子句，那么得到的结果是一个笛卡尔积\n笛卡尔积：\n\t得到的结果集的记录数是：两个表的记录数的乘积\n\t字段数：两个表的字段数的和\n#### union联合查询\n注意：\n>对同一个表的不同的部分进行不同的操作\n一般用于对比较大的表进行分表存储，联合查询\n\n```\nmysql> (select * from stu where sex=1 order by age limit 999)union(select * from stu where sex=0 order by age desc limit 999);\n+----+--------+----------+------+------+------+\n| id | s_num  | s_name   | sex  | age  | c_id |\n+----+--------+----------+------+------+------+\n|  7 | it007  | songjiu  | 1    |   18 |    2 |\n|  1 | it001  | zhangsan | 1    |   20 |    1 |\n|  6 | it006  | wangwang | 1    |   20 |    1 |\n|  9 | it009  | zhener   | 1    |   23 |    1 |\n| 11 | it0011 | wu       | 1    |   23 |    3 |\n|  2 | it002  | lisi     | 1    |   26 |    2 |\n| 10 | it0010 | qianqian | 1    |   26 |    1 |\n|  4 | it004  | zhaoliu  | 1    |   30 |    3 |\n| 13 | it0013 | deng     | 0    |   34 |    5 |\n|  5 | it005  | tianqi   | 0    |   28 |    1 |\n| 12 | it0012 | chen     | 0    |   26 |    3 |\n|  3 | it003  | wangwu   | 0    |   22 |    2 |\n|  8 | it008  | zhousan  | 0    |   19 |    2 |\n+----+--------+----------+------+------+------+\n13 rows in set (0.00 sec)\n```\n\n#### 内连接【inner join】\n语法一：``select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段``\n>inner是可以省略的\n\n```\nmysql> select * from stuinfo inner join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n语法二：``select 列名 from 表1,表2 where 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo,stuMarks where stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n>select * from 表1 inner join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 inner join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：一样的，因为内连接显示的是两个表的公共记录。\n\n>三个表的内连接如何实现？\n答：select 列名 from 表1 inner join 表2 on 表1.公共字段=表2.公共字段 inner join 表3 on 表2.公共字段=表3.公共字段\n\n#### 左外连接【left join】\n以左边的表为标准，如果右边的表没有对应的记录，用NULL填充。\n语法：``select 列名 from 表1 left join 表2 on 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo left join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       | NULL    | NULL   |        NULL |    NULL |\n| s25319 | 梅超风       | 女     |     23 |       5 | 河北       | NULL    | NULL   |        NULL |    NULL |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n7 rows in set (0.00 sec)\n```\n\n>select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 left join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：不一样，第一个SQL语句以表1为准，第二个SQL语句以表2为准\n\n#### 右外连接【right join】\n以右边的表为标准，如果右边的表没有对应的记录，用NULL填充。\n语法：``select 列名 from 表1 right join 表2 on 表1.公共字段=表2.公共字段``\n\n```\nmysql> select * from stuinfo right join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n5 rows in set (0.00 sec)\n\n```\n\n>思考：select * from 表1 left join 表2 on 表1.公共字段=表2.公共字段和select * from 表2 right join 表1 on 表1.公共字段=表2.公共字段是否一样？\n答：一样。\n\n#### 交叉连接【cross join】\n1、如果没有连接表达式返回的是笛卡尔积\n``mysql> select * from stuinfo cross join stuMarks;``\n等价于\n``mysql> select * from stuinfo,stuMarks;``\n2、如果有连接表达式等价于内连接\n\n```\nmysql> select * from stuinfo cross join stuMarks on stuinfo.stuNo=stuMarks.stuNo;\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | stuNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 | s25303 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 | s25302 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 | s25304 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 | s25301 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 | s25318 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+--------+-------------+---------+\n```\n\n#### 自然连接【natural】\n自动的判断连接条件，它是通过同名字段来判断的\n自然连接又分为：\n1、\t自然内连接\t\tnatural join\n``select * from stuinfo natural join stuMarks;``\n2、\t自然左外连接\t\tnatural left join\n``select * from stuinfo natural left join stuMarks;``\n3、\t自然右外连接\t\tnatural right join\n``select * from stuinfo natural rigth join stuMarks;``\n\n>自然连接结论：\n1、\t表连接通过同名的字段来连接的\n2、\t如果没有同名的字段返回笛卡尔积\n3、\t会对结果进行整理，整理的规则如下\na)\t连接字段保留一个\nb)\t连接字段放在最前面\n\n#### using()\n1、用来指定连接字段。\n2、using()也会对连接字段进行整理，整理方式和自然连接是一样的。\n``select * from stuinfo inner join stuMarks using(id);``\n\n### 子查询\n1、\t语法：select 语句 where 条件 (select … from 表)\n2、\t外面的查询称为父查询，括号中的查询称为子查询\n3、\t子查询为父查询提供查询条件\n#### =子查询\n使用表连接的方法\n\n```\nmysql> select stuName,writtenExam from stuinfo natural join stuMarks having writtenExam>60;\n+--------------+-------------+\n| stuName      | writtenExam |\n+--------------+-------------+\n| 李斯文       |          80 |\n| 欧阳俊雄     |          65 |\n| 张秋丽       |          77 |\n+--------------+-------------+\n3 rows in set (0.00 sec)\n```\n\n使用子查询方法\n\n```\nmysql> select * from stuinfo where stuNo in(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n```\n\n找出最高分\n\n```\nmysql> select * from stuinfo where stuNo=(select stuNo from stuMarks order by writtenExam desc limit 1);\n+--------+-----------+--------+--------+---------+------------+\n| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |\n+--------+-----------+--------+--------+---------+------------+\n| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |\n+--------+-----------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=(select stuNo from stuMarks where writtenExam=(select max(writtenExam) from stuMarks));\n+--------+-----------+--------+--------+---------+------------+\n| stuNo  | stuName   | stuSex | stuAge | stuSeat | stuAddress |\n+--------+-----------+--------+--------+---------+------------+\n| s25303 | 李斯文    | 女     |     22 |       2 | 北京       |\n+--------+-----------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n```\n\n#### in|not in子查询\n用于子查询的返回结果多个值\n\n#### some()、any()、all()\nsome:一些\nany:一些\t\t和some()是一样的  类似于in\nall:全部\n\n=some（=any） 等于其中任何一个\n!=some（!=any）不等于其中任何一个就可以了\n=all 等于其中的所有\n!=all 不等于其中的所有\n\n>思考：!=some()和not in一样吗？\n答：不一样；!=some()表示父查询的记录只要不等于some中的任意一条即可。\n!=all()才和not in一样\n\n```\nmysql> select * from stuinfo where stuNo=some(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=any(select stuNo from stuMarks where writtenExam>60);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n+--------+--------------+--------+--------+---------+------------+\n3 rows in set (0.00 sec)\n\nmysql> select * from stuinfo where stuNo=all(select stuNo from stuMarks where writtenExam>60);\nEmpty set (0.00 sec)\n```\n\n#### exists和not exists\n如果有人大于等于80分就显示所有的学生\n\n```\nmysql> select * from stuinfo where exists (select * from stuMarks where writtenExam>=80);\n+--------+--------------+--------+--------+---------+------------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress |\n+--------+--------------+--------+--------+---------+------------+\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       |\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       |\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       |\n| s25319 | 梅超风       | 女     |     23 |       5 | 河北       |\n+--------+--------------+--------+--------+---------+------------+\n7 rows in set (0.00 sec)\n```\n\n如果没有人超过80分就显示所有的学生\n\n```\nmysql> select * from stuinfo where not exists (select * from stuMarks where writtenExam>=80);\nEmpty set (0.00 sec)\n```\n\n#### 子查询分类\n1、\t标量子查询：子查询返回的结果就一个\n2、\t列子查询：子查询返回的结果是一个列表\n3、\t行子查询：子查询返回的结果返回一行\n4、\t表子查询：子查询返回的结果当成一个表(一定要取别名)\n\n```\nmysql> select *,count(*) from (select * from stuinfo order by stuAge desc) as new1 group by stuSex;\n+--------+--------------+--------+--------+---------+------------+----------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | count(*) |\n+--------+--------------+--------+--------+---------+------------+----------+\n| s25305 | 诸葛丽丽     | 女     |     23 |       7 | 河南       |        3 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       |        4 |\n+--------+--------------+--------+--------+---------+------------+----------+\n2 rows in set (0.00 sec)\n```\n\n>子查询一定要取别名\n\n### 视图【view】\n1、\t视图是一张虚拟表，它表示一张表的部分或多张表的综合的结构。\n2、\t视图仅仅是表结构，没有表数据。视图的结构和数据建立在表的基础上。\n\n#### 创建视图\n语法\n\ncreate [or replace] view 视图的名称\nas\n\tselect语句\n\n因为视图是一个表结构，所以创建视图后，会在数据库文件夹中多一个与视图名同名的.frm文件\n\n```\nmysql> create view vw_stu\n    -> as\n    ->   select * from stuinfo nutural join stumarks using(stuno);\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n#### 查询视图\n视图是一张虚拟表，视图的用法和表的用法一样\n\n```\nmysql> select * from vw_stu;\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n| stuNo  | stuName      | stuSex | stuAge | stuSeat | stuAddress | examNo  | writtenExam | labExam |\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n| s25303 | 李斯文       | 女     |     22 |       2 | 北京       | s271811 |          80 |      58 |\n| s25302 | 李文才       | 男     |     31 |       3 | 上海       | s271813 |          50 |      90 |\n| s25304 | 欧阳俊雄     | 男     |     28 |       4 | 天津       | s271815 |          65 |      50 |\n| s25301 | 张秋丽       | 男     |     18 |       1 | 北京       | s271816 |          77 |      82 |\n| s25318 | 争青小子     | 男     |     26 |       6 | 天津       | s271819 |          56 |      48 |\n+--------+--------------+--------+--------+---------+------------+---------+-------------+---------+\n5 rows in set (0.00 sec)\n```\n\n#### 查看视图的结构\n\n```\nmysql> desc vw_stu;\n+-------------+-------------+------+-----+---------+-------+\n| Field       | Type        | Null | Key | Default | Extra |\n+-------------+-------------+------+-----+---------+-------+\n| stuNo       | char(6)     | NO   |     | NULL    |       |\n| stuName     | varchar(10) | NO   |     | NULL    |       |\n| stuSex      | char(2)     | NO   |     | NULL    |       |\n| stuAge      | tinyint(4)  | NO   |     | NULL    |       |\n| stuSeat     | tinyint(4)  | NO   |     | NULL    |       |\n| stuAddress  | varchar(10) | NO   |     | NULL    |       |\n| examNo      | char(7)     | NO   |     | NULL    |       |\n| writtenExam | int(11)     | YES  |     | NULL    |       |\n| labExam     | int(11)     | YES  |     | NULL    |       |\n+-------------+-------------+------+-----+---------+-------+\n9 rows in set (0.02 sec)\n```\n\n#### 查看创建视图的语法\n\n```\nmysql> show create view vw_stu \\g\nn| View   | Create View                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | character_set_client | collation_connection |\nn| vw_stu | CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_stu` AS select `nutural`.`stuNo` AS `stuNo`,`nutural`.`stuName` AS `stuName`,`nutural`.`stuSex` AS `stuSex`,`nutural`.`stuAge` AS `stuAge`,`nutural`.`stuSeat` AS `stuSeat`,`nutural`.`stuAddress` AS `stuAddress`,`stumarks`.`examNo` AS `examNo`,`stumarks`.`writtenExam` AS `writtenExam`,`stumarks`.`labExam` AS `labExam` from (`stuinfo` `nutural` join `stumarks` on((`nutural`.`stuNo` = `stumarks`.`stuNo`))) | utf8                 | utf8_general_ci      |\nn1 row in set (0.00 sec)\n```\n\n#### 显示所有视图\n\n```\nmysql> show tables;\n+-----------------+\n| Tables_in_uiste |\n+-----------------+\n| stuMarks        |\n| stuinfo         |\n| vw_stu          |\n+-----------------+\n3 rows in set (0.01 sec)\n```\n\n#### 精确查找视图\n方法一：information_schema中的views表保存的是视图信息\n\n```\nmysql> select table_name from information_schema.views;\n+------------+\n| table_name |\n+------------+\n| vw_stu     |\n+------------+\n1 row in set (0.12 sec)\n```\n\n方法二：show table status查看表的属性\n\n```\nmysql> show table status\\G\n*************************** 1. row ***************************\n           Name: stuMarks\n         Engine: InnoDB\n        Version: 10\n     Row_format: Compact\n           Rows: 5\n Avg_row_length: 3276\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2015-08-31 17:18:54\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options: \n        Comment: \n*************************** 2. row ***************************\n           Name: stuinfo\n         Engine: InnoDB\n        Version: 10\n     Row_format: Compact\n           Rows: 7\n Avg_row_length: 2340\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2015-08-31 17:18:54\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci\n       Checksum: NULL\n Create_options: \n        Comment: \n*************************** 3. row ***************************\n           Name: vw_stu\n         Engine: NULL\n        Version: NULL\n     Row_format: NULL\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: NULL\n    Update_time: NULL\n     Check_time: NULL\n      Collation: NULL\n       Checksum: NULL\n Create_options: NULL\n        Comment: VIEW\n3 rows in set (0.00 sec)\n```\n\n显示所有视图的语法是\n\n```\nmysql> show table status where comment='view'\\G\n*************************** 1. row ***************************\n           Name: vw_stu\n         Engine: NULL\n        Version: NULL\n     Row_format: NULL\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: NULL\n    Update_time: NULL\n     Check_time: NULL\n      Collation: NULL\n       Checksum: NULL\n Create_options: NULL\n        Comment: VIEW\n1 row in set (0.00 sec)\n```\n\n#### 更改视图\n语法：\nalter view 视图名\nas\n\tselect 语句\n\n```\nmysql> alter view vw_stu\n    -> as\n    ->  select stuaddress,count(stuaddress) from stuinfo left join stumarks using(stuno) group by stusex;         Query OK, 0 rows affected (0.02 sec)\nmysql> select * from vw_stu;\n+------------+-------------------+\n| stuaddress | count(stuaddress) |\n+------------+-------------------+\n| 北京       |                 3 |\n| 上海       |                 4 |\n+------------+-------------------+\n2 rows in set (0.02 sec)\n```\n\n#### 删除视图\n语法：``drop view [if exists] 视图1,视图2,…``\n\n```\nmysql> drop view if exists vw_stu;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select table_name from information_schema.views;\nEmpty set (0.03 sec)\n```\n\n#### 视图的作用\t\n1、\t筛选数据，防止未经许可访问敏感数据\n2、\t增加表的兼容性\n3、\t隐藏表结构\n4、\t降低SQL语句的复杂度\n\n#### 视图的算法\n找出语文成绩最高的男生和女生\n既然子查询当成一个表，我们可以用视图来代替\n将子查询写法改为如下\n\n>结果不正确！原因：这是因为视图的算法造成的\n\n#### 视图的算法\n1、\tmerge：合并算法，将视图的语句和外层的语句合并后在执行。\n2、\ttemptable：临时表算法，将视图生成一个临时表，再执行外层语句\n3、\tundefined：未定义，MySQL到底用merge还是用temptable由MySQL决\n定，这是一个默认的算法，一般视图都会选择merge算法，因为merge效率高。\n\n#### 解决\n在创建视图的时候指定视图的算法\ncreate view algorithm=temptable 视图名\nas\n\tselect 语句\t\n\n重写视图\n\n重新执行查询\n\n### 事务安全【transaction】\n1、\t事务是一个不可分割的执行单元\n2、\t事务作为一个整体要么一起执行，要么一起回滚\n\n#### 开启事务1\n语法：``start transaction或begin [work]``\n\n#### 执行sql更新语句2\n``update 表名 set 字段名=字段内容 条件``\n\n#### 设置还原点3\n``savepoint sp1``\n\n#### 执行sql更新语句4\n\n#### 成功提交事务5\n语法：commit\n\n#### 失败回滚事务5\n语法：rollback\n\n\n```\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values (4,4);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> rollback;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> insert into t1 values (4,4);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> commit;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select * from t1;\n+------+------+\n| id   | num1 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n```\n\n>思考：事务什么时候产生？什么时候结束？\n答：开启的时候产生，提交事务或回滚事务都结束\n脚下留心：只有innodb和BDB才支持事务，myisam不支持事务。\n\n#### 事务的特性（ACID）\n1、\t原子性（Atomicity）：事务是一个整体，不可以再分，要么一起执行，要么一起不执行。\n2、\t一致性（Consistency）：事务完成时，数据必须处于一致的状态。\n3、\t隔离性（Isolation）：每个事务都是相互隔离的\n4、\t永久性（Durability）：事务完成后，对数据的修改是永久性的。\n\n#### 自动提交事务\n默认情况下，每个独立的SQL语句都在自动提交事务的。\n通过如下语句查看是否自动提交事务\n\n可以更改自动提交事务\nset autocommit=0 | 1；\n\n#### MySQL的锁的机制\n当在对数据表进行并发(同一时刻会有多个客户端操作同一条记录)操作时，就会触发MySQL的锁的机制\n①、表锁当某个客户端对一个表进行更改操作时会锁住整个表(其他客户端只能等待)非键值\n②、行锁--键值\n\n\n\n### 索引【index】\n索引的优点：查询速度快\n索引的缺点：\n1、\t增、删、改（数据操作语句）效率低了\n2、\t索引占用空间\n\n#### 索引的类型\n1、\t普通索引\n2、\t唯一索引（唯一键）\n3、\t主键索引：只要主键就自动创建主键索引，不需要手动创建。\n4、\t全文索引，搜索引擎使用，MySQL不支持中文的全文索引，我们通过sphinx去解决中文的全文索引。\n\n#### 创建普通索引【create index】\n语法：``create index 索引名 on 表名 （字段名）``\n\n创建索引\n查看索引\n\n#### 通过修改表的方式创建索引\n语法：``alter table 表名 add index [索引的名称] （列名）``\n创建索引\n\n#### 创建表的时候指定索引\n\n```\nmysql> create table temp(\n    -> id int,\n    -> name varchar(20),\n    -> age tinyint,\n    -> index ix_temp_name(name),\t\t--创建索引\n    -> key(age)\t\t\t\t--创建索引\n    -> );\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show create table temp\\G\n*************************** 1. row ***************************\n       Table: temp\nCreate Table: CREATE TABLE `temp` (\n  `id` int(11) DEFAULT NULL,\n  `name` varchar(20) DEFAULT NULL,\n  `age` tinyint(4) DEFAULT NULL,\n  KEY `ix_temp_name` (`name`),\n  KEY `age` (`age`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n```\n\n#### 创建唯一索引\n语法一：create unique index 索引名 on 表名 （字段名）\n语法二：alter table 表名 add unqiue index [索引的名称] （列名）\n语法三：创建表的时候添加唯一索引，和创建唯一键是一样的。\n\n#### 创建多列组合索引\n\n#### 删除索引\n语法：``drop index 索引名 on 表名``\n\n#### 创建索引的指导原则\n1、\t该列用于频繁搜索\n2、\t改列用于排序\n3、\t公共字段要创建索引\n4、\t如果表中的数据很少，不需要创建索引。MySQL搜索索引的时间比逐条搜索数据的时间要长。\n5、\t如果一个字段上的数据只有几个不同的值，改字段不适合做索引，比如性别。\n\n### 存储过程【procedure】\n#### 存储过程的优点\n1、\t存储过程可以减少网络流量\n2、\t允许模块化设计\n3、\t支持事务\n\n#### 创建存储过程\n语法：\ncreate procedure 存储过程名(参数)\nbegin\n\t//sql语句\nend;\n\n>脚下留心：由于过程中有很多SQL语句，每个语句的结束都要用（；）表示。默认情况下，分号既表示语句结束，又表示向服务器发送SQL语句。我们希望分号仅表示语句的结束，不要将SQL语句发送到服务器执行，通过delimiter来更改结束符。\n\n``mysql>delimiter //``\n\n#### 创建简单的存储过程\n\n#### 调用存储过程\n语法：``call 存储过程名()``\n\n#### 删除存储过程\n语法：``drop procedure [if exists] 存储过程名``\n\n#### 创建复杂的存储过程\n\n```\nmysql> create procedure proc(param char(6))\n    -> begin\n    ->      select * from stuinfo where stuno=param;\n    ->      select * from stumarks where stuno=param;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc('s25301') //\n+--------+---------+--------+--------+---------+------------+\n| stuNo  | stuName | stuSex | stuAge | stuSeat | stuAddress |\n+--------+---------+--------+--------+---------+------------+\n| s25301 | 张秋丽        | 男       |     18 |       1 | 北京\n+--------+---------+--------+--------+---------+------------+\n1 row in set (0.00 sec)\n\n+---------+--------+-------------+---------+\n| examNo  | stuNo  | writtenExam | labExam |\n+---------+--------+-------------+---------+\n| s271816 | s25301 |          77 |      82 |\n+---------+--------+-------------+---------+\n1 row in set (0.01 sec)\n```\n\n#### 存储过程的参数\n存储过程不能使用return返回值，要返回值只能通过“输出参数”来向外传递值。\n存储过程的参数分为：输入参数（in）【默认】，输出参数（out），输入输出参数（inout）\n\n### 变量\n#### 局部变量\n1、\t通过declare关键字来声明变量\n2、\t语法：declare 变量名 数据类型 [default 默认值]\n3、\t使用set或select …into…给变量赋值\n\n使用select…into…给变量赋值\n```\nmysql> create procedure proc(in id char(6))\n    -> begin\n    ->      declare name varchar(20);\n    ->      declare sex char(1);\n    ->      select stuname,stusex into name,sex from stuinfo where stuno=id;\n    ->      select name,sex from dual;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc('s25301')//\n+--------+------+\n| name   | sex  |\n+--------+------+\n| 张秋丽       | 男     |\n+--------+------+\n1 row in set (0.00 sec)\n```\n\n例题：查找同桌\n例题：使用set赋值\n\n#### 全局变量\n在变量前面加一个@，就是全局变量\n全局变量是一个弱类型的变量，它的类型取决于付给变量的值\n\n#### 系统变量\n只要变量名前面有两个@@的肯定是系统变量\n\n### 带输出参数的存储过程【out】\n\n```\nmysql> create procedure proc(num int,out result int)\n    -> begin\n    ->      set result=num*num;\n    -> end //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> call proc(5,@result) //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> select @result from dual //\n+---------+\n| @result |\n+---------+\n|      25 |\n+---------+\n\n```\n\n### 带输入输出参数的存储过程【inout】\n\n### 查看存储过程的信息\n\n\n\n\n\n\n\n---------------内连接----------------\n--语法一：\n``select i.stuno,stuname,writtenexam from stuinfo i inner join stumarks s on i.stuno=s.stuno;``\n--语法二：\n``select stuinfo.stuno,stuname,writtenexam from stuinfo,stumarks where stuinfo.stuno=stumarks.stuno;``\n--inner 可以省略\n``select i.stuno,stuname,writtenexam from stuinfo i join stumarks s on i.stuno=s.stuno;``\n--------------左外连接,右外连接----------\n``select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo left join stumarks on stuinfo.stuno=stumarks.stuno;``\n\n``select stuinfo.stuno,stuname,writtenexam,labexam from stuinfo right join stumarks on stuinfo.stuno=stumarks.stuno;``\n\n--------------自然连接---------------\n--自然内连接\n``select * from t1 natural join t2;``\n--自然左外连接\n``select * from t1 natural left join t2;``\n--自然右外连接\n``select * from t1 natural right join t2;``\n\n----------------using()-------------------\n``select * from t1 inner join t2 using(id);``\n``select * from t1 left join t2 using(id);``\n\n-------------------子查询--------------------------\n--查找80分的学生\n--方法一\n``select stuname,writtenexam from stuinfo natural join stumarks where writtenexam=80;``\n--方法二\n``select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=80);``\n\n--找出最高分\n``select * from stuinfo where stuno=(select stuno from stumarks where writtenexam=(select max(writtenexam) from stumarks));``\n\n--查找及格的学生\n``select * from stuinfo where stuno in (select stuno from stumarks where writtenexam>=60);``\n\n--查找不及格的学生\n``select * from stuinfo where stuno not in (select stuno from stumarks where writtenexam>=60);``\n\n--查找缺考的学生\n``select * from stuinfo where stuno in (select stuno)``\n\n\n``select * from stuinfo where stuno in (select stuno from stuinfo natural left join stumarks where writtenexam is null);``\n\n\n--some\n\n``select * from stuinfo where stuno=some(select stuno from stumarks where writtenexam>=60);``\n\n--exits\n``select * from stuinfo where exists (select * from stumarks where writtenexam>=80)``\n\n--行子查询\n``select * from stu where (stusex,ch) in (select stusex,max(ch) from stu group by stusex);``\n\n--表子查询\n``select * from (select * from stu order by ch desc) as t group by stusex; ``\n\n--示地区和每个地区参见考试的人数，并按人数降序排列\n``select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress order by c desc;``\n\n--显示有学生参见考试的地区\n``select stuaddress,count(writtenexam) c from stuinfo left join stumarks using(stuno) group by stuaddress having c>0;``\n\n``select distinct stuaddress from stuinfo natural right join stumarks where stuaddress is not null;``\n\n--显示男生和女生的人数\n``select stusex,count(*) from stuinfo where stusex='男' union select stusex,count(*) from stuinfo where stusex='女';``\n\n``select sum(stusex='男') 男,sum(stusex='女') 女 from stuinfo;``\n\n--显示每个地区的男生和女生，以及总人数\n``select stuaddress,count(*) 总人数,sum(stusex='男') 男,sum(stusex='女') 女 from stuinfo group by stuaddress;``\n\n\n-----------------------视图-----------------------\n\n```\ncreate view vw_stu\nas\n  select stuname,stusex,writtenexam from stuinfo inner join stumarks using (stuno);\n```\n\n\n``select * from (select * from stu order by ch desc) t group by stusex;``\n\n```\ncreate or replace algorithm=temptable view vw1\nas\nselect * from stu order by ch desc;\n```\n\n```\n--\ncreate table temp(\nid int,\nname varchar(20),\nage tinyint,\nindex ix_temp_name(name),\nkey(age)\n)\n```\n\n\n### 多表查询分类\n将多个表的数据横向的联合起来。\n1、\t内连接\n2、\t外连接\na)\t左外连接\nb)\t右外连接\n3、\t交叉连接\n4、\t自然连接\n\n","slug":"1","published":1,"updated":"2018-10-19T01:57:01.000Z","comments":1,"photos":[],"link":"","_id":"ck39ugjqb00bbpgwiad0c5wyg"}],"PostAsset":[],"PostCategory":[{"post_id":"ck39ugji8000ipgwippf7k4zh","category_id":"ck39ugjia000kpgwi8vvnx0mq","_id":"ck39ugjii000upgwie93l3gu9"},{"post_id":"ck39ugji9000jpgwifbm0fb78","category_id":"ck39ugjid000ppgwi6t5sdkmm","_id":"ck39ugjil0010pgwix6hpq2on"},{"post_id":"ck39ugjih000tpgwimcyxh58w","category_id":"ck39ugjia000kpgwi8vvnx0mq","_id":"ck39ugjin0015pgwicbqtnkuf"},{"post_id":"ck39ugjib000mpgwi41923c3r","category_id":"ck39ugjii000wpgwikyckyfob","_id":"ck39ugjio0018pgwi5soh1gaa"},{"post_id":"ck39ugjic000opgwifmu82ihe","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjir001epgwisfxvr3lk"},{"post_id":"ck39ugjif000spgwixwbwpxy2","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjit001kpgwil52ftgcr"},{"post_id":"ck39ugjis001ipgwib943r9pp","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjiw001spgwijar1tzjk"},{"post_id":"ck39ugjik000zpgwi6ypqmpfs","category_id":"ck39ugjiq001dpgwidcd64umm","_id":"ck39ugjiy001xpgwitah6kakf"},{"post_id":"ck39ugjix001wpgwi2artkfoj","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjj10025pgwihrm66ovd"},{"post_id":"ck39ugjin0016pgwioamz6tk3","category_id":"ck39ugjix001upgwiuf6bubob","_id":"ck39ugjj3002apgwic7ba60x0"},{"post_id":"ck39ugjiy001zpgwi8n204ozc","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjj5002dpgwi1k1zzbj7"},{"post_id":"ck39ugjit001lpgwiob72i5jn","category_id":"ck39ugjiz0021pgwi114vqqj2","_id":"ck39ugjj7002gpgwiank9elk4"},{"post_id":"ck39ugjj00024pgwi103i9cqf","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjj9002kpgwieucxas2u"},{"post_id":"ck39ugjj20029pgwis9upi6cp","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjjb002mpgwi8xw995t8"},{"post_id":"ck39ugjj3002cpgwie81qrpem","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjjd002rpgwimc7eqwhm"},{"post_id":"ck39ugjiu001ppgwi8pa978gi","category_id":"ck39ugjj20028pgwibyq896sp","_id":"ck39ugjje002tpgwiuil14gmd"},{"post_id":"ck39ugjj6002fpgwitz04pi6g","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjjh002xpgwiczw4cgqw"},{"post_id":"ck39ugjim0013pgwiaf1n7l17","category_id":"ck39ugjit001mpgwi0ogqhemm","_id":"ck39ugjji0030pgwiaperbzd2"},{"post_id":"ck39ugjim0013pgwiaf1n7l17","category_id":"ck39ugjj7002hpgwiwf4ltu44","_id":"ck39ugjjj0033pgwi8x2aso8m"},{"post_id":"ck39ugjiv001rpgwiddusic87","category_id":"ck39ugjj20028pgwibyq896sp","_id":"ck39ugjjk0035pgwi2v1nxemw"},{"post_id":"ck39ugjiz0022pgwi6pbxra67","category_id":"ck39ugjjf002upgwieq2e8qeb","_id":"ck39ugjjl0039pgwijqfyswa8"},{"post_id":"ck39ugjji0032pgwi0twfhhzx","category_id":"ck39ugjjk0037pgwidrytht40","_id":"ck39ugjjq003ipgwicc1dpuhw"},{"post_id":"ck39ugjoz0096pgwirjsdplir","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjp4009dpgwiy17pn1s1"},{"post_id":"ck39ugjp10098pgwik3t5jskf","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjp5009gpgwioebx8hop"},{"post_id":"ck39ugjp2009apgwigy2v9bsu","category_id":"ck39ugjil0012pgwiom9c0jb8","_id":"ck39ugjp7009kpgwixb2j694q"},{"post_id":"ck39ugjp4009cpgwij3o7k66f","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjpd009upgwigjf23h6c"},{"post_id":"ck39ugjp5009fpgwib5uc96br","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjpf00a0pgwisbex3uiv"},{"post_id":"ck39ugjq000aupgwi2gevhrod","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjq200azpgwicefcxbmh"},{"post_id":"ck39ugjq700b4pgwidej3o2x3","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjq900b9pgwix4uw22bm"},{"post_id":"ck39ugjq800b5pgwicjfdfnaq","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjq900bapgwi1z97o4zx"},{"post_id":"ck39ugjqb00bbpgwiad0c5wyg","category_id":"ck39ugjp6009hpgwiw1x7ue4l","_id":"ck39ugjqg00bdpgwijotkn1j2"}],"PostTag":[{"post_id":"ck39ugjft0004pgwibf4p8mip","tag_id":"ck39ugjfz0006pgwiz627h7pe","_id":"ck39ugjg3000bpgwicqeboeh5"},{"post_id":"ck39ugjft0004pgwibf4p8mip","tag_id":"ck39ugjg20009pgwi4ovqgkdi","_id":"ck39ugjg3000cpgwir7x3rx0b"},{"post_id":"ck39ugjfx0005pgwin0ctl4bm","tag_id":"ck39ugjg3000apgwiq758abb6","_id":"ck39ugjg3000epgwi44705x3h"},{"post_id":"ck39ugjg10007pgwijyh1hh0e","tag_id":"ck39ugjg3000dpgwixvdmrhex","_id":"ck39ugjg4000gpgwiguw6cogd"},{"post_id":"ck39ugjg20008pgwi5v8fof70","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjg4000hpgwiwsvby81c"},{"post_id":"ck39ugji8000ipgwippf7k4zh","tag_id":"ck39ugjib000lpgwipggac4vi","_id":"ck39ugjif000rpgwim3yld8dh"},{"post_id":"ck39ugjih000tpgwimcyxh58w","tag_id":"ck39ugjib000lpgwipggac4vi","_id":"ck39ugjik000ypgwi55z465f6"},{"post_id":"ck39ugji9000jpgwifbm0fb78","tag_id":"ck39ugjib000lpgwipggac4vi","_id":"ck39ugjim0014pgwi451cgntx"},{"post_id":"ck39ugji9000jpgwifbm0fb78","tag_id":"ck39ugjii000vpgwifgsgknpz","_id":"ck39ugjin0017pgwii67ka1w4"},{"post_id":"ck39ugjib000mpgwi41923c3r","tag_id":"ck39ugjil0011pgwib6xu95x8","_id":"ck39ugjis001hpgwia1ycxrs5"},{"post_id":"ck39ugjib000mpgwi41923c3r","tag_id":"ck39ugjio0019pgwi5q8enfjs","_id":"ck39ugjit001jpgwihj449ahk"},{"post_id":"ck39ugjic000opgwifmu82ihe","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjiu001opgwicqwzxv4g"},{"post_id":"ck39ugjic000opgwifmu82ihe","tag_id":"ck39ugjir001fpgwizadzpx86","_id":"ck39ugjiv001qpgwi66c69i6f"},{"post_id":"ck39ugjif000spgwixwbwpxy2","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjix001vpgwi2zvtfihc"},{"post_id":"ck39ugjif000spgwixwbwpxy2","tag_id":"ck39ugjir001fpgwizadzpx86","_id":"ck39ugjiy001ypgwi01h9llma"},{"post_id":"ck39ugjij000xpgwip4bv5fhu","tag_id":"ck39ugjib000lpgwipggac4vi","_id":"ck39ugjj00023pgwi9uxge5pu"},{"post_id":"ck39ugjij000xpgwip4bv5fhu","tag_id":"ck39ugjiw001tpgwi5bw3smqu","_id":"ck39ugjj10026pgwibrjk11ks"},{"post_id":"ck39ugjik000zpgwi6ypqmpfs","tag_id":"ck39ugjiz0020pgwi3hc9lx0f","_id":"ck39ugjj3002bpgwiyc8r84e8"},{"post_id":"ck39ugjim0013pgwiaf1n7l17","tag_id":"ck39ugjj20027pgwifd5m54zz","_id":"ck39ugjj8002ipgwif6cmblaw"},{"post_id":"ck39ugjin0016pgwioamz6tk3","tag_id":"ck39ugjj5002epgwitw7hmulu","_id":"ck39ugjjc002ppgwiwcwyvjoo"},{"post_id":"ck39ugjio001bpgwib6xuqakv","tag_id":"ck39ugjjb002npgwiqj47b3yz","_id":"ck39ugjjh002ypgwiliitq5t0"},{"post_id":"ck39ugjip001cpgwizs6g57dk","tag_id":"ck39ugjir001fpgwizadzpx86","_id":"ck39ugjjl003apgwiotp5nt7t"},{"post_id":"ck39ugjip001cpgwizs6g57dk","tag_id":"ck39ugjji0031pgwidr942x9w","_id":"ck39ugjjm003cpgwi1fmfon0l"},{"post_id":"ck39ugjir001gpgwipcuvr3nv","tag_id":"ck39ugjjk0036pgwianlrcod2","_id":"ck39ugjjn003fpgwilbtcqugr"},{"post_id":"ck39ugjis001ipgwib943r9pp","tag_id":"ck39ugjjm003dpgwirz0o12j2","_id":"ck39ugjjr003kpgwi290awv5u"},{"post_id":"ck39ugjit001lpgwiob72i5jn","tag_id":"ck39ugjjq003jpgwiywu4cv5s","_id":"ck39ugjju003ppgwig0in2jvo"},{"post_id":"ck39ugjiu001ppgwi8pa978gi","tag_id":"ck39ugjjt003npgwifa9sqq3p","_id":"ck39ugjjw003tpgwix29pk94a"},{"post_id":"ck39ugjiv001rpgwiddusic87","tag_id":"ck39ugjju003rpgwi6mrg3lei","_id":"ck39ugjjy003xpgwinei3ihic"},{"post_id":"ck39ugjix001wpgwi2artkfoj","tag_id":"ck39ugjjw003vpgwiz4aps9db","_id":"ck39ugjk00041pgwiuhnfnud1"},{"post_id":"ck39ugjiy001zpgwi8n204ozc","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjk30046pgwi0mfwo587"},{"post_id":"ck39ugjiz0022pgwi6pbxra67","tag_id":"ck39ugjk20044pgwiavgrm9zf","_id":"ck39ugjk5004apgwijm1dwgf2"},{"post_id":"ck39ugjk40049pgwizleh4a4f","tag_id":"ck39ugjib000lpgwipggac4vi","_id":"ck39ugjk5004cpgwiq40izkrn"},{"post_id":"ck39ugjj00024pgwi103i9cqf","tag_id":"ck39ugjk40048pgwigrchsodu","_id":"ck39ugjk7004fpgwieizgeqlo"},{"post_id":"ck39ugjj20029pgwis9upi6cp","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjk8004jpgwiu9tspfi9"},{"post_id":"ck39ugjj3002cpgwie81qrpem","tag_id":"ck39ugjk40048pgwigrchsodu","_id":"ck39ugjkd004qpgwilpx0vr3x"},{"post_id":"ck39ugjj3002cpgwie81qrpem","tag_id":"ck39ugjk9004lpgwiolg0b2f1","_id":"ck39ugjke004spgwigp1scxtd"},{"post_id":"ck39ugjj6002fpgwitz04pi6g","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjkf004vpgwi70ch2ve1"},{"post_id":"ck39ugjj8002jpgwicr1jzjqu","tag_id":"ck39ugjkf004upgwit75qnhem","_id":"ck39ugjki0050pgwi87uju3kd"},{"post_id":"ck39ugjjb002lpgwiaavuyfkp","tag_id":"ck39ugjkh004ypgwickf26so6","_id":"ck39ugjkk0054pgwin91gu3t8"},{"post_id":"ck39ugjjc002qpgwindce70pq","tag_id":"ck39ugjkj0052pgwisrxeqr7y","_id":"ck39ugjkn005bpgwitidyu4ld"},{"post_id":"ck39ugjjc002qpgwindce70pq","tag_id":"ck39ugjkl0056pgwi00ooadnk","_id":"ck39ugjko005dpgwixgkkz6lh"},{"post_id":"ck39ugjjd002spgwimgcsqjxk","tag_id":"ck39ugjkn005apgwiitcr6yc5","_id":"ck39ugjkq005hpgwi0w2ewx98"},{"post_id":"ck39ugjjg002wpgwi5y2k7wgr","tag_id":"ck39ugjkp005fpgwixs5cllii","_id":"ck39ugjkv005opgwirpde56ky"},{"post_id":"ck39ugjjg002wpgwi5y2k7wgr","tag_id":"ck39ugjkr005jpgwiopx0rlef","_id":"ck39ugjkw005qpgwi5mt4c6tp"},{"post_id":"ck39ugjji0032pgwi0twfhhzx","tag_id":"ck39ugjkt005mpgwi7ws7hhkf","_id":"ck39ugjkx005tpgwiezj1zyci"},{"post_id":"ck39ugjjj0034pgwiqltotezd","tag_id":"ck39ugjkj0052pgwisrxeqr7y","_id":"ck39ugjkz005xpgwilg676erl"},{"post_id":"ck39ugjjk0038pgwi850ns3u7","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjl20062pgwihbibjbec"},{"post_id":"ck39ugjjl003bpgwilbm7ohd2","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjl50066pgwipezlilrb"},{"post_id":"ck39ugjjm003epgwi6667ur2n","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjl7006apgwi3idz0zzh"},{"post_id":"ck39ugjjn003gpgwi9r1g7noq","tag_id":"ck39ugjk40048pgwigrchsodu","_id":"ck39ugjl9006epgwipc96qgn3"},{"post_id":"ck39ugjjp003hpgwieue1zjbk","tag_id":"ck39ugjl8006cpgwitdrnmjdq","_id":"ck39ugjlh006lpgwia5zuu5jw"},{"post_id":"ck39ugjjp003hpgwieue1zjbk","tag_id":"ck39ugjla006gpgwi01ckaug1","_id":"ck39ugjli006npgwic7ebeeie"},{"post_id":"ck39ugjjr003lpgwit009bfsc","tag_id":"ck39ugjlg006jpgwikmig2sfq","_id":"ck39ugjln006upgwiod4dt1ir"},{"post_id":"ck39ugjjr003lpgwit009bfsc","tag_id":"ck39ugjlj006ppgwi67hen2j5","_id":"ck39ugjlo006wpgwigd235xo2"},{"post_id":"ck39ugjjs003mpgwiq6jg07hd","tag_id":"ck39ugjl8006cpgwitdrnmjdq","_id":"ck39ugjlp006zpgwiwiqu0fwf"},{"post_id":"ck39ugjjt003opgwipnorw75x","tag_id":"ck39ugjlo006xpgwil2frf08h","_id":"ck39ugjlt0073pgwia1fnycha"},{"post_id":"ck39ugjju003qpgwiq6yzs7ki","tag_id":"ck39ugjlq0071pgwixy2dg5hb","_id":"ck39ugjlv0077pgwitu9p2w04"},{"post_id":"ck39ugjjv003spgwinz2ade49","tag_id":"ck39ugjlu0075pgwibx6k1r2n","_id":"ck39ugjlw007bpgwi3khjwl0e"},{"post_id":"ck39ugjjw003upgwil59w1w9i","tag_id":"ck39ugjlw007apgwia4jqbvb4","_id":"ck39ugjlz007gpgwil7zhcr4i"},{"post_id":"ck39ugjjx003wpgwi2451a7y2","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjm1007kpgwig1tpagxn"},{"post_id":"ck39ugjjy003ypgwir5qn6gxh","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjm3007opgwic6e1wq3o"},{"post_id":"ck39ugjjz003zpgwid3exvsfk","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjm6007rpgwidow8o8o8"},{"post_id":"ck39ugjk00042pgwixlihrnok","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjm8007tpgwizqm3qopt"},{"post_id":"ck39ugjk10043pgwisittc13f","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjm9007vpgwivl0punf0"},{"post_id":"ck39ugjk20045pgwi531i7fxl","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjma007xpgwi5eil8oeq"},{"post_id":"ck39ugjk30047pgwi5rg6200r","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjmc007zpgwif4gy75s7"},{"post_id":"ck39ugjk5004bpgwiyah5pjus","tag_id":"ck39ugjmb007ypgwip76qo1oq","_id":"ck39ugjmf0081pgwinh0b5pyv"},{"post_id":"ck39ugjk6004epgwiosyjp6ny","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjmf0083pgwi345qf8gf"},{"post_id":"ck39ugjk7004gpgwiutdyv2is","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjmg0085pgwifq865uhs"},{"post_id":"ck39ugjk8004ipgwi0kdmwxwn","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjmg0087pgwienjgqeip"},{"post_id":"ck39ugjk9004kpgwi8330steu","tag_id":"ck39ugjmg0086pgwiowf2itd5","_id":"ck39ugjmh0089pgwitdjpuu3t"},{"post_id":"ck39ugjk9004mpgwifxuz93xc","tag_id":"ck39ugjmg0088pgwiun5g4j89","_id":"ck39ugjmi008cpgwiyp2dgi8v"},{"post_id":"ck39ugjk9004mpgwifxuz93xc","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjmi008dpgwiutctgq92"},{"post_id":"ck39ugjka004npgwiyl8ldntl","tag_id":"ck39ugjmg0088pgwiun5g4j89","_id":"ck39ugjmj008fpgwih2vcqa6p"},{"post_id":"ck39ugjkc004opgwihqeg78xz","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjmj008hpgwi6l6qkcdj"},{"post_id":"ck39ugjkd004rpgwi66qu9z3x","tag_id":"ck39ugjmj008gpgwimjaivp69","_id":"ck39ugjmk008jpgwit9bx12dp"},{"post_id":"ck39ugjke004tpgwiugqkbh2e","tag_id":"ck39ugjmg0088pgwiun5g4j89","_id":"ck39ugjmk008lpgwiwa23pvd4"},{"post_id":"ck39ugjkf004wpgwi9dvkeb7a","tag_id":"ck39ugjmk008kpgwi5adv9irv","_id":"ck39ugjml008npgwi9pfa6kp6"},{"post_id":"ck39ugjkg004xpgwid8sgehhh","tag_id":"ck39ugjml008mpgwieo3qxh7i","_id":"ck39ugjml008ppgwi2s2h45pc"},{"post_id":"ck39ugjkh004zpgwi01keovjs","tag_id":"ck39ugjml008opgwin9zbzyuq","_id":"ck39ugjmm008rpgwi6itirkap"},{"post_id":"ck39ugjki0051pgwidlx6itqz","tag_id":"ck39ugjml008qpgwid0jej5f1","_id":"ck39ugjmm008tpgwicdycixqy"},{"post_id":"ck39ugjkj0053pgwich1334gg","tag_id":"ck39ugjmm008spgwif8ge4mzt","_id":"ck39ugjmm008vpgwirm225med"},{"post_id":"ck39ugjkk0055pgwiy22rt8jh","tag_id":"ck39ugjmm008upgwi7dl2tfvx","_id":"ck39ugjmm008xpgwi9a2zr2rd"},{"post_id":"ck39ugjko005epgwifnzmwcv1","tag_id":"ck39ugjmm008wpgwigbcz27t0","_id":"ck39ugjmn008zpgwibyoonkbd"},{"post_id":"ck39ugjkp005gpgwi65tftg4l","tag_id":"ck39ugjmn008ypgwicf2res7n","_id":"ck39ugjmn0091pgwiou48x8bq"},{"post_id":"ck39ugjkq005ipgwiuan0qn34","tag_id":"ck39ugjmn008ypgwicf2res7n","_id":"ck39ugjmn0093pgwidosmc7z9"},{"post_id":"ck39ugjks005kpgwidt39b5x3","tag_id":"ck39ugjmn0092pgwiflettnez","_id":"ck39ugjmo0094pgwis2wisgxv"},{"post_id":"ck39ugjoz0096pgwirjsdplir","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjp20099pgwisy8e102n"},{"post_id":"ck39ugjp10098pgwik3t5jskf","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjp3009bpgwi4t3cdvi4"},{"post_id":"ck39ugjp2009apgwigy2v9bsu","tag_id":"ck39ugjjz0040pgwiqqbzl248","_id":"ck39ugjp5009epgwixhza9i0b"},{"post_id":"ck39ugjoy0095pgwirstl19th","tag_id":"ck39ugjp00097pgwinq60cqfz","_id":"ck39ugjp6009ipgwi16us4ctt"},{"post_id":"ck39ugjp4009cpgwij3o7k66f","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjp7009lpgwi6uuaaeck"},{"post_id":"ck39ugjp5009fpgwib5uc96br","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjp9009opgwiywyb44rl"},{"post_id":"ck39ugjpb009rpgwia4uj8jui","tag_id":"ck39ugjir001fpgwizadzpx86","_id":"ck39ugjpd009vpgwis3z8cozi"},{"post_id":"ck39ugjp6009jpgwin8txgj27","tag_id":"ck39ugjp9009npgwi9gsosi77","_id":"ck39ugjpe009xpgwisg7s138r"},{"post_id":"ck39ugjpc009spgwin0dtwt6f","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjpf00a1pgwivyn1yyfh"},{"post_id":"ck39ugjpd009wpgwi7ybcjt7p","tag_id":"ck39ugjkz005wpgwiy8n6zvnu","_id":"ck39ugjpg00a3pgwidcbwd12v"},{"post_id":"ck39ugjp7009mpgwibwkyf1yq","tag_id":"ck39ugjp9009npgwi9gsosi77","_id":"ck39ugjph00a6pgwiuhgqeb79"},{"post_id":"ck39ugjpe009ypgwiwod81krk","tag_id":"ck39ugjk40048pgwigrchsodu","_id":"ck39ugjpi00a8pgwit36mycya"},{"post_id":"ck39ugjpa009ppgwiwdxqauej","tag_id":"ck39ugjpf009zpgwi6prkngq9","_id":"ck39ugjpj00aapgwig03locym"},{"post_id":"ck39ugjph00a7pgwixeq3wi69","tag_id":"ck39ugjpf009zpgwi6prkngq9","_id":"ck39ugjpk00adpgwilfypnhyl"},{"post_id":"ck39ugjpf00a2pgwipmjt8clz","tag_id":"ck39ugjph00a5pgwickb83kz2","_id":"ck39ugjpl00afpgwifujzb5yr"},{"post_id":"ck39ugjpj00abpgwi18c7dwkx","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjpo00aipgwiqotja5sq"},{"post_id":"ck39ugjpk00aepgwirebix64i","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjpp00akpgwid6jwelwb"},{"post_id":"ck39ugjpg00a4pgwil9qh9hjz","tag_id":"ck39ugjpk00acpgwi2ivvmb4t","_id":"ck39ugjpq00anpgwikg8v7f83"},{"post_id":"ck39ugjpm00agpgwi17eer4cn","tag_id":"ck39ugjmf0084pgwi49t1h69f","_id":"ck39ugjps00appgwi1i4zdl5w"},{"post_id":"ck39ugjpi00a9pgwiipuyyauq","tag_id":"ck39ugjpo00ahpgwi0gxor49n","_id":"ck39ugjpt00arpgwi22go2r2o"},{"post_id":"ck39ugjps00aqpgwiaxtjdclk","tag_id":"ck39ugjmg0086pgwiowf2itd5","_id":"ck39ugjpt00aspgwicz7zbq7t"},{"post_id":"ck39ugjpo00ajpgwif2rwwr3o","tag_id":"ck39ugjpq00ampgwixnybdd5m","_id":"ck39ugjpu00atpgwimbhivccz"},{"post_id":"ck39ugjq000aupgwi2gevhrod","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjq200awpgwidim847d0"},{"post_id":"ck39ugjq100avpgwic732twac","tag_id":"ck39ugjlw007apgwia4jqbvb4","_id":"ck39ugjq200aypgwikrpxjwiz"},{"post_id":"ck39ugjq200axpgwikur6ioom","tag_id":"ck39ugjq300b0pgwit7sbslpd","_id":"ck39ugjq300b2pgwibfb8m0r3"},{"post_id":"ck39ugjq200axpgwikur6ioom","tag_id":"ck39ugjq300b1pgwipn5snlur","_id":"ck39ugjq300b3pgwi4rzycmvh"},{"post_id":"ck39ugjq700b4pgwidej3o2x3","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjq800b6pgwivmszmnqb"},{"post_id":"ck39ugjq800b5pgwicjfdfnaq","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjq900b8pgwipmj8it65"},{"post_id":"ck39ugjqb00bbpgwiad0c5wyg","tag_id":"ck39ugjg3000fpgwiazwegzjf","_id":"ck39ugjqf00bcpgwipk03r8i6"}],"Tag":[{"name":"PHP小技巧","_id":"ck39ugjfz0006pgwiz627h7pe"},{"name":"PHP加载速度","_id":"ck39ugjg20009pgwi4ovqgkdi"},{"name":"SQL注入","_id":"ck39ugjg3000apgwiq758abb6"},{"name":"PHP函数","_id":"ck39ugjg3000dpgwixvdmrhex"},{"name":"MySQL","_id":"ck39ugjg3000fpgwiazwegzjf"},{"name":"hexo","_id":"ck39ugjib000lpgwipggac4vi"},{"name":"Markdown","_id":"ck39ugjii000vpgwifgsgknpz"},{"name":"游戏","_id":"ck39ugjil0011pgwib6xu95x8"},{"name":"JavaScript","_id":"ck39ugjio0019pgwi5q8enfjs"},{"name":"PHP","_id":"ck39ugjir001fpgwizadzpx86"},{"name":"seo","_id":"ck39ugjiw001tpgwi5bw3smqu"},{"name":"CSS","_id":"ck39ugjiz0020pgwi3hc9lx0f"},{"name":"jQuery","_id":"ck39ugjj20027pgwifd5m54zz"},{"name":"github","_id":"ck39ugjj5002epgwitw7hmulu"},{"name":"sublime","_id":"ck39ugjjb002npgwiqj47b3yz"},{"name":"排序","_id":"ck39ugjji0031pgwidr942x9w"},{"name":"css","_id":"ck39ugjjk0036pgwianlrcod2"},{"name":"PHP安全问题","_id":"ck39ugjjm003dpgwirz0o12j2"},{"name":"js特效","_id":"ck39ugjjq003jpgwiywu4cv5s"},{"name":"知识点","_id":"ck39ugjjt003npgwifa9sqq3p"},{"name":"js思想养成","_id":"ck39ugjju003rpgwi6mrg3lei"},{"name":"PHP开发环境","_id":"ck39ugjjw003vpgwiz4aps9db"},{"name":"PHP核心编程","_id":"ck39ugjjz0040pgwiqqbzl248"},{"name":"Mac系统工具","_id":"ck39ugjk20044pgwiavgrm9zf"},{"name":"PHP思想养成","_id":"ck39ugjk40048pgwigrchsodu"},{"name":"数组比较","_id":"ck39ugjk9004lpgwiolg0b2f1"},{"name":"PHP思想","_id":"ck39ugjkf004upgwit75qnhem"},{"name":"Mac命令熟记","_id":"ck39ugjkh004ypgwickf26so6"},{"name":"PHP错误处理","_id":"ck39ugjkj0052pgwisrxeqr7y"},{"name":"PHP异常处理","_id":"ck39ugjkl0056pgwi00ooadnk"},{"name":"http协议","_id":"ck39ugjkn005apgwiitcr6yc5"},{"name":"cookie","_id":"ck39ugjkp005fpgwixs5cllii"},{"name":"sessions","_id":"ck39ugjkr005jpgwiopx0rlef"},{"name":"VI","_id":"ck39ugjkt005mpgwi7ws7hhkf"},{"name":"laravel","_id":"ck39ugjkz005wpgwiy8n6zvnu"},{"name":"PHP错误","_id":"ck39ugjl8006cpgwitdrnmjdq"},{"name":"PHP异常","_id":"ck39ugjla006gpgwi01ckaug1"},{"name":"MySQL多表联查","_id":"ck39ugjlg006jpgwikmig2sfq"},{"name":"显示不同类型","_id":"ck39ugjlj006ppgwi67hen2j5"},{"name":"模板引擎","_id":"ck39ugjlo006xpgwil2frf08h"},{"name":"命名空间","_id":"ck39ugjlq0071pgwixy2dg5hb"},{"name":"RBAC","_id":"ck39ugjlu0075pgwibx6k1r2n"},{"name":"AJAX","_id":"ck39ugjlw007apgwia4jqbvb4"},{"name":"Laravel","_id":"ck39ugjmb007ypgwip76qo1oq"},{"name":"数据库优化","_id":"ck39ugjmf0084pgwi49t1h69f"},{"name":"lnmp","_id":"ck39ugjmg0086pgwiowf2itd5"},{"name":"服务器优化","_id":"ck39ugjmg0088pgwiun5g4j89"},{"name":"LAMP","_id":"ck39ugjmj008gpgwimjaivp69"},{"name":"ThinkPHP","_id":"ck39ugjmk008kpgwi5adv9irv"},{"name":"缓存优化","_id":"ck39ugjml008mpgwieo3qxh7i"},{"name":"PHP正则","_id":"ck39ugjml008opgwin9zbzyuq"},{"name":"规范","_id":"ck39ugjml008qpgwid0jej5f1"},{"name":"架构","_id":"ck39ugjmm008spgwif8ge4mzt"},{"name":"web安全","_id":"ck39ugjmm008upgwi7dl2tfvx"},{"name":"yii","_id":"ck39ugjmm008wpgwigbcz27t0"},{"name":"mac","_id":"ck39ugjmn008ypgwicf2res7n"},{"name":"PHPExcel","_id":"ck39ugjmn0092pgwiflettnez"},{"name":"产品经理","_id":"ck39ugjp00097pgwinq60cqfz"},{"name":"PHP面向对象","_id":"ck39ugjp9009npgwi9gsosi77"},{"name":"Linux","_id":"ck39ugjpf009zpgwi6prkngq9"},{"name":"Smarty","_id":"ck39ugjph00a5pgwickb83kz2"},{"name":"数据库设计","_id":"ck39ugjpk00acpgwi2ivvmb4t"},{"name":"LAMP环境","_id":"ck39ugjpo00ahpgwi0gxor49n"},{"name":"Nginx","_id":"ck39ugjpq00ampgwixnybdd5m"},{"name":"反射","_id":"ck39ugjq300b0pgwit7sbslpd"},{"name":"PDO","_id":"ck39ugjq300b1pgwipn5snlur"}]}}